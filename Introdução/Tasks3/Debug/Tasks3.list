
Tasks3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007f48  08007f48  00008f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  0000a1a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007ffc  08007ffc  00008ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008004  08008004  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800800c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  0800806c  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  0800810c  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051f4  200001a0  080081ac  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005394  080081ac  0000a394  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000221fe  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004290  00000000  00000000  0002c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  00030660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001472  00000000  00000000  000320a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000046a9  00000000  00000000  00033512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f57c  00000000  00000000  00037bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dcc1  00000000  00000000  00057137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00164df8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000074cc  00000000  00000000  00164e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0016c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f30 	.word	0x08007f30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08007f30 	.word	0x08007f30

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fcff 	bl	8000fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81c 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f938 	bl	8000860 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f88a 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f8d6 	bl	80007a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f904 	bl	8000804 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f004 f926 	bl	800484c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000600:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <main+0x38>)
 8000602:	2100      	movs	r1, #0
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <main+0x3c>)
 8000606:	f004 f9b3 	bl	8004970 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <main+0x40>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 f950 	bl	80048b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x34>
 8000618:	08007f8c 	.word	0x08007f8c
 800061c:	080009a5 	.word	0x080009a5
 8000620:	2000080c 	.word	0x2000080c

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 ffa6 	bl	8007584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f001 fc4e 	bl	8001ee8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a2b      	ldr	r2, [pc, #172]	@ (8000700 <SystemClock_Config+0xdc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <SystemClock_Config+0xe0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a25      	ldr	r2, [pc, #148]	@ (8000704 <SystemClock_Config+0xe0>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000698:	2360      	movs	r3, #96	@ 0x60
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fc7b 	bl	8001fa8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 f9c4 	bl	8000a44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006bc:	f001 fc24 	bl	8001f08 <HAL_PWREx_EnableOverDrive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c6:	f000 f9bd 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2103      	movs	r1, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 ff0c 	bl	8002504 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006f2:	f000 f9a7 	bl	8000a44 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_ETH_Init+0x84>)
 800070e:	4a20      	ldr	r2, [pc, #128]	@ (8000790 <MX_ETH_Init+0x88>)
 8000710:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_ETH_Init+0x8c>)
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000720:	22e1      	movs	r2, #225	@ 0xe1
 8000722:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_ETH_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_ETH_Init+0x84>)
 8000738:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <MX_ETH_Init+0x8c>)
 800073a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_ETH_Init+0x84>)
 800073e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000742:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_ETH_Init+0x84>)
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_ETH_Init+0x90>)
 8000748:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_ETH_Init+0x84>)
 800074c:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_ETH_Init+0x94>)
 800074e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_ETH_Init+0x84>)
 8000752:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000756:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_ETH_Init+0x84>)
 800075a:	f000 fd77 	bl	800124c <HAL_ETH_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 f96e 	bl	8000a44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000768:	2238      	movs	r2, #56	@ 0x38
 800076a:	2100      	movs	r1, #0
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_ETH_Init+0x98>)
 800076e:	f006 ff09 	bl	8007584 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_ETH_Init+0x98>)
 8000774:	2221      	movs	r2, #33	@ 0x21
 8000776:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_ETH_Init+0x98>)
 800077a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800077e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_ETH_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001f4 	.word	0x200001f4
 8000790:	40028000 	.word	0x40028000
 8000794:	20000810 	.word	0x20000810
 8000798:	20000100 	.word	0x20000100
 800079c:	20000060 	.word	0x20000060
 80007a0:	200001bc 	.word	0x200001bc

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <MX_USART3_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007e8:	f002 ffda 	bl	80037a0 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f927 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200002a4 	.word	0x200002a4
 8000800:	40004800 	.word	0x40004800

08000804 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800080e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2206      	movs	r2, #6
 8000814:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2202      	movs	r2, #2
 800081a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2202      	movs	r2, #2
 8000826:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2201      	movs	r2, #1
 800082c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	2201      	movs	r2, #1
 800083e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	f001 fa13 	bl	8001c72 <HAL_PCD_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f8f7 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000032c 	.word	0x2000032c

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	@ 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b47      	ldr	r3, [pc, #284]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a46      	ldr	r2, [pc, #280]	@ (8000994 <MX_GPIO_Init+0x134>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b44      	ldr	r3, [pc, #272]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	4b41      	ldr	r3, [pc, #260]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a40      	ldr	r2, [pc, #256]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b3e      	ldr	r3, [pc, #248]	@ (8000994 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b35      	ldr	r3, [pc, #212]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a34      	ldr	r2, [pc, #208]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b32      	ldr	r3, [pc, #200]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a2e      	ldr	r2, [pc, #184]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f244 0181 	movw	r1, #16513	@ 0x4081
 800090c:	4822      	ldr	r0, [pc, #136]	@ (8000998 <MX_GPIO_Init+0x138>)
 800090e:	f001 f997 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2140      	movs	r1, #64	@ 0x40
 8000916:	4821      	ldr	r0, [pc, #132]	@ (800099c <MX_GPIO_Init+0x13c>)
 8000918:	f001 f992 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	481b      	ldr	r0, [pc, #108]	@ (80009a0 <MX_GPIO_Init+0x140>)
 8000934:	f000 ffd8 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000938:	f244 0381 	movw	r3, #16513	@ 0x4081
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4811      	ldr	r0, [pc, #68]	@ (8000998 <MX_GPIO_Init+0x138>)
 8000952:	f000 ffc9 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0x13c>)
 800096e:	f000 ffbb 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_GPIO_Init+0x13c>)
 8000986:	f000 ffaf 	bl	80018e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020400 	.word	0x40020400
 800099c:	40021800 	.word	0x40021800
 80009a0:	40020800 	.word	0x40020800

080009a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b092      	sub	sp, #72	@ 0x48
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  TickType_t lastTick = 0, currentTick = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t tickDifference = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	643b      	str	r3, [r7, #64]	@ 0x40
  char msg[50];

  /* Obter o tick inicial */
  lastTick = osKernelGetTickCount();
 80009b8:	f003 ffb2 	bl	8004920 <osKernelGetTickCount>
 80009bc:	6478      	str	r0, [r7, #68]	@ 0x44
  /* Infinite loop */
  for(;;)
  {
	  /* Obter o tick atual */
	  currentTick = osKernelGetTickCount();
 80009be:	f003 ffaf 	bl	8004920 <osKernelGetTickCount>
 80009c2:	63f8      	str	r0, [r7, #60]	@ 0x3c

	  /*Calcular a diferença*/
	  if(currentTick >= lastTick)
 80009c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d304      	bcc.n	80009d6 <StartDefaultTask+0x32>
	  {
		  tickDifference = currentTick - lastTick;
 80009cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80009d4:	e003      	b.n	80009de <StartDefaultTask+0x3a>
	  }
	  else
	  {
		  /* Ajuste para rollover: este exemplo assume um contador de 32 bits */
		  tickDifference = (0xFFFFFFFFUL - lastTick) + currentTick + 1;
 80009d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	643b      	str	r3, [r7, #64]	@ 0x40
	  }

	  /* Formatando a mensagem para a UART */
	  snprintf(msg, sizeof(msg), "Diferenca de tick: %lu ticks\r\n", (unsigned long)tickDifference);
 80009de:	f107 0008 	add.w	r0, r7, #8
 80009e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a18 <StartDefaultTask+0x74>)
 80009e6:	2132      	movs	r1, #50	@ 0x32
 80009e8:	f006 fd98 	bl	800751c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fc25 	bl	8000240 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f107 0108 	add.w	r1, r7, #8
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	4806      	ldr	r0, [pc, #24]	@ (8000a1c <StartDefaultTask+0x78>)
 8000a04:	f002 ff1a 	bl	800383c <HAL_UART_Transmit>

	  /* Atualiza o tick anterior para a próxima iteração */
	  lastTick = currentTick;
 8000a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a0a:	647b      	str	r3, [r7, #68]	@ 0x44

	  osDelay(pdMS_TO_TICKS(1000));
 8000a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a10:	f004 f854 	bl	8004abc <osDelay>
  {
 8000a14:	e7d3      	b.n	80009be <StartDefaultTask+0x1a>
 8000a16:	bf00      	nop
 8000a18:	08007f54 	.word	0x08007f54
 8000a1c:	200002a4 	.word	0x200002a4

08000a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a32:	f000 fae5 	bl	8001000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40001000 	.word	0x40001000

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fbb3 	bl	80011f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4e      	ldr	r2, [pc, #312]	@ (8000bf8 <HAL_ETH_MspInit+0x158>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	f040 8096 	bne.w	8000bf0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	4a4c      	ldr	r2, [pc, #304]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000aca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4b47      	ldr	r3, [pc, #284]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	4a46      	ldr	r2, [pc, #280]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ae2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae8:	4b44      	ldr	r3, [pc, #272]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	4b41      	ldr	r3, [pc, #260]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a40      	ldr	r2, [pc, #256]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000afa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b00:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	4a3a      	ldr	r2, [pc, #232]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b18:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b35      	ldr	r3, [pc, #212]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	4a34      	ldr	r2, [pc, #208]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b30:	4b32      	ldr	r3, [pc, #200]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	4a2e      	ldr	r2, [pc, #184]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b48:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a28      	ldr	r2, [pc, #160]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b6c:	2332      	movs	r3, #50	@ 0x32
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	481e      	ldr	r0, [pc, #120]	@ (8000c00 <HAL_ETH_MspInit+0x160>)
 8000b88:	f000 feae 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b8c:	2386      	movs	r3, #134	@ 0x86
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <HAL_ETH_MspInit+0x164>)
 8000ba8:	f000 fe9e 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbe:	230b      	movs	r3, #11
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480f      	ldr	r0, [pc, #60]	@ (8000c08 <HAL_ETH_MspInit+0x168>)
 8000bca:	f000 fe8d 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <HAL_ETH_MspInit+0x16c>)
 8000bec:	f000 fe7c 	bl	80018e8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	@ 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40028000 	.word	0x40028000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40021800 	.word	0x40021800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0ae      	sub	sp, #184	@ 0xb8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2290      	movs	r2, #144	@ 0x90
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f006 fca7 	bl	8007584 <memset>
  if(huart->Instance==USART3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a22      	ldr	r2, [pc, #136]	@ (8000cc4 <HAL_UART_MspInit+0xb4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d13c      	bne.n	8000cba <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 feb0 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c5a:	f7ff fef3 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a19      	ldr	r2, [pc, #100]	@ (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_UART_MspInit+0xb8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <HAL_UART_MspInit+0xbc>)
 8000cb6:	f000 fe17 	bl	80018e8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cba:	bf00      	nop
 8000cbc:	37b8      	adds	r7, #184	@ 0xb8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0ae      	sub	sp, #184	@ 0xb8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2290      	movs	r2, #144	@ 0x90
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f006 fc47 	bl	8007584 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cfe:	d159      	bne.n	8000db4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fe4f 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d1c:	f7ff fe92 	bl	8000a44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	4a25      	ldr	r2, [pc, #148]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2c:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d38:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d52:	230a      	movs	r3, #10
 8000d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4818      	ldr	r0, [pc, #96]	@ (8000dc0 <HAL_PCD_MspInit+0xf0>)
 8000d60:	f000 fdc2 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4810      	ldr	r0, [pc, #64]	@ (8000dc0 <HAL_PCD_MspInit+0xf0>)
 8000d80:	f000 fdb2 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d84:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d88:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d8e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d90:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <HAL_PCD_MspInit+0xec>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000db4:	bf00      	nop
 8000db6:	37b8      	adds	r7, #184	@ 0xb8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ea4 <HAL_InitTick+0xe0>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a32      	ldr	r2, [pc, #200]	@ (8000ea4 <HAL_InitTick+0xe0>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b30      	ldr	r3, [pc, #192]	@ (8000ea4 <HAL_InitTick+0xe0>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fdaa 	bl	8002950 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e06:	f001 fd7b 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8000e0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e0c:	e004      	b.n	8000e18 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e0e:	f001 fd77 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8000e12:	4603      	mov	r3, r0
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ea8 <HAL_InitTick+0xe4>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	3b01      	subs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e28:	4a21      	ldr	r2, [pc, #132]	@ (8000eb0 <HAL_InitTick+0xec>)
 8000e2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e34:	4a1d      	ldr	r2, [pc, #116]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e4c:	4817      	ldr	r0, [pc, #92]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e4e:	f002 f9d9 	bl	8003204 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d11b      	bne.n	8000e98 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e60:	4812      	ldr	r0, [pc, #72]	@ (8000eac <HAL_InitTick+0xe8>)
 8000e62:	f002 fa31 	bl	80032c8 <HAL_TIM_Base_Start_IT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d111      	bne.n	8000e98 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e74:	2036      	movs	r0, #54	@ 0x36
 8000e76:	f000 f9db 	bl	8001230 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d808      	bhi.n	8000e92 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2036      	movs	r0, #54	@ 0x36
 8000e86:	f000 f9b7 	bl	80011f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_InitTick+0xf0>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e002      	b.n	8000e98 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3738      	adds	r7, #56	@ 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	20000818 	.word	0x20000818
 8000eb0:	40001000 	.word	0x40001000
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <TIM6_DAC_IRQHandler+0x10>)
 8000ef6:	f002 fa5f 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000818 	.word	0x20000818

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f006 fb84 	bl	8007640 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20080000 	.word	0x20080000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20000864 	.word	0x20000864
 8000f6c:	20005398 	.word	0x20005398

08000f70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f98:	f7ff ffea 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f006 fb43 	bl	800764c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fb0b 	bl	80005e0 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fd8:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 8000fdc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000fe0:	20005394 	.word	0x20005394

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>

08000fe6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 f8f9 	bl	80011e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f7ff fee7 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff6:	f7ff fd2b 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	20000868 	.word	0x20000868

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000868 	.word	0x20000868

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x40>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x40>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	05fa0000 	.word	0x05fa0000

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	@ (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	@ (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	@ (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	@ 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff4c 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120a:	f7ff ff61 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 800120e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f7ff ffb1 	bl	800117c <NVIC_EncodePriority>
 800121a:	4602      	mov	r2, r0
 800121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff80 	bl	8001128 <__NVIC_SetPriority>
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff54 	bl	80010ec <__NVIC_EnableIRQ>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e086      	b.n	800136c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001264:	2b00      	cmp	r3, #0
 8001266:	d106      	bne.n	8001276 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2220      	movs	r2, #32
 800126c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fc15 	bl	8000aa0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b3f      	ldr	r3, [pc, #252]	@ (8001374 <HAL_ETH_Init+0x128>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a3e      	ldr	r2, [pc, #248]	@ (8001374 <HAL_ETH_Init+0x128>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b3c      	ldr	r3, [pc, #240]	@ (8001374 <HAL_ETH_Init+0x128>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800128e:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <HAL_ETH_Init+0x12c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a39      	ldr	r2, [pc, #228]	@ (8001378 <HAL_ETH_Init+0x12c>)
 8001294:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001298:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800129a:	4b37      	ldr	r3, [pc, #220]	@ (8001378 <HAL_ETH_Init+0x12c>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4935      	ldr	r1, [pc, #212]	@ (8001378 <HAL_ETH_Init+0x12c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012a8:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <HAL_ETH_Init+0x12c>)
 80012aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c4:	f7ff feb0 	bl	8001028 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ca:	e011      	b.n	80012f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012cc:	f7ff feac 	bl	8001028 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012da:	d909      	bls.n	80012f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2204      	movs	r2, #4
 80012e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	22e0      	movs	r2, #224	@ 0xe0
 80012e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e03d      	b.n	800136c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e4      	bne.n	80012cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f97a 	bl	80015fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fa25 	bl	8001758 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fa7b 	bl	800180a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	2100      	movs	r1, #0
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f9e3 	bl	80016e8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001330:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_ETH_Init+0x130>)
 8001340:	430b      	orrs	r3, r1
 8001342:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001356:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2210      	movs	r2, #16
 8001366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	00020060 	.word	0x00020060

08001380 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4b53      	ldr	r3, [pc, #332]	@ (80014e4 <ETH_SetMACConfig+0x164>)
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	7b9b      	ldrb	r3, [r3, #14]
 800139e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	7c12      	ldrb	r2, [r2, #16]
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d102      	bne.n	80013ae <ETH_SetMACConfig+0x2e>
 80013a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013ac:	e000      	b.n	80013b0 <ETH_SetMACConfig+0x30>
 80013ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	7c52      	ldrb	r2, [r2, #17]
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d102      	bne.n	80013c0 <ETH_SetMACConfig+0x40>
 80013ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013be:	e000      	b.n	80013c2 <ETH_SetMACConfig+0x42>
 80013c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	7fdb      	ldrb	r3, [r3, #31]
 80013ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	7f92      	ldrb	r2, [r2, #30]
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d102      	bne.n	80013e6 <ETH_SetMACConfig+0x66>
 80013e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e4:	e000      	b.n	80013e8 <ETH_SetMACConfig+0x68>
 80013e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80013e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	7f1b      	ldrb	r3, [r3, #28]
 80013ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001406:	2a00      	cmp	r2, #0
 8001408:	d102      	bne.n	8001410 <ETH_SetMACConfig+0x90>
 800140a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140e:	e000      	b.n	8001412 <ETH_SetMACConfig+0x92>
 8001410:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001412:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	7bdb      	ldrb	r3, [r3, #15]
 8001418:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800141a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001420:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001428:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800142a:	4313      	orrs	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fdfc 	bl	8001040 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001466:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800146e:	2a00      	cmp	r2, #0
 8001470:	d101      	bne.n	8001476 <ETH_SetMACConfig+0xf6>
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	e000      	b.n	8001478 <ETH_SetMACConfig+0xf8>
 8001476:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001478:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800147e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001486:	2a01      	cmp	r2, #1
 8001488:	d101      	bne.n	800148e <ETH_SetMACConfig+0x10e>
 800148a:	2208      	movs	r2, #8
 800148c:	e000      	b.n	8001490 <ETH_SetMACConfig+0x110>
 800148e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001490:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001498:	2a01      	cmp	r2, #1
 800149a:	d101      	bne.n	80014a0 <ETH_SetMACConfig+0x120>
 800149c:	2204      	movs	r2, #4
 800149e:	e000      	b.n	80014a2 <ETH_SetMACConfig+0x122>
 80014a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014aa:	2a01      	cmp	r2, #1
 80014ac:	d101      	bne.n	80014b2 <ETH_SetMACConfig+0x132>
 80014ae:	2202      	movs	r2, #2
 80014b0:	e000      	b.n	80014b4 <ETH_SetMACConfig+0x134>
 80014b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b4:	4313      	orrs	r3, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fdb7 	bl	8001040 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	fd20810f 	.word	0xfd20810f

080014e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <ETH_SetDMAConfig+0x110>)
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7b1b      	ldrb	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <ETH_SetDMAConfig+0x2c>
 800150e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001512:	e000      	b.n	8001516 <ETH_SetDMAConfig+0x2e>
 8001514:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	7b5b      	ldrb	r3, [r3, #13]
 800151a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	7f52      	ldrb	r2, [r2, #29]
 8001522:	2a00      	cmp	r2, #0
 8001524:	d102      	bne.n	800152c <ETH_SetDMAConfig+0x44>
 8001526:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800152a:	e000      	b.n	800152e <ETH_SetDMAConfig+0x46>
 800152c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	7b9b      	ldrb	r3, [r3, #14]
 8001534:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001536:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800153c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7f1b      	ldrb	r3, [r3, #28]
 8001542:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	7f9b      	ldrb	r3, [r3, #30]
 800154a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800154c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001552:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800155a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155c:	4313      	orrs	r3, r2
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fd5e 	bl	8001040 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800159c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fd2f 	bl	8001040 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	f8de3f23 	.word	0xf8de3f23

080015fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a6      	sub	sp, #152	@ 0x98
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800163e:	2300      	movs	r3, #0
 8001640:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001648:	2300      	movs	r3, #0
 800164a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001664:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800166a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800166e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001676:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fe7f 	bl	8001380 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001682:	2301      	movs	r3, #1
 8001684:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016bc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff05 	bl	80014e8 <ETH_SetDMAConfig>
}
 80016de:	bf00      	nop
 80016e0:	3798      	adds	r7, #152	@ 0x98
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3305      	adds	r3, #5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	3204      	adds	r2, #4
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <ETH_MACAddressConfig+0x68>)
 800170a:	4413      	add	r3, r2
 800170c:	461a      	mov	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3302      	adds	r3, #2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4313      	orrs	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <ETH_MACAddressConfig+0x6c>)
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	6013      	str	r3, [r2, #0]
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40028040 	.word	0x40028040
 8001754:	40028044 	.word	0x40028044

08001758 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e03e      	b.n	80017e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68d9      	ldr	r1, [r3, #12]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	3206      	adds	r2, #6
 8001798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d80c      	bhi.n	80017c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68d9      	ldr	r1, [r3, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	e004      	b.n	80017d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d9bd      	bls.n	8001766 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017fc:	611a      	str	r2, [r3, #16]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e048      	b.n	80018aa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6919      	ldr	r1, [r3, #16]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001854:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	3212      	adds	r2, #18
 8001876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d80c      	bhi.n	800189a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6919      	ldr	r1, [r3, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	e004      	b.n	80018a4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d9b3      	bls.n	8001818 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018da:	60da      	str	r2, [r3, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e175      	b.n	8001bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8164 	bne.w	8001bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d005      	beq.n	800193e <HAL_GPIO_Init+0x56>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d130      	bne.n	80019a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d017      	beq.n	80019dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80be 	beq.w	8001bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_GPIO_Init+0x324>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a65      	ldr	r2, [pc, #404]	@ (8001c0c <HAL_GPIO_Init+0x324>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b63      	ldr	r3, [pc, #396]	@ (8001c0c <HAL_GPIO_Init+0x324>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a8a:	4a61      	ldr	r2, [pc, #388]	@ (8001c10 <HAL_GPIO_Init+0x328>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	@ (8001c14 <HAL_GPIO_Init+0x32c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d037      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a57      	ldr	r2, [pc, #348]	@ (8001c18 <HAL_GPIO_Init+0x330>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <HAL_GPIO_Init+0x334>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a55      	ldr	r2, [pc, #340]	@ (8001c20 <HAL_GPIO_Init+0x338>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a54      	ldr	r2, [pc, #336]	@ (8001c24 <HAL_GPIO_Init+0x33c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a53      	ldr	r2, [pc, #332]	@ (8001c28 <HAL_GPIO_Init+0x340>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	@ (8001c2c <HAL_GPIO_Init+0x344>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a51      	ldr	r2, [pc, #324]	@ (8001c30 <HAL_GPIO_Init+0x348>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x222>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	@ (8001c34 <HAL_GPIO_Init+0x34c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x21e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4f      	ldr	r2, [pc, #316]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001afe:	2309      	movs	r3, #9
 8001b00:	e012      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b02:	230a      	movs	r3, #10
 8001b04:	e010      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b06:	2308      	movs	r3, #8
 8001b08:	e00e      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00c      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00a      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b38:	4935      	ldr	r1, [pc, #212]	@ (8001c10 <HAL_GPIO_Init+0x328>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a34      	ldr	r2, [pc, #208]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b32      	ldr	r3, [pc, #200]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a29      	ldr	r2, [pc, #164]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9a:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f ae86 	bls.w	8001908 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40021400 	.word	0x40021400
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	40021c00 	.word	0x40021c00
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40022400 	.word	0x40022400
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c5c:	e003      	b.n	8001c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	619a      	str	r2, [r3, #24]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af02      	add	r7, sp, #8
 8001c78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e108      	b.n	8001e96 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff f816 	bl	8000cd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb2:	d102      	bne.n	8001cba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fb20 	bl	8004304 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7c1a      	ldrb	r2, [r3, #16]
 8001ccc:	f88d 2000 	strb.w	r2, [sp]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd4:	f002 fabc 	bl	8004250 <USB_CoreInit>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0d5      	b.n	8001e96 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f002 fb18 	bl	8004326 <USB_SetCurrentMode>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0c6      	b.n	8001e96 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e04a      	b.n	8001da4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3315      	adds	r3, #21
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3314      	adds	r3, #20
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	332e      	adds	r3, #46	@ 0x2e
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	331c      	adds	r3, #28
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3320      	adds	r3, #32
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3324      	adds	r3, #36	@ 0x24
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3af      	bcc.n	8001d0e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e044      	b.n	8001e3e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	791b      	ldrb	r3, [r3, #4]
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3b5      	bcc.n	8001db4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7c1a      	ldrb	r2, [r3, #16]
 8001e50:	f88d 2000 	strb.w	r2, [sp]
 8001e54:	3304      	adds	r3, #4
 8001e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e58:	f002 fab2 	bl	80043c0 <USB_DevInit>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e013      	b.n	8001e96 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7b1b      	ldrb	r3, [r3, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f80b 	bl	8001ea0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fc6d 	bl	800476e <USB_DevDisconnect>

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	10000003 	.word	0x10000003

08001ee8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	4a22      	ldr	r2, [pc, #136]	@ (8001fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f36:	f7ff f877 	bl	8001028 <HAL_GetTick>
 8001f3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f3c:	e009      	b.n	8001f52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f3e:	f7ff f873 	bl	8001028 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f4c:	d901      	bls.n	8001f52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e022      	b.n	8001f98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f60:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f6c:	f7ff f85c 	bl	8001028 <HAL_GetTick>
 8001f70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f72:	e009      	b.n	8001f88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f74:	f7ff f858 	bl	8001028 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f82:	d901      	bls.n	8001f88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e007      	b.n	8001f98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f94:	d1ee      	bne.n	8001f74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e29b      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	4b96      	ldr	r3, [pc, #600]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd8:	4b93      	ldr	r3, [pc, #588]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d112      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
 8001fe4:	4b90      	ldr	r3, [pc, #576]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ff0:	d10b      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x130>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d168      	bne.n	80020d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e275      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x7a>
 8002014:	4b84      	ldr	r3, [pc, #528]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a83      	ldr	r2, [pc, #524]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e02e      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x9c>
 800202a:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7e      	ldr	r2, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b7c      	ldr	r3, [pc, #496]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7b      	ldr	r2, [pc, #492]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e01d      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0xc0>
 800204e:	4b76      	ldr	r3, [pc, #472]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a75      	ldr	r2, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b73      	ldr	r3, [pc, #460]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a72      	ldr	r2, [pc, #456]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002068:	4b6f      	ldr	r3, [pc, #444]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6e      	ldr	r2, [pc, #440]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b6c      	ldr	r3, [pc, #432]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6b      	ldr	r2, [pc, #428]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe ffce 	bl	8001028 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe ffca 	bl	8001028 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	@ 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e229      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b61      	ldr	r3, [pc, #388]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xe8>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe ffba 	bl	8001028 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe ffb6 	bl	8001028 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e215      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	4b57      	ldr	r3, [pc, #348]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x110>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d069      	beq.n	80021ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e6:	4b50      	ldr	r3, [pc, #320]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d11c      	bne.n	8002138 <HAL_RCC_OscConfig+0x190>
 80020fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x17a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1e9      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	493d      	ldr	r1, [pc, #244]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	e040      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b39      	ldr	r3, [pc, #228]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a38      	ldr	r2, [pc, #224]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe ff6c 	bl	8001028 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7fe ff68 	bl	8001028 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1c7      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4929      	ldr	r1, [pc, #164]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
 8002186:	e018      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a26      	ldr	r2, [pc, #152]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe ff48 	bl	8001028 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7fe ff44 	bl	8001028 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1a3      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d038      	beq.n	8002238 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d019      	beq.n	8002202 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d2:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe ff25 	bl	8001028 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe ff21 	bl	8001028 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e180      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x23a>
 8002200:	e01a      	b.n	8002238 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002206:	4a08      	ldr	r2, [pc, #32]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe ff0b 	bl	8001028 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe ff07 	bl	8001028 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d903      	bls.n	800222c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e166      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
 8002228:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b92      	ldr	r3, [pc, #584]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800222e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a4 	beq.w	800238e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b8c      	ldr	r3, [pc, #560]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b89      	ldr	r3, [pc, #548]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	4a88      	ldr	r2, [pc, #544]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	@ 0x40
 800225e:	4b86      	ldr	r3, [pc, #536]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b83      	ldr	r3, [pc, #524]	@ (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800227a:	4b80      	ldr	r3, [pc, #512]	@ (800247c <HAL_RCC_OscConfig+0x4d4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7f      	ldr	r2, [pc, #508]	@ (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe fecf 	bl	8001028 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe fecb 	bl	8001028 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	@ 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e12a      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	4b76      	ldr	r3, [pc, #472]	@ (800247c <HAL_RCC_OscConfig+0x4d4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x31a>
 80022b4:	4b70      	ldr	r3, [pc, #448]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	4a6f      	ldr	r2, [pc, #444]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c0:	e02d      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x33c>
 80022ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d6:	4b68      	ldr	r3, [pc, #416]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	4a67      	ldr	r2, [pc, #412]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e2:	e01c      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d10c      	bne.n	8002306 <HAL_RCC_OscConfig+0x35e>
 80022ec:	4b62      	ldr	r3, [pc, #392]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a61      	ldr	r2, [pc, #388]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6713      	str	r3, [r2, #112]	@ 0x70
 8002304:	e00b      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 8002306:	4b5c      	ldr	r3, [pc, #368]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	4a5b      	ldr	r2, [pc, #364]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70
 8002312:	4b59      	ldr	r3, [pc, #356]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	4a58      	ldr	r2, [pc, #352]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d015      	beq.n	8002352 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7fe fe7f 	bl	8001028 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe fe7b 	bl	8001028 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0d8      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	4b4c      	ldr	r3, [pc, #304]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ee      	beq.n	800232e <HAL_RCC_OscConfig+0x386>
 8002350:	e014      	b.n	800237c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe fe69 	bl	8001028 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fe65 	bl	8001028 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0c2      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	4b41      	ldr	r3, [pc, #260]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a3c      	ldr	r2, [pc, #240]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80ae 	beq.w	80024f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002398:	4b37      	ldr	r3, [pc, #220]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d06d      	beq.n	8002480 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d14b      	bne.n	8002444 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b32      	ldr	r3, [pc, #200]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a31      	ldr	r2, [pc, #196]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fe36 	bl	8001028 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fe32 	bl	8001028 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e091      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	071b      	lsls	r3, r3, #28
 800240a:	491b      	ldr	r1, [pc, #108]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a18      	ldr	r2, [pc, #96]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fe04 	bl	8001028 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fe00 	bl	8001028 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e05f      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x47c>
 8002442:	e057      	b.n	80024f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0b      	ldr	r2, [pc, #44]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800244a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fdea 	bl	8001028 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe fde6 	bl	8001028 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e045      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x4b0>
 8002476:	e03d      	b.n	80024f4 <HAL_RCC_OscConfig+0x54c>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <HAL_RCC_OscConfig+0x558>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d030      	beq.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d129      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d122      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d119      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	3b01      	subs	r3, #1
 80024ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d10f      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d0      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b67      	ldr	r3, [pc, #412]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 020f 	bic.w	r2, r3, #15
 8002532:	4965      	ldr	r1, [pc, #404]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a58      	ldr	r2, [pc, #352]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800256e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a52      	ldr	r2, [pc, #328]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002586:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d040      	beq.n	8002628 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3d      	ldr	r3, [pc, #244]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b39      	ldr	r3, [pc, #228]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4936      	ldr	r1, [pc, #216]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7fe fd16 	bl	8001028 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7fe fd12 	bl	8001028 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e053      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2d      	ldr	r3, [pc, #180]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d210      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 020f 	bic.w	r2, r3, #15
 800263e:	4922      	ldr	r1, [pc, #136]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	@ (80026d0 <HAL_RCC_ClockConfig+0x1cc>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <HAL_RCC_ClockConfig+0x1d0>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_RCC_ClockConfig+0x1d4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fb84 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08007fb0 	.word	0x08007fb0
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e0:	b094      	sub	sp, #80	@ 0x50
 80026e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e8:	2300      	movs	r3, #0
 80026ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026ec:	2300      	movs	r3, #0
 80026ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f4:	4b79      	ldr	r3, [pc, #484]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d00d      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x40>
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 80e1 	bhi.w	80028c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 800270a:	2b04      	cmp	r3, #4
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x3a>
 800270e:	e0db      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b73      	ldr	r3, [pc, #460]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002712:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002714:	e0db      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002716:	4b73      	ldr	r3, [pc, #460]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002718:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800271a:	e0d8      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4b6f      	ldr	r3, [pc, #444]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002724:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002726:	4b6d      	ldr	r3, [pc, #436]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800273c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800273e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	@ 0x34
 800274a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800274e:	4622      	mov	r2, r4
 8002750:	462b      	mov	r3, r5
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	0159      	lsls	r1, r3, #5
 800275c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002760:	0150      	lsls	r0, r2, #5
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4621      	mov	r1, r4
 8002768:	1a51      	subs	r1, r2, r1
 800276a:	6139      	str	r1, [r7, #16]
 800276c:	4629      	mov	r1, r5
 800276e:	eb63 0301 	sbc.w	r3, r3, r1
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002780:	4659      	mov	r1, fp
 8002782:	018b      	lsls	r3, r1, #6
 8002784:	4651      	mov	r1, sl
 8002786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800278a:	4651      	mov	r1, sl
 800278c:	018a      	lsls	r2, r1, #6
 800278e:	4651      	mov	r1, sl
 8002790:	ebb2 0801 	subs.w	r8, r2, r1
 8002794:	4659      	mov	r1, fp
 8002796:	eb63 0901 	sbc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ae:	4690      	mov	r8, r2
 80027b0:	4699      	mov	r9, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb18 0303 	adds.w	r3, r8, r3
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	462b      	mov	r3, r5
 80027bc:	eb49 0303 	adc.w	r3, r9, r3
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ce:	4629      	mov	r1, r5
 80027d0:	024b      	lsls	r3, r1, #9
 80027d2:	4621      	mov	r1, r4
 80027d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d8:	4621      	mov	r1, r4
 80027da:	024a      	lsls	r2, r1, #9
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027e2:	2200      	movs	r2, #0
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027ec:	f7fd fd80 	bl	80002f0 <__aeabi_uldivmod>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4613      	mov	r3, r2
 80027f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f8:	e058      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	2200      	movs	r2, #0
 8002802:	4618      	mov	r0, r3
 8002804:	4611      	mov	r1, r2
 8002806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0159      	lsls	r1, r3, #5
 8002822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002826:	0150      	lsls	r0, r2, #5
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4641      	mov	r1, r8
 800282e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002832:	4649      	mov	r1, r9
 8002834:	eb63 0b01 	sbc.w	fp, r3, r1
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800284c:	ebb2 040a 	subs.w	r4, r2, sl
 8002850:	eb63 050b 	sbc.w	r5, r3, fp
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	00eb      	lsls	r3, r5, #3
 800285e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	18e3      	adds	r3, r4, r3
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	464b      	mov	r3, r9
 8002870:	eb45 0303 	adc.w	r3, r5, r3
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002882:	4629      	mov	r1, r5
 8002884:	028b      	lsls	r3, r1, #10
 8002886:	4621      	mov	r1, r4
 8002888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800288c:	4621      	mov	r1, r4
 800288e:	028a      	lsls	r2, r1, #10
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002896:	2200      	movs	r2, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	61fa      	str	r2, [r7, #28]
 800289c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a0:	f7fd fd26 	bl	80002f0 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4613      	mov	r3, r2
 80028aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3750      	adds	r7, #80	@ 0x50
 80028d4:	46bd      	mov	sp, r7
 80028d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	@ (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08007fc0 	.word	0x08007fc0

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800292c:	f7ff ffdc 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4903      	ldr	r1, [pc, #12]	@ (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	08007fc0 	.word	0x08007fc0

08002950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	220f      	movs	r2, #15
 800295e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_RCC_GetClockConfig+0x5c>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800296c:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <HAL_RCC_GetClockConfig+0x5c>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <HAL_RCC_GetClockConfig+0x5c>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCC_GetClockConfig+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <HAL_RCC_GetClockConfig+0x60>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	601a      	str	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d012      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029dc:	4b69      	ldr	r3, [pc, #420]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a68      	ldr	r2, [pc, #416]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029e6:	6093      	str	r3, [r2, #8]
 80029e8:	4b66      	ldr	r3, [pc, #408]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f0:	4964      	ldr	r1, [pc, #400]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d017      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	4959      	ldr	r1, [pc, #356]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d017      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	494a      	ldr	r1, [pc, #296]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a68:	d101      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 808b 	beq.w	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b3a      	ldr	r3, [pc, #232]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	4a39      	ldr	r2, [pc, #228]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa4:	4b37      	ldr	r3, [pc, #220]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab0:	4b35      	ldr	r3, [pc, #212]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a34      	ldr	r2, [pc, #208]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe fab4 	bl	8001028 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fab0 	bl	8001028 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e38f      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae2:	4b28      	ldr	r3, [pc, #160]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d035      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d02e      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b14:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b16:	4b1b      	ldr	r3, [pc, #108]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b22:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d114      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fa78 	bl	8001028 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fa74 	bl	8001028 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e351      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b78:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	4901      	ldr	r1, [pc, #4]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	0ffffcff 	.word	0x0ffffcff
 8002b90:	4bac      	ldr	r3, [pc, #688]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4aab      	ldr	r2, [pc, #684]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b9a:	6093      	str	r3, [r2, #8]
 8002b9c:	4ba9      	ldr	r3, [pc, #676]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	49a6      	ldr	r1, [pc, #664]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d010      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bba:	4ba2      	ldr	r3, [pc, #648]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bc0:	4aa0      	ldr	r2, [pc, #640]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bca:	4b9e      	ldr	r3, [pc, #632]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	499b      	ldr	r1, [pc, #620]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be8:	4b96      	ldr	r3, [pc, #600]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bf6:	4993      	ldr	r1, [pc, #588]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c18:	498a      	ldr	r1, [pc, #552]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c2c:	4b85      	ldr	r3, [pc, #532]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c3a:	4982      	ldr	r1, [pc, #520]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	4979      	ldr	r1, [pc, #484]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c70:	4b74      	ldr	r3, [pc, #464]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	4971      	ldr	r1, [pc, #452]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c92:	4b6c      	ldr	r3, [pc, #432]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c98:	f023 020c 	bic.w	r2, r3, #12
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca0:	4968      	ldr	r1, [pc, #416]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb4:	4b63      	ldr	r3, [pc, #396]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc2:	4960      	ldr	r1, [pc, #384]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cdc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce4:	4957      	ldr	r1, [pc, #348]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cf8:	4b52      	ldr	r3, [pc, #328]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d06:	494f      	ldr	r1, [pc, #316]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d28:	4946      	ldr	r1, [pc, #280]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d3c:	4b41      	ldr	r3, [pc, #260]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	493e      	ldr	r1, [pc, #248]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d5e:	4b39      	ldr	r3, [pc, #228]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6c:	4935      	ldr	r1, [pc, #212]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d80:	4b30      	ldr	r3, [pc, #192]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d8e:	492d      	ldr	r1, [pc, #180]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d011      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002da2:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002db0:	4924      	ldr	r1, [pc, #144]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de2:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df0:	4914      	ldr	r1, [pc, #80]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e04:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e14:	490b      	ldr	r1, [pc, #44]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00f      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e38:	4902      	ldr	r1, [pc, #8]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e40:	e002      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e54:	4b8a      	ldr	r3, [pc, #552]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	4986      	ldr	r1, [pc, #536]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e78:	4b81      	ldr	r3, [pc, #516]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e88:	497d      	ldr	r1, [pc, #500]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d006      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80d6 	beq.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ea4:	4b76      	ldr	r3, [pc, #472]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a75      	ldr	r2, [pc, #468]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb0:	f7fe f8ba 	bl	8001028 <HAL_GetTick>
 8002eb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eb8:	f7fe f8b6 	bl	8001028 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e195      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eca:	4b6d      	ldr	r3, [pc, #436]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d021      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11d      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eea:	4b65      	ldr	r3, [pc, #404]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ef8:	4b61      	ldr	r3, [pc, #388]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efe:	0e1b      	lsrs	r3, r3, #24
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	019a      	lsls	r2, r3, #6
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	071b      	lsls	r3, r3, #28
 8002f1e:	4958      	ldr	r1, [pc, #352]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02e      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f50:	d129      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f52:	4b4b      	ldr	r3, [pc, #300]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f60:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f66:	0f1b      	lsrs	r3, r3, #28
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	019a      	lsls	r2, r3, #6
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	493e      	ldr	r1, [pc, #248]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f94:	f023 021f 	bic.w	r2, r3, #31
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	4938      	ldr	r1, [pc, #224]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01d      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fb2:	4b33      	ldr	r3, [pc, #204]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb8:	0e1b      	lsrs	r3, r3, #24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fc6:	0f1b      	lsrs	r3, r3, #28
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	019a      	lsls	r2, r3, #6
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	4926      	ldr	r1, [pc, #152]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d011      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	019a      	lsls	r2, r3, #6
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	071b      	lsls	r3, r3, #28
 8003016:	491a      	ldr	r1, [pc, #104]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800301e:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a17      	ldr	r2, [pc, #92]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003024:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302a:	f7fd fffd 	bl	8001028 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003032:	f7fd fff9 	bl	8001028 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	@ 0x64
 800303e:	d901      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0d8      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003044:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b01      	cmp	r3, #1
 8003054:	f040 80ce 	bne.w	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fd ffe0 	bl	8001028 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800306a:	e00b      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800306c:	f7fd ffdc 	bl	8001028 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d904      	bls.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0bb      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003084:	4b5e      	ldr	r3, [pc, #376]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800308c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003090:	d0ec      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02e      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d12a      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030ba:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	4944      	ldr	r1, [pc, #272]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030f6:	4b42      	ldr	r3, [pc, #264]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	493d      	ldr	r1, [pc, #244]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d022      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003124:	d11d      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003126:	4b36      	ldr	r3, [pc, #216]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312c:	0e1b      	lsrs	r3, r3, #24
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003134:	4b32      	ldr	r3, [pc, #200]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	0f1b      	lsrs	r3, r3, #28
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	019a      	lsls	r2, r3, #6
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	061b      	lsls	r3, r3, #24
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	071b      	lsls	r3, r3, #28
 800315a:	4929      	ldr	r1, [pc, #164]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d028      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003174:	0e1b      	lsrs	r3, r3, #24
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800317c:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	019a      	lsls	r2, r3, #6
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	431a      	orrs	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	071b      	lsls	r3, r3, #28
 80031a2:	4917      	ldr	r1, [pc, #92]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	4911      	ldr	r1, [pc, #68]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fd ff2c 	bl	8001028 <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031d4:	f7fd ff28 	bl	8001028 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	@ 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e007      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031f2:	d1ef      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800

08003204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e049      	b.n	80032aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f841 	bl	80032b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 f9e8 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d001      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e054      	b.n	800338a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <HAL_TIM_Base_Start_IT+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d022      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x80>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330a:	d01d      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x80>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a22      	ldr	r2, [pc, #136]	@ (800339c <HAL_TIM_Base_Start_IT+0xd4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d018      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x80>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a21      	ldr	r2, [pc, #132]	@ (80033a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x80>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00e      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x80>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x80>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <HAL_TIM_Base_Start_IT+0xe4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_TIM_Base_Start_IT+0x80>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d115      	bne.n	8003374 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <HAL_TIM_Base_Start_IT+0xec>)
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d015      	beq.n	8003386 <HAL_TIM_Base_Start_IT+0xbe>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003360:	d011      	beq.n	8003386 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	e008      	b.n	8003386 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e000      	b.n	8003388 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40001800 	.word	0x40001800
 80033b4:	00010007 	.word	0x00010007

080033b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d020      	beq.n	800341c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0202 	mvn.w	r2, #2
 80033ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8e9 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8db 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8ec 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d020      	beq.n	8003468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0204 	mvn.w	r2, #4
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8c3 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8b5 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8c6 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d020      	beq.n	80034b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0208 	mvn.w	r2, #8
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2204      	movs	r2, #4
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f89d 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f88f 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8a0 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d020      	beq.n	8003500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0210 	mvn.w	r2, #16
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2208      	movs	r2, #8
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f877 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f869 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f87a 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0201 	mvn.w	r2, #1
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fa7e 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800354a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f913 	bl	8003778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f90b 	bl	800378c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f834 	bl	8003602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f06f 0220 	mvn.w	r2, #32
 80035b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8d3 	bl	8003764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a43      	ldr	r2, [pc, #268]	@ (8003738 <TIM_Base_SetConfig+0x120>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003636:	d00f      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a40      	ldr	r2, [pc, #256]	@ (800373c <TIM_Base_SetConfig+0x124>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00b      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3f      	ldr	r2, [pc, #252]	@ (8003740 <TIM_Base_SetConfig+0x128>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3e      	ldr	r2, [pc, #248]	@ (8003744 <TIM_Base_SetConfig+0x12c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3d      	ldr	r2, [pc, #244]	@ (8003748 <TIM_Base_SetConfig+0x130>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d108      	bne.n	800366a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a32      	ldr	r2, [pc, #200]	@ (8003738 <TIM_Base_SetConfig+0x120>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003678:	d027      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2f      	ldr	r2, [pc, #188]	@ (800373c <TIM_Base_SetConfig+0x124>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d023      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2e      	ldr	r2, [pc, #184]	@ (8003740 <TIM_Base_SetConfig+0x128>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <TIM_Base_SetConfig+0x12c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <TIM_Base_SetConfig+0x130>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d017      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2b      	ldr	r2, [pc, #172]	@ (800374c <TIM_Base_SetConfig+0x134>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003750 <TIM_Base_SetConfig+0x138>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <TIM_Base_SetConfig+0x13c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a28      	ldr	r2, [pc, #160]	@ (8003758 <TIM_Base_SetConfig+0x140>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a27      	ldr	r2, [pc, #156]	@ (800375c <TIM_Base_SetConfig+0x144>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a26      	ldr	r2, [pc, #152]	@ (8003760 <TIM_Base_SetConfig+0x148>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003738 <TIM_Base_SetConfig+0x120>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0xf2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a10      	ldr	r2, [pc, #64]	@ (8003748 <TIM_Base_SetConfig+0x130>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d103      	bne.n	8003712 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40010400 	.word	0x40010400
 800374c:	40014000 	.word	0x40014000
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800
 8003758:	40001800 	.word	0x40001800
 800375c:	40001c00 	.word	0x40001c00
 8003760:	40002000 	.word	0x40002000

08003764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e040      	b.n	8003834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fa24 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	@ 0x24
 80037cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fb16 	bl	8003e18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f8af 	bl	8003950 <UART_SetConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e01b      	b.n	8003834 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800380a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800381a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fb95 	bl	8003f5c <UART_CheckIdleState>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	@ 0x28
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003850:	2b20      	cmp	r3, #32
 8003852:	d177      	bne.n	8003944 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_UART_Transmit+0x24>
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e070      	b.n	8003946 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2221      	movs	r2, #33	@ 0x21
 8003870:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003872:	f7fd fbd9 	bl	8001028 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003890:	d108      	bne.n	80038a4 <HAL_UART_Transmit+0x68>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e003      	b.n	80038ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038ac:	e02f      	b.n	800390e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2180      	movs	r1, #128	@ 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fbf7 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e03b      	b.n	8003946 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	3302      	adds	r3, #2
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	e007      	b.n	80038fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1c9      	bne.n	80038ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	2140      	movs	r1, #64	@ 0x40
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fbc1 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e005      	b.n	8003946 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4ba6      	ldr	r3, [pc, #664]	@ (8003c14 <UART_SetConfig+0x2c4>)
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	430a      	orrs	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a94      	ldr	r2, [pc, #592]	@ (8003c18 <UART_SetConfig+0x2c8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d120      	bne.n	8003a0e <UART_SetConfig+0xbe>
 80039cc:	4b93      	ldr	r3, [pc, #588]	@ (8003c1c <UART_SetConfig+0x2cc>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d816      	bhi.n	8003a08 <UART_SetConfig+0xb8>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <UART_SetConfig+0x90>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	080039fd 	.word	0x080039fd
 80039e8:	080039f7 	.word	0x080039f7
 80039ec:	08003a03 	.word	0x08003a03
 80039f0:	2301      	movs	r3, #1
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e150      	b.n	8003c98 <UART_SetConfig+0x348>
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e14d      	b.n	8003c98 <UART_SetConfig+0x348>
 80039fc:	2304      	movs	r3, #4
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e14a      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a02:	2308      	movs	r3, #8
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e147      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e144      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a83      	ldr	r2, [pc, #524]	@ (8003c20 <UART_SetConfig+0x2d0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d132      	bne.n	8003a7e <UART_SetConfig+0x12e>
 8003a18:	4b80      	ldr	r3, [pc, #512]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d828      	bhi.n	8003a78 <UART_SetConfig+0x128>
 8003a26:	a201      	add	r2, pc, #4	@ (adr r2, 8003a2c <UART_SetConfig+0xdc>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a79 	.word	0x08003a79
 8003a34:	08003a79 	.word	0x08003a79
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a6d 	.word	0x08003a6d
 8003a40:	08003a79 	.word	0x08003a79
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003a79 	.word	0x08003a79
 8003a4c:	08003a67 	.word	0x08003a67
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a79 	.word	0x08003a79
 8003a5c:	08003a73 	.word	0x08003a73
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e118      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a66:	2302      	movs	r3, #2
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e115      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e112      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a72:	2308      	movs	r3, #8
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e10f      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e10c      	b.n	8003c98 <UART_SetConfig+0x348>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a68      	ldr	r2, [pc, #416]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d120      	bne.n	8003aca <UART_SetConfig+0x17a>
 8003a88:	4b64      	ldr	r3, [pc, #400]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a92:	2b30      	cmp	r3, #48	@ 0x30
 8003a94:	d013      	beq.n	8003abe <UART_SetConfig+0x16e>
 8003a96:	2b30      	cmp	r3, #48	@ 0x30
 8003a98:	d814      	bhi.n	8003ac4 <UART_SetConfig+0x174>
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d009      	beq.n	8003ab2 <UART_SetConfig+0x162>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d810      	bhi.n	8003ac4 <UART_SetConfig+0x174>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <UART_SetConfig+0x15c>
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d006      	beq.n	8003ab8 <UART_SetConfig+0x168>
 8003aaa:	e00b      	b.n	8003ac4 <UART_SetConfig+0x174>
 8003aac:	2300      	movs	r3, #0
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e0f2      	b.n	8003c98 <UART_SetConfig+0x348>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e0ef      	b.n	8003c98 <UART_SetConfig+0x348>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e0ec      	b.n	8003c98 <UART_SetConfig+0x348>
 8003abe:	2308      	movs	r3, #8
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e0e9      	b.n	8003c98 <UART_SetConfig+0x348>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e0e6      	b.n	8003c98 <UART_SetConfig+0x348>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a56      	ldr	r2, [pc, #344]	@ (8003c28 <UART_SetConfig+0x2d8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d120      	bne.n	8003b16 <UART_SetConfig+0x1c6>
 8003ad4:	4b51      	ldr	r3, [pc, #324]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae0:	d013      	beq.n	8003b0a <UART_SetConfig+0x1ba>
 8003ae2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae4:	d814      	bhi.n	8003b10 <UART_SetConfig+0x1c0>
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d009      	beq.n	8003afe <UART_SetConfig+0x1ae>
 8003aea:	2b80      	cmp	r3, #128	@ 0x80
 8003aec:	d810      	bhi.n	8003b10 <UART_SetConfig+0x1c0>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <UART_SetConfig+0x1a8>
 8003af2:	2b40      	cmp	r3, #64	@ 0x40
 8003af4:	d006      	beq.n	8003b04 <UART_SetConfig+0x1b4>
 8003af6:	e00b      	b.n	8003b10 <UART_SetConfig+0x1c0>
 8003af8:	2300      	movs	r3, #0
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e0cc      	b.n	8003c98 <UART_SetConfig+0x348>
 8003afe:	2302      	movs	r3, #2
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e0c9      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b04:	2304      	movs	r3, #4
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e0c6      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e0c3      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b10:	2310      	movs	r3, #16
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e0c0      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a44      	ldr	r2, [pc, #272]	@ (8003c2c <UART_SetConfig+0x2dc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d125      	bne.n	8003b6c <UART_SetConfig+0x21c>
 8003b20:	4b3e      	ldr	r3, [pc, #248]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b2e:	d017      	beq.n	8003b60 <UART_SetConfig+0x210>
 8003b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b34:	d817      	bhi.n	8003b66 <UART_SetConfig+0x216>
 8003b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b3a:	d00b      	beq.n	8003b54 <UART_SetConfig+0x204>
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b40:	d811      	bhi.n	8003b66 <UART_SetConfig+0x216>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <UART_SetConfig+0x1fe>
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4a:	d006      	beq.n	8003b5a <UART_SetConfig+0x20a>
 8003b4c:	e00b      	b.n	8003b66 <UART_SetConfig+0x216>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e0a1      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b54:	2302      	movs	r3, #2
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e09e      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e09b      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b60:	2308      	movs	r3, #8
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e098      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b66:	2310      	movs	r3, #16
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e095      	b.n	8003c98 <UART_SetConfig+0x348>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2f      	ldr	r2, [pc, #188]	@ (8003c30 <UART_SetConfig+0x2e0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d125      	bne.n	8003bc2 <UART_SetConfig+0x272>
 8003b76:	4b29      	ldr	r3, [pc, #164]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b84:	d017      	beq.n	8003bb6 <UART_SetConfig+0x266>
 8003b86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b8a:	d817      	bhi.n	8003bbc <UART_SetConfig+0x26c>
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b90:	d00b      	beq.n	8003baa <UART_SetConfig+0x25a>
 8003b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b96:	d811      	bhi.n	8003bbc <UART_SetConfig+0x26c>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <UART_SetConfig+0x254>
 8003b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba0:	d006      	beq.n	8003bb0 <UART_SetConfig+0x260>
 8003ba2:	e00b      	b.n	8003bbc <UART_SetConfig+0x26c>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e076      	b.n	8003c98 <UART_SetConfig+0x348>
 8003baa:	2302      	movs	r3, #2
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e073      	b.n	8003c98 <UART_SetConfig+0x348>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e070      	b.n	8003c98 <UART_SetConfig+0x348>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e06d      	b.n	8003c98 <UART_SetConfig+0x348>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e06a      	b.n	8003c98 <UART_SetConfig+0x348>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c34 <UART_SetConfig+0x2e4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d138      	bne.n	8003c3e <UART_SetConfig+0x2ee>
 8003bcc:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bda:	d017      	beq.n	8003c0c <UART_SetConfig+0x2bc>
 8003bdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003be0:	d82a      	bhi.n	8003c38 <UART_SetConfig+0x2e8>
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be6:	d00b      	beq.n	8003c00 <UART_SetConfig+0x2b0>
 8003be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bec:	d824      	bhi.n	8003c38 <UART_SetConfig+0x2e8>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <UART_SetConfig+0x2aa>
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf6:	d006      	beq.n	8003c06 <UART_SetConfig+0x2b6>
 8003bf8:	e01e      	b.n	8003c38 <UART_SetConfig+0x2e8>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e04b      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c00:	2302      	movs	r3, #2
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e048      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c06:	2304      	movs	r3, #4
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e045      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e042      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c12:	bf00      	nop
 8003c14:	efff69f3 	.word	0xefff69f3
 8003c18:	40011000 	.word	0x40011000
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40004400 	.word	0x40004400
 8003c24:	40004800 	.word	0x40004800
 8003c28:	40004c00 	.word	0x40004c00
 8003c2c:	40005000 	.word	0x40005000
 8003c30:	40011400 	.word	0x40011400
 8003c34:	40007800 	.word	0x40007800
 8003c38:	2310      	movs	r3, #16
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e02c      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a72      	ldr	r2, [pc, #456]	@ (8003e0c <UART_SetConfig+0x4bc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d125      	bne.n	8003c94 <UART_SetConfig+0x344>
 8003c48:	4b71      	ldr	r3, [pc, #452]	@ (8003e10 <UART_SetConfig+0x4c0>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c52:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c56:	d017      	beq.n	8003c88 <UART_SetConfig+0x338>
 8003c58:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c5c:	d817      	bhi.n	8003c8e <UART_SetConfig+0x33e>
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c62:	d00b      	beq.n	8003c7c <UART_SetConfig+0x32c>
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c68:	d811      	bhi.n	8003c8e <UART_SetConfig+0x33e>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <UART_SetConfig+0x326>
 8003c6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c72:	d006      	beq.n	8003c82 <UART_SetConfig+0x332>
 8003c74:	e00b      	b.n	8003c8e <UART_SetConfig+0x33e>
 8003c76:	2300      	movs	r3, #0
 8003c78:	77fb      	strb	r3, [r7, #31]
 8003c7a:	e00d      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e00a      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c82:	2304      	movs	r3, #4
 8003c84:	77fb      	strb	r3, [r7, #31]
 8003c86:	e007      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e004      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c8e:	2310      	movs	r3, #16
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e001      	b.n	8003c98 <UART_SetConfig+0x348>
 8003c94:	2310      	movs	r3, #16
 8003c96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca0:	d15b      	bne.n	8003d5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ca2:	7ffb      	ldrb	r3, [r7, #31]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d828      	bhi.n	8003cfa <UART_SetConfig+0x3aa>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0x360>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003cfb 	.word	0x08003cfb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003cfb 	.word	0x08003cfb
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7fe fe14 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	61b8      	str	r0, [r7, #24]
        break;
 8003cda:	e013      	b.n	8003d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7fe fe24 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8003ce0:	61b8      	str	r0, [r7, #24]
        break;
 8003ce2:	e00f      	b.n	8003d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8003e14 <UART_SetConfig+0x4c4>)
 8003ce6:	61bb      	str	r3, [r7, #24]
        break;
 8003ce8:	e00c      	b.n	8003d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe fcf7 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003cee:	61b8      	str	r0, [r7, #24]
        break;
 8003cf0:	e008      	b.n	8003d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf6:	61bb      	str	r3, [r7, #24]
        break;
 8003cf8:	e004      	b.n	8003d04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	77bb      	strb	r3, [r7, #30]
        break;
 8003d02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d074      	beq.n	8003df4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	005a      	lsls	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	441a      	add	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b0f      	cmp	r3, #15
 8003d24:	d916      	bls.n	8003d54 <UART_SetConfig+0x404>
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d212      	bcs.n	8003d54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f023 030f 	bic.w	r3, r3, #15
 8003d36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	89fb      	ldrh	r3, [r7, #14]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	89fa      	ldrh	r2, [r7, #14]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	e04f      	b.n	8003df4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	77bb      	strb	r3, [r7, #30]
 8003d58:	e04c      	b.n	8003df4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d5a:	7ffb      	ldrb	r3, [r7, #31]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d828      	bhi.n	8003db2 <UART_SetConfig+0x462>
 8003d60:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <UART_SetConfig+0x418>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003db3 	.word	0x08003db3
 8003d78:	08003da3 	.word	0x08003da3
 8003d7c:	08003db3 	.word	0x08003db3
 8003d80:	08003db3 	.word	0x08003db3
 8003d84:	08003db3 	.word	0x08003db3
 8003d88:	08003dab 	.word	0x08003dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe fdb8 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8003d90:	61b8      	str	r0, [r7, #24]
        break;
 8003d92:	e013      	b.n	8003dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7fe fdc8 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8003d98:	61b8      	str	r0, [r7, #24]
        break;
 8003d9a:	e00f      	b.n	8003dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <UART_SetConfig+0x4c4>)
 8003d9e:	61bb      	str	r3, [r7, #24]
        break;
 8003da0:	e00c      	b.n	8003dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da2:	f7fe fc9b 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003da6:	61b8      	str	r0, [r7, #24]
        break;
 8003da8:	e008      	b.n	8003dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dae:	61bb      	str	r3, [r7, #24]
        break;
 8003db0:	e004      	b.n	8003dbc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dba:	bf00      	nop
    }

    if (pclk != 0U)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d018      	beq.n	8003df4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	085a      	lsrs	r2, r3, #1
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	441a      	add	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d909      	bls.n	8003df0 <UART_SetConfig+0x4a0>
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de2:	d205      	bcs.n	8003df0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	e001      	b.n	8003df4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e00:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40007c00 	.word	0x40007c00
 8003e10:	40023800 	.word	0x40023800
 8003e14:	00f42400 	.word	0x00f42400

08003e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f16:	d10a      	bne.n	8003f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b098      	sub	sp, #96	@ 0x60
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f6c:	f7fd f85c 	bl	8001028 <HAL_GetTick>
 8003f70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d12e      	bne.n	8003fde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f88c 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d021      	beq.n	8003fde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e062      	b.n	80040a4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d149      	bne.n	8004080 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f856 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d03c      	beq.n	8004080 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	623b      	str	r3, [r7, #32]
   return(result);
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800401a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004024:	633b      	str	r3, [r7, #48]	@ 0x30
 8004026:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800402a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e6      	bne.n	8004006 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	60fb      	str	r3, [r7, #12]
   return(result);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	617b      	str	r3, [r7, #20]
   return(result);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e5      	bne.n	8004038 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e011      	b.n	80040a4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3758      	adds	r7, #88	@ 0x58
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040bc:	e04f      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d04b      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fc ffaf 	bl	8001028 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <UART_WaitOnFlagUntilTimeout+0x30>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e04e      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d037      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b80      	cmp	r3, #128	@ 0x80
 80040f2:	d034      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b40      	cmp	r3, #64	@ 0x40
 80040f8:	d031      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d110      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2208      	movs	r2, #8
 800410e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f838 	bl	8004186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2208      	movs	r2, #8
 800411a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e029      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004138:	d111      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f81e 	bl	8004186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e00f      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	429a      	cmp	r2, r3
 800417a:	d0a0      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004186:	b480      	push	{r7}
 8004188:	b095      	sub	sp, #84	@ 0x54
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800419c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e6      	bne.n	800418e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e5      	bne.n	80041c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d118      	bne.n	800422e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	60bb      	str	r3, [r7, #8]
   return(result);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f023 0310 	bic.w	r3, r3, #16
 8004210:	647b      	str	r3, [r7, #68]	@ 0x44
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6979      	ldr	r1, [r7, #20]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	613b      	str	r3, [r7, #16]
   return(result);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e6      	bne.n	80041fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004242:	bf00      	nop
 8004244:	3754      	adds	r7, #84	@ 0x54
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004250:	b084      	sub	sp, #16
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	f107 001c 	add.w	r0, r7, #28
 800425e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004262:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004266:	2b01      	cmp	r3, #1
 8004268:	d121      	bne.n	80042ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <USB_CoreInit+0xb0>)
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800428e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004292:	2b01      	cmp	r3, #1
 8004294:	d105      	bne.n	80042a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fa92 	bl	80047cc <USB_CoreReset>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	e010      	b.n	80042d0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa86 	bl	80047cc <USB_CoreReset>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80042d0:	7fbb      	ldrb	r3, [r7, #30]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10b      	bne.n	80042ee <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f043 0206 	orr.w	r2, r3, #6
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042fa:	b004      	add	sp, #16
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	ffbdffbf 	.word	0xffbdffbf

08004304 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 0201 	bic.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d115      	bne.n	8004374 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004354:	200a      	movs	r0, #10
 8004356:	f7fc fe73 	bl	8001040 <HAL_Delay>
      ms += 10U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	330a      	adds	r3, #10
 800435e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fa25 	bl	80047b0 <USB_GetMode>
 8004366:	4603      	mov	r3, r0
 8004368:	2b01      	cmp	r3, #1
 800436a:	d01e      	beq.n	80043aa <USB_SetCurrentMode+0x84>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004370:	d9f0      	bls.n	8004354 <USB_SetCurrentMode+0x2e>
 8004372:	e01a      	b.n	80043aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d115      	bne.n	80043a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004386:	200a      	movs	r0, #10
 8004388:	f7fc fe5a 	bl	8001040 <HAL_Delay>
      ms += 10U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	330a      	adds	r3, #10
 8004390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa0c 	bl	80047b0 <USB_GetMode>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <USB_SetCurrentMode+0x84>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80043a2:	d9f0      	bls.n	8004386 <USB_SetCurrentMode+0x60>
 80043a4:	e001      	b.n	80043aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e005      	b.n	80043b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80043ae:	d101      	bne.n	80043b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e009      	b.n	80043f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3340      	adds	r3, #64	@ 0x40
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3301      	adds	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b0e      	cmp	r3, #14
 80043f8:	d9f2      	bls.n	80043e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11c      	bne.n	800443c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e005      	b.n	8004448 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800444e:	461a      	mov	r2, r3
 8004450:	2300      	movs	r3, #0
 8004452:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004454:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10d      	bne.n	8004478 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800445c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004464:	2100      	movs	r1, #0
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f968 	bl	800473c <USB_SetDevSpeed>
 800446c:	e008      	b.n	8004480 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800446e:	2101      	movs	r1, #1
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f963 	bl	800473c <USB_SetDevSpeed>
 8004476:	e003      	b.n	8004480 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004478:	2103      	movs	r1, #3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f95e 	bl	800473c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004480:	2110      	movs	r1, #16
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8fa 	bl	800467c <USB_FlushTxFifo>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f924 	bl	80046e0 <USB_FlushRxFifo>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b4:	461a      	mov	r2, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c0:	461a      	mov	r2, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	e043      	b.n	8004554 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044e2:	d118      	bne.n	8004516 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f6:	461a      	mov	r2, r3
 80044f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e013      	b.n	8004528 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450c:	461a      	mov	r2, r3
 800450e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e008      	b.n	8004528 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004522:	461a      	mov	r2, r3
 8004524:	2300      	movs	r3, #0
 8004526:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004534:	461a      	mov	r2, r3
 8004536:	2300      	movs	r3, #0
 8004538:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004546:	461a      	mov	r2, r3
 8004548:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800454c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3301      	adds	r3, #1
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004558:	461a      	mov	r2, r3
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4293      	cmp	r3, r2
 800455e:	d3b5      	bcc.n	80044cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	e043      	b.n	80045ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800457c:	d118      	bne.n	80045b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e013      	b.n	80045c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e008      	b.n	80045c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e0:	461a      	mov	r2, r3
 80045e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3301      	adds	r3, #1
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045f2:	461a      	mov	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d3b5      	bcc.n	8004566 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800460c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800461a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800461c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f043 0210 	orr.w	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <USB_DevInit+0x2b4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800463c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f043 0208 	orr.w	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004650:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <USB_DevInit+0x2b8>)
 800465e:	4313      	orrs	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004670:	b004      	add	sp, #16
 8004672:	4770      	bx	lr
 8004674:	803c3800 	.word	0x803c3800
 8004678:	40000004 	.word	0x40000004

0800467c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3301      	adds	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004696:	d901      	bls.n	800469c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e01b      	b.n	80046d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	daf2      	bge.n	800468a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	019b      	lsls	r3, r3, #6
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046c0:	d901      	bls.n	80046c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e006      	b.n	80046d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d0f0      	beq.n	80046b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046f8:	d901      	bls.n	80046fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e018      	b.n	8004730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	daf2      	bge.n	80046ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2210      	movs	r2, #16
 800470e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800471c:	d901      	bls.n	8004722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e006      	b.n	8004730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b10      	cmp	r3, #16
 800472c:	d0f0      	beq.n	8004710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004788:	f023 0303 	bic.w	r3, r3, #3
 800478c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0301 	and.w	r3, r3, #1
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047e4:	d901      	bls.n	80047ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e022      	b.n	8004830 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	daf2      	bge.n	80047d8 <USB_CoreReset+0xc>

  count = 10U;
 80047f2:	230a      	movs	r3, #10
 80047f4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80047f6:	e002      	b.n	80047fe <USB_CoreReset+0x32>
  {
    count--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f9      	bne.n	80047f8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800481c:	d901      	bls.n	8004822 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e006      	b.n	8004830 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d0f0      	beq.n	8004810 <USB_CoreReset+0x44>

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004852:	f3ef 8305 	mrs	r3, IPSR
 8004856:	60bb      	str	r3, [r7, #8]
  return(result);
 8004858:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485e:	f3ef 8310 	mrs	r3, PRIMASK
 8004862:	607b      	str	r3, [r7, #4]
  return(result);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800486a:	f3ef 8311 	mrs	r3, BASEPRI
 800486e:	603b      	str	r3, [r7, #0]
  return(result);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <osKernelInitialize+0x3a>
 8004876:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <osKernelInitialize+0x64>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d103      	bne.n	8004886 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800487e:	f06f 0305 	mvn.w	r3, #5
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e00c      	b.n	80048a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004886:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <osKernelInitialize+0x64>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d105      	bne.n	800489a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800488e:	4b08      	ldr	r3, [pc, #32]	@ (80048b0 <osKernelInitialize+0x64>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e002      	b.n	80048a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	2000086c 	.word	0x2000086c

080048b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ba:	f3ef 8305 	mrs	r3, IPSR
 80048be:	60bb      	str	r3, [r7, #8]
  return(result);
 80048c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ca:	607b      	str	r3, [r7, #4]
  return(result);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048d2:	f3ef 8311 	mrs	r3, BASEPRI
 80048d6:	603b      	str	r3, [r7, #0]
  return(result);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <osKernelStart+0x3a>
 80048de:	4b0f      	ldr	r3, [pc, #60]	@ (800491c <osKernelStart+0x68>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d103      	bne.n	80048ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80048e6:	f06f 0305 	mvn.w	r3, #5
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e010      	b.n	8004910 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <osKernelStart+0x68>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d109      	bne.n	800490a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048f6:	f7ff ffa1 	bl	800483c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048fa:	4b08      	ldr	r3, [pc, #32]	@ (800491c <osKernelStart+0x68>)
 80048fc:	2202      	movs	r2, #2
 80048fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004900:	f001 f90a 	bl	8005b18 <vTaskStartScheduler>
      stat = osOK;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e002      	b.n	8004910 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	2000086c 	.word	0x2000086c

08004920 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004926:	f3ef 8305 	mrs	r3, IPSR
 800492a:	60bb      	str	r3, [r7, #8]
  return(result);
 800492c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004932:	f3ef 8310 	mrs	r3, PRIMASK
 8004936:	607b      	str	r3, [r7, #4]
  return(result);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d105      	bne.n	800494a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800493e:	f3ef 8311 	mrs	r3, BASEPRI
 8004942:	603b      	str	r3, [r7, #0]
  return(result);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <osKernelGetTickCount+0x3a>
 800494a:	4b08      	ldr	r3, [pc, #32]	@ (800496c <osKernelGetTickCount+0x4c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d103      	bne.n	800495a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004952:	f001 fa13 	bl	8005d7c <xTaskGetTickCountFromISR>
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	e002      	b.n	8004960 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800495a:	f001 f9ff 	bl	8005d5c <xTaskGetTickCount>
 800495e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004960:	68fb      	ldr	r3, [r7, #12]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2000086c 	.word	0x2000086c

08004970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b090      	sub	sp, #64	@ 0x40
 8004974:	af04      	add	r7, sp, #16
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004980:	f3ef 8305 	mrs	r3, IPSR
 8004984:	61fb      	str	r3, [r7, #28]
  return(result);
 8004986:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004988:	2b00      	cmp	r3, #0
 800498a:	f040 808f 	bne.w	8004aac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	61bb      	str	r3, [r7, #24]
  return(result);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	617b      	str	r3, [r7, #20]
  return(result);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <osThreadNew+0x3e>
 80049a6:	4b44      	ldr	r3, [pc, #272]	@ (8004ab8 <osThreadNew+0x148>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d07e      	beq.n	8004aac <osThreadNew+0x13c>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d07b      	beq.n	8004aac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80049b8:	2318      	movs	r3, #24
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295
 80049c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d045      	beq.n	8004a58 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <osThreadNew+0x6a>
        name = attr->name;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <osThreadNew+0x90>
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	2b38      	cmp	r3, #56	@ 0x38
 80049f2:	d805      	bhi.n	8004a00 <osThreadNew+0x90>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <osThreadNew+0x94>
        return (NULL);
 8004a00:	2300      	movs	r3, #0
 8004a02:	e054      	b.n	8004aae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <osThreadNew+0xca>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a22:	d90a      	bls.n	8004a3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d006      	beq.n	8004a3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <osThreadNew+0xca>
        mem = 1;
 8004a34:	2301      	movs	r3, #1
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	e010      	b.n	8004a5c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10c      	bne.n	8004a5c <osThreadNew+0xec>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <osThreadNew+0xec>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <osThreadNew+0xec>
          mem = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	623b      	str	r3, [r7, #32]
 8004a56:	e001      	b.n	8004a5c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d110      	bne.n	8004a84 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a6a:	9202      	str	r2, [sp, #8]
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fe4f 	bl	800571c <xTaskCreateStatic>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e013      	b.n	8004aac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d110      	bne.n	8004aac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	f107 0310 	add.w	r3, r7, #16
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fea3 	bl	80057e8 <xTaskCreate>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d001      	beq.n	8004aac <osThreadNew+0x13c>
          hTask = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004aac:	693b      	ldr	r3, [r7, #16]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3730      	adds	r7, #48	@ 0x30
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2000086c 	.word	0x2000086c

08004abc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac4:	f3ef 8305 	mrs	r3, IPSR
 8004ac8:	613b      	str	r3, [r7, #16]
  return(result);
 8004aca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10f      	bne.n	8004af0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004adc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <osDelay+0x3c>
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <osDelay+0x58>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d103      	bne.n	8004af8 <osDelay+0x3c>
    stat = osErrorISR;
 8004af0:	f06f 0305 	mvn.w	r3, #5
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e007      	b.n	8004b08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 ffd0 	bl	8005aa8 <vTaskDelay>
    }
  }

  return (stat);
 8004b08:	697b      	ldr	r3, [r7, #20]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	2000086c 	.word	0x2000086c

08004b18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4a06      	ldr	r2, [pc, #24]	@ (8004b48 <vApplicationGetIdleTaskMemory+0x30>)
 8004b2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2280      	movs	r2, #128	@ 0x80
 8004b34:	601a      	str	r2, [r3, #0]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000870 	.word	0x20000870
 8004b48:	20000918 	.word	0x20000918

08004b4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a07      	ldr	r2, [pc, #28]	@ (8004b78 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a06      	ldr	r2, [pc, #24]	@ (8004b7c <vApplicationGetTimerTaskMemory+0x30>)
 8004b62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b6a:	601a      	str	r2, [r3, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	20000b18 	.word	0x20000b18
 8004b7c:	20000bc0 	.word	0x20000bc0

08004b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f103 0208 	add.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f103 0208 	add.w	r2, r3, #8
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f103 0208 	add.w	r2, r3, #8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d103      	bne.n	8004c42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e00c      	b.n	8004c5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3308      	adds	r3, #8
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e002      	b.n	8004c50 <vListInsert+0x2e>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d2f6      	bcs.n	8004c4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d103      	bne.n	8004cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1e5a      	subs	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	b672      	cpsid	i
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	b662      	cpsie	i
 8004d10:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004d18:	f002 f8e8 	bl	8006eec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	441a      	add	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	22ff      	movs	r2, #255	@ 0xff
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	22ff      	movs	r2, #255	@ 0xff
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d114      	bne.n	8004d98 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01a      	beq.n	8004dac <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3310      	adds	r3, #16
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f98a 	bl	8006094 <xTaskRemoveFromEventList>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <xQueueGenericReset+0xd4>)
 8004d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	e009      	b.n	8004dac <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3310      	adds	r3, #16
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff feef 	bl	8004b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3324      	adds	r3, #36	@ 0x24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff feea 	bl	8004b80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dac:	f002 f8d4 	bl	8006f58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004db0:	2301      	movs	r3, #1
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08e      	sub	sp, #56	@ 0x38
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10d      	bne.n	8004df0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	b672      	cpsid	i
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	b662      	cpsie	i
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10d      	bne.n	8004e12 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	b672      	cpsid	i
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	b662      	cpsie	i
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <xQueueGenericCreateStatic+0x5e>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <xQueueGenericCreateStatic+0x62>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <xQueueGenericCreateStatic+0x64>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	b672      	cpsid	i
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	b662      	cpsie	i
 8004e3c:	623b      	str	r3, [r7, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <xQueueGenericCreateStatic+0x90>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <xQueueGenericCreateStatic+0x94>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <xQueueGenericCreateStatic+0x96>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10d      	bne.n	8004e76 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5e:	b672      	cpsid	i
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	b662      	cpsie	i
 8004e6e:	61fb      	str	r3, [r7, #28]
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	e7fd      	b.n	8004e72 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e76:	2350      	movs	r3, #80	@ 0x50
 8004e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b50      	cmp	r3, #80	@ 0x50
 8004e7e:	d00d      	beq.n	8004e9c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	b672      	cpsid	i
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	b662      	cpsie	i
 8004e94:	61bb      	str	r3, [r7, #24]
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	e7fd      	b.n	8004e98 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eb0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f805 	bl	8004ece <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3730      	adds	r7, #48	@ 0x30
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e002      	b.n	8004ef0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004efc:	2101      	movs	r1, #1
 8004efe:	69b8      	ldr	r0, [r7, #24]
 8004f00:	f7ff fef2 	bl	8004ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08e      	sub	sp, #56	@ 0x38
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f22:	2300      	movs	r3, #0
 8004f24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <xQueueGenericSend+0x38>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	b672      	cpsid	i
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	b662      	cpsie	i
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <xQueueGenericSend+0x46>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <xQueueGenericSend+0x4a>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueGenericSend+0x4c>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10d      	bne.n	8004f80 <xQueueGenericSend+0x6c>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f7a:	bf00      	nop
 8004f7c:	bf00      	nop
 8004f7e:	e7fd      	b.n	8004f7c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d103      	bne.n	8004f8e <xQueueGenericSend+0x7a>
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <xQueueGenericSend+0x7e>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <xQueueGenericSend+0x80>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10d      	bne.n	8004fb4 <xQueueGenericSend+0xa0>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9c:	b672      	cpsid	i
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	b662      	cpsie	i
 8004fac:	623b      	str	r3, [r7, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb4:	f001 fa3c 	bl	8006430 <xTaskGetSchedulerState>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <xQueueGenericSend+0xb0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <xQueueGenericSend+0xb4>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <xQueueGenericSend+0xb6>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <xQueueGenericSend+0xd6>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	b672      	cpsid	i
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	b662      	cpsie	i
 8004fe2:	61fb      	str	r3, [r7, #28]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fea:	f001 ff7f 	bl	8006eec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <xQueueGenericSend+0xec>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d129      	bne.n	8005054 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005006:	f000 fa1b 	bl	8005440 <prvCopyDataToQueue>
 800500a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	3324      	adds	r3, #36	@ 0x24
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f83b 	bl	8006094 <xTaskRemoveFromEventList>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005024:	4b3f      	ldr	r3, [pc, #252]	@ (8005124 <xQueueGenericSend+0x210>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	e00a      	b.n	800504c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800503c:	4b39      	ldr	r3, [pc, #228]	@ (8005124 <xQueueGenericSend+0x210>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800504c:	f001 ff84 	bl	8006f58 <vPortExitCritical>
				return pdPASS;
 8005050:	2301      	movs	r3, #1
 8005052:	e063      	b.n	800511c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800505a:	f001 ff7d 	bl	8006f58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800505e:	2300      	movs	r3, #0
 8005060:	e05c      	b.n	800511c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005068:	f107 0314 	add.w	r3, r7, #20
 800506c:	4618      	mov	r0, r3
 800506e:	f001 f877 	bl	8006160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005072:	2301      	movs	r3, #1
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005076:	f001 ff6f 	bl	8006f58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800507a:	f000 fdc1 	bl	8005c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800507e:	f001 ff35 	bl	8006eec <vPortEnterCritical>
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005088:	b25b      	sxtb	r3, r3
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d103      	bne.n	8005098 <xQueueGenericSend+0x184>
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800509e:	b25b      	sxtb	r3, r3
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d103      	bne.n	80050ae <xQueueGenericSend+0x19a>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ae:	f001 ff53 	bl	8006f58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050b2:	1d3a      	adds	r2, r7, #4
 80050b4:	f107 0314 	add.w	r3, r7, #20
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 f866 	bl	800618c <xTaskCheckForTimeOut>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d124      	bne.n	8005110 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050c8:	f000 fab2 	bl	8005630 <prvIsQueueFull>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d018      	beq.n	8005104 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	3310      	adds	r3, #16
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4611      	mov	r1, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 ff84 	bl	8005fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050e2:	f000 fa3d 	bl	8005560 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050e6:	f000 fd99 	bl	8005c1c <xTaskResumeAll>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f47f af7c 	bne.w	8004fea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80050f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <xQueueGenericSend+0x210>)
 80050f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	e772      	b.n	8004fea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005106:	f000 fa2b 	bl	8005560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800510a:	f000 fd87 	bl	8005c1c <xTaskResumeAll>
 800510e:	e76c      	b.n	8004fea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005112:	f000 fa25 	bl	8005560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005116:	f000 fd81 	bl	8005c1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800511a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800511c:	4618      	mov	r0, r3
 800511e:	3738      	adds	r7, #56	@ 0x38
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	@ 0x38
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10d      	bne.n	800515c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	b672      	cpsid	i
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	b662      	cpsie	i
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	e7fd      	b.n	8005158 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <xQueueGenericSendFromISR+0x42>
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <xQueueGenericSendFromISR+0x46>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <xQueueGenericSendFromISR+0x48>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10d      	bne.n	8005190 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	623b      	str	r3, [r7, #32]
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d103      	bne.n	800519e <xQueueGenericSendFromISR+0x76>
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <xQueueGenericSendFromISR+0x7a>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericSendFromISR+0x7c>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10d      	bne.n	80051c4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	b672      	cpsid	i
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	b662      	cpsie	i
 80051bc:	61fb      	str	r3, [r7, #28]
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c4:	f001 ff7a 	bl	80070bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051c8:	f3ef 8211 	mrs	r2, BASEPRI
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	b672      	cpsid	i
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	b662      	cpsie	i
 80051e0:	61ba      	str	r2, [r7, #24]
 80051e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <xQueueGenericSendFromISR+0xd2>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d12c      	bne.n	8005254 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800520a:	f000 f919 	bl	8005440 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800520e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d112      	bne.n	800523e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d016      	beq.n	800524e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	3324      	adds	r3, #36	@ 0x24
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ff35 	bl	8006094 <xTaskRemoveFromEventList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00e      	beq.n	800524e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e007      	b.n	800524e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800523e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005242:	3301      	adds	r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	b25a      	sxtb	r2, r3
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800524e:	2301      	movs	r3, #1
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005252:	e001      	b.n	8005258 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005254:	2300      	movs	r3, #0
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
 8005258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005262:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005266:	4618      	mov	r0, r3
 8005268:	3738      	adds	r7, #56	@ 0x38
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08c      	sub	sp, #48	@ 0x30
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <xQueueReceive+0x36>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	b672      	cpsid	i
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	b662      	cpsie	i
 800529e:	623b      	str	r3, [r7, #32]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d103      	bne.n	80052b4 <xQueueReceive+0x44>
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <xQueueReceive+0x48>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <xQueueReceive+0x4a>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <xQueueReceive+0x6a>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	b672      	cpsid	i
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	b662      	cpsie	i
 80052d2:	61fb      	str	r3, [r7, #28]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052da:	f001 f8a9 	bl	8006430 <xTaskGetSchedulerState>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <xQueueReceive+0x7a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <xQueueReceive+0x7e>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <xQueueReceive+0x80>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10d      	bne.n	8005310 <xQueueReceive+0xa0>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f8:	b672      	cpsid	i
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	b662      	cpsie	i
 8005308:	61bb      	str	r3, [r7, #24]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005310:	f001 fdec 	bl	8006eec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01f      	beq.n	8005360 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005324:	f000 f8f6 	bl	8005514 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	1e5a      	subs	r2, r3, #1
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00f      	beq.n	8005358 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	3310      	adds	r3, #16
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fea9 	bl	8006094 <xTaskRemoveFromEventList>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005348:	4b3c      	ldr	r3, [pc, #240]	@ (800543c <xQueueReceive+0x1cc>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005358:	f001 fdfe 	bl	8006f58 <vPortExitCritical>
				return pdPASS;
 800535c:	2301      	movs	r3, #1
 800535e:	e069      	b.n	8005434 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005366:	f001 fdf7 	bl	8006f58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800536a:	2300      	movs	r3, #0
 800536c:	e062      	b.n	8005434 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fef1 	bl	8006160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005382:	f001 fde9 	bl	8006f58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005386:	f000 fc3b 	bl	8005c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800538a:	f001 fdaf 	bl	8006eec <vPortEnterCritical>
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005394:	b25b      	sxtb	r3, r3
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <xQueueReceive+0x134>
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d103      	bne.n	80053ba <xQueueReceive+0x14a>
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ba:	f001 fdcd 	bl	8006f58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053be:	1d3a      	adds	r2, r7, #4
 80053c0:	f107 0310 	add.w	r3, r7, #16
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fee0 	bl	800618c <xTaskCheckForTimeOut>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d123      	bne.n	800541a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053d4:	f000 f916 	bl	8005604 <prvIsQueueEmpty>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d017      	beq.n	800540e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	3324      	adds	r3, #36	@ 0x24
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fdfe 	bl	8005fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ee:	f000 f8b7 	bl	8005560 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053f2:	f000 fc13 	bl	8005c1c <xTaskResumeAll>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d189      	bne.n	8005310 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80053fc:	4b0f      	ldr	r3, [pc, #60]	@ (800543c <xQueueReceive+0x1cc>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	e780      	b.n	8005310 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800540e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005410:	f000 f8a6 	bl	8005560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005414:	f000 fc02 	bl	8005c1c <xTaskResumeAll>
 8005418:	e77a      	b.n	8005310 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800541a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800541c:	f000 f8a0 	bl	8005560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005420:	f000 fbfc 	bl	8005c1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005426:	f000 f8ed 	bl	8005604 <prvIsQueueEmpty>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	f43f af6f 	beq.w	8005310 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005432:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005434:	4618      	mov	r0, r3
 8005436:	3730      	adds	r7, #48	@ 0x30
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d14d      	bne.n	8005502 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fffe 	bl	800646c <xTaskPriorityDisinherit>
 8005470:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	e043      	b.n	8005502 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d119      	bne.n	80054b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6858      	ldr	r0, [r3, #4]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005488:	461a      	mov	r2, r3
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	f002 f904 	bl	8007698 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	441a      	add	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d32b      	bcc.n	8005502 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	605a      	str	r2, [r3, #4]
 80054b2:	e026      	b.n	8005502 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68d8      	ldr	r0, [r3, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	461a      	mov	r2, r3
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	f002 f8ea 	bl	8007698 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	425b      	negs	r3, r3
 80054ce:	441a      	add	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d207      	bcs.n	80054f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	425b      	negs	r3, r3
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d105      	bne.n	8005502 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	3b01      	subs	r3, #1
 8005500:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800550a:	697b      	ldr	r3, [r7, #20]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d018      	beq.n	8005558 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	441a      	add	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	429a      	cmp	r2, r3
 800553e:	d303      	bcc.n	8005548 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68d9      	ldr	r1, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	461a      	mov	r2, r3
 8005552:	6838      	ldr	r0, [r7, #0]
 8005554:	f002 f8a0 	bl	8007698 <memcpy>
	}
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005568:	f001 fcc0 	bl	8006eec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005572:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005574:	e011      	b.n	800559a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	d012      	beq.n	80055a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3324      	adds	r3, #36	@ 0x24
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fd86 	bl	8006094 <xTaskRemoveFromEventList>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800558e:	f000 fe65 	bl	800625c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	3b01      	subs	r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800559a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	dce9      	bgt.n	8005576 <prvUnlockQueue+0x16>
 80055a2:	e000      	b.n	80055a6 <prvUnlockQueue+0x46>
					break;
 80055a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	22ff      	movs	r2, #255	@ 0xff
 80055aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055ae:	f001 fcd3 	bl	8006f58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055b2:	f001 fc9b 	bl	8006eec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055be:	e011      	b.n	80055e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d012      	beq.n	80055ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3310      	adds	r3, #16
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fd61 	bl	8006094 <xTaskRemoveFromEventList>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055d8:	f000 fe40 	bl	800625c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055dc:	7bbb      	ldrb	r3, [r7, #14]
 80055de:	3b01      	subs	r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dce9      	bgt.n	80055c0 <prvUnlockQueue+0x60>
 80055ec:	e000      	b.n	80055f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	22ff      	movs	r2, #255	@ 0xff
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80055f8:	f001 fcae 	bl	8006f58 <vPortExitCritical>
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800560c:	f001 fc6e 	bl	8006eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e001      	b.n	8005622 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005622:	f001 fc99 	bl	8006f58 <vPortExitCritical>

	return xReturn;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005638:	f001 fc58 	bl	8006eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005644:	429a      	cmp	r2, r3
 8005646:	d102      	bne.n	800564e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e001      	b.n	8005652 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005652:	f001 fc81 	bl	8006f58 <vPortExitCritical>

	return xReturn;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e014      	b.n	800569a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005670:	4a0f      	ldr	r2, [pc, #60]	@ (80056b0 <vQueueAddToRegistry+0x50>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800567c:	490c      	ldr	r1, [pc, #48]	@ (80056b0 <vQueueAddToRegistry+0x50>)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005686:	4a0a      	ldr	r2, [pc, #40]	@ (80056b0 <vQueueAddToRegistry+0x50>)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4413      	add	r3, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005692:	e006      	b.n	80056a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b07      	cmp	r3, #7
 800569e:	d9e7      	bls.n	8005670 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000fc0 	.word	0x20000fc0

080056b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056c4:	f001 fc12 	bl	8006eec <vPortEnterCritical>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056ce:	b25b      	sxtb	r3, r3
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d103      	bne.n	80056de <vQueueWaitForMessageRestricted+0x2a>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d103      	bne.n	80056f4 <vQueueWaitForMessageRestricted+0x40>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f4:	f001 fc30 	bl	8006f58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	3324      	adds	r3, #36	@ 0x24
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fc95 	bl	8006038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800570e:	6978      	ldr	r0, [r7, #20]
 8005710:	f7ff ff26 	bl	8005560 <prvUnlockQueue>
	}
 8005714:	bf00      	nop
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	@ 0x38
 8005720:	af04      	add	r7, sp, #16
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800572a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <xTaskCreateStatic+0x30>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	b672      	cpsid	i
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	b662      	cpsie	i
 8005744:	623b      	str	r3, [r7, #32]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10d      	bne.n	800576e <xTaskCreateStatic+0x52>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	b672      	cpsid	i
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	b662      	cpsie	i
 8005766:	61fb      	str	r3, [r7, #28]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800576e:	23a8      	movs	r3, #168	@ 0xa8
 8005770:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2ba8      	cmp	r3, #168	@ 0xa8
 8005776:	d00d      	beq.n	8005794 <xTaskCreateStatic+0x78>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577c:	b672      	cpsid	i
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	b662      	cpsie	i
 800578c:	61bb      	str	r3, [r7, #24]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005794:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01e      	beq.n	80057da <xTaskCreateStatic+0xbe>
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01b      	beq.n	80057da <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057b4:	2300      	movs	r3, #0
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f851 	bl	8005874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057d4:	f000 f8f8 	bl	80059c8 <prvAddNewTaskToReadyList>
 80057d8:	e001      	b.n	80057de <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057de:	697b      	ldr	r3, [r7, #20]
	}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3728      	adds	r7, #40	@ 0x28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	@ 0x30
 80057ec:	af04      	add	r7, sp, #16
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fca3 	bl	8007148 <pvPortMalloc>
 8005802:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00e      	beq.n	8005828 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800580a:	20a8      	movs	r0, #168	@ 0xa8
 800580c:	f001 fc9c 	bl	8007148 <pvPortMalloc>
 8005810:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	631a      	str	r2, [r3, #48]	@ 0x30
 800581e:	e005      	b.n	800582c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	f001 fd5f 	bl	80072e4 <vPortFree>
 8005826:	e001      	b.n	800582c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d017      	beq.n	8005862 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	2300      	movs	r3, #0
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f80f 	bl	8005874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005856:	69f8      	ldr	r0, [r7, #28]
 8005858:	f000 f8b6 	bl	80059c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e002      	b.n	8005868 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005868:	69bb      	ldr	r3, [r7, #24]
	}
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	461a      	mov	r2, r3
 800588c:	21a5      	movs	r1, #165	@ 0xa5
 800588e:	f001 fe79 	bl	8007584 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800589c:	440b      	add	r3, r1
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	b672      	cpsid	i
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	b662      	cpsie	i
 80058ca:	617b      	str	r3, [r7, #20]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01f      	beq.n	8005918 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e012      	b.n	8005904 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	7819      	ldrb	r1, [r3, #0]
 80058e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	3334      	adds	r3, #52	@ 0x34
 80058ee:	460a      	mov	r2, r1
 80058f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3301      	adds	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	d9e9      	bls.n	80058de <prvInitialiseNewTask+0x6a>
 800590a:	e000      	b.n	800590e <prvInitialiseNewTask+0x9a>
			{
				break;
 800590c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005916:	e003      	b.n	8005920 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	2b37      	cmp	r3, #55	@ 0x37
 8005924:	d901      	bls.n	800592a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005926:	2337      	movs	r3, #55	@ 0x37
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800592e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005934:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	2200      	movs	r2, #0
 800593a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	3304      	adds	r3, #4
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff f93d 	bl	8004bc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	3318      	adds	r3, #24
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff f938 	bl	8004bc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005954:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005964:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	2200      	movs	r2, #0
 800596a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	2200      	movs	r2, #0
 8005972:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	3354      	adds	r3, #84	@ 0x54
 800597a:	224c      	movs	r2, #76	@ 0x4c
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f001 fe00 	bl	8007584 <memset>
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	4a0d      	ldr	r2, [pc, #52]	@ (80059bc <prvInitialiseNewTask+0x148>)
 8005988:	659a      	str	r2, [r3, #88]	@ 0x58
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	4a0c      	ldr	r2, [pc, #48]	@ (80059c0 <prvInitialiseNewTask+0x14c>)
 800598e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	4a0c      	ldr	r2, [pc, #48]	@ (80059c4 <prvInitialiseNewTask+0x150>)
 8005994:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	69b8      	ldr	r0, [r7, #24]
 800599c:	f001 f996 	bl	8006ccc <pxPortInitialiseStack>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059b2:	bf00      	nop
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	2000524c 	.word	0x2000524c
 80059c0:	200052b4 	.word	0x200052b4
 80059c4:	2000531c 	.word	0x2000531c

080059c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059d0:	f001 fa8c 	bl	8006eec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059d4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a8c <prvAddNewTaskToReadyList+0xc4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a2c      	ldr	r2, [pc, #176]	@ (8005a8c <prvAddNewTaskToReadyList+0xc4>)
 80059dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059de:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <prvAddNewTaskToReadyList+0xc8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005a90 <prvAddNewTaskToReadyList+0xc8>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059ec:	4b27      	ldr	r3, [pc, #156]	@ (8005a8c <prvAddNewTaskToReadyList+0xc4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d110      	bne.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059f4:	f000 fc56 	bl	80062a4 <prvInitialiseTaskLists>
 80059f8:	e00d      	b.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059fa:	4b26      	ldr	r3, [pc, #152]	@ (8005a94 <prvAddNewTaskToReadyList+0xcc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a02:	4b23      	ldr	r3, [pc, #140]	@ (8005a90 <prvAddNewTaskToReadyList+0xc8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d802      	bhi.n	8005a16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a10:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <prvAddNewTaskToReadyList+0xc8>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a16:	4b20      	ldr	r3, [pc, #128]	@ (8005a98 <prvAddNewTaskToReadyList+0xd0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a98 <prvAddNewTaskToReadyList+0xd0>)
 8005a1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a20:	4b1d      	ldr	r3, [pc, #116]	@ (8005a98 <prvAddNewTaskToReadyList+0xd0>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a9c <prvAddNewTaskToReadyList+0xd4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d903      	bls.n	8005a3c <prvAddNewTaskToReadyList+0x74>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a38:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <prvAddNewTaskToReadyList+0xd4>)
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <prvAddNewTaskToReadyList+0xd8>)
 8005a4a:	441a      	add	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f7ff f8c1 	bl	8004bda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a58:	f001 fa7e 	bl	8006f58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <prvAddNewTaskToReadyList+0xcc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00e      	beq.n	8005a82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <prvAddNewTaskToReadyList+0xc8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d207      	bcs.n	8005a82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a72:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa4 <prvAddNewTaskToReadyList+0xdc>)
 8005a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	200014d4 	.word	0x200014d4
 8005a90:	20001000 	.word	0x20001000
 8005a94:	200014e0 	.word	0x200014e0
 8005a98:	200014f0 	.word	0x200014f0
 8005a9c:	200014dc 	.word	0x200014dc
 8005aa0:	20001004 	.word	0x20001004
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01a      	beq.n	8005af0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aba:	4b15      	ldr	r3, [pc, #84]	@ (8005b10 <vTaskDelay+0x68>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <vTaskDelay+0x36>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	b672      	cpsid	i
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	b662      	cpsie	i
 8005ad6:	60bb      	str	r3, [r7, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005ade:	f000 f88f 	bl	8005c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fd35 	bl	8006554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005aea:	f000 f897 	bl	8005c1c <xTaskResumeAll>
 8005aee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d107      	bne.n	8005b06 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005af6:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <vTaskDelay+0x6c>)
 8005af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	200014fc 	.word	0x200014fc
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	@ 0x28
 8005b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b26:	463a      	mov	r2, r7
 8005b28:	1d39      	adds	r1, r7, #4
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe fff2 	bl	8004b18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	9202      	str	r2, [sp, #8]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2300      	movs	r3, #0
 8005b44:	460a      	mov	r2, r1
 8005b46:	4926      	ldr	r1, [pc, #152]	@ (8005be0 <vTaskStartScheduler+0xc8>)
 8005b48:	4826      	ldr	r0, [pc, #152]	@ (8005be4 <vTaskStartScheduler+0xcc>)
 8005b4a:	f7ff fde7 	bl	800571c <xTaskCreateStatic>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4a25      	ldr	r2, [pc, #148]	@ (8005be8 <vTaskStartScheduler+0xd0>)
 8005b52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b54:	4b24      	ldr	r3, [pc, #144]	@ (8005be8 <vTaskStartScheduler+0xd0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e001      	b.n	8005b66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d102      	bne.n	8005b72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b6c:	f000 fd46 	bl	80065fc <xTimerCreateTimerTask>
 8005b70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d11d      	bne.n	8005bb4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	b672      	cpsid	i
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	b662      	cpsie	i
 8005b8c:	613b      	str	r3, [r7, #16]
}
 8005b8e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b90:	4b16      	ldr	r3, [pc, #88]	@ (8005bec <vTaskStartScheduler+0xd4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3354      	adds	r3, #84	@ 0x54
 8005b96:	4a16      	ldr	r2, [pc, #88]	@ (8005bf0 <vTaskStartScheduler+0xd8>)
 8005b98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b9a:	4b16      	ldr	r3, [pc, #88]	@ (8005bf4 <vTaskStartScheduler+0xdc>)
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ba2:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <vTaskStartScheduler+0xe0>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ba8:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <vTaskStartScheduler+0xe4>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bae:	f001 f91f 	bl	8006df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb2:	e011      	b.n	8005bd8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d10d      	bne.n	8005bd8 <vTaskStartScheduler+0xc0>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	b672      	cpsid	i
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	b662      	cpsie	i
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <vTaskStartScheduler+0xbc>
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08007f74 	.word	0x08007f74
 8005be4:	08006275 	.word	0x08006275
 8005be8:	200014f8 	.word	0x200014f8
 8005bec:	20001000 	.word	0x20001000
 8005bf0:	20000010 	.word	0x20000010
 8005bf4:	200014f4 	.word	0x200014f4
 8005bf8:	200014e0 	.word	0x200014e0
 8005bfc:	200014d8 	.word	0x200014d8

08005c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c04:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <vTaskSuspendAll+0x18>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	4a03      	ldr	r2, [pc, #12]	@ (8005c18 <vTaskSuspendAll+0x18>)
 8005c0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c0e:	bf00      	nop
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	200014fc 	.word	0x200014fc

08005c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c2a:	4b43      	ldr	r3, [pc, #268]	@ (8005d38 <xTaskResumeAll+0x11c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10d      	bne.n	8005c4e <xTaskResumeAll+0x32>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	b672      	cpsid	i
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	b662      	cpsie	i
 8005c46:	603b      	str	r3, [r7, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	e7fd      	b.n	8005c4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c4e:	f001 f94d 	bl	8006eec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c52:	4b39      	ldr	r3, [pc, #228]	@ (8005d38 <xTaskResumeAll+0x11c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	4a37      	ldr	r2, [pc, #220]	@ (8005d38 <xTaskResumeAll+0x11c>)
 8005c5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5c:	4b36      	ldr	r3, [pc, #216]	@ (8005d38 <xTaskResumeAll+0x11c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d162      	bne.n	8005d2a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c64:	4b35      	ldr	r3, [pc, #212]	@ (8005d3c <xTaskResumeAll+0x120>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d05e      	beq.n	8005d2a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c6c:	e02f      	b.n	8005cce <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6e:	4b34      	ldr	r3, [pc, #208]	@ (8005d40 <xTaskResumeAll+0x124>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3318      	adds	r3, #24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff f80a 	bl	8004c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff f805 	bl	8004c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d44 <xTaskResumeAll+0x128>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d903      	bls.n	8005c9e <xTaskResumeAll+0x82>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d44 <xTaskResumeAll+0x128>)
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a27      	ldr	r2, [pc, #156]	@ (8005d48 <xTaskResumeAll+0x12c>)
 8005cac:	441a      	add	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f7fe ff90 	bl	8004bda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cbe:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <xTaskResumeAll+0x130>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d302      	bcc.n	8005cce <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005cc8:	4b21      	ldr	r3, [pc, #132]	@ (8005d50 <xTaskResumeAll+0x134>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cce:	4b1c      	ldr	r3, [pc, #112]	@ (8005d40 <xTaskResumeAll+0x124>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1cb      	bne.n	8005c6e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cdc:	f000 fb88 	bl	80063f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d54 <xTaskResumeAll+0x138>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d010      	beq.n	8005d0e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cec:	f000 f858 	bl	8005da0 <xTaskIncrementTick>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005cf6:	4b16      	ldr	r3, [pc, #88]	@ (8005d50 <xTaskResumeAll+0x134>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f1      	bne.n	8005cec <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005d08:	4b12      	ldr	r3, [pc, #72]	@ (8005d54 <xTaskResumeAll+0x138>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d0e:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <xTaskResumeAll+0x134>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <xTaskResumeAll+0x13c>)
 8005d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d2a:	f001 f915 	bl	8006f58 <vPortExitCritical>

	return xAlreadyYielded;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	200014fc 	.word	0x200014fc
 8005d3c:	200014d4 	.word	0x200014d4
 8005d40:	20001494 	.word	0x20001494
 8005d44:	200014dc 	.word	0x200014dc
 8005d48:	20001004 	.word	0x20001004
 8005d4c:	20001000 	.word	0x20001000
 8005d50:	200014e8 	.word	0x200014e8
 8005d54:	200014e4 	.word	0x200014e4
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d62:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <xTaskGetTickCount+0x1c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d68:	687b      	ldr	r3, [r7, #4]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	200014d8 	.word	0x200014d8

08005d7c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d82:	f001 f99b 	bl	80070bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005d8a:	4b04      	ldr	r3, [pc, #16]	@ (8005d9c <xTaskGetTickCountFromISR+0x20>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d90:	683b      	ldr	r3, [r7, #0]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200014d8 	.word	0x200014d8

08005da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005daa:	4b50      	ldr	r3, [pc, #320]	@ (8005eec <xTaskIncrementTick+0x14c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f040 808c 	bne.w	8005ecc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db4:	4b4e      	ldr	r3, [pc, #312]	@ (8005ef0 <xTaskIncrementTick+0x150>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8005ef0 <xTaskIncrementTick+0x150>)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d123      	bne.n	8005e10 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8005ef4 <xTaskIncrementTick+0x154>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <xTaskIncrementTick+0x4e>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	b672      	cpsid	i
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	b662      	cpsie	i
 8005de6:	603b      	str	r3, [r7, #0]
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e7fd      	b.n	8005dea <xTaskIncrementTick+0x4a>
 8005dee:	4b41      	ldr	r3, [pc, #260]	@ (8005ef4 <xTaskIncrementTick+0x154>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	4b40      	ldr	r3, [pc, #256]	@ (8005ef8 <xTaskIncrementTick+0x158>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ef4 <xTaskIncrementTick+0x154>)
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ef8 <xTaskIncrementTick+0x158>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4b3e      	ldr	r3, [pc, #248]	@ (8005efc <xTaskIncrementTick+0x15c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a3c      	ldr	r2, [pc, #240]	@ (8005efc <xTaskIncrementTick+0x15c>)
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	f000 faf0 	bl	80063f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e10:	4b3b      	ldr	r3, [pc, #236]	@ (8005f00 <xTaskIncrementTick+0x160>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d349      	bcc.n	8005eae <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1a:	4b36      	ldr	r3, [pc, #216]	@ (8005ef4 <xTaskIncrementTick+0x154>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e24:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <xTaskIncrementTick+0x160>)
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	601a      	str	r2, [r3, #0]
					break;
 8005e2c:	e03f      	b.n	8005eae <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2e:	4b31      	ldr	r3, [pc, #196]	@ (8005ef4 <xTaskIncrementTick+0x154>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d203      	bcs.n	8005e4e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e46:	4a2e      	ldr	r2, [pc, #184]	@ (8005f00 <xTaskIncrementTick+0x160>)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e4c:	e02f      	b.n	8005eae <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe ff1e 	bl	8004c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	3318      	adds	r3, #24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe ff15 	bl	8004c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6e:	4b25      	ldr	r3, [pc, #148]	@ (8005f04 <xTaskIncrementTick+0x164>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d903      	bls.n	8005e7e <xTaskIncrementTick+0xde>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	4a22      	ldr	r2, [pc, #136]	@ (8005f04 <xTaskIncrementTick+0x164>)
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <xTaskIncrementTick+0x168>)
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe fea0 	bl	8004bda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f0c <xTaskIncrementTick+0x16c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3b8      	bcc.n	8005e1a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eac:	e7b5      	b.n	8005e1a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005eae:	4b17      	ldr	r3, [pc, #92]	@ (8005f0c <xTaskIncrementTick+0x16c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb4:	4914      	ldr	r1, [pc, #80]	@ (8005f08 <xTaskIncrementTick+0x168>)
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d907      	bls.n	8005ed6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e004      	b.n	8005ed6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ecc:	4b10      	ldr	r3, [pc, #64]	@ (8005f10 <xTaskIncrementTick+0x170>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8005f10 <xTaskIncrementTick+0x170>)
 8005ed4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f14 <xTaskIncrementTick+0x174>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ee2:	697b      	ldr	r3, [r7, #20]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	200014fc 	.word	0x200014fc
 8005ef0:	200014d8 	.word	0x200014d8
 8005ef4:	2000148c 	.word	0x2000148c
 8005ef8:	20001490 	.word	0x20001490
 8005efc:	200014ec 	.word	0x200014ec
 8005f00:	200014f4 	.word	0x200014f4
 8005f04:	200014dc 	.word	0x200014dc
 8005f08:	20001004 	.word	0x20001004
 8005f0c:	20001000 	.word	0x20001000
 8005f10:	200014e4 	.word	0x200014e4
 8005f14:	200014e8 	.word	0x200014e8

08005f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd0 <vTaskSwitchContext+0xb8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f26:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd4 <vTaskSwitchContext+0xbc>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f2c:	e049      	b.n	8005fc2 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8005f2e:	4b29      	ldr	r3, [pc, #164]	@ (8005fd4 <vTaskSwitchContext+0xbc>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f34:	4b28      	ldr	r3, [pc, #160]	@ (8005fd8 <vTaskSwitchContext+0xc0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e013      	b.n	8005f64 <vTaskSwitchContext+0x4c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10d      	bne.n	8005f5e <vTaskSwitchContext+0x46>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f46:	b672      	cpsid	i
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	b662      	cpsie	i
 8005f56:	607b      	str	r3, [r7, #4]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <vTaskSwitchContext+0x42>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	491d      	ldr	r1, [pc, #116]	@ (8005fdc <vTaskSwitchContext+0xc4>)
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0e1      	beq.n	8005f3c <vTaskSwitchContext+0x24>
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a16      	ldr	r2, [pc, #88]	@ (8005fdc <vTaskSwitchContext+0xc4>)
 8005f84:	4413      	add	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d104      	bne.n	8005fa8 <vTaskSwitchContext+0x90>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe0 <vTaskSwitchContext+0xc8>)
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	4a09      	ldr	r2, [pc, #36]	@ (8005fd8 <vTaskSwitchContext+0xc0>)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fb8:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <vTaskSwitchContext+0xc8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3354      	adds	r3, #84	@ 0x54
 8005fbe:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <vTaskSwitchContext+0xcc>)
 8005fc0:	6013      	str	r3, [r2, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	200014fc 	.word	0x200014fc
 8005fd4:	200014e8 	.word	0x200014e8
 8005fd8:	200014dc 	.word	0x200014dc
 8005fdc:	20001004 	.word	0x20001004
 8005fe0:	20001000 	.word	0x20001000
 8005fe4:	20000010 	.word	0x20000010

08005fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10d      	bne.n	8006014 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	b672      	cpsid	i
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	b662      	cpsie	i
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006014:	4b07      	ldr	r3, [pc, #28]	@ (8006034 <vTaskPlaceOnEventList+0x4c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3318      	adds	r3, #24
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fe fe00 	bl	8004c22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006022:	2101      	movs	r1, #1
 8006024:	6838      	ldr	r0, [r7, #0]
 8006026:	f000 fa95 	bl	8006554 <prvAddCurrentTaskToDelayedList>
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20001000 	.word	0x20001000

08006038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10d      	bne.n	8006066 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604e:	b672      	cpsid	i
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	b662      	cpsie	i
 800605e:	617b      	str	r3, [r7, #20]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006066:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <vTaskPlaceOnEventListRestricted+0x58>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3318      	adds	r3, #24
 800606c:	4619      	mov	r1, r3
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7fe fdb3 	bl	8004bda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800607a:	f04f 33ff 	mov.w	r3, #4294967295
 800607e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68b8      	ldr	r0, [r7, #8]
 8006084:	f000 fa66 	bl	8006554 <prvAddCurrentTaskToDelayedList>
	}
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20001000 	.word	0x20001000

08006094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10d      	bne.n	80060c6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	b672      	cpsid	i
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	b662      	cpsie	i
 80060be:	60fb      	str	r3, [r7, #12]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	3318      	adds	r3, #24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fde2 	bl	8004c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <xTaskRemoveFromEventList+0xb4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11d      	bne.n	8006114 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fdd9 	bl	8004c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e6:	4b19      	ldr	r3, [pc, #100]	@ (800614c <xTaskRemoveFromEventList+0xb8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d903      	bls.n	80060f6 <xTaskRemoveFromEventList+0x62>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	4a16      	ldr	r2, [pc, #88]	@ (800614c <xTaskRemoveFromEventList+0xb8>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a13      	ldr	r2, [pc, #76]	@ (8006150 <xTaskRemoveFromEventList+0xbc>)
 8006104:	441a      	add	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fe fd64 	bl	8004bda <vListInsertEnd>
 8006112:	e005      	b.n	8006120 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3318      	adds	r3, #24
 8006118:	4619      	mov	r1, r3
 800611a:	480e      	ldr	r0, [pc, #56]	@ (8006154 <xTaskRemoveFromEventList+0xc0>)
 800611c:	f7fe fd5d 	bl	8004bda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006124:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <xTaskRemoveFromEventList+0xc4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612a:	429a      	cmp	r2, r3
 800612c:	d905      	bls.n	800613a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800612e:	2301      	movs	r3, #1
 8006130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006132:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <xTaskRemoveFromEventList+0xc8>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	e001      	b.n	800613e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800613e:	697b      	ldr	r3, [r7, #20]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	200014fc 	.word	0x200014fc
 800614c:	200014dc 	.word	0x200014dc
 8006150:	20001004 	.word	0x20001004
 8006154:	20001494 	.word	0x20001494
 8006158:	20001000 	.word	0x20001000
 800615c:	200014e8 	.word	0x200014e8

08006160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006168:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <vTaskInternalSetTimeOutState+0x24>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006170:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <vTaskInternalSetTimeOutState+0x28>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	605a      	str	r2, [r3, #4]
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	200014ec 	.word	0x200014ec
 8006188:	200014d8 	.word	0x200014d8

0800618c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10d      	bne.n	80061b8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a0:	b672      	cpsid	i
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	b662      	cpsie	i
 80061b0:	613b      	str	r3, [r7, #16]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	b672      	cpsid	i
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	b662      	cpsie	i
 80061d2:	60fb      	str	r3, [r7, #12]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80061da:	f000 fe87 	bl	8006eec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061de:	4b1d      	ldr	r3, [pc, #116]	@ (8006254 <xTaskCheckForTimeOut+0xc8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d102      	bne.n	80061fe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e023      	b.n	8006246 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b15      	ldr	r3, [pc, #84]	@ (8006258 <xTaskCheckForTimeOut+0xcc>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d007      	beq.n	800621a <xTaskCheckForTimeOut+0x8e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e015      	b.n	8006246 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	429a      	cmp	r2, r3
 8006222:	d20b      	bcs.n	800623c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff95 	bl	8006160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	e004      	b.n	8006246 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006242:	2301      	movs	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006246:	f000 fe87 	bl	8006f58 <vPortExitCritical>

	return xReturn;
 800624a:	69fb      	ldr	r3, [r7, #28]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200014d8 	.word	0x200014d8
 8006258:	200014ec 	.word	0x200014ec

0800625c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006260:	4b03      	ldr	r3, [pc, #12]	@ (8006270 <vTaskMissedYield+0x14>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]
}
 8006266:	bf00      	nop
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	200014e8 	.word	0x200014e8

08006274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800627c:	f000 f852 	bl	8006324 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <prvIdleTask+0x28>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d9f9      	bls.n	800627c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006288:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <prvIdleTask+0x2c>)
 800628a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006298:	e7f0      	b.n	800627c <prvIdleTask+0x8>
 800629a:	bf00      	nop
 800629c:	20001004 	.word	0x20001004
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062aa:	2300      	movs	r3, #0
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	e00c      	b.n	80062ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4a12      	ldr	r2, [pc, #72]	@ (8006304 <prvInitialiseTaskLists+0x60>)
 80062bc:	4413      	add	r3, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fc5e 	bl	8004b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3301      	adds	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b37      	cmp	r3, #55	@ 0x37
 80062ce:	d9ef      	bls.n	80062b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062d0:	480d      	ldr	r0, [pc, #52]	@ (8006308 <prvInitialiseTaskLists+0x64>)
 80062d2:	f7fe fc55 	bl	8004b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062d6:	480d      	ldr	r0, [pc, #52]	@ (800630c <prvInitialiseTaskLists+0x68>)
 80062d8:	f7fe fc52 	bl	8004b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062dc:	480c      	ldr	r0, [pc, #48]	@ (8006310 <prvInitialiseTaskLists+0x6c>)
 80062de:	f7fe fc4f 	bl	8004b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062e2:	480c      	ldr	r0, [pc, #48]	@ (8006314 <prvInitialiseTaskLists+0x70>)
 80062e4:	f7fe fc4c 	bl	8004b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062e8:	480b      	ldr	r0, [pc, #44]	@ (8006318 <prvInitialiseTaskLists+0x74>)
 80062ea:	f7fe fc49 	bl	8004b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ee:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <prvInitialiseTaskLists+0x78>)
 80062f0:	4a05      	ldr	r2, [pc, #20]	@ (8006308 <prvInitialiseTaskLists+0x64>)
 80062f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006320 <prvInitialiseTaskLists+0x7c>)
 80062f6:	4a05      	ldr	r2, [pc, #20]	@ (800630c <prvInitialiseTaskLists+0x68>)
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20001004 	.word	0x20001004
 8006308:	20001464 	.word	0x20001464
 800630c:	20001478 	.word	0x20001478
 8006310:	20001494 	.word	0x20001494
 8006314:	200014a8 	.word	0x200014a8
 8006318:	200014c0 	.word	0x200014c0
 800631c:	2000148c 	.word	0x2000148c
 8006320:	20001490 	.word	0x20001490

08006324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800632a:	e019      	b.n	8006360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800632c:	f000 fdde 	bl	8006eec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006330:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <prvCheckTasksWaitingTermination+0x50>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe fca9 	bl	8004c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <prvCheckTasksWaitingTermination+0x54>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	4a0b      	ldr	r2, [pc, #44]	@ (8006378 <prvCheckTasksWaitingTermination+0x54>)
 800634a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800634c:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <prvCheckTasksWaitingTermination+0x58>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3b01      	subs	r3, #1
 8006352:	4a0a      	ldr	r2, [pc, #40]	@ (800637c <prvCheckTasksWaitingTermination+0x58>)
 8006354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006356:	f000 fdff 	bl	8006f58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f810 	bl	8006380 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006360:	4b06      	ldr	r3, [pc, #24]	@ (800637c <prvCheckTasksWaitingTermination+0x58>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e1      	bne.n	800632c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200014a8 	.word	0x200014a8
 8006378:	200014d4 	.word	0x200014d4
 800637c:	200014bc 	.word	0x200014bc

08006380 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3354      	adds	r3, #84	@ 0x54
 800638c:	4618      	mov	r0, r3
 800638e:	f001 f901 	bl	8007594 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 ff9f 	bl	80072e4 <vPortFree>
				vPortFree( pxTCB );
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 ff9c 	bl	80072e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ac:	e01b      	b.n	80063e6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d103      	bne.n	80063c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 ff93 	bl	80072e4 <vPortFree>
	}
 80063be:	e012      	b.n	80063e6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d00d      	beq.n	80063e6 <prvDeleteTCB+0x66>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ce:	b672      	cpsid	i
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	b662      	cpsie	i
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <prvDeleteTCB+0x62>
	}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006428 <prvResetNextTaskUnblockTime+0x38>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d104      	bne.n	800640a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006400:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <prvResetNextTaskUnblockTime+0x3c>)
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006408:	e008      	b.n	800641c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640a:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <prvResetNextTaskUnblockTime+0x38>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a04      	ldr	r2, [pc, #16]	@ (800642c <prvResetNextTaskUnblockTime+0x3c>)
 800641a:	6013      	str	r3, [r2, #0]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	2000148c 	.word	0x2000148c
 800642c:	200014f4 	.word	0x200014f4

08006430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <xTaskGetSchedulerState+0x34>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800643e:	2301      	movs	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	e008      	b.n	8006456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006444:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <xTaskGetSchedulerState+0x38>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800644c:	2302      	movs	r3, #2
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	e001      	b.n	8006456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006456:	687b      	ldr	r3, [r7, #4]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	200014e0 	.word	0x200014e0
 8006468:	200014fc 	.word	0x200014fc

0800646c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d05c      	beq.n	800653c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006482:	4b31      	ldr	r3, [pc, #196]	@ (8006548 <xTaskPriorityDisinherit+0xdc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d00d      	beq.n	80064a8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	b672      	cpsid	i
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	b662      	cpsie	i
 80064a0:	60fb      	str	r3, [r7, #12]
}
 80064a2:	bf00      	nop
 80064a4:	bf00      	nop
 80064a6:	e7fd      	b.n	80064a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10d      	bne.n	80064cc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	b672      	cpsid	i
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	b662      	cpsie	i
 80064c4:	60bb      	str	r3, [r7, #8]
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d0:	1e5a      	subs	r2, r3, #1
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d02c      	beq.n	800653c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d128      	bne.n	800653c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	3304      	adds	r3, #4
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fbd0 	bl	8004c94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650c:	4b0f      	ldr	r3, [pc, #60]	@ (800654c <xTaskPriorityDisinherit+0xe0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d903      	bls.n	800651c <xTaskPriorityDisinherit+0xb0>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006518:	4a0c      	ldr	r2, [pc, #48]	@ (800654c <xTaskPriorityDisinherit+0xe0>)
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4a09      	ldr	r2, [pc, #36]	@ (8006550 <xTaskPriorityDisinherit+0xe4>)
 800652a:	441a      	add	r2, r3
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7fe fb51 	bl	8004bda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800653c:	697b      	ldr	r3, [r7, #20]
	}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20001000 	.word	0x20001000
 800654c:	200014dc 	.word	0x200014dc
 8006550:	20001004 	.word	0x20001004

08006554 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800655e:	4b21      	ldr	r3, [pc, #132]	@ (80065e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006564:	4b20      	ldr	r3, [pc, #128]	@ (80065e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3304      	adds	r3, #4
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe fb92 	bl	8004c94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d10a      	bne.n	800658e <prvAddCurrentTaskToDelayedList+0x3a>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800657e:	4b1a      	ldr	r3, [pc, #104]	@ (80065e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4819      	ldr	r0, [pc, #100]	@ (80065ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006588:	f7fe fb27 	bl	8004bda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800658c:	e026      	b.n	80065dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006596:	4b14      	ldr	r3, [pc, #80]	@ (80065e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d209      	bcs.n	80065ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a6:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b0f      	ldr	r3, [pc, #60]	@ (80065e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f7fe fb35 	bl	8004c22 <vListInsert>
}
 80065b8:	e010      	b.n	80065dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ba:	4b0e      	ldr	r3, [pc, #56]	@ (80065f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7fe fb2b 	bl	8004c22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065cc:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d202      	bcs.n	80065dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065d6:	4a08      	ldr	r2, [pc, #32]	@ (80065f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6013      	str	r3, [r2, #0]
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200014d8 	.word	0x200014d8
 80065e8:	20001000 	.word	0x20001000
 80065ec:	200014c0 	.word	0x200014c0
 80065f0:	20001490 	.word	0x20001490
 80065f4:	2000148c 	.word	0x2000148c
 80065f8:	200014f4 	.word	0x200014f4

080065fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	@ 0x28
 8006600:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006606:	f000 fb21 	bl	8006c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800660a:	4b1e      	ldr	r3, [pc, #120]	@ (8006684 <xTimerCreateTimerTask+0x88>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d021      	beq.n	8006656 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800661a:	1d3a      	adds	r2, r7, #4
 800661c:	f107 0108 	add.w	r1, r7, #8
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fa91 	bl	8004b4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	9202      	str	r2, [sp, #8]
 8006632:	9301      	str	r3, [sp, #4]
 8006634:	2302      	movs	r3, #2
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	460a      	mov	r2, r1
 800663c:	4912      	ldr	r1, [pc, #72]	@ (8006688 <xTimerCreateTimerTask+0x8c>)
 800663e:	4813      	ldr	r0, [pc, #76]	@ (800668c <xTimerCreateTimerTask+0x90>)
 8006640:	f7ff f86c 	bl	800571c <xTaskCreateStatic>
 8006644:	4603      	mov	r3, r0
 8006646:	4a12      	ldr	r2, [pc, #72]	@ (8006690 <xTimerCreateTimerTask+0x94>)
 8006648:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800664a:	4b11      	ldr	r3, [pc, #68]	@ (8006690 <xTimerCreateTimerTask+0x94>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006652:	2301      	movs	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10d      	bne.n	8006678 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	b672      	cpsid	i
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	b662      	cpsie	i
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006678:	697b      	ldr	r3, [r7, #20]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20001530 	.word	0x20001530
 8006688:	08007f7c 	.word	0x08007f7c
 800668c:	080067d5 	.word	0x080067d5
 8006690:	20001534 	.word	0x20001534

08006694 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	@ 0x28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <xTimerGenericCommand+0x34>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	b672      	cpsid	i
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	b662      	cpsie	i
 80066c0:	623b      	str	r3, [r7, #32]
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066c8:	4b19      	ldr	r3, [pc, #100]	@ (8006730 <xTimerGenericCommand+0x9c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d02a      	beq.n	8006726 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b05      	cmp	r3, #5
 80066e0:	dc18      	bgt.n	8006714 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066e2:	f7ff fea5 	bl	8006430 <xTaskGetSchedulerState>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d109      	bne.n	8006700 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066ec:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <xTimerGenericCommand+0x9c>)
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	f107 0110 	add.w	r1, r7, #16
 80066f4:	2300      	movs	r3, #0
 80066f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f8:	f7fe fc0c 	bl	8004f14 <xQueueGenericSend>
 80066fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80066fe:	e012      	b.n	8006726 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006700:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <xTimerGenericCommand+0x9c>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	f107 0110 	add.w	r1, r7, #16
 8006708:	2300      	movs	r3, #0
 800670a:	2200      	movs	r2, #0
 800670c:	f7fe fc02 	bl	8004f14 <xQueueGenericSend>
 8006710:	6278      	str	r0, [r7, #36]	@ 0x24
 8006712:	e008      	b.n	8006726 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <xTimerGenericCommand+0x9c>)
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	f107 0110 	add.w	r1, r7, #16
 800671c:	2300      	movs	r3, #0
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	f7fe fd02 	bl	8005128 <xQueueGenericSendFromISR>
 8006724:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	@ 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20001530 	.word	0x20001530

08006734 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800673e:	4b24      	ldr	r3, [pc, #144]	@ (80067d0 <prvProcessExpiredTimer+0x9c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe faa1 	bl	8004c94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d025      	beq.n	80067ac <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	18d1      	adds	r1, r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	6978      	ldr	r0, [r7, #20]
 800676e:	f000 f8d7 	bl	8006920 <prvInsertTimerInActiveList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006778:	2300      	movs	r3, #0
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	2300      	movs	r3, #0
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	2100      	movs	r1, #0
 8006782:	6978      	ldr	r0, [r7, #20]
 8006784:	f7ff ff86 	bl	8006694 <xTimerGenericCommand>
 8006788:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d116      	bne.n	80067be <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	b672      	cpsid	i
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	b662      	cpsie	i
 80067a4:	60fb      	str	r3, [r7, #12]
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	6978      	ldr	r0, [r7, #20]
 80067c4:	4798      	blx	r3
}
 80067c6:	bf00      	nop
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20001528 	.word	0x20001528

080067d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067dc:	f107 0308 	add.w	r3, r7, #8
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 f859 	bl	8006898 <prvGetNextExpireTime>
 80067e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4619      	mov	r1, r3
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f805 	bl	80067fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067f2:	f000 f8d7 	bl	80069a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067f6:	bf00      	nop
 80067f8:	e7f0      	b.n	80067dc <prvTimerTask+0x8>
	...

080067fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006806:	f7ff f9fb 	bl	8005c00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800680a:	f107 0308 	add.w	r3, r7, #8
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f866 	bl	80068e0 <prvSampleTimeNow>
 8006814:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d130      	bne.n	800687e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <prvProcessTimerOrBlockTask+0x3c>
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d806      	bhi.n	8006838 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800682a:	f7ff f9f7 	bl	8005c1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff ff7f 	bl	8006734 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006836:	e024      	b.n	8006882 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800683e:	4b13      	ldr	r3, [pc, #76]	@ (800688c <prvProcessTimerOrBlockTask+0x90>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <prvProcessTimerOrBlockTask+0x50>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <prvProcessTimerOrBlockTask+0x52>
 800684c:	2300      	movs	r3, #0
 800684e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006850:	4b0f      	ldr	r3, [pc, #60]	@ (8006890 <prvProcessTimerOrBlockTask+0x94>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	f7fe ff29 	bl	80056b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006862:	f7ff f9db 	bl	8005c1c <xTaskResumeAll>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800686c:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <prvProcessTimerOrBlockTask+0x98>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
}
 800687c:	e001      	b.n	8006882 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800687e:	f7ff f9cd 	bl	8005c1c <xTaskResumeAll>
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	2000152c 	.word	0x2000152c
 8006890:	20001530 	.word	0x20001530
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068a0:	4b0e      	ldr	r3, [pc, #56]	@ (80068dc <prvGetNextExpireTime+0x44>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <prvGetNextExpireTime+0x16>
 80068aa:	2201      	movs	r2, #1
 80068ac:	e000      	b.n	80068b0 <prvGetNextExpireTime+0x18>
 80068ae:	2200      	movs	r2, #0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068bc:	4b07      	ldr	r3, [pc, #28]	@ (80068dc <prvGetNextExpireTime+0x44>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e001      	b.n	80068cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20001528 	.word	0x20001528

080068e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068e8:	f7ff fa38 	bl	8005d5c <xTaskGetTickCount>
 80068ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <prvSampleTimeNow+0x3c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d205      	bcs.n	8006904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068f8:	f000 f940 	bl	8006b7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e002      	b.n	800690a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800690a:	4a04      	ldr	r2, [pc, #16]	@ (800691c <prvSampleTimeNow+0x3c>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006910:	68fb      	ldr	r3, [r7, #12]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20001538 	.word	0x20001538

08006920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	d812      	bhi.n	800696c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	429a      	cmp	r2, r3
 8006952:	d302      	bcc.n	800695a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e01b      	b.n	8006992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800695a:	4b10      	ldr	r3, [pc, #64]	@ (800699c <prvInsertTimerInActiveList+0x7c>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f7fe f95c 	bl	8004c22 <vListInsert>
 800696a:	e012      	b.n	8006992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d206      	bcs.n	8006982 <prvInsertTimerInActiveList+0x62>
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e007      	b.n	8006992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006982:	4b07      	ldr	r3, [pc, #28]	@ (80069a0 <prvInsertTimerInActiveList+0x80>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fe f948 	bl	8004c22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006992:	697b      	ldr	r3, [r7, #20]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	2000152c 	.word	0x2000152c
 80069a0:	20001528 	.word	0x20001528

080069a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	@ 0x38
 80069a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069aa:	e0d4      	b.n	8006b56 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da1b      	bge.n	80069ea <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	3304      	adds	r3, #4
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10d      	bne.n	80069da <prvProcessReceivedCommands+0x36>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	b672      	cpsid	i
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	b662      	cpsie	i
 80069d2:	61fb      	str	r3, [r7, #28]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e0:	6850      	ldr	r0, [r2, #4]
 80069e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e4:	6892      	ldr	r2, [r2, #8]
 80069e6:	4611      	mov	r1, r2
 80069e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f2c0 80b2 	blt.w	8006b56 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a00:	3304      	adds	r3, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe f946 	bl	8004c94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a08:	463b      	mov	r3, r7
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff ff68 	bl	80068e0 <prvSampleTimeNow>
 8006a10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b09      	cmp	r3, #9
 8006a16:	f200 809b 	bhi.w	8006b50 <prvProcessReceivedCommands+0x1ac>
 8006a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <prvProcessReceivedCommands+0x7c>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a49 	.word	0x08006a49
 8006a2c:	08006ac3 	.word	0x08006ac3
 8006a30:	08006ad7 	.word	0x08006ad7
 8006a34:	08006b27 	.word	0x08006b27
 8006a38:	08006a49 	.word	0x08006a49
 8006a3c:	08006a49 	.word	0x08006a49
 8006a40:	08006ac3 	.word	0x08006ac3
 8006a44:	08006ad7 	.word	0x08006ad7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	18d1      	adds	r1, r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a68:	f7ff ff5a 	bl	8006920 <prvInsertTimerInActiveList>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d070      	beq.n	8006b54 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d065      	beq.n	8006b54 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	441a      	add	r2, r3
 8006a90:	2300      	movs	r3, #0
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a9a:	f7ff fdfb 	bl	8006694 <xTimerGenericCommand>
 8006a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d156      	bne.n	8006b54 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aaa:	b672      	cpsid	i
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	b662      	cpsie	i
 8006aba:	61bb      	str	r3, [r7, #24]
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	e7fd      	b.n	8006abe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ad4:	e03f      	b.n	8006b56 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10d      	bne.n	8006b12 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	b672      	cpsid	i
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	b662      	cpsie	i
 8006b0a:	617b      	str	r3, [r7, #20]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	18d1      	adds	r1, r2, r3
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b20:	f7ff fefe 	bl	8006920 <prvInsertTimerInActiveList>
					break;
 8006b24:	e017      	b.n	8006b56 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b36:	f000 fbd5 	bl	80072e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b3a:	e00c      	b.n	8006b56 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b4e:	e002      	b.n	8006b56 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <prvProcessReceivedCommands+0x1b2>
					break;
 8006b54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b56:	4b08      	ldr	r3, [pc, #32]	@ (8006b78 <prvProcessReceivedCommands+0x1d4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	1d39      	adds	r1, r7, #4
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fb86 	bl	8005270 <xQueueReceive>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f47f af20 	bne.w	80069ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	3730      	adds	r7, #48	@ 0x30
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20001530 	.word	0x20001530

08006b7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b82:	e04b      	b.n	8006c1c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b84:	4b2f      	ldr	r3, [pc, #188]	@ (8006c44 <prvSwitchTimerLists+0xc8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c44 <prvSwitchTimerLists+0xc8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe f879 	bl	8004c94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d031      	beq.n	8006c1c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d90e      	bls.n	8006be8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8006c44 <prvSwitchTimerLists+0xc8>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f7fe f81e 	bl	8004c22 <vListInsert>
 8006be6:	e019      	b.n	8006c1c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006be8:	2300      	movs	r3, #0
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2300      	movs	r3, #0
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fd4e 	bl	8006694 <xTimerGenericCommand>
 8006bf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	b672      	cpsid	i
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	b662      	cpsie	i
 8006c14:	603b      	str	r3, [r7, #0]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <prvSwitchTimerLists+0xc8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ae      	bne.n	8006b84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c26:	4b07      	ldr	r3, [pc, #28]	@ (8006c44 <prvSwitchTimerLists+0xc8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <prvSwitchTimerLists+0xcc>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a04      	ldr	r2, [pc, #16]	@ (8006c44 <prvSwitchTimerLists+0xc8>)
 8006c32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c34:	4a04      	ldr	r2, [pc, #16]	@ (8006c48 <prvSwitchTimerLists+0xcc>)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6013      	str	r3, [r2, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20001528 	.word	0x20001528
 8006c48:	2000152c 	.word	0x2000152c

08006c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c52:	f000 f94b 	bl	8006eec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d120      	bne.n	8006ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c5e:	4814      	ldr	r0, [pc, #80]	@ (8006cb0 <prvCheckForValidListAndQueue+0x64>)
 8006c60:	f7fd ff8e 	bl	8004b80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c64:	4813      	ldr	r0, [pc, #76]	@ (8006cb4 <prvCheckForValidListAndQueue+0x68>)
 8006c66:	f7fd ff8b 	bl	8004b80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c6a:	4b13      	ldr	r3, [pc, #76]	@ (8006cb8 <prvCheckForValidListAndQueue+0x6c>)
 8006c6c:	4a10      	ldr	r2, [pc, #64]	@ (8006cb0 <prvCheckForValidListAndQueue+0x64>)
 8006c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c70:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <prvCheckForValidListAndQueue+0x70>)
 8006c72:	4a10      	ldr	r2, [pc, #64]	@ (8006cb4 <prvCheckForValidListAndQueue+0x68>)
 8006c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <prvCheckForValidListAndQueue+0x74>)
 8006c7c:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <prvCheckForValidListAndQueue+0x78>)
 8006c7e:	2110      	movs	r1, #16
 8006c80:	200a      	movs	r0, #10
 8006c82:	f7fe f89d 	bl	8004dc0 <xQueueGenericCreateStatic>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4a08      	ldr	r2, [pc, #32]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c94:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	490b      	ldr	r1, [pc, #44]	@ (8006cc8 <prvCheckForValidListAndQueue+0x7c>)
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fce0 	bl	8005660 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca0:	f000 f95a 	bl	8006f58 <vPortExitCritical>
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20001530 	.word	0x20001530
 8006cb0:	20001500 	.word	0x20001500
 8006cb4:	20001514 	.word	0x20001514
 8006cb8:	20001528 	.word	0x20001528
 8006cbc:	2000152c 	.word	0x2000152c
 8006cc0:	200015dc 	.word	0x200015dc
 8006cc4:	2000153c 	.word	0x2000153c
 8006cc8:	08007f84 	.word	0x08007f84

08006ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3b04      	subs	r3, #4
 8006cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0201 	bic.w	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d30 <pxPortInitialiseStack+0x64>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3b14      	subs	r3, #20
 8006d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f06f 0202 	mvn.w	r2, #2
 8006d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3b20      	subs	r3, #32
 8006d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d22:	68fb      	ldr	r3, [r7, #12]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	08006d35 	.word	0x08006d35

08006d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d3e:	4b15      	ldr	r3, [pc, #84]	@ (8006d94 <prvTaskExitError+0x60>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d00d      	beq.n	8006d64 <prvTaskExitError+0x30>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	b672      	cpsid	i
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	b662      	cpsie	i
 8006d5c:	60fb      	str	r3, [r7, #12]
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	e7fd      	b.n	8006d60 <prvTaskExitError+0x2c>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	b672      	cpsid	i
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	b662      	cpsie	i
 8006d78:	60bb      	str	r3, [r7, #8]
}
 8006d7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d7c:	bf00      	nop
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0fc      	beq.n	8006d7e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
	...

08006da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	@ (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	4770      	bx	lr
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	20001000 	.word	0x20001000
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006dc8:	4808      	ldr	r0, [pc, #32]	@ (8006dec <prvPortStartFirstTask+0x24>)
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f380 8808 	msr	MSP, r0
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8814 	msr	CONTROL, r0
 8006dda:	b662      	cpsie	i
 8006ddc:	b661      	cpsie	f
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	df00      	svc	0
 8006de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dea:	bf00      	nop
 8006dec:	e000ed08 	.word	0xe000ed08

08006df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006df6:	4b37      	ldr	r3, [pc, #220]	@ (8006ed4 <xPortStartScheduler+0xe4>)
 8006df8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	22ff      	movs	r2, #255	@ 0xff
 8006e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed8 <xPortStartScheduler+0xe8>)
 8006e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e20:	2207      	movs	r2, #7
 8006e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e24:	e009      	b.n	8006e3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e26:	4b2d      	ldr	r3, [pc, #180]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e42:	2b80      	cmp	r3, #128	@ 0x80
 8006e44:	d0ef      	beq.n	8006e26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e46:	4b25      	ldr	r3, [pc, #148]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1c3 0307 	rsb	r3, r3, #7
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d00d      	beq.n	8006e6e <xPortStartScheduler+0x7e>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e56:	b672      	cpsid	i
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	b662      	cpsie	i
 8006e66:	60bb      	str	r3, [r7, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	4a19      	ldr	r2, [pc, #100]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e78:	4b18      	ldr	r3, [pc, #96]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e80:	4a16      	ldr	r2, [pc, #88]	@ (8006edc <xPortStartScheduler+0xec>)
 8006e82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e8c:	4b14      	ldr	r3, [pc, #80]	@ (8006ee0 <xPortStartScheduler+0xf0>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a13      	ldr	r2, [pc, #76]	@ (8006ee0 <xPortStartScheduler+0xf0>)
 8006e92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e98:	4b11      	ldr	r3, [pc, #68]	@ (8006ee0 <xPortStartScheduler+0xf0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a10      	ldr	r2, [pc, #64]	@ (8006ee0 <xPortStartScheduler+0xf0>)
 8006e9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ea4:	f000 f8dc 	bl	8007060 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <xPortStartScheduler+0xf4>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006eae:	f000 f8fb 	bl	80070a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <xPortStartScheduler+0xf8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee8 <xPortStartScheduler+0xf8>)
 8006eb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ebe:	f7ff ff83 	bl	8006dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ec2:	f7ff f829 	bl	8005f18 <vTaskSwitchContext>
	prvTaskExitError();
 8006ec6:	f7ff ff35 	bl	8006d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	e000e400 	.word	0xe000e400
 8006ed8:	2000162c 	.word	0x2000162c
 8006edc:	20001630 	.word	0x20001630
 8006ee0:	e000ed20 	.word	0xe000ed20
 8006ee4:	2000000c 	.word	0x2000000c
 8006ee8:	e000ef34 	.word	0xe000ef34

08006eec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	b672      	cpsid	i
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	b662      	cpsie	i
 8006f06:	607b      	str	r3, [r7, #4]
}
 8006f08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f0a:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <vPortEnterCritical+0x64>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	4a0f      	ldr	r2, [pc, #60]	@ (8006f50 <vPortEnterCritical+0x64>)
 8006f12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f14:	4b0e      	ldr	r3, [pc, #56]	@ (8006f50 <vPortEnterCritical+0x64>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d112      	bne.n	8006f42 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <vPortEnterCritical+0x68>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00d      	beq.n	8006f42 <vPortEnterCritical+0x56>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2a:	b672      	cpsid	i
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	b662      	cpsie	i
 8006f3a:	603b      	str	r3, [r7, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	e7fd      	b.n	8006f3e <vPortEnterCritical+0x52>
	}
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	2000000c 	.word	0x2000000c
 8006f54:	e000ed04 	.word	0xe000ed04

08006f58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f5e:	4b13      	ldr	r3, [pc, #76]	@ (8006fac <vPortExitCritical+0x54>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10d      	bne.n	8006f82 <vPortExitCritical+0x2a>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	b672      	cpsid	i
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	b662      	cpsie	i
 8006f7a:	607b      	str	r3, [r7, #4]
}
 8006f7c:	bf00      	nop
 8006f7e:	bf00      	nop
 8006f80:	e7fd      	b.n	8006f7e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <vPortExitCritical+0x54>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	4a08      	ldr	r2, [pc, #32]	@ (8006fac <vPortExitCritical+0x54>)
 8006f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f8c:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <vPortExitCritical+0x54>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d105      	bne.n	8006fa0 <vPortExitCritical+0x48>
 8006f94:	2300      	movs	r3, #0
 8006f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	f383 8811 	msr	BASEPRI, r3
}
 8006f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	2000000c 	.word	0x2000000c

08006fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fb0:	f3ef 8009 	mrs	r0, PSP
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	4b15      	ldr	r3, [pc, #84]	@ (8007010 <pxCurrentTCBConst>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f01e 0f10 	tst.w	lr, #16
 8006fc0:	bf08      	it	eq
 8006fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	6010      	str	r0, [r2, #0]
 8006fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006fd4:	b672      	cpsid	i
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	b662      	cpsie	i
 8006fe4:	f7fe ff98 	bl	8005f18 <vTaskSwitchContext>
 8006fe8:	f04f 0000 	mov.w	r0, #0
 8006fec:	f380 8811 	msr	BASEPRI, r0
 8006ff0:	bc09      	pop	{r0, r3}
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f01e 0f10 	tst.w	lr, #16
 8006ffe:	bf08      	it	eq
 8007000:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007004:	f380 8809 	msr	PSP, r0
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop

08007010 <pxCurrentTCBConst>:
 8007010:	20001000 	.word	0x20001000
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	b672      	cpsid	i
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	b662      	cpsie	i
 8007032:	607b      	str	r3, [r7, #4]
}
 8007034:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007036:	f7fe feb3 	bl	8005da0 <xTaskIncrementTick>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007040:	4b06      	ldr	r3, [pc, #24]	@ (800705c <SysTick_Handler+0x44>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	2300      	movs	r3, #0
 800704a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f383 8811 	msr	BASEPRI, r3
}
 8007052:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	e000ed04 	.word	0xe000ed04

08007060 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007064:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <vPortSetupTimerInterrupt+0x34>)
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800706a:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <vPortSetupTimerInterrupt+0x38>)
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007070:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <vPortSetupTimerInterrupt+0x3c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a0a      	ldr	r2, [pc, #40]	@ (80070a0 <vPortSetupTimerInterrupt+0x40>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	099b      	lsrs	r3, r3, #6
 800707c:	4a09      	ldr	r2, [pc, #36]	@ (80070a4 <vPortSetupTimerInterrupt+0x44>)
 800707e:	3b01      	subs	r3, #1
 8007080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007082:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <vPortSetupTimerInterrupt+0x34>)
 8007084:	2207      	movs	r2, #7
 8007086:	601a      	str	r2, [r3, #0]
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	e000e010 	.word	0xe000e010
 8007098:	e000e018 	.word	0xe000e018
 800709c:	20000000 	.word	0x20000000
 80070a0:	10624dd3 	.word	0x10624dd3
 80070a4:	e000e014 	.word	0xe000e014

080070a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070b8 <vPortEnableVFP+0x10>
 80070ac:	6801      	ldr	r1, [r0, #0]
 80070ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070b2:	6001      	str	r1, [r0, #0]
 80070b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070b6:	bf00      	nop
 80070b8:	e000ed88 	.word	0xe000ed88

080070bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070c2:	f3ef 8305 	mrs	r3, IPSR
 80070c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d917      	bls.n	80070fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007138 <vPortValidateInterruptPriority+0x7c>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070d8:	4b18      	ldr	r3, [pc, #96]	@ (800713c <vPortValidateInterruptPriority+0x80>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	7afa      	ldrb	r2, [r7, #11]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d20d      	bcs.n	80070fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	b672      	cpsid	i
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	b662      	cpsie	i
 80070f6:	607b      	str	r3, [r7, #4]
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	e7fd      	b.n	80070fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070fe:	4b10      	ldr	r3, [pc, #64]	@ (8007140 <vPortValidateInterruptPriority+0x84>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007106:	4b0f      	ldr	r3, [pc, #60]	@ (8007144 <vPortValidateInterruptPriority+0x88>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d90d      	bls.n	800712a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	b672      	cpsid	i
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	b662      	cpsie	i
 8007122:	603b      	str	r3, [r7, #0]
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <vPortValidateInterruptPriority+0x6a>
	}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	e000e3f0 	.word	0xe000e3f0
 800713c:	2000162c 	.word	0x2000162c
 8007140:	e000ed0c 	.word	0xe000ed0c
 8007144:	20001630 	.word	0x20001630

08007148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	@ 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007154:	f7fe fd54 	bl	8005c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007158:	4b5d      	ldr	r3, [pc, #372]	@ (80072d0 <pvPortMalloc+0x188>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007160:	f000 f920 	bl	80073a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007164:	4b5b      	ldr	r3, [pc, #364]	@ (80072d4 <pvPortMalloc+0x18c>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 8094 	bne.w	800729a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d020      	beq.n	80071ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007178:	2208      	movs	r2, #8
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f023 0307 	bic.w	r3, r3, #7
 8007190:	3308      	adds	r3, #8
 8007192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <pvPortMalloc+0x72>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	b672      	cpsid	i
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	b662      	cpsie	i
 80071b2:	617b      	str	r3, [r7, #20]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d06c      	beq.n	800729a <pvPortMalloc+0x152>
 80071c0:	4b45      	ldr	r3, [pc, #276]	@ (80072d8 <pvPortMalloc+0x190>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d867      	bhi.n	800729a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071ca:	4b44      	ldr	r3, [pc, #272]	@ (80072dc <pvPortMalloc+0x194>)
 80071cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071ce:	4b43      	ldr	r3, [pc, #268]	@ (80072dc <pvPortMalloc+0x194>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071d4:	e004      	b.n	80071e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d903      	bls.n	80071f2 <pvPortMalloc+0xaa>
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f1      	bne.n	80071d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071f2:	4b37      	ldr	r3, [pc, #220]	@ (80072d0 <pvPortMalloc+0x188>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d04e      	beq.n	800729a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2208      	movs	r2, #8
 8007202:	4413      	add	r3, r2
 8007204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	2308      	movs	r3, #8
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	429a      	cmp	r2, r3
 800721c:	d922      	bls.n	8007264 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800721e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4413      	add	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00d      	beq.n	800724c <pvPortMalloc+0x104>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	b672      	cpsid	i
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	b662      	cpsie	i
 8007244:	613b      	str	r3, [r7, #16]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800725e:	69b8      	ldr	r0, [r7, #24]
 8007260:	f000 f902 	bl	8007468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007264:	4b1c      	ldr	r3, [pc, #112]	@ (80072d8 <pvPortMalloc+0x190>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	4a1a      	ldr	r2, [pc, #104]	@ (80072d8 <pvPortMalloc+0x190>)
 8007270:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007272:	4b19      	ldr	r3, [pc, #100]	@ (80072d8 <pvPortMalloc+0x190>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4b1a      	ldr	r3, [pc, #104]	@ (80072e0 <pvPortMalloc+0x198>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d203      	bcs.n	8007286 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800727e:	4b16      	ldr	r3, [pc, #88]	@ (80072d8 <pvPortMalloc+0x190>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a17      	ldr	r2, [pc, #92]	@ (80072e0 <pvPortMalloc+0x198>)
 8007284:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <pvPortMalloc+0x18c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	431a      	orrs	r2, r3
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800729a:	f7fe fcbf 	bl	8005c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00d      	beq.n	80072c4 <pvPortMalloc+0x17c>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ac:	b672      	cpsid	i
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	b662      	cpsie	i
 80072bc:	60fb      	str	r3, [r7, #12]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <pvPortMalloc+0x178>
	return pvReturn;
 80072c4:	69fb      	ldr	r3, [r7, #28]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3728      	adds	r7, #40	@ 0x28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	2000523c 	.word	0x2000523c
 80072d4:	20005248 	.word	0x20005248
 80072d8:	20005240 	.word	0x20005240
 80072dc:	20005234 	.word	0x20005234
 80072e0:	20005244 	.word	0x20005244

080072e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d04e      	beq.n	8007394 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072f6:	2308      	movs	r3, #8
 80072f8:	425b      	negs	r3, r3
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	4b24      	ldr	r3, [pc, #144]	@ (800739c <vPortFree+0xb8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10d      	bne.n	800732e <vPortFree+0x4a>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007316:	b672      	cpsid	i
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	b662      	cpsie	i
 8007326:	60fb      	str	r3, [r7, #12]
}
 8007328:	bf00      	nop
 800732a:	bf00      	nop
 800732c:	e7fd      	b.n	800732a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <vPortFree+0x6e>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	b672      	cpsid	i
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	b662      	cpsie	i
 800734a:	60bb      	str	r3, [r7, #8]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	4b11      	ldr	r3, [pc, #68]	@ (800739c <vPortFree+0xb8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4013      	ands	r3, r2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d019      	beq.n	8007394 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d115      	bne.n	8007394 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	4b0b      	ldr	r3, [pc, #44]	@ (800739c <vPortFree+0xb8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	43db      	mvns	r3, r3
 8007372:	401a      	ands	r2, r3
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007378:	f7fe fc42 	bl	8005c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <vPortFree+0xbc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4413      	add	r3, r2
 8007386:	4a06      	ldr	r2, [pc, #24]	@ (80073a0 <vPortFree+0xbc>)
 8007388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800738a:	6938      	ldr	r0, [r7, #16]
 800738c:	f000 f86c 	bl	8007468 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007390:	f7fe fc44 	bl	8005c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007394:	bf00      	nop
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20005248 	.word	0x20005248
 80073a0:	20005240 	.word	0x20005240

080073a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80073ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073b0:	4b27      	ldr	r3, [pc, #156]	@ (8007450 <prvHeapInit+0xac>)
 80073b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00c      	beq.n	80073d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3307      	adds	r3, #7
 80073c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007450 <prvHeapInit+0xac>)
 80073d4:	4413      	add	r3, r2
 80073d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007454 <prvHeapInit+0xb0>)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007454 <prvHeapInit+0xb0>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	4413      	add	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073f0:	2208      	movs	r2, #8
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0307 	bic.w	r3, r3, #7
 80073fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a15      	ldr	r2, [pc, #84]	@ (8007458 <prvHeapInit+0xb4>)
 8007404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007406:	4b14      	ldr	r3, [pc, #80]	@ (8007458 <prvHeapInit+0xb4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2200      	movs	r2, #0
 800740c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800740e:	4b12      	ldr	r3, [pc, #72]	@ (8007458 <prvHeapInit+0xb4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007424:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <prvHeapInit+0xb4>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	4a0a      	ldr	r2, [pc, #40]	@ (800745c <prvHeapInit+0xb8>)
 8007432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4a09      	ldr	r2, [pc, #36]	@ (8007460 <prvHeapInit+0xbc>)
 800743a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800743c:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <prvHeapInit+0xc0>)
 800743e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	20001634 	.word	0x20001634
 8007454:	20005234 	.word	0x20005234
 8007458:	2000523c 	.word	0x2000523c
 800745c:	20005244 	.word	0x20005244
 8007460:	20005240 	.word	0x20005240
 8007464:	20005248 	.word	0x20005248

08007468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007470:	4b28      	ldr	r3, [pc, #160]	@ (8007514 <prvInsertBlockIntoFreeList+0xac>)
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e002      	b.n	800747c <prvInsertBlockIntoFreeList+0x14>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	429a      	cmp	r2, r3
 8007484:	d8f7      	bhi.n	8007476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	4413      	add	r3, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d108      	bne.n	80074aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	441a      	add	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	441a      	add	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d118      	bne.n	80074f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4b15      	ldr	r3, [pc, #84]	@ (8007518 <prvInsertBlockIntoFreeList+0xb0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d00d      	beq.n	80074e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	441a      	add	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e008      	b.n	80074f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007518 <prvInsertBlockIntoFreeList+0xb0>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	e003      	b.n	80074f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d002      	beq.n	8007506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20005234 	.word	0x20005234
 8007518:	2000523c 	.word	0x2000523c

0800751c <sniprintf>:
 800751c:	b40c      	push	{r2, r3}
 800751e:	b530      	push	{r4, r5, lr}
 8007520:	4b17      	ldr	r3, [pc, #92]	@ (8007580 <sniprintf+0x64>)
 8007522:	1e0c      	subs	r4, r1, #0
 8007524:	681d      	ldr	r5, [r3, #0]
 8007526:	b09d      	sub	sp, #116	@ 0x74
 8007528:	da08      	bge.n	800753c <sniprintf+0x20>
 800752a:	238b      	movs	r3, #139	@ 0x8b
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	f04f 30ff 	mov.w	r0, #4294967295
 8007532:	b01d      	add	sp, #116	@ 0x74
 8007534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007538:	b002      	add	sp, #8
 800753a:	4770      	bx	lr
 800753c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007544:	bf14      	ite	ne
 8007546:	f104 33ff 	addne.w	r3, r4, #4294967295
 800754a:	4623      	moveq	r3, r4
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	9006      	str	r0, [sp, #24]
 8007558:	f8ad 3016 	strh.w	r3, [sp, #22]
 800755c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800755e:	ab21      	add	r3, sp, #132	@ 0x84
 8007560:	a902      	add	r1, sp, #8
 8007562:	4628      	mov	r0, r5
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	f000 f9f9 	bl	800795c <_svfiprintf_r>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	bfbc      	itt	lt
 800756e:	238b      	movlt	r3, #139	@ 0x8b
 8007570:	602b      	strlt	r3, [r5, #0]
 8007572:	2c00      	cmp	r4, #0
 8007574:	d0dd      	beq.n	8007532 <sniprintf+0x16>
 8007576:	9b02      	ldr	r3, [sp, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	e7d9      	b.n	8007532 <sniprintf+0x16>
 800757e:	bf00      	nop
 8007580:	20000010 	.word	0x20000010

08007584 <memset>:
 8007584:	4402      	add	r2, r0
 8007586:	4603      	mov	r3, r0
 8007588:	4293      	cmp	r3, r2
 800758a:	d100      	bne.n	800758e <memset+0xa>
 800758c:	4770      	bx	lr
 800758e:	f803 1b01 	strb.w	r1, [r3], #1
 8007592:	e7f9      	b.n	8007588 <memset+0x4>

08007594 <_reclaim_reent>:
 8007594:	4b29      	ldr	r3, [pc, #164]	@ (800763c <_reclaim_reent+0xa8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4283      	cmp	r3, r0
 800759a:	b570      	push	{r4, r5, r6, lr}
 800759c:	4604      	mov	r4, r0
 800759e:	d04b      	beq.n	8007638 <_reclaim_reent+0xa4>
 80075a0:	69c3      	ldr	r3, [r0, #28]
 80075a2:	b1ab      	cbz	r3, 80075d0 <_reclaim_reent+0x3c>
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	b16b      	cbz	r3, 80075c4 <_reclaim_reent+0x30>
 80075a8:	2500      	movs	r5, #0
 80075aa:	69e3      	ldr	r3, [r4, #28]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	5959      	ldr	r1, [r3, r5]
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d13b      	bne.n	800762c <_reclaim_reent+0x98>
 80075b4:	3504      	adds	r5, #4
 80075b6:	2d80      	cmp	r5, #128	@ 0x80
 80075b8:	d1f7      	bne.n	80075aa <_reclaim_reent+0x16>
 80075ba:	69e3      	ldr	r3, [r4, #28]
 80075bc:	4620      	mov	r0, r4
 80075be:	68d9      	ldr	r1, [r3, #12]
 80075c0:	f000 f878 	bl	80076b4 <_free_r>
 80075c4:	69e3      	ldr	r3, [r4, #28]
 80075c6:	6819      	ldr	r1, [r3, #0]
 80075c8:	b111      	cbz	r1, 80075d0 <_reclaim_reent+0x3c>
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 f872 	bl	80076b4 <_free_r>
 80075d0:	6961      	ldr	r1, [r4, #20]
 80075d2:	b111      	cbz	r1, 80075da <_reclaim_reent+0x46>
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 f86d 	bl	80076b4 <_free_r>
 80075da:	69e1      	ldr	r1, [r4, #28]
 80075dc:	b111      	cbz	r1, 80075e4 <_reclaim_reent+0x50>
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f868 	bl	80076b4 <_free_r>
 80075e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80075e6:	b111      	cbz	r1, 80075ee <_reclaim_reent+0x5a>
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 f863 	bl	80076b4 <_free_r>
 80075ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075f0:	b111      	cbz	r1, 80075f8 <_reclaim_reent+0x64>
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 f85e 	bl	80076b4 <_free_r>
 80075f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80075fa:	b111      	cbz	r1, 8007602 <_reclaim_reent+0x6e>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 f859 	bl	80076b4 <_free_r>
 8007602:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007604:	b111      	cbz	r1, 800760c <_reclaim_reent+0x78>
 8007606:	4620      	mov	r0, r4
 8007608:	f000 f854 	bl	80076b4 <_free_r>
 800760c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800760e:	b111      	cbz	r1, 8007616 <_reclaim_reent+0x82>
 8007610:	4620      	mov	r0, r4
 8007612:	f000 f84f 	bl	80076b4 <_free_r>
 8007616:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007618:	b111      	cbz	r1, 8007620 <_reclaim_reent+0x8c>
 800761a:	4620      	mov	r0, r4
 800761c:	f000 f84a 	bl	80076b4 <_free_r>
 8007620:	6a23      	ldr	r3, [r4, #32]
 8007622:	b14b      	cbz	r3, 8007638 <_reclaim_reent+0xa4>
 8007624:	4620      	mov	r0, r4
 8007626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800762a:	4718      	bx	r3
 800762c:	680e      	ldr	r6, [r1, #0]
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f840 	bl	80076b4 <_free_r>
 8007634:	4631      	mov	r1, r6
 8007636:	e7bb      	b.n	80075b0 <_reclaim_reent+0x1c>
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	bf00      	nop
 800763c:	20000010 	.word	0x20000010

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	@ (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000010 	.word	0x20000010

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4d0d      	ldr	r5, [pc, #52]	@ (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	@ (8007688 <__libc_init_array+0x3c>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2600      	movs	r6, #0
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4d0b      	ldr	r5, [pc, #44]	@ (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	@ (8007690 <__libc_init_array+0x44>)
 8007660:	f000 fc66 	bl	8007f30 <_init>
 8007664:	1b64      	subs	r4, r4, r5
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2600      	movs	r6, #0
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f855 3b04 	ldr.w	r3, [r5], #4
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f855 3b04 	ldr.w	r3, [r5], #4
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	08008004 	.word	0x08008004
 8007688:	08008004 	.word	0x08008004
 800768c:	08008004 	.word	0x08008004
 8007690:	08008008 	.word	0x08008008

08007694 <__retarget_lock_acquire_recursive>:
 8007694:	4770      	bx	lr

08007696 <__retarget_lock_release_recursive>:
 8007696:	4770      	bx	lr

08007698 <memcpy>:
 8007698:	440a      	add	r2, r1
 800769a:	4291      	cmp	r1, r2
 800769c:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a0:	d100      	bne.n	80076a4 <memcpy+0xc>
 80076a2:	4770      	bx	lr
 80076a4:	b510      	push	{r4, lr}
 80076a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ae:	4291      	cmp	r1, r2
 80076b0:	d1f9      	bne.n	80076a6 <memcpy+0xe>
 80076b2:	bd10      	pop	{r4, pc}

080076b4 <_free_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4605      	mov	r5, r0
 80076b8:	2900      	cmp	r1, #0
 80076ba:	d041      	beq.n	8007740 <_free_r+0x8c>
 80076bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c0:	1f0c      	subs	r4, r1, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bfb8      	it	lt
 80076c6:	18e4      	addlt	r4, r4, r3
 80076c8:	f000 f8e0 	bl	800788c <__malloc_lock>
 80076cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007744 <_free_r+0x90>)
 80076ce:	6813      	ldr	r3, [r2, #0]
 80076d0:	b933      	cbnz	r3, 80076e0 <_free_r+0x2c>
 80076d2:	6063      	str	r3, [r4, #4]
 80076d4:	6014      	str	r4, [r2, #0]
 80076d6:	4628      	mov	r0, r5
 80076d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076dc:	f000 b8dc 	b.w	8007898 <__malloc_unlock>
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d908      	bls.n	80076f6 <_free_r+0x42>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	1821      	adds	r1, r4, r0
 80076e8:	428b      	cmp	r3, r1
 80076ea:	bf01      	itttt	eq
 80076ec:	6819      	ldreq	r1, [r3, #0]
 80076ee:	685b      	ldreq	r3, [r3, #4]
 80076f0:	1809      	addeq	r1, r1, r0
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	e7ed      	b.n	80076d2 <_free_r+0x1e>
 80076f6:	461a      	mov	r2, r3
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	b10b      	cbz	r3, 8007700 <_free_r+0x4c>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d9fa      	bls.n	80076f6 <_free_r+0x42>
 8007700:	6811      	ldr	r1, [r2, #0]
 8007702:	1850      	adds	r0, r2, r1
 8007704:	42a0      	cmp	r0, r4
 8007706:	d10b      	bne.n	8007720 <_free_r+0x6c>
 8007708:	6820      	ldr	r0, [r4, #0]
 800770a:	4401      	add	r1, r0
 800770c:	1850      	adds	r0, r2, r1
 800770e:	4283      	cmp	r3, r0
 8007710:	6011      	str	r1, [r2, #0]
 8007712:	d1e0      	bne.n	80076d6 <_free_r+0x22>
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	6053      	str	r3, [r2, #4]
 800771a:	4408      	add	r0, r1
 800771c:	6010      	str	r0, [r2, #0]
 800771e:	e7da      	b.n	80076d6 <_free_r+0x22>
 8007720:	d902      	bls.n	8007728 <_free_r+0x74>
 8007722:	230c      	movs	r3, #12
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	e7d6      	b.n	80076d6 <_free_r+0x22>
 8007728:	6820      	ldr	r0, [r4, #0]
 800772a:	1821      	adds	r1, r4, r0
 800772c:	428b      	cmp	r3, r1
 800772e:	bf04      	itt	eq
 8007730:	6819      	ldreq	r1, [r3, #0]
 8007732:	685b      	ldreq	r3, [r3, #4]
 8007734:	6063      	str	r3, [r4, #4]
 8007736:	bf04      	itt	eq
 8007738:	1809      	addeq	r1, r1, r0
 800773a:	6021      	streq	r1, [r4, #0]
 800773c:	6054      	str	r4, [r2, #4]
 800773e:	e7ca      	b.n	80076d6 <_free_r+0x22>
 8007740:	bd38      	pop	{r3, r4, r5, pc}
 8007742:	bf00      	nop
 8007744:	20005390 	.word	0x20005390

08007748 <sbrk_aligned>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	4e0f      	ldr	r6, [pc, #60]	@ (8007788 <sbrk_aligned+0x40>)
 800774c:	460c      	mov	r4, r1
 800774e:	6831      	ldr	r1, [r6, #0]
 8007750:	4605      	mov	r5, r0
 8007752:	b911      	cbnz	r1, 800775a <sbrk_aligned+0x12>
 8007754:	f000 fba6 	bl	8007ea4 <_sbrk_r>
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f000 fba1 	bl	8007ea4 <_sbrk_r>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d103      	bne.n	800776e <sbrk_aligned+0x26>
 8007766:	f04f 34ff 	mov.w	r4, #4294967295
 800776a:	4620      	mov	r0, r4
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	1cc4      	adds	r4, r0, #3
 8007770:	f024 0403 	bic.w	r4, r4, #3
 8007774:	42a0      	cmp	r0, r4
 8007776:	d0f8      	beq.n	800776a <sbrk_aligned+0x22>
 8007778:	1a21      	subs	r1, r4, r0
 800777a:	4628      	mov	r0, r5
 800777c:	f000 fb92 	bl	8007ea4 <_sbrk_r>
 8007780:	3001      	adds	r0, #1
 8007782:	d1f2      	bne.n	800776a <sbrk_aligned+0x22>
 8007784:	e7ef      	b.n	8007766 <sbrk_aligned+0x1e>
 8007786:	bf00      	nop
 8007788:	2000538c 	.word	0x2000538c

0800778c <_malloc_r>:
 800778c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007790:	1ccd      	adds	r5, r1, #3
 8007792:	f025 0503 	bic.w	r5, r5, #3
 8007796:	3508      	adds	r5, #8
 8007798:	2d0c      	cmp	r5, #12
 800779a:	bf38      	it	cc
 800779c:	250c      	movcc	r5, #12
 800779e:	2d00      	cmp	r5, #0
 80077a0:	4606      	mov	r6, r0
 80077a2:	db01      	blt.n	80077a8 <_malloc_r+0x1c>
 80077a4:	42a9      	cmp	r1, r5
 80077a6:	d904      	bls.n	80077b2 <_malloc_r+0x26>
 80077a8:	230c      	movs	r3, #12
 80077aa:	6033      	str	r3, [r6, #0]
 80077ac:	2000      	movs	r0, #0
 80077ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007888 <_malloc_r+0xfc>
 80077b6:	f000 f869 	bl	800788c <__malloc_lock>
 80077ba:	f8d8 3000 	ldr.w	r3, [r8]
 80077be:	461c      	mov	r4, r3
 80077c0:	bb44      	cbnz	r4, 8007814 <_malloc_r+0x88>
 80077c2:	4629      	mov	r1, r5
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff ffbf 	bl	8007748 <sbrk_aligned>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	4604      	mov	r4, r0
 80077ce:	d158      	bne.n	8007882 <_malloc_r+0xf6>
 80077d0:	f8d8 4000 	ldr.w	r4, [r8]
 80077d4:	4627      	mov	r7, r4
 80077d6:	2f00      	cmp	r7, #0
 80077d8:	d143      	bne.n	8007862 <_malloc_r+0xd6>
 80077da:	2c00      	cmp	r4, #0
 80077dc:	d04b      	beq.n	8007876 <_malloc_r+0xea>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	4639      	mov	r1, r7
 80077e2:	4630      	mov	r0, r6
 80077e4:	eb04 0903 	add.w	r9, r4, r3
 80077e8:	f000 fb5c 	bl	8007ea4 <_sbrk_r>
 80077ec:	4581      	cmp	r9, r0
 80077ee:	d142      	bne.n	8007876 <_malloc_r+0xea>
 80077f0:	6821      	ldr	r1, [r4, #0]
 80077f2:	1a6d      	subs	r5, r5, r1
 80077f4:	4629      	mov	r1, r5
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7ff ffa6 	bl	8007748 <sbrk_aligned>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d03a      	beq.n	8007876 <_malloc_r+0xea>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	442b      	add	r3, r5
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	f8d8 3000 	ldr.w	r3, [r8]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	bb62      	cbnz	r2, 8007868 <_malloc_r+0xdc>
 800780e:	f8c8 7000 	str.w	r7, [r8]
 8007812:	e00f      	b.n	8007834 <_malloc_r+0xa8>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	1b52      	subs	r2, r2, r5
 8007818:	d420      	bmi.n	800785c <_malloc_r+0xd0>
 800781a:	2a0b      	cmp	r2, #11
 800781c:	d917      	bls.n	800784e <_malloc_r+0xc2>
 800781e:	1961      	adds	r1, r4, r5
 8007820:	42a3      	cmp	r3, r4
 8007822:	6025      	str	r5, [r4, #0]
 8007824:	bf18      	it	ne
 8007826:	6059      	strne	r1, [r3, #4]
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	bf08      	it	eq
 800782c:	f8c8 1000 	streq.w	r1, [r8]
 8007830:	5162      	str	r2, [r4, r5]
 8007832:	604b      	str	r3, [r1, #4]
 8007834:	4630      	mov	r0, r6
 8007836:	f000 f82f 	bl	8007898 <__malloc_unlock>
 800783a:	f104 000b 	add.w	r0, r4, #11
 800783e:	1d23      	adds	r3, r4, #4
 8007840:	f020 0007 	bic.w	r0, r0, #7
 8007844:	1ac2      	subs	r2, r0, r3
 8007846:	bf1c      	itt	ne
 8007848:	1a1b      	subne	r3, r3, r0
 800784a:	50a3      	strne	r3, [r4, r2]
 800784c:	e7af      	b.n	80077ae <_malloc_r+0x22>
 800784e:	6862      	ldr	r2, [r4, #4]
 8007850:	42a3      	cmp	r3, r4
 8007852:	bf0c      	ite	eq
 8007854:	f8c8 2000 	streq.w	r2, [r8]
 8007858:	605a      	strne	r2, [r3, #4]
 800785a:	e7eb      	b.n	8007834 <_malloc_r+0xa8>
 800785c:	4623      	mov	r3, r4
 800785e:	6864      	ldr	r4, [r4, #4]
 8007860:	e7ae      	b.n	80077c0 <_malloc_r+0x34>
 8007862:	463c      	mov	r4, r7
 8007864:	687f      	ldr	r7, [r7, #4]
 8007866:	e7b6      	b.n	80077d6 <_malloc_r+0x4a>
 8007868:	461a      	mov	r2, r3
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	42a3      	cmp	r3, r4
 800786e:	d1fb      	bne.n	8007868 <_malloc_r+0xdc>
 8007870:	2300      	movs	r3, #0
 8007872:	6053      	str	r3, [r2, #4]
 8007874:	e7de      	b.n	8007834 <_malloc_r+0xa8>
 8007876:	230c      	movs	r3, #12
 8007878:	6033      	str	r3, [r6, #0]
 800787a:	4630      	mov	r0, r6
 800787c:	f000 f80c 	bl	8007898 <__malloc_unlock>
 8007880:	e794      	b.n	80077ac <_malloc_r+0x20>
 8007882:	6005      	str	r5, [r0, #0]
 8007884:	e7d6      	b.n	8007834 <_malloc_r+0xa8>
 8007886:	bf00      	nop
 8007888:	20005390 	.word	0x20005390

0800788c <__malloc_lock>:
 800788c:	4801      	ldr	r0, [pc, #4]	@ (8007894 <__malloc_lock+0x8>)
 800788e:	f7ff bf01 	b.w	8007694 <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	20005388 	.word	0x20005388

08007898 <__malloc_unlock>:
 8007898:	4801      	ldr	r0, [pc, #4]	@ (80078a0 <__malloc_unlock+0x8>)
 800789a:	f7ff befc 	b.w	8007696 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	20005388 	.word	0x20005388

080078a4 <__ssputs_r>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	688e      	ldr	r6, [r1, #8]
 80078aa:	461f      	mov	r7, r3
 80078ac:	42be      	cmp	r6, r7
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	4682      	mov	sl, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	d82d      	bhi.n	8007914 <__ssputs_r+0x70>
 80078b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078c0:	d026      	beq.n	8007910 <__ssputs_r+0x6c>
 80078c2:	6965      	ldr	r5, [r4, #20]
 80078c4:	6909      	ldr	r1, [r1, #16]
 80078c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078ca:	eba3 0901 	sub.w	r9, r3, r1
 80078ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d2:	1c7b      	adds	r3, r7, #1
 80078d4:	444b      	add	r3, r9
 80078d6:	106d      	asrs	r5, r5, #1
 80078d8:	429d      	cmp	r5, r3
 80078da:	bf38      	it	cc
 80078dc:	461d      	movcc	r5, r3
 80078de:	0553      	lsls	r3, r2, #21
 80078e0:	d527      	bpl.n	8007932 <__ssputs_r+0x8e>
 80078e2:	4629      	mov	r1, r5
 80078e4:	f7ff ff52 	bl	800778c <_malloc_r>
 80078e8:	4606      	mov	r6, r0
 80078ea:	b360      	cbz	r0, 8007946 <__ssputs_r+0xa2>
 80078ec:	6921      	ldr	r1, [r4, #16]
 80078ee:	464a      	mov	r2, r9
 80078f0:	f7ff fed2 	bl	8007698 <memcpy>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	6126      	str	r6, [r4, #16]
 8007902:	6165      	str	r5, [r4, #20]
 8007904:	444e      	add	r6, r9
 8007906:	eba5 0509 	sub.w	r5, r5, r9
 800790a:	6026      	str	r6, [r4, #0]
 800790c:	60a5      	str	r5, [r4, #8]
 800790e:	463e      	mov	r6, r7
 8007910:	42be      	cmp	r6, r7
 8007912:	d900      	bls.n	8007916 <__ssputs_r+0x72>
 8007914:	463e      	mov	r6, r7
 8007916:	6820      	ldr	r0, [r4, #0]
 8007918:	4632      	mov	r2, r6
 800791a:	4641      	mov	r1, r8
 800791c:	f000 faa8 	bl	8007e70 <memmove>
 8007920:	68a3      	ldr	r3, [r4, #8]
 8007922:	1b9b      	subs	r3, r3, r6
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	4433      	add	r3, r6
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	2000      	movs	r0, #0
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	462a      	mov	r2, r5
 8007934:	f000 fac6 	bl	8007ec4 <_realloc_r>
 8007938:	4606      	mov	r6, r0
 800793a:	2800      	cmp	r0, #0
 800793c:	d1e0      	bne.n	8007900 <__ssputs_r+0x5c>
 800793e:	6921      	ldr	r1, [r4, #16]
 8007940:	4650      	mov	r0, sl
 8007942:	f7ff feb7 	bl	80076b4 <_free_r>
 8007946:	230c      	movs	r3, #12
 8007948:	f8ca 3000 	str.w	r3, [sl]
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	e7e9      	b.n	800792e <__ssputs_r+0x8a>
	...

0800795c <_svfiprintf_r>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	4698      	mov	r8, r3
 8007962:	898b      	ldrh	r3, [r1, #12]
 8007964:	061b      	lsls	r3, r3, #24
 8007966:	b09d      	sub	sp, #116	@ 0x74
 8007968:	4607      	mov	r7, r0
 800796a:	460d      	mov	r5, r1
 800796c:	4614      	mov	r4, r2
 800796e:	d510      	bpl.n	8007992 <_svfiprintf_r+0x36>
 8007970:	690b      	ldr	r3, [r1, #16]
 8007972:	b973      	cbnz	r3, 8007992 <_svfiprintf_r+0x36>
 8007974:	2140      	movs	r1, #64	@ 0x40
 8007976:	f7ff ff09 	bl	800778c <_malloc_r>
 800797a:	6028      	str	r0, [r5, #0]
 800797c:	6128      	str	r0, [r5, #16]
 800797e:	b930      	cbnz	r0, 800798e <_svfiprintf_r+0x32>
 8007980:	230c      	movs	r3, #12
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	b01d      	add	sp, #116	@ 0x74
 800798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798e:	2340      	movs	r3, #64	@ 0x40
 8007990:	616b      	str	r3, [r5, #20]
 8007992:	2300      	movs	r3, #0
 8007994:	9309      	str	r3, [sp, #36]	@ 0x24
 8007996:	2320      	movs	r3, #32
 8007998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800799c:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a0:	2330      	movs	r3, #48	@ 0x30
 80079a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b40 <_svfiprintf_r+0x1e4>
 80079a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079aa:	f04f 0901 	mov.w	r9, #1
 80079ae:	4623      	mov	r3, r4
 80079b0:	469a      	mov	sl, r3
 80079b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b6:	b10a      	cbz	r2, 80079bc <_svfiprintf_r+0x60>
 80079b8:	2a25      	cmp	r2, #37	@ 0x25
 80079ba:	d1f9      	bne.n	80079b0 <_svfiprintf_r+0x54>
 80079bc:	ebba 0b04 	subs.w	fp, sl, r4
 80079c0:	d00b      	beq.n	80079da <_svfiprintf_r+0x7e>
 80079c2:	465b      	mov	r3, fp
 80079c4:	4622      	mov	r2, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ff6b 	bl	80078a4 <__ssputs_r>
 80079ce:	3001      	adds	r0, #1
 80079d0:	f000 80a7 	beq.w	8007b22 <_svfiprintf_r+0x1c6>
 80079d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079d6:	445a      	add	r2, fp
 80079d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80079da:	f89a 3000 	ldrb.w	r3, [sl]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 809f 	beq.w	8007b22 <_svfiprintf_r+0x1c6>
 80079e4:	2300      	movs	r3, #0
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ee:	f10a 0a01 	add.w	sl, sl, #1
 80079f2:	9304      	str	r3, [sp, #16]
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80079fc:	4654      	mov	r4, sl
 80079fe:	2205      	movs	r2, #5
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	484e      	ldr	r0, [pc, #312]	@ (8007b40 <_svfiprintf_r+0x1e4>)
 8007a06:	f7f8 fc23 	bl	8000250 <memchr>
 8007a0a:	9a04      	ldr	r2, [sp, #16]
 8007a0c:	b9d8      	cbnz	r0, 8007a46 <_svfiprintf_r+0xea>
 8007a0e:	06d0      	lsls	r0, r2, #27
 8007a10:	bf44      	itt	mi
 8007a12:	2320      	movmi	r3, #32
 8007a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a18:	0711      	lsls	r1, r2, #28
 8007a1a:	bf44      	itt	mi
 8007a1c:	232b      	movmi	r3, #43	@ 0x2b
 8007a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a22:	f89a 3000 	ldrb.w	r3, [sl]
 8007a26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a28:	d015      	beq.n	8007a56 <_svfiprintf_r+0xfa>
 8007a2a:	9a07      	ldr	r2, [sp, #28]
 8007a2c:	4654      	mov	r4, sl
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f04f 0c0a 	mov.w	ip, #10
 8007a34:	4621      	mov	r1, r4
 8007a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a3a:	3b30      	subs	r3, #48	@ 0x30
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d94b      	bls.n	8007ad8 <_svfiprintf_r+0x17c>
 8007a40:	b1b0      	cbz	r0, 8007a70 <_svfiprintf_r+0x114>
 8007a42:	9207      	str	r2, [sp, #28]
 8007a44:	e014      	b.n	8007a70 <_svfiprintf_r+0x114>
 8007a46:	eba0 0308 	sub.w	r3, r0, r8
 8007a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	46a2      	mov	sl, r4
 8007a54:	e7d2      	b.n	80079fc <_svfiprintf_r+0xa0>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	1d19      	adds	r1, r3, #4
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	9103      	str	r1, [sp, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bfbb      	ittet	lt
 8007a62:	425b      	neglt	r3, r3
 8007a64:	f042 0202 	orrlt.w	r2, r2, #2
 8007a68:	9307      	strge	r3, [sp, #28]
 8007a6a:	9307      	strlt	r3, [sp, #28]
 8007a6c:	bfb8      	it	lt
 8007a6e:	9204      	strlt	r2, [sp, #16]
 8007a70:	7823      	ldrb	r3, [r4, #0]
 8007a72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a74:	d10a      	bne.n	8007a8c <_svfiprintf_r+0x130>
 8007a76:	7863      	ldrb	r3, [r4, #1]
 8007a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a7a:	d132      	bne.n	8007ae2 <_svfiprintf_r+0x186>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	9203      	str	r2, [sp, #12]
 8007a84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a88:	3402      	adds	r4, #2
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b50 <_svfiprintf_r+0x1f4>
 8007a90:	7821      	ldrb	r1, [r4, #0]
 8007a92:	2203      	movs	r2, #3
 8007a94:	4650      	mov	r0, sl
 8007a96:	f7f8 fbdb 	bl	8000250 <memchr>
 8007a9a:	b138      	cbz	r0, 8007aac <_svfiprintf_r+0x150>
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	eba0 000a 	sub.w	r0, r0, sl
 8007aa2:	2240      	movs	r2, #64	@ 0x40
 8007aa4:	4082      	lsls	r2, r0
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab0:	4824      	ldr	r0, [pc, #144]	@ (8007b44 <_svfiprintf_r+0x1e8>)
 8007ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ab6:	2206      	movs	r2, #6
 8007ab8:	f7f8 fbca 	bl	8000250 <memchr>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d036      	beq.n	8007b2e <_svfiprintf_r+0x1d2>
 8007ac0:	4b21      	ldr	r3, [pc, #132]	@ (8007b48 <_svfiprintf_r+0x1ec>)
 8007ac2:	bb1b      	cbnz	r3, 8007b0c <_svfiprintf_r+0x1b0>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	3307      	adds	r3, #7
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	3308      	adds	r3, #8
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad2:	4433      	add	r3, r6
 8007ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad6:	e76a      	b.n	80079ae <_svfiprintf_r+0x52>
 8007ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007adc:	460c      	mov	r4, r1
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7a8      	b.n	8007a34 <_svfiprintf_r+0xd8>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	3401      	adds	r4, #1
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0c0a 	mov.w	ip, #10
 8007aee:	4620      	mov	r0, r4
 8007af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af4:	3a30      	subs	r2, #48	@ 0x30
 8007af6:	2a09      	cmp	r2, #9
 8007af8:	d903      	bls.n	8007b02 <_svfiprintf_r+0x1a6>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0c6      	beq.n	8007a8c <_svfiprintf_r+0x130>
 8007afe:	9105      	str	r1, [sp, #20]
 8007b00:	e7c4      	b.n	8007a8c <_svfiprintf_r+0x130>
 8007b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b06:	4604      	mov	r4, r0
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7f0      	b.n	8007aee <_svfiprintf_r+0x192>
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	462a      	mov	r2, r5
 8007b12:	4b0e      	ldr	r3, [pc, #56]	@ (8007b4c <_svfiprintf_r+0x1f0>)
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	4638      	mov	r0, r7
 8007b18:	f3af 8000 	nop.w
 8007b1c:	1c42      	adds	r2, r0, #1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	d1d6      	bne.n	8007ad0 <_svfiprintf_r+0x174>
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	065b      	lsls	r3, r3, #25
 8007b26:	f53f af2d 	bmi.w	8007984 <_svfiprintf_r+0x28>
 8007b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b2c:	e72c      	b.n	8007988 <_svfiprintf_r+0x2c>
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462a      	mov	r2, r5
 8007b34:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <_svfiprintf_r+0x1f0>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f000 f879 	bl	8007c30 <_printf_i>
 8007b3e:	e7ed      	b.n	8007b1c <_svfiprintf_r+0x1c0>
 8007b40:	08007fc8 	.word	0x08007fc8
 8007b44:	08007fd2 	.word	0x08007fd2
 8007b48:	00000000 	.word	0x00000000
 8007b4c:	080078a5 	.word	0x080078a5
 8007b50:	08007fce 	.word	0x08007fce

08007b54 <_printf_common>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	4616      	mov	r6, r2
 8007b5a:	4698      	mov	r8, r3
 8007b5c:	688a      	ldr	r2, [r1, #8]
 8007b5e:	690b      	ldr	r3, [r1, #16]
 8007b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	bfb8      	it	lt
 8007b68:	4613      	movlt	r3, r2
 8007b6a:	6033      	str	r3, [r6, #0]
 8007b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b70:	4607      	mov	r7, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b10a      	cbz	r2, 8007b7a <_printf_common+0x26>
 8007b76:	3301      	adds	r3, #1
 8007b78:	6033      	str	r3, [r6, #0]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	0699      	lsls	r1, r3, #26
 8007b7e:	bf42      	ittt	mi
 8007b80:	6833      	ldrmi	r3, [r6, #0]
 8007b82:	3302      	addmi	r3, #2
 8007b84:	6033      	strmi	r3, [r6, #0]
 8007b86:	6825      	ldr	r5, [r4, #0]
 8007b88:	f015 0506 	ands.w	r5, r5, #6
 8007b8c:	d106      	bne.n	8007b9c <_printf_common+0x48>
 8007b8e:	f104 0a19 	add.w	sl, r4, #25
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	6832      	ldr	r2, [r6, #0]
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	dc26      	bgt.n	8007bea <_printf_common+0x96>
 8007b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	3b00      	subs	r3, #0
 8007ba4:	bf18      	it	ne
 8007ba6:	2301      	movne	r3, #1
 8007ba8:	0692      	lsls	r2, r2, #26
 8007baa:	d42b      	bmi.n	8007c04 <_printf_common+0xb0>
 8007bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	47c8      	blx	r9
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d01e      	beq.n	8007bf8 <_printf_common+0xa4>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	6922      	ldr	r2, [r4, #16]
 8007bbe:	f003 0306 	and.w	r3, r3, #6
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	bf02      	ittt	eq
 8007bc6:	68e5      	ldreq	r5, [r4, #12]
 8007bc8:	6833      	ldreq	r3, [r6, #0]
 8007bca:	1aed      	subeq	r5, r5, r3
 8007bcc:	68a3      	ldr	r3, [r4, #8]
 8007bce:	bf0c      	ite	eq
 8007bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd4:	2500      	movne	r5, #0
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	bfc4      	itt	gt
 8007bda:	1a9b      	subgt	r3, r3, r2
 8007bdc:	18ed      	addgt	r5, r5, r3
 8007bde:	2600      	movs	r6, #0
 8007be0:	341a      	adds	r4, #26
 8007be2:	42b5      	cmp	r5, r6
 8007be4:	d11a      	bne.n	8007c1c <_printf_common+0xc8>
 8007be6:	2000      	movs	r0, #0
 8007be8:	e008      	b.n	8007bfc <_printf_common+0xa8>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4652      	mov	r2, sl
 8007bee:	4641      	mov	r1, r8
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	47c8      	blx	r9
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d103      	bne.n	8007c00 <_printf_common+0xac>
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c00:	3501      	adds	r5, #1
 8007c02:	e7c6      	b.n	8007b92 <_printf_common+0x3e>
 8007c04:	18e1      	adds	r1, r4, r3
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	2030      	movs	r0, #48	@ 0x30
 8007c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c0e:	4422      	add	r2, r4
 8007c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c18:	3302      	adds	r3, #2
 8007c1a:	e7c7      	b.n	8007bac <_printf_common+0x58>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4641      	mov	r1, r8
 8007c22:	4638      	mov	r0, r7
 8007c24:	47c8      	blx	r9
 8007c26:	3001      	adds	r0, #1
 8007c28:	d0e6      	beq.n	8007bf8 <_printf_common+0xa4>
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	e7d9      	b.n	8007be2 <_printf_common+0x8e>
	...

08007c30 <_printf_i>:
 8007c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	7e0f      	ldrb	r7, [r1, #24]
 8007c36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c38:	2f78      	cmp	r7, #120	@ 0x78
 8007c3a:	4691      	mov	r9, r2
 8007c3c:	4680      	mov	r8, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	469a      	mov	sl, r3
 8007c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c46:	d807      	bhi.n	8007c58 <_printf_i+0x28>
 8007c48:	2f62      	cmp	r7, #98	@ 0x62
 8007c4a:	d80a      	bhi.n	8007c62 <_printf_i+0x32>
 8007c4c:	2f00      	cmp	r7, #0
 8007c4e:	f000 80d2 	beq.w	8007df6 <_printf_i+0x1c6>
 8007c52:	2f58      	cmp	r7, #88	@ 0x58
 8007c54:	f000 80b9 	beq.w	8007dca <_printf_i+0x19a>
 8007c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c60:	e03a      	b.n	8007cd8 <_printf_i+0xa8>
 8007c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c66:	2b15      	cmp	r3, #21
 8007c68:	d8f6      	bhi.n	8007c58 <_printf_i+0x28>
 8007c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8007c70 <_printf_i+0x40>)
 8007c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c70:	08007cc9 	.word	0x08007cc9
 8007c74:	08007cdd 	.word	0x08007cdd
 8007c78:	08007c59 	.word	0x08007c59
 8007c7c:	08007c59 	.word	0x08007c59
 8007c80:	08007c59 	.word	0x08007c59
 8007c84:	08007c59 	.word	0x08007c59
 8007c88:	08007cdd 	.word	0x08007cdd
 8007c8c:	08007c59 	.word	0x08007c59
 8007c90:	08007c59 	.word	0x08007c59
 8007c94:	08007c59 	.word	0x08007c59
 8007c98:	08007c59 	.word	0x08007c59
 8007c9c:	08007ddd 	.word	0x08007ddd
 8007ca0:	08007d07 	.word	0x08007d07
 8007ca4:	08007d97 	.word	0x08007d97
 8007ca8:	08007c59 	.word	0x08007c59
 8007cac:	08007c59 	.word	0x08007c59
 8007cb0:	08007dff 	.word	0x08007dff
 8007cb4:	08007c59 	.word	0x08007c59
 8007cb8:	08007d07 	.word	0x08007d07
 8007cbc:	08007c59 	.word	0x08007c59
 8007cc0:	08007c59 	.word	0x08007c59
 8007cc4:	08007d9f 	.word	0x08007d9f
 8007cc8:	6833      	ldr	r3, [r6, #0]
 8007cca:	1d1a      	adds	r2, r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6032      	str	r2, [r6, #0]
 8007cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e09d      	b.n	8007e18 <_printf_i+0x1e8>
 8007cdc:	6833      	ldr	r3, [r6, #0]
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	1d19      	adds	r1, r3, #4
 8007ce2:	6031      	str	r1, [r6, #0]
 8007ce4:	0606      	lsls	r6, r0, #24
 8007ce6:	d501      	bpl.n	8007cec <_printf_i+0xbc>
 8007ce8:	681d      	ldr	r5, [r3, #0]
 8007cea:	e003      	b.n	8007cf4 <_printf_i+0xc4>
 8007cec:	0645      	lsls	r5, r0, #25
 8007cee:	d5fb      	bpl.n	8007ce8 <_printf_i+0xb8>
 8007cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	da03      	bge.n	8007d00 <_printf_i+0xd0>
 8007cf8:	232d      	movs	r3, #45	@ 0x2d
 8007cfa:	426d      	negs	r5, r5
 8007cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d00:	4859      	ldr	r0, [pc, #356]	@ (8007e68 <_printf_i+0x238>)
 8007d02:	230a      	movs	r3, #10
 8007d04:	e011      	b.n	8007d2a <_printf_i+0xfa>
 8007d06:	6821      	ldr	r1, [r4, #0]
 8007d08:	6833      	ldr	r3, [r6, #0]
 8007d0a:	0608      	lsls	r0, r1, #24
 8007d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d10:	d402      	bmi.n	8007d18 <_printf_i+0xe8>
 8007d12:	0649      	lsls	r1, r1, #25
 8007d14:	bf48      	it	mi
 8007d16:	b2ad      	uxthmi	r5, r5
 8007d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d1a:	4853      	ldr	r0, [pc, #332]	@ (8007e68 <_printf_i+0x238>)
 8007d1c:	6033      	str	r3, [r6, #0]
 8007d1e:	bf14      	ite	ne
 8007d20:	230a      	movne	r3, #10
 8007d22:	2308      	moveq	r3, #8
 8007d24:	2100      	movs	r1, #0
 8007d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d2a:	6866      	ldr	r6, [r4, #4]
 8007d2c:	60a6      	str	r6, [r4, #8]
 8007d2e:	2e00      	cmp	r6, #0
 8007d30:	bfa2      	ittt	ge
 8007d32:	6821      	ldrge	r1, [r4, #0]
 8007d34:	f021 0104 	bicge.w	r1, r1, #4
 8007d38:	6021      	strge	r1, [r4, #0]
 8007d3a:	b90d      	cbnz	r5, 8007d40 <_printf_i+0x110>
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	d04b      	beq.n	8007dd8 <_printf_i+0x1a8>
 8007d40:	4616      	mov	r6, r2
 8007d42:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d46:	fb03 5711 	mls	r7, r3, r1, r5
 8007d4a:	5dc7      	ldrb	r7, [r0, r7]
 8007d4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d50:	462f      	mov	r7, r5
 8007d52:	42bb      	cmp	r3, r7
 8007d54:	460d      	mov	r5, r1
 8007d56:	d9f4      	bls.n	8007d42 <_printf_i+0x112>
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d10b      	bne.n	8007d74 <_printf_i+0x144>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	07df      	lsls	r7, r3, #31
 8007d60:	d508      	bpl.n	8007d74 <_printf_i+0x144>
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	6861      	ldr	r1, [r4, #4]
 8007d66:	4299      	cmp	r1, r3
 8007d68:	bfde      	ittt	le
 8007d6a:	2330      	movle	r3, #48	@ 0x30
 8007d6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d74:	1b92      	subs	r2, r2, r6
 8007d76:	6122      	str	r2, [r4, #16]
 8007d78:	f8cd a000 	str.w	sl, [sp]
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	aa03      	add	r2, sp, #12
 8007d80:	4621      	mov	r1, r4
 8007d82:	4640      	mov	r0, r8
 8007d84:	f7ff fee6 	bl	8007b54 <_printf_common>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d14a      	bne.n	8007e22 <_printf_i+0x1f2>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	b004      	add	sp, #16
 8007d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	f043 0320 	orr.w	r3, r3, #32
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	4833      	ldr	r0, [pc, #204]	@ (8007e6c <_printf_i+0x23c>)
 8007da0:	2778      	movs	r7, #120	@ 0x78
 8007da2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	6831      	ldr	r1, [r6, #0]
 8007daa:	061f      	lsls	r7, r3, #24
 8007dac:	f851 5b04 	ldr.w	r5, [r1], #4
 8007db0:	d402      	bmi.n	8007db8 <_printf_i+0x188>
 8007db2:	065f      	lsls	r7, r3, #25
 8007db4:	bf48      	it	mi
 8007db6:	b2ad      	uxthmi	r5, r5
 8007db8:	6031      	str	r1, [r6, #0]
 8007dba:	07d9      	lsls	r1, r3, #31
 8007dbc:	bf44      	itt	mi
 8007dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc2:	6023      	strmi	r3, [r4, #0]
 8007dc4:	b11d      	cbz	r5, 8007dce <_printf_i+0x19e>
 8007dc6:	2310      	movs	r3, #16
 8007dc8:	e7ac      	b.n	8007d24 <_printf_i+0xf4>
 8007dca:	4827      	ldr	r0, [pc, #156]	@ (8007e68 <_printf_i+0x238>)
 8007dcc:	e7e9      	b.n	8007da2 <_printf_i+0x172>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	f023 0320 	bic.w	r3, r3, #32
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	e7f6      	b.n	8007dc6 <_printf_i+0x196>
 8007dd8:	4616      	mov	r6, r2
 8007dda:	e7bd      	b.n	8007d58 <_printf_i+0x128>
 8007ddc:	6833      	ldr	r3, [r6, #0]
 8007dde:	6825      	ldr	r5, [r4, #0]
 8007de0:	6961      	ldr	r1, [r4, #20]
 8007de2:	1d18      	adds	r0, r3, #4
 8007de4:	6030      	str	r0, [r6, #0]
 8007de6:	062e      	lsls	r6, r5, #24
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	d501      	bpl.n	8007df0 <_printf_i+0x1c0>
 8007dec:	6019      	str	r1, [r3, #0]
 8007dee:	e002      	b.n	8007df6 <_printf_i+0x1c6>
 8007df0:	0668      	lsls	r0, r5, #25
 8007df2:	d5fb      	bpl.n	8007dec <_printf_i+0x1bc>
 8007df4:	8019      	strh	r1, [r3, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	4616      	mov	r6, r2
 8007dfc:	e7bc      	b.n	8007d78 <_printf_i+0x148>
 8007dfe:	6833      	ldr	r3, [r6, #0]
 8007e00:	1d1a      	adds	r2, r3, #4
 8007e02:	6032      	str	r2, [r6, #0]
 8007e04:	681e      	ldr	r6, [r3, #0]
 8007e06:	6862      	ldr	r2, [r4, #4]
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7f8 fa20 	bl	8000250 <memchr>
 8007e10:	b108      	cbz	r0, 8007e16 <_printf_i+0x1e6>
 8007e12:	1b80      	subs	r0, r0, r6
 8007e14:	6060      	str	r0, [r4, #4]
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e20:	e7aa      	b.n	8007d78 <_printf_i+0x148>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	4632      	mov	r2, r6
 8007e26:	4649      	mov	r1, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	47d0      	blx	sl
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d0ad      	beq.n	8007d8c <_printf_i+0x15c>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	079b      	lsls	r3, r3, #30
 8007e34:	d413      	bmi.n	8007e5e <_printf_i+0x22e>
 8007e36:	68e0      	ldr	r0, [r4, #12]
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	4298      	cmp	r0, r3
 8007e3c:	bfb8      	it	lt
 8007e3e:	4618      	movlt	r0, r3
 8007e40:	e7a6      	b.n	8007d90 <_printf_i+0x160>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4632      	mov	r2, r6
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	47d0      	blx	sl
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d09d      	beq.n	8007d8c <_printf_i+0x15c>
 8007e50:	3501      	adds	r5, #1
 8007e52:	68e3      	ldr	r3, [r4, #12]
 8007e54:	9903      	ldr	r1, [sp, #12]
 8007e56:	1a5b      	subs	r3, r3, r1
 8007e58:	42ab      	cmp	r3, r5
 8007e5a:	dcf2      	bgt.n	8007e42 <_printf_i+0x212>
 8007e5c:	e7eb      	b.n	8007e36 <_printf_i+0x206>
 8007e5e:	2500      	movs	r5, #0
 8007e60:	f104 0619 	add.w	r6, r4, #25
 8007e64:	e7f5      	b.n	8007e52 <_printf_i+0x222>
 8007e66:	bf00      	nop
 8007e68:	08007fd9 	.word	0x08007fd9
 8007e6c:	08007fea 	.word	0x08007fea

08007e70 <memmove>:
 8007e70:	4288      	cmp	r0, r1
 8007e72:	b510      	push	{r4, lr}
 8007e74:	eb01 0402 	add.w	r4, r1, r2
 8007e78:	d902      	bls.n	8007e80 <memmove+0x10>
 8007e7a:	4284      	cmp	r4, r0
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	d807      	bhi.n	8007e90 <memmove+0x20>
 8007e80:	1e43      	subs	r3, r0, #1
 8007e82:	42a1      	cmp	r1, r4
 8007e84:	d008      	beq.n	8007e98 <memmove+0x28>
 8007e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e8e:	e7f8      	b.n	8007e82 <memmove+0x12>
 8007e90:	4402      	add	r2, r0
 8007e92:	4601      	mov	r1, r0
 8007e94:	428a      	cmp	r2, r1
 8007e96:	d100      	bne.n	8007e9a <memmove+0x2a>
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ea2:	e7f7      	b.n	8007e94 <memmove+0x24>

08007ea4 <_sbrk_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d06      	ldr	r5, [pc, #24]	@ (8007ec0 <_sbrk_r+0x1c>)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4604      	mov	r4, r0
 8007eac:	4608      	mov	r0, r1
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	f7f9 f828 	bl	8000f04 <_sbrk>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_sbrk_r+0x1a>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_sbrk_r+0x1a>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	20005384 	.word	0x20005384

08007ec4 <_realloc_r>:
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4615      	mov	r5, r2
 8007ecc:	460c      	mov	r4, r1
 8007ece:	b921      	cbnz	r1, 8007eda <_realloc_r+0x16>
 8007ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	f7ff bc59 	b.w	800778c <_malloc_r>
 8007eda:	b92a      	cbnz	r2, 8007ee8 <_realloc_r+0x24>
 8007edc:	f7ff fbea 	bl	80076b4 <_free_r>
 8007ee0:	2400      	movs	r4, #0
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee8:	f000 f81a 	bl	8007f20 <_malloc_usable_size_r>
 8007eec:	4285      	cmp	r5, r0
 8007eee:	4606      	mov	r6, r0
 8007ef0:	d802      	bhi.n	8007ef8 <_realloc_r+0x34>
 8007ef2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ef6:	d8f4      	bhi.n	8007ee2 <_realloc_r+0x1e>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4640      	mov	r0, r8
 8007efc:	f7ff fc46 	bl	800778c <_malloc_r>
 8007f00:	4607      	mov	r7, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0ec      	beq.n	8007ee0 <_realloc_r+0x1c>
 8007f06:	42b5      	cmp	r5, r6
 8007f08:	462a      	mov	r2, r5
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	bf28      	it	cs
 8007f0e:	4632      	movcs	r2, r6
 8007f10:	f7ff fbc2 	bl	8007698 <memcpy>
 8007f14:	4621      	mov	r1, r4
 8007f16:	4640      	mov	r0, r8
 8007f18:	f7ff fbcc 	bl	80076b4 <_free_r>
 8007f1c:	463c      	mov	r4, r7
 8007f1e:	e7e0      	b.n	8007ee2 <_realloc_r+0x1e>

08007f20 <_malloc_usable_size_r>:
 8007f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f24:	1f18      	subs	r0, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfbc      	itt	lt
 8007f2a:	580b      	ldrlt	r3, [r1, r0]
 8007f2c:	18c0      	addlt	r0, r0, r3
 8007f2e:	4770      	bx	lr

08007f30 <_init>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	bf00      	nop
 8007f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f36:	bc08      	pop	{r3}
 8007f38:	469e      	mov	lr, r3
 8007f3a:	4770      	bx	lr

08007f3c <_fini>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	bf00      	nop
 8007f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f42:	bc08      	pop	{r3}
 8007f44:	469e      	mov	lr, r3
 8007f46:	4770      	bx	lr
