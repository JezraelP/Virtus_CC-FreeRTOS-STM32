
Tasks1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007474  08007474  00008474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007504  08007504  000091a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007504  08007504  00008504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800750c  0800750c  000091a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800750c  0800750c  0000850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007510  08007510  00008510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007514  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08007574  00009060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08007614  00009100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051ec  200001a0  080076b4  000091a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000538c  080076b4  0000938c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022024  00000000  00000000  000091ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041ac  00000000  00000000  0002b1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001465  00000000  00000000  00030dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000436e  00000000  00000000  0003222d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001effb  00000000  00000000  0003659b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d96d  00000000  00000000  00055596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162f03  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000727c  00000000  00000000  00162f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0016a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800745c 	.word	0x0800745c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	0800745c 	.word	0x0800745c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fcbb 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f82a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f946 	bl	80007cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000540:	f000 f898 	bl	8000674 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000544:	f000 f8e4 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000548:	f000 f912 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054c:	f004 f872 	bl	8004634 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000550:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <main+0x48>)
 8000552:	2100      	movs	r1, #0
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x4c>)
 8000556:	f004 f8d7 	bl	8004708 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <main+0x50>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000560:	4a08      	ldr	r2, [pc, #32]	@ (8000584 <main+0x54>)
 8000562:	2100      	movs	r1, #0
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0x58>)
 8000566:	f004 f8cf 	bl	8004708 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a07      	ldr	r2, [pc, #28]	@ (800058c <main+0x5c>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f004 f894 	bl	800469c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x44>
 8000578:	080074a4 	.word	0x080074a4
 800057c:	08000911 	.word	0x08000911
 8000580:	2000080c 	.word	0x2000080c
 8000584:	080074c8 	.word	0x080074c8
 8000588:	08000935 	.word	0x08000935
 800058c:	20000810 	.word	0x20000810

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 fe74 	bl	800728c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 fc16 	bl	8001de4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <SystemClock_Config+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	@ (800066c <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d8:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <SystemClock_Config+0xe0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fc43 	bl	8001ea4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f9a8 	bl	8000978 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000628:	f001 fbec 	bl	8001e04 <HAL_PWREx_EnableOverDrive>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000632:	f000 f9a1 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2103      	movs	r1, #3
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fed4 	bl	8002400 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800065e:	f000 f98b 	bl	8000978 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_ETH_Init+0x84>)
 800067a:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <MX_ETH_Init+0x88>)
 800067c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_ETH_Init+0x8c>)
 800068c:	22e1      	movs	r2, #225	@ 0xe1
 800068e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_ETH_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006a4:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <MX_ETH_Init+0x8c>)
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <MX_ETH_Init+0x90>)
 80006b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006b8:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_ETH_Init+0x94>)
 80006ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006be:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006c6:	f000 fd25 	bl	8001114 <HAL_ETH_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 f952 	bl	8000978 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006d4:	2238      	movs	r2, #56	@ 0x38
 80006d6:	2100      	movs	r1, #0
 80006d8:	480c      	ldr	r0, [pc, #48]	@ (800070c <MX_ETH_Init+0x98>)
 80006da:	f006 fdd7 	bl	800728c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_ETH_Init+0x98>)
 80006e0:	2221      	movs	r2, #33	@ 0x21
 80006e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_ETH_Init+0x98>)
 80006e6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80006ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_ETH_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200001f4 	.word	0x200001f4
 80006fc:	40028000 	.word	0x40028000
 8000700:	20000814 	.word	0x20000814
 8000704:	20000100 	.word	0x20000100
 8000708:	20000060 	.word	0x20000060
 800070c:	200001bc 	.word	0x200001bc

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <MX_USART3_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000754:	f002 ffa2 	bl	800369c <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f90b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002a4 	.word	0x200002a4
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2206      	movs	r2, #6
 8000780:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f001 f9db 	bl	8001b6e <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f8db 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000032c 	.word	0x2000032c

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b47      	ldr	r3, [pc, #284]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a46      	ldr	r2, [pc, #280]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b44      	ldr	r3, [pc, #272]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b41      	ldr	r3, [pc, #260]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a40      	ldr	r2, [pc, #256]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b3e      	ldr	r3, [pc, #248]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b3b      	ldr	r3, [pc, #236]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a3a      	ldr	r2, [pc, #232]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a34      	ldr	r2, [pc, #208]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a2e      	ldr	r2, [pc, #184]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000878:	4822      	ldr	r0, [pc, #136]	@ (8000904 <MX_GPIO_Init+0x138>)
 800087a:	f001 f945 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	@ (8000908 <MX_GPIO_Init+0x13c>)
 8000884:	f001 f940 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	@ (800090c <MX_GPIO_Init+0x140>)
 80008a0:	f000 ff86 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	@ (8000904 <MX_GPIO_Init+0x138>)
 80008be:	f000 ff77 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <MX_GPIO_Init+0x13c>)
 80008da:	f000 ff69 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_GPIO_Init+0x13c>)
 80008f2:	f000 ff5d 	bl	80017b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	@ 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Alterna LED
 8000918:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <StartDefaultTask+0x20>)
 800091e:	f001 f90c 	bl	8001b3a <HAL_GPIO_TogglePin>
	  /*HAL_UART_Transmit(&huart2, (uint8_t *)"Task1 executando!\r\n", 19, 100);  // Mensagem via UART*/
	  osDelay(500);
 8000922:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000926:	f003 ff95 	bl	8004854 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Alterna LED
 800092a:	bf00      	nop
 800092c:	e7f4      	b.n	8000918 <StartDefaultTask+0x8>
 800092e:	bf00      	nop
 8000930:	40020400 	.word	0x40020400

08000934 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Alterna LED
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <StartTask02+0x1c>)
 8000940:	f001 f8fb 	bl	8001b3a <HAL_GPIO_TogglePin>
	  /*HAL_UART_Transmit(&huart2, (uint8_t *)"Task1 executando!\r\n", 19, 100);  // Mensagem via UART*/
	  osDelay(100);
 8000944:	2064      	movs	r0, #100	@ 0x64
 8000946:	f003 ff85 	bl	8004854 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Alterna LED
 800094a:	bf00      	nop
 800094c:	e7f6      	b.n	800093c <StartTask02+0x8>
 800094e:	bf00      	nop
 8000950:	40020400 	.word	0x40020400

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 faaf 	bl	8000ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40001000 	.word	0x40001000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	210f      	movs	r1, #15
 80009be:	f06f 0001 	mvn.w	r0, #1
 80009c2:	f000 fb7d 	bl	80010c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a4e      	ldr	r2, [pc, #312]	@ (8000b2c <HAL_ETH_MspInit+0x158>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	f040 8096 	bne.w	8000b24 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fc:	4a4c      	ldr	r2, [pc, #304]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a04:	4b4a      	ldr	r3, [pc, #296]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0c:	623b      	str	r3, [r7, #32]
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	4b47      	ldr	r3, [pc, #284]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	4a46      	ldr	r2, [pc, #280]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1c:	4b44      	ldr	r3, [pc, #272]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a24:	61fb      	str	r3, [r7, #28]
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	4a40      	ldr	r2, [pc, #256]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a34:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a40:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	4a3a      	ldr	r2, [pc, #232]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4c:	4b38      	ldr	r3, [pc, #224]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	4a34      	ldr	r2, [pc, #208]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a64:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a2e      	ldr	r2, [pc, #184]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aa0:	2332      	movs	r3, #50	@ 0x32
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <HAL_ETH_MspInit+0x160>)
 8000abc:	f000 fe78 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ac0:	2386      	movs	r3, #134	@ 0x86
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4817      	ldr	r0, [pc, #92]	@ (8000b38 <HAL_ETH_MspInit+0x164>)
 8000adc:	f000 fe68 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af2:	230b      	movs	r3, #11
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	480f      	ldr	r0, [pc, #60]	@ (8000b3c <HAL_ETH_MspInit+0x168>)
 8000afe:	f000 fe57 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b02:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b14:	230b      	movs	r3, #11
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <HAL_ETH_MspInit+0x16c>)
 8000b20:	f000 fe46 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000b24:	bf00      	nop
 8000b26:	3738      	adds	r7, #56	@ 0x38
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40028000 	.word	0x40028000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40021800 	.word	0x40021800

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b0ae      	sub	sp, #184	@ 0xb8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2290      	movs	r2, #144	@ 0x90
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f006 fb91 	bl	800728c <memset>
  if(huart->Instance==USART3)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a22      	ldr	r2, [pc, #136]	@ (8000bf8 <HAL_UART_MspInit+0xb4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d13c      	bne.n	8000bee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fe94 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b8e:	f7ff fef3 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <HAL_UART_MspInit+0xb8>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a19      	ldr	r2, [pc, #100]	@ (8000bfc <HAL_UART_MspInit+0xb8>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <HAL_UART_MspInit+0xb8>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <HAL_UART_MspInit+0xb8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <HAL_UART_MspInit+0xb8>)
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_UART_MspInit+0xb8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_UART_MspInit+0xbc>)
 8000bea:	f000 fde1 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bee:	bf00      	nop
 8000bf0:	37b8      	adds	r7, #184	@ 0xb8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40004800 	.word	0x40004800
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0ae      	sub	sp, #184	@ 0xb8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2290      	movs	r2, #144	@ 0x90
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f006 fb31 	bl	800728c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c32:	d159      	bne.n	8000ce8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c34:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fe33 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c50:	f7ff fe92 	bl	8000978 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c58:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c60:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c6c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c86:	230a      	movs	r3, #10
 8000c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4818      	ldr	r0, [pc, #96]	@ (8000cf4 <HAL_PCD_MspInit+0xf0>)
 8000c94:	f000 fd8c 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	@ (8000cf4 <HAL_PCD_MspInit+0xf0>)
 8000cb4:	f000 fd7c 	bl	80017b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd4:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <HAL_PCD_MspInit+0xec>)
 8000cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ce8:	bf00      	nop
 8000cea:	37b8      	adds	r7, #184	@ 0xb8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	@ 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d08:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <HAL_InitTick+0xe0>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	4a32      	ldr	r2, [pc, #200]	@ (8000dd8 <HAL_InitTick+0xe0>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d14:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <HAL_InitTick+0xe0>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d20:	f107 0210 	add.w	r2, r7, #16
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fd8e 	bl	800284c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d103      	bne.n	8000d42 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d3a:	f001 fd5f 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8000d3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d42:	f001 fd5b 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8000d46:	4603      	mov	r3, r0
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d4e:	4a23      	ldr	r2, [pc, #140]	@ (8000ddc <HAL_InitTick+0xe4>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	0c9b      	lsrs	r3, r3, #18
 8000d56:	3b01      	subs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d5c:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <HAL_InitTick+0xec>)
 8000d5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d68:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d80:	4817      	ldr	r0, [pc, #92]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d82:	f002 f9bd 	bl	8003100 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d11b      	bne.n	8000dcc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d94:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000d96:	f002 fa15 	bl	80031c4 <HAL_TIM_Base_Start_IT>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000da0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d111      	bne.n	8000dcc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000da8:	2036      	movs	r0, #54	@ 0x36
 8000daa:	f000 f9a5 	bl	80010f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d808      	bhi.n	8000dc6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	2036      	movs	r0, #54	@ 0x36
 8000dba:	f000 f981 	bl	80010c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <HAL_InitTick+0xf0>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e002      	b.n	8000dcc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3738      	adds	r7, #56	@ 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	431bde83 	.word	0x431bde83
 8000de0:	2000081c 	.word	0x2000081c
 8000de4:	40001000 	.word	0x40001000
 8000de8:	20000004 	.word	0x20000004

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <NMI_Handler+0x4>

08000df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <MemManage_Handler+0x4>

08000e04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <TIM6_DAC_IRQHandler+0x10>)
 8000e2a:	f002 fa43 	bl	80032b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000081c 	.word	0x2000081c

08000e38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e60:	f7ff ffea 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f006 fa5d 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fb4f 	bl	8000530 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ea0:	08007514 	.word	0x08007514
  ldr r2, =_sbss
 8000ea4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000ea8:	2000538c 	.word	0x2000538c

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>

08000eae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f8f9 	bl	80010aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb8:	200f      	movs	r0, #15
 8000eba:	f7ff ff1d 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebe:	f7ff fd61 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000868 	.word	0x20000868

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000868 	.word	0x20000868

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x40>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x40>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	05fa0000 	.word	0x05fa0000

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	@ (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	@ (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff4c 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d2:	f7ff ff61 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	6978      	ldr	r0, [r7, #20]
 80010de:	f7ff ffb1 	bl	8001044 <NVIC_EncodePriority>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff80 	bl	8000ff0 <__NVIC_SetPriority>
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff54 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e086      	b.n	8001234 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800112c:	2b00      	cmp	r3, #0
 800112e:	d106      	bne.n	800113e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2220      	movs	r2, #32
 8001134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fc4b 	bl	80009d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <HAL_ETH_Init+0x128>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a3e      	ldr	r2, [pc, #248]	@ (800123c <HAL_ETH_Init+0x128>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b3c      	ldr	r3, [pc, #240]	@ (800123c <HAL_ETH_Init+0x128>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001156:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <HAL_ETH_Init+0x12c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a39      	ldr	r2, [pc, #228]	@ (8001240 <HAL_ETH_Init+0x12c>)
 800115c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001160:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001162:	4b37      	ldr	r3, [pc, #220]	@ (8001240 <HAL_ETH_Init+0x12c>)
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_ETH_Init+0x12c>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001170:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <HAL_ETH_Init+0x12c>)
 8001172:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800118a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800118c:	f7ff feb0 	bl	8000ef0 <HAL_GetTick>
 8001190:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001192:	e011      	b.n	80011b8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001194:	f7ff feac 	bl	8000ef0 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011a2:	d909      	bls.n	80011b8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2204      	movs	r2, #4
 80011a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	22e0      	movs	r2, #224	@ 0xe0
 80011b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e03d      	b.n	8001234 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1e4      	bne.n	8001194 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f97a 	bl	80014c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fa25 	bl	8001620 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fa7b 	bl	80016d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f9e3 	bl	80015b0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80011f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_ETH_Init+0x130>)
 8001208:	430b      	orrs	r3, r1
 800120a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800121e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2210      	movs	r2, #16
 800122e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	00020060 	.word	0x00020060

08001248 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <ETH_SetMACConfig+0x164>)
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	7b9b      	ldrb	r3, [r3, #14]
 8001266:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	7c12      	ldrb	r2, [r2, #16]
 800126c:	2a00      	cmp	r2, #0
 800126e:	d102      	bne.n	8001276 <ETH_SetMACConfig+0x2e>
 8001270:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001274:	e000      	b.n	8001278 <ETH_SetMACConfig+0x30>
 8001276:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001278:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	7c52      	ldrb	r2, [r2, #17]
 800127e:	2a00      	cmp	r2, #0
 8001280:	d102      	bne.n	8001288 <ETH_SetMACConfig+0x40>
 8001282:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001286:	e000      	b.n	800128a <ETH_SetMACConfig+0x42>
 8001288:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800128a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001290:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	7fdb      	ldrb	r3, [r3, #31]
 8001296:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001298:	431a      	orrs	r2, r3
                        macconf->Speed |
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800129e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	7f92      	ldrb	r2, [r2, #30]
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	d102      	bne.n	80012ae <ETH_SetMACConfig+0x66>
 80012a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ac:	e000      	b.n	80012b0 <ETH_SetMACConfig+0x68>
 80012ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80012b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	7f1b      	ldrb	r3, [r3, #28]
 80012b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	791b      	ldrb	r3, [r3, #4]
 80012c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80012c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d102      	bne.n	80012d8 <ETH_SetMACConfig+0x90>
 80012d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d6:	e000      	b.n	80012da <ETH_SetMACConfig+0x92>
 80012d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	7bdb      	ldrb	r3, [r3, #15]
 80012e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80012f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80012f2:	4313      	orrs	r3, r2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff fdfc 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800132e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001336:	2a00      	cmp	r2, #0
 8001338:	d101      	bne.n	800133e <ETH_SetMACConfig+0xf6>
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	e000      	b.n	8001340 <ETH_SetMACConfig+0xf8>
 800133e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001340:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001346:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800134e:	2a01      	cmp	r2, #1
 8001350:	d101      	bne.n	8001356 <ETH_SetMACConfig+0x10e>
 8001352:	2208      	movs	r2, #8
 8001354:	e000      	b.n	8001358 <ETH_SetMACConfig+0x110>
 8001356:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001358:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001360:	2a01      	cmp	r2, #1
 8001362:	d101      	bne.n	8001368 <ETH_SetMACConfig+0x120>
 8001364:	2204      	movs	r2, #4
 8001366:	e000      	b.n	800136a <ETH_SetMACConfig+0x122>
 8001368:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800136a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001372:	2a01      	cmp	r2, #1
 8001374:	d101      	bne.n	800137a <ETH_SetMACConfig+0x132>
 8001376:	2202      	movs	r2, #2
 8001378:	e000      	b.n	800137c <ETH_SetMACConfig+0x134>
 800137a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800137c:	4313      	orrs	r3, r2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fdb7 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	fd20810f 	.word	0xfd20810f

080013b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4b3d      	ldr	r3, [pc, #244]	@ (80014c0 <ETH_SetDMAConfig+0x110>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	7b1b      	ldrb	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <ETH_SetDMAConfig+0x2c>
 80013d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013da:	e000      	b.n	80013de <ETH_SetDMAConfig+0x2e>
 80013dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7b5b      	ldrb	r3, [r3, #13]
 80013e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	7f52      	ldrb	r2, [r2, #29]
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d102      	bne.n	80013f4 <ETH_SetDMAConfig+0x44>
 80013ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80013f2:	e000      	b.n	80013f6 <ETH_SetDMAConfig+0x46>
 80013f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	7b9b      	ldrb	r3, [r3, #14]
 80013fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001404:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	7f1b      	ldrb	r3, [r3, #28]
 800140a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800140c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	7f9b      	ldrb	r3, [r3, #30]
 8001412:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001414:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800141a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001422:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001424:	4313      	orrs	r3, r2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff fd5e 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	791b      	ldrb	r3, [r3, #4]
 800145e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001464:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800146a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001470:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001478:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800147a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001480:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001482:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001488:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001496:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fd2f 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f8de3f23 	.word	0xf8de3f23

080014c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0a6      	sub	sp, #152	@ 0x98
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001506:	2300      	movs	r3, #0
 8001508:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001510:	2300      	movs	r3, #0
 8001512:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800152c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001530:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800153e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fe7f 	bl	8001248 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800154a:	2301      	movs	r3, #1
 800154c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800154e:	2301      	movs	r3, #1
 8001550:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001558:	2301      	movs	r3, #1
 800155a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800157a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800157e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001580:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001584:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001586:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800158a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800158c:	2301      	movs	r3, #1
 800158e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff05 	bl	80013b0 <ETH_SetDMAConfig>
}
 80015a6:	bf00      	nop
 80015a8:	3798      	adds	r7, #152	@ 0x98
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3305      	adds	r3, #5
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	3204      	adds	r2, #4
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <ETH_MACAddressConfig+0x68>)
 80015d2:	4413      	add	r3, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3303      	adds	r3, #3
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	061a      	lsls	r2, r3, #24
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3302      	adds	r3, #2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3301      	adds	r3, #1
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4313      	orrs	r3, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <ETH_MACAddressConfig+0x6c>)
 8001602:	4413      	add	r3, r2
 8001604:	461a      	mov	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40028040 	.word	0x40028040
 800161c:	40028044 	.word	0x40028044

08001620 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e03e      	b.n	80016ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68d9      	ldr	r1, [r3, #12]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	3206      	adds	r2, #6
 8001660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d80c      	bhi.n	8001690 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68d9      	ldr	r1, [r3, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	e004      	b.n	800169a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	461a      	mov	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3301      	adds	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d9bd      	bls.n	800162e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c4:	611a      	str	r2, [r3, #16]
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e048      	b.n	8001772 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6919      	ldr	r1, [r3, #16]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800171c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	3212      	adds	r2, #18
 800173e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d80c      	bhi.n	8001762 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6919      	ldr	r1, [r3, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	e004      	b.n	800176c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	461a      	mov	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d9b3      	bls.n	80016e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a2:	60da      	str	r2, [r3, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e175      	b.n	8001abc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8164 	bne.w	8001ab6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_GPIO_Init+0x56>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d130      	bne.n	8001868 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d017      	beq.n	80018a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80be 	beq.w	8001ab6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	4b66      	ldr	r3, [pc, #408]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	4a65      	ldr	r2, [pc, #404]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001944:	6453      	str	r3, [r2, #68]	@ 0x44
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001952:	4a61      	ldr	r2, [pc, #388]	@ (8001ad8 <HAL_GPIO_Init+0x328>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a58      	ldr	r2, [pc, #352]	@ (8001adc <HAL_GPIO_Init+0x32c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d037      	beq.n	80019ee <HAL_GPIO_Init+0x23e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a57      	ldr	r2, [pc, #348]	@ (8001ae0 <HAL_GPIO_Init+0x330>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d031      	beq.n	80019ea <HAL_GPIO_Init+0x23a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a56      	ldr	r2, [pc, #344]	@ (8001ae4 <HAL_GPIO_Init+0x334>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d02b      	beq.n	80019e6 <HAL_GPIO_Init+0x236>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a55      	ldr	r2, [pc, #340]	@ (8001ae8 <HAL_GPIO_Init+0x338>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d025      	beq.n	80019e2 <HAL_GPIO_Init+0x232>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a54      	ldr	r2, [pc, #336]	@ (8001aec <HAL_GPIO_Init+0x33c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01f      	beq.n	80019de <HAL_GPIO_Init+0x22e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a53      	ldr	r2, [pc, #332]	@ (8001af0 <HAL_GPIO_Init+0x340>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x22a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a52      	ldr	r2, [pc, #328]	@ (8001af4 <HAL_GPIO_Init+0x344>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a51      	ldr	r2, [pc, #324]	@ (8001af8 <HAL_GPIO_Init+0x348>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x222>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a50      	ldr	r2, [pc, #320]	@ (8001afc <HAL_GPIO_Init+0x34c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x21e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b00 <HAL_GPIO_Init+0x350>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x21a>
 80019c6:	2309      	movs	r3, #9
 80019c8:	e012      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ca:	230a      	movs	r3, #10
 80019cc:	e010      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ce:	2308      	movs	r3, #8
 80019d0:	e00e      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e00c      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019d6:	2306      	movs	r3, #6
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019da:	2305      	movs	r3, #5
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x240>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x328>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a34      	ldr	r2, [pc, #208]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b32      	ldr	r3, [pc, #200]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a29      	ldr	r2, [pc, #164]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a86:	4a1f      	ldr	r2, [pc, #124]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <HAL_GPIO_Init+0x354>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f ae86 	bls.w	80017d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40021400 	.word	0x40021400
 8001af4:	40021800 	.word	0x40021800
 8001af8:	40021c00 	.word	0x40021c00
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40022400 	.word	0x40022400
 8001b04:	40013c00 	.word	0x40013c00

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b24:	e003      	b.n	8001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b4c:	887a      	ldrh	r2, [r7, #2]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4013      	ands	r3, r2
 8001b52:	041a      	lsls	r2, r3, #16
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	619a      	str	r2, [r3, #24]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af02      	add	r7, sp, #8
 8001b74:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e108      	b.n	8001d92 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff f832 	bl	8000c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bae:	d102      	bne.n	8001bb6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fa96 	bl	80040ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7c1a      	ldrb	r2, [r3, #16]
 8001bc8:	f88d 2000 	strb.w	r2, [sp]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd0:	f002 fa32 	bl	8004038 <USB_CoreInit>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0d5      	b.n	8001d92 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fa8e 	bl	800410e <USB_SetCurrentMode>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0c6      	b.n	8001d92 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e04a      	b.n	8001ca0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3315      	adds	r3, #21
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3314      	adds	r3, #20
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	b298      	uxth	r0, r3
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	332e      	adds	r3, #46	@ 0x2e
 8001c46:	4602      	mov	r2, r0
 8001c48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	3318      	adds	r3, #24
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	331c      	adds	r3, #28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	3320      	adds	r3, #32
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	3324      	adds	r3, #36	@ 0x24
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	791b      	ldrb	r3, [r3, #4]
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3af      	bcc.n	8001c0a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e044      	b.n	8001d3a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	791b      	ldrb	r3, [r3, #4]
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3b5      	bcc.n	8001cb0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7c1a      	ldrb	r2, [r3, #16]
 8001d4c:	f88d 2000 	strb.w	r2, [sp]
 8001d50:	3304      	adds	r3, #4
 8001d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d54:	f002 fa28 	bl	80041a8 <USB_DevInit>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e013      	b.n	8001d92 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7b1b      	ldrb	r3, [r3, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f80b 	bl	8001d9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 fbe3 	bl	8004556 <USB_DevDisconnect>

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	10000003 	.word	0x10000003

08001de4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40007000 	.word	0x40007000

08001e04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e32:	f7ff f85d 	bl	8000ef0 <HAL_GetTick>
 8001e36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e38:	e009      	b.n	8001e4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e3a:	f7ff f859 	bl	8000ef0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e48:	d901      	bls.n	8001e4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e022      	b.n	8001e94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5a:	d1ee      	bne.n	8001e3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e68:	f7ff f842 	bl	8000ef0 <HAL_GetTick>
 8001e6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e6e:	e009      	b.n	8001e84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e70:	f7ff f83e 	bl	8000ef0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e7e:	d901      	bls.n	8001e84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e007      	b.n	8001e94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e90:	d1ee      	bne.n	8001e70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e29b      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8087 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec8:	4b96      	ldr	r3, [pc, #600]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d00c      	beq.n	8001eee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed4:	4b93      	ldr	r3, [pc, #588]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d112      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62>
 8001ee0:	4b90      	ldr	r3, [pc, #576]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eec:	d10b      	bne.n	8001f06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eee:	4b8d      	ldr	r3, [pc, #564]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d06c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x130>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d168      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e275      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x7a>
 8001f10:	4b84      	ldr	r3, [pc, #528]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a83      	ldr	r2, [pc, #524]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e02e      	b.n	8001f7c <HAL_RCC_OscConfig+0xd8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x9c>
 8001f26:	4b7f      	ldr	r3, [pc, #508]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xd8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0xc0>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b73      	ldr	r3, [pc, #460]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a72      	ldr	r2, [pc, #456]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xd8>
 8001f64:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b6c      	ldr	r3, [pc, #432]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6b      	ldr	r2, [pc, #428]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ffb4 	bl	8000ef0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe ffb0 	bl	8000ef0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e229      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b61      	ldr	r3, [pc, #388]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe8>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe ffa0 	bl	8000ef0 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ff9c 	bl	8000ef0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	@ 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e215      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b57      	ldr	r3, [pc, #348]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x110>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d069      	beq.n	80020b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	4b50      	ldr	r3, [pc, #320]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b4d      	ldr	r3, [pc, #308]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d11c      	bne.n	8002034 <HAL_RCC_OscConfig+0x190>
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x17a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1e9      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	493d      	ldr	r1, [pc, #244]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	e040      	b.n	80020b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d023      	beq.n	8002084 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203c:	4b39      	ldr	r3, [pc, #228]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a38      	ldr	r2, [pc, #224]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe ff52 	bl	8000ef0 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7fe ff4e 	bl	8000ef0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1c7      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4929      	ldr	r1, [pc, #164]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
 8002082:	e018      	b.n	80020b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002084:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a26      	ldr	r2, [pc, #152]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe ff2e 	bl	8000ef0 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7fe ff2a 	bl	8000ef0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1a3      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d038      	beq.n	8002134 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d019      	beq.n	80020fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ce:	4a15      	ldr	r2, [pc, #84]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7fe ff0b 	bl	8000ef0 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020de:	f7fe ff07 	bl	8000ef0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e180      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x23a>
 80020fc:	e01a      	b.n	8002134 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_RCC_OscConfig+0x280>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe fef1 	bl	8000ef0 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe feed 	bl	8000ef0 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d903      	bls.n	8002128 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e166      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
 8002124:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b92      	ldr	r3, [pc, #584]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ee      	bne.n	8002112 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a4 	beq.w	800228a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002142:	4b8c      	ldr	r3, [pc, #560]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10d      	bne.n	800216a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	4b89      	ldr	r3, [pc, #548]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a88      	ldr	r2, [pc, #544]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b86      	ldr	r3, [pc, #536]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216a:	4b83      	ldr	r3, [pc, #524]	@ (8002378 <HAL_RCC_OscConfig+0x4d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002176:	4b80      	ldr	r3, [pc, #512]	@ (8002378 <HAL_RCC_OscConfig+0x4d4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7f      	ldr	r2, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x4d4>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe feb5 	bl	8000ef0 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7fe feb1 	bl	8000ef0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b64      	cmp	r3, #100	@ 0x64
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e12a      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219c:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_RCC_OscConfig+0x4d4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x31a>
 80021b0:	4b70      	ldr	r3, [pc, #448]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a6f      	ldr	r2, [pc, #444]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80021bc:	e02d      	b.n	800221a <HAL_RCC_OscConfig+0x376>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x33c>
 80021c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d2:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	4a67      	ldr	r2, [pc, #412]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021de:	e01c      	b.n	800221a <HAL_RCC_OscConfig+0x376>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x35e>
 80021e8:	4b62      	ldr	r3, [pc, #392]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ec:	4a61      	ldr	r2, [pc, #388]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002200:	e00b      	b.n	800221a <HAL_RCC_OscConfig+0x376>
 8002202:	4b5c      	ldr	r3, [pc, #368]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002206:	4a5b      	ldr	r2, [pc, #364]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6713      	str	r3, [r2, #112]	@ 0x70
 800220e:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	4a58      	ldr	r2, [pc, #352]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d015      	beq.n	800224e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe fe65 	bl	8000ef0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7fe fe61 	bl	8000ef0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e0d8      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	4b4c      	ldr	r3, [pc, #304]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ee      	beq.n	800222a <HAL_RCC_OscConfig+0x386>
 800224c:	e014      	b.n	8002278 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7fe fe4f 	bl	8000ef0 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe fe4b 	bl	8000ef0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0c2      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226c:	4b41      	ldr	r3, [pc, #260]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ee      	bne.n	8002256 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002278:	7dfb      	ldrb	r3, [r7, #23]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d105      	bne.n	800228a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a3c      	ldr	r2, [pc, #240]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80ae 	beq.w	80023f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002294:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d06d      	beq.n	800237c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d14b      	bne.n	8002340 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a8:	4b32      	ldr	r3, [pc, #200]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a31      	ldr	r2, [pc, #196]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80022ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fe1c 	bl	8000ef0 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fe18 	bl	8000ef0 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e091      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	019b      	lsls	r3, r3, #6
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	071b      	lsls	r3, r3, #28
 8002306:	491b      	ldr	r1, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a18      	ldr	r2, [pc, #96]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fdea 	bl	8000ef0 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fde6 	bl	8000ef0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e05f      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x47c>
 800233e:	e057      	b.n	80023f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fdd0 	bl	8000ef0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fdcc 	bl	8000ef0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e045      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x4b0>
 8002372:	e03d      	b.n	80023f0 <HAL_RCC_OscConfig+0x54c>
 8002374:	40023800 	.word	0x40023800
 8002378:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800237c:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <HAL_RCC_OscConfig+0x558>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d030      	beq.n	80023ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d129      	bne.n	80023ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d122      	bne.n	80023ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d119      	bne.n	80023ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d10f      	bne.n	80023ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0d0      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b6a      	ldr	r3, [pc, #424]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d910      	bls.n	8002448 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b67      	ldr	r3, [pc, #412]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 020f 	bic.w	r2, r3, #15
 800242e:	4965      	ldr	r1, [pc, #404]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b63      	ldr	r3, [pc, #396]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b8      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b59      	ldr	r3, [pc, #356]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a58      	ldr	r2, [pc, #352]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002466:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800246a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	4b53      	ldr	r3, [pc, #332]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a52      	ldr	r2, [pc, #328]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800247e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002482:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b50      	ldr	r3, [pc, #320]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494d      	ldr	r1, [pc, #308]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d040      	beq.n	8002524 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d115      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e073      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4936      	ldr	r1, [pc, #216]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fcfc 	bl	8000ef0 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe fcf8 	bl	8000ef0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e053      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d210      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 020f 	bic.w	r2, r3, #15
 800253a:	4922      	ldr	r1, [pc, #136]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e032      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4916      	ldr	r1, [pc, #88]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490e      	ldr	r1, [pc, #56]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002592:	f000 f821 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490a      	ldr	r1, [pc, #40]	@ (80025cc <HAL_RCC_ClockConfig+0x1cc>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a09      	ldr	r2, [pc, #36]	@ (80025d0 <HAL_RCC_ClockConfig+0x1d0>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_RCC_ClockConfig+0x1d4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fba0 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	080074ec 	.word	0x080074ec
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b094      	sub	sp, #80	@ 0x50
 80025de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025e4:	2300      	movs	r3, #0
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f0:	4b79      	ldr	r3, [pc, #484]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d00d      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x40>
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	f200 80e1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x34>
 8002606:	2b04      	cmp	r3, #4
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x3a>
 800260a:	e0db      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b73      	ldr	r3, [pc, #460]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 800260e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002610:	e0db      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002612:	4b73      	ldr	r3, [pc, #460]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002614:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002616:	e0d8      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002618:	4b6f      	ldr	r3, [pc, #444]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002620:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002622:	4b6d      	ldr	r3, [pc, #436]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262e:	4b6a      	ldr	r3, [pc, #424]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	099b      	lsrs	r3, r3, #6
 8002634:	2200      	movs	r2, #0
 8002636:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002638:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	633b      	str	r3, [r7, #48]	@ 0x30
 8002642:	2300      	movs	r3, #0
 8002644:	637b      	str	r3, [r7, #52]	@ 0x34
 8002646:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800264a:	4622      	mov	r2, r4
 800264c:	462b      	mov	r3, r5
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4621      	mov	r1, r4
 8002664:	1a51      	subs	r1, r2, r1
 8002666:	6139      	str	r1, [r7, #16]
 8002668:	4629      	mov	r1, r5
 800266a:	eb63 0301 	sbc.w	r3, r3, r1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800267c:	4659      	mov	r1, fp
 800267e:	018b      	lsls	r3, r1, #6
 8002680:	4651      	mov	r1, sl
 8002682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002686:	4651      	mov	r1, sl
 8002688:	018a      	lsls	r2, r1, #6
 800268a:	4651      	mov	r1, sl
 800268c:	ebb2 0801 	subs.w	r8, r2, r1
 8002690:	4659      	mov	r1, fp
 8002692:	eb63 0901 	sbc.w	r9, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026aa:	4690      	mov	r8, r2
 80026ac:	4699      	mov	r9, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb18 0303 	adds.w	r3, r8, r3
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	462b      	mov	r3, r5
 80026b8:	eb49 0303 	adc.w	r3, r9, r3
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ca:	4629      	mov	r1, r5
 80026cc:	024b      	lsls	r3, r1, #9
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d4:	4621      	mov	r1, r4
 80026d6:	024a      	lsls	r2, r1, #9
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026de:	2200      	movs	r2, #0
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026e8:	f7fd fdaa 	bl	8000240 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4613      	mov	r3, r2
 80026f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026f4:	e058      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b38      	ldr	r3, [pc, #224]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	4611      	mov	r1, r2
 8002702:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	@ 0x24
 800270c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	f04f 0000 	mov.w	r0, #0
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	0159      	lsls	r1, r3, #5
 800271e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002722:	0150      	lsls	r0, r2, #5
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4641      	mov	r1, r8
 800272a:	ebb2 0a01 	subs.w	sl, r2, r1
 800272e:	4649      	mov	r1, r9
 8002730:	eb63 0b01 	sbc.w	fp, r3, r1
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002748:	ebb2 040a 	subs.w	r4, r2, sl
 800274c:	eb63 050b 	sbc.w	r5, r3, fp
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	00eb      	lsls	r3, r5, #3
 800275a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800275e:	00e2      	lsls	r2, r4, #3
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	4643      	mov	r3, r8
 8002766:	18e3      	adds	r3, r4, r3
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	464b      	mov	r3, r9
 800276c:	eb45 0303 	adc.w	r3, r5, r3
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800277e:	4629      	mov	r1, r5
 8002780:	028b      	lsls	r3, r1, #10
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002788:	4621      	mov	r1, r4
 800278a:	028a      	lsls	r2, r1, #10
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	61fa      	str	r2, [r7, #28]
 8002798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279c:	f7fd fd50 	bl	8000240 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 80027c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3750      	adds	r7, #80	@ 0x50
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200

080027e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	@ (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	080074fc 	.word	0x080074fc

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	@ (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	080074fc 	.word	0x080074fc

0800284c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	220f      	movs	r2, #15
 800285a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002868:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <HAL_RCC_GetClockConfig+0x60>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40023c00 	.word	0x40023c00

080028b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028d8:	4b69      	ldr	r3, [pc, #420]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a68      	ldr	r2, [pc, #416]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028e2:	6093      	str	r3, [r2, #8]
 80028e4:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ec:	4964      	ldr	r1, [pc, #400]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d017      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800290a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002910:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002918:	4959      	ldr	r1, [pc, #356]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002928:	d101      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800292a:	2301      	movs	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d017      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002946:	4b4e      	ldr	r3, [pc, #312]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	494a      	ldr	r1, [pc, #296]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002964:	d101      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002982:	2301      	movs	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 808b 	beq.w	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b3a      	ldr	r3, [pc, #232]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	4a39      	ldr	r2, [pc, #228]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a0:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029ac:	4b35      	ldr	r3, [pc, #212]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a34      	ldr	r2, [pc, #208]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b8:	f7fe fa9a 	bl	8000ef0 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c0:	f7fe fa96 	bl	8000ef0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	@ 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e38f      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029de:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d035      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d02e      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029fc:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a10:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a1e:	4a18      	ldr	r2, [pc, #96]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a24:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d114      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fa5e 	bl	8000ef0 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fa5a 	bl	8000ef0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e351      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ee      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a66:	d111      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a76:	400b      	ands	r3, r1
 8002a78:	4901      	ldr	r1, [pc, #4]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000
 8002a88:	0ffffcff 	.word	0x0ffffcff
 8002a8c:	4bac      	ldr	r3, [pc, #688]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4aab      	ldr	r2, [pc, #684]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a96:	6093      	str	r3, [r2, #8]
 8002a98:	4ba9      	ldr	r3, [pc, #676]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	49a6      	ldr	r1, [pc, #664]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d010      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ab6:	4ba2      	ldr	r3, [pc, #648]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002abc:	4aa0      	ldr	r2, [pc, #640]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ac6:	4b9e      	ldr	r3, [pc, #632]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	499b      	ldr	r1, [pc, #620]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae4:	4b96      	ldr	r3, [pc, #600]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002af2:	4993      	ldr	r1, [pc, #588]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b06:	4b8e      	ldr	r3, [pc, #568]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b14:	498a      	ldr	r1, [pc, #552]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b28:	4b85      	ldr	r3, [pc, #532]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b36:	4982      	ldr	r1, [pc, #520]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4979      	ldr	r1, [pc, #484]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b6c:	4b74      	ldr	r3, [pc, #464]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	4971      	ldr	r1, [pc, #452]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	f023 020c 	bic.w	r2, r3, #12
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9c:	4968      	ldr	r1, [pc, #416]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bb0:	4b63      	ldr	r3, [pc, #396]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	4960      	ldr	r1, [pc, #384]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be0:	4957      	ldr	r1, [pc, #348]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bf4:	4b52      	ldr	r3, [pc, #328]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	494f      	ldr	r1, [pc, #316]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c16:	4b4a      	ldr	r3, [pc, #296]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	4946      	ldr	r1, [pc, #280]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c38:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	493e      	ldr	r1, [pc, #248]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c5a:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c68:	4935      	ldr	r1, [pc, #212]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c7c:	4b30      	ldr	r3, [pc, #192]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c8a:	492d      	ldr	r1, [pc, #180]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d011      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c9e:	4b28      	ldr	r3, [pc, #160]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cac:	4924      	ldr	r1, [pc, #144]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cde:	4b18      	ldr	r3, [pc, #96]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cec:	4914      	ldr	r1, [pc, #80]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d10:	490b      	ldr	r1, [pc, #44]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00f      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d34:	4902      	ldr	r1, [pc, #8]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d50:	4b8a      	ldr	r3, [pc, #552]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d60:	4986      	ldr	r1, [pc, #536]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d74:	4b81      	ldr	r3, [pc, #516]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d84:	497d      	ldr	r1, [pc, #500]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d006      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80d6 	beq.w	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002da0:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a75      	ldr	r2, [pc, #468]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dac:	f7fe f8a0 	bl	8000ef0 <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002db4:	f7fe f89c 	bl	8000ef0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e195      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d021      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11d      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002de6:	4b65      	ldr	r3, [pc, #404]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002df4:	4b61      	ldr	r3, [pc, #388]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dfa:	0e1b      	lsrs	r3, r3, #24
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	019a      	lsls	r2, r3, #6
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	071b      	lsls	r3, r3, #28
 8002e1a:	4958      	ldr	r1, [pc, #352]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02e      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4c:	d129      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e5c:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e62:	0f1b      	lsrs	r3, r3, #28
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	019a      	lsls	r2, r3, #6
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	061b      	lsls	r3, r3, #24
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	071b      	lsls	r3, r3, #28
 8002e82:	493e      	ldr	r1, [pc, #248]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e90:	f023 021f 	bic.w	r2, r3, #31
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	4938      	ldr	r1, [pc, #224]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01d      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eae:	4b33      	ldr	r3, [pc, #204]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec2:	0f1b      	lsrs	r3, r3, #28
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	019a      	lsls	r2, r3, #6
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	4926      	ldr	r1, [pc, #152]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	019a      	lsls	r2, r3, #6
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	041b      	lsls	r3, r3, #16
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	071b      	lsls	r3, r3, #28
 8002f12:	491a      	ldr	r1, [pc, #104]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f1a:	4b18      	ldr	r3, [pc, #96]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f26:	f7fd ffe3 	bl	8000ef0 <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f2e:	f7fd ffdf 	bl	8000ef0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	@ 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0d8      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f040 80ce 	bne.w	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fd ffc6 	bl	8000ef0 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f66:	e00b      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f68:	f7fd ffc2 	bl	8000ef0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d904      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0bb      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f80:	4b5e      	ldr	r3, [pc, #376]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f8c:	d0ec      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02e      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d12a      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fb6:	4b51      	ldr	r3, [pc, #324]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	0f1b      	lsrs	r3, r3, #28
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	019a      	lsls	r2, r3, #6
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	4944      	ldr	r1, [pc, #272]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ff2:	4b42      	ldr	r3, [pc, #264]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	493d      	ldr	r1, [pc, #244]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d022      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800301c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003020:	d11d      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003022:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	0e1b      	lsrs	r3, r3, #24
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003030:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	0f1b      	lsrs	r3, r3, #28
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	019a      	lsls	r2, r3, #6
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	431a      	orrs	r2, r3
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	4929      	ldr	r1, [pc, #164]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d028      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	0e1b      	lsrs	r3, r3, #24
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003078:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	019a      	lsls	r2, r3, #6
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	4917      	ldr	r1, [pc, #92]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	4911      	ldr	r1, [pc, #68]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030bc:	4b0f      	ldr	r3, [pc, #60]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0e      	ldr	r2, [pc, #56]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c8:	f7fd ff12 	bl	8000ef0 <HAL_GetTick>
 80030cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030d0:	f7fd ff0e 	bl	8000ef0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	@ 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e007      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ee:	d1ef      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e049      	b.n	80031a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f841 	bl	80031ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f000 f9e8 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e054      	b.n	8003286 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a26      	ldr	r2, [pc, #152]	@ (8003294 <HAL_TIM_Base_Start_IT+0xd0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d022      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003206:	d01d      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a22      	ldr	r2, [pc, #136]	@ (8003298 <HAL_TIM_Base_Start_IT+0xd4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d018      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a21      	ldr	r2, [pc, #132]	@ (800329c <HAL_TIM_Base_Start_IT+0xd8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1f      	ldr	r2, [pc, #124]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1e      	ldr	r2, [pc, #120]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x80>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_TIM_Base_Start_IT+0xe8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d115      	bne.n	8003270 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xec>)
 800324c:	4013      	ands	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d015      	beq.n	8003282 <HAL_TIM_Base_Start_IT+0xbe>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325c:	d011      	beq.n	8003282 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326e:	e008      	b.n	8003282 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e000      	b.n	8003284 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40010400 	.word	0x40010400
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40001800 	.word	0x40001800
 80032b0:	00010007 	.word	0x00010007

080032b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d020      	beq.n	8003318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8e9 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8db 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8ec 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d020      	beq.n	8003364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0204 	mvn.w	r2, #4
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8c3 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8b5 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8c6 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d020      	beq.n	80033b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0208 	mvn.w	r2, #8
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f89d 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f88f 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8a0 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d020      	beq.n	80033fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2208      	movs	r2, #8
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f877 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f869 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f87a 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0201 	mvn.w	r2, #1
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fa9a 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f913 	bl	8003674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800346a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f90b 	bl	8003688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800348e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f834 	bl	80034fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0220 	mvn.w	r2, #32
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f8d3 	bl	8003660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a43      	ldr	r2, [pc, #268]	@ (8003634 <TIM_Base_SetConfig+0x120>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003532:	d00f      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a40      	ldr	r2, [pc, #256]	@ (8003638 <TIM_Base_SetConfig+0x124>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3f      	ldr	r2, [pc, #252]	@ (800363c <TIM_Base_SetConfig+0x128>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3e      	ldr	r2, [pc, #248]	@ (8003640 <TIM_Base_SetConfig+0x12c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3d      	ldr	r2, [pc, #244]	@ (8003644 <TIM_Base_SetConfig+0x130>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a32      	ldr	r2, [pc, #200]	@ (8003634 <TIM_Base_SetConfig+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003574:	d027      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2f      	ldr	r2, [pc, #188]	@ (8003638 <TIM_Base_SetConfig+0x124>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d023      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2e      	ldr	r2, [pc, #184]	@ (800363c <TIM_Base_SetConfig+0x128>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2d      	ldr	r2, [pc, #180]	@ (8003640 <TIM_Base_SetConfig+0x12c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2c      	ldr	r2, [pc, #176]	@ (8003644 <TIM_Base_SetConfig+0x130>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d017      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2b      	ldr	r2, [pc, #172]	@ (8003648 <TIM_Base_SetConfig+0x134>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2a      	ldr	r2, [pc, #168]	@ (800364c <TIM_Base_SetConfig+0x138>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a29      	ldr	r2, [pc, #164]	@ (8003650 <TIM_Base_SetConfig+0x13c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a28      	ldr	r2, [pc, #160]	@ (8003654 <TIM_Base_SetConfig+0x140>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a27      	ldr	r2, [pc, #156]	@ (8003658 <TIM_Base_SetConfig+0x144>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a26      	ldr	r2, [pc, #152]	@ (800365c <TIM_Base_SetConfig+0x148>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <TIM_Base_SetConfig+0x120>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0xf2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a10      	ldr	r2, [pc, #64]	@ (8003644 <TIM_Base_SetConfig+0x130>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d103      	bne.n	800360e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800
 8003640:	40000c00 	.word	0x40000c00
 8003644:	40010400 	.word	0x40010400
 8003648:	40014000 	.word	0x40014000
 800364c:	40014400 	.word	0x40014400
 8003650:	40014800 	.word	0x40014800
 8003654:	40001800 	.word	0x40001800
 8003658:	40001c00 	.word	0x40001c00
 800365c:	40002000 	.word	0x40002000

08003660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e040      	b.n	8003730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fa40 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	@ 0x24
 80036c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa8c 	bl	8003c00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f825 	bl	8003738 <UART_SetConfig>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e01b      	b.n	8003730 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fb0b 	bl	8003d44 <UART_CheckIdleState>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4ba6      	ldr	r3, [pc, #664]	@ (80039fc <UART_SetConfig+0x2c4>)
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	6979      	ldr	r1, [r7, #20]
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a94      	ldr	r2, [pc, #592]	@ (8003a00 <UART_SetConfig+0x2c8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d120      	bne.n	80037f6 <UART_SetConfig+0xbe>
 80037b4:	4b93      	ldr	r3, [pc, #588]	@ (8003a04 <UART_SetConfig+0x2cc>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d816      	bhi.n	80037f0 <UART_SetConfig+0xb8>
 80037c2:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <UART_SetConfig+0x90>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e5 	.word	0x080037e5
 80037d0:	080037df 	.word	0x080037df
 80037d4:	080037eb 	.word	0x080037eb
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e150      	b.n	8003a80 <UART_SetConfig+0x348>
 80037de:	2302      	movs	r3, #2
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e14d      	b.n	8003a80 <UART_SetConfig+0x348>
 80037e4:	2304      	movs	r3, #4
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e14a      	b.n	8003a80 <UART_SetConfig+0x348>
 80037ea:	2308      	movs	r3, #8
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e147      	b.n	8003a80 <UART_SetConfig+0x348>
 80037f0:	2310      	movs	r3, #16
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e144      	b.n	8003a80 <UART_SetConfig+0x348>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a83      	ldr	r2, [pc, #524]	@ (8003a08 <UART_SetConfig+0x2d0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d132      	bne.n	8003866 <UART_SetConfig+0x12e>
 8003800:	4b80      	ldr	r3, [pc, #512]	@ (8003a04 <UART_SetConfig+0x2cc>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d828      	bhi.n	8003860 <UART_SetConfig+0x128>
 800380e:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <UART_SetConfig+0xdc>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003849 	.word	0x08003849
 8003818:	08003861 	.word	0x08003861
 800381c:	08003861 	.word	0x08003861
 8003820:	08003861 	.word	0x08003861
 8003824:	08003855 	.word	0x08003855
 8003828:	08003861 	.word	0x08003861
 800382c:	08003861 	.word	0x08003861
 8003830:	08003861 	.word	0x08003861
 8003834:	0800384f 	.word	0x0800384f
 8003838:	08003861 	.word	0x08003861
 800383c:	08003861 	.word	0x08003861
 8003840:	08003861 	.word	0x08003861
 8003844:	0800385b 	.word	0x0800385b
 8003848:	2300      	movs	r3, #0
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e118      	b.n	8003a80 <UART_SetConfig+0x348>
 800384e:	2302      	movs	r3, #2
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e115      	b.n	8003a80 <UART_SetConfig+0x348>
 8003854:	2304      	movs	r3, #4
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e112      	b.n	8003a80 <UART_SetConfig+0x348>
 800385a:	2308      	movs	r3, #8
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e10f      	b.n	8003a80 <UART_SetConfig+0x348>
 8003860:	2310      	movs	r3, #16
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e10c      	b.n	8003a80 <UART_SetConfig+0x348>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a68      	ldr	r2, [pc, #416]	@ (8003a0c <UART_SetConfig+0x2d4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d120      	bne.n	80038b2 <UART_SetConfig+0x17a>
 8003870:	4b64      	ldr	r3, [pc, #400]	@ (8003a04 <UART_SetConfig+0x2cc>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003876:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800387a:	2b30      	cmp	r3, #48	@ 0x30
 800387c:	d013      	beq.n	80038a6 <UART_SetConfig+0x16e>
 800387e:	2b30      	cmp	r3, #48	@ 0x30
 8003880:	d814      	bhi.n	80038ac <UART_SetConfig+0x174>
 8003882:	2b20      	cmp	r3, #32
 8003884:	d009      	beq.n	800389a <UART_SetConfig+0x162>
 8003886:	2b20      	cmp	r3, #32
 8003888:	d810      	bhi.n	80038ac <UART_SetConfig+0x174>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <UART_SetConfig+0x15c>
 800388e:	2b10      	cmp	r3, #16
 8003890:	d006      	beq.n	80038a0 <UART_SetConfig+0x168>
 8003892:	e00b      	b.n	80038ac <UART_SetConfig+0x174>
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e0f2      	b.n	8003a80 <UART_SetConfig+0x348>
 800389a:	2302      	movs	r3, #2
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e0ef      	b.n	8003a80 <UART_SetConfig+0x348>
 80038a0:	2304      	movs	r3, #4
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e0ec      	b.n	8003a80 <UART_SetConfig+0x348>
 80038a6:	2308      	movs	r3, #8
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e0e9      	b.n	8003a80 <UART_SetConfig+0x348>
 80038ac:	2310      	movs	r3, #16
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e0e6      	b.n	8003a80 <UART_SetConfig+0x348>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a56      	ldr	r2, [pc, #344]	@ (8003a10 <UART_SetConfig+0x2d8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d120      	bne.n	80038fe <UART_SetConfig+0x1c6>
 80038bc:	4b51      	ldr	r3, [pc, #324]	@ (8003a04 <UART_SetConfig+0x2cc>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038c8:	d013      	beq.n	80038f2 <UART_SetConfig+0x1ba>
 80038ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80038cc:	d814      	bhi.n	80038f8 <UART_SetConfig+0x1c0>
 80038ce:	2b80      	cmp	r3, #128	@ 0x80
 80038d0:	d009      	beq.n	80038e6 <UART_SetConfig+0x1ae>
 80038d2:	2b80      	cmp	r3, #128	@ 0x80
 80038d4:	d810      	bhi.n	80038f8 <UART_SetConfig+0x1c0>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <UART_SetConfig+0x1a8>
 80038da:	2b40      	cmp	r3, #64	@ 0x40
 80038dc:	d006      	beq.n	80038ec <UART_SetConfig+0x1b4>
 80038de:	e00b      	b.n	80038f8 <UART_SetConfig+0x1c0>
 80038e0:	2300      	movs	r3, #0
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e0cc      	b.n	8003a80 <UART_SetConfig+0x348>
 80038e6:	2302      	movs	r3, #2
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e0c9      	b.n	8003a80 <UART_SetConfig+0x348>
 80038ec:	2304      	movs	r3, #4
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e0c6      	b.n	8003a80 <UART_SetConfig+0x348>
 80038f2:	2308      	movs	r3, #8
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e0c3      	b.n	8003a80 <UART_SetConfig+0x348>
 80038f8:	2310      	movs	r3, #16
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e0c0      	b.n	8003a80 <UART_SetConfig+0x348>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a44      	ldr	r2, [pc, #272]	@ (8003a14 <UART_SetConfig+0x2dc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d125      	bne.n	8003954 <UART_SetConfig+0x21c>
 8003908:	4b3e      	ldr	r3, [pc, #248]	@ (8003a04 <UART_SetConfig+0x2cc>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003916:	d017      	beq.n	8003948 <UART_SetConfig+0x210>
 8003918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391c:	d817      	bhi.n	800394e <UART_SetConfig+0x216>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003922:	d00b      	beq.n	800393c <UART_SetConfig+0x204>
 8003924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003928:	d811      	bhi.n	800394e <UART_SetConfig+0x216>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <UART_SetConfig+0x1fe>
 800392e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003932:	d006      	beq.n	8003942 <UART_SetConfig+0x20a>
 8003934:	e00b      	b.n	800394e <UART_SetConfig+0x216>
 8003936:	2300      	movs	r3, #0
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e0a1      	b.n	8003a80 <UART_SetConfig+0x348>
 800393c:	2302      	movs	r3, #2
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e09e      	b.n	8003a80 <UART_SetConfig+0x348>
 8003942:	2304      	movs	r3, #4
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e09b      	b.n	8003a80 <UART_SetConfig+0x348>
 8003948:	2308      	movs	r3, #8
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e098      	b.n	8003a80 <UART_SetConfig+0x348>
 800394e:	2310      	movs	r3, #16
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e095      	b.n	8003a80 <UART_SetConfig+0x348>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2f      	ldr	r2, [pc, #188]	@ (8003a18 <UART_SetConfig+0x2e0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d125      	bne.n	80039aa <UART_SetConfig+0x272>
 800395e:	4b29      	ldr	r3, [pc, #164]	@ (8003a04 <UART_SetConfig+0x2cc>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003964:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003968:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800396c:	d017      	beq.n	800399e <UART_SetConfig+0x266>
 800396e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003972:	d817      	bhi.n	80039a4 <UART_SetConfig+0x26c>
 8003974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003978:	d00b      	beq.n	8003992 <UART_SetConfig+0x25a>
 800397a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397e:	d811      	bhi.n	80039a4 <UART_SetConfig+0x26c>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <UART_SetConfig+0x254>
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003988:	d006      	beq.n	8003998 <UART_SetConfig+0x260>
 800398a:	e00b      	b.n	80039a4 <UART_SetConfig+0x26c>
 800398c:	2301      	movs	r3, #1
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e076      	b.n	8003a80 <UART_SetConfig+0x348>
 8003992:	2302      	movs	r3, #2
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e073      	b.n	8003a80 <UART_SetConfig+0x348>
 8003998:	2304      	movs	r3, #4
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e070      	b.n	8003a80 <UART_SetConfig+0x348>
 800399e:	2308      	movs	r3, #8
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e06d      	b.n	8003a80 <UART_SetConfig+0x348>
 80039a4:	2310      	movs	r3, #16
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e06a      	b.n	8003a80 <UART_SetConfig+0x348>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	@ (8003a1c <UART_SetConfig+0x2e4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d138      	bne.n	8003a26 <UART_SetConfig+0x2ee>
 80039b4:	4b13      	ldr	r3, [pc, #76]	@ (8003a04 <UART_SetConfig+0x2cc>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c2:	d017      	beq.n	80039f4 <UART_SetConfig+0x2bc>
 80039c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c8:	d82a      	bhi.n	8003a20 <UART_SetConfig+0x2e8>
 80039ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ce:	d00b      	beq.n	80039e8 <UART_SetConfig+0x2b0>
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d4:	d824      	bhi.n	8003a20 <UART_SetConfig+0x2e8>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <UART_SetConfig+0x2aa>
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039de:	d006      	beq.n	80039ee <UART_SetConfig+0x2b6>
 80039e0:	e01e      	b.n	8003a20 <UART_SetConfig+0x2e8>
 80039e2:	2300      	movs	r3, #0
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e04b      	b.n	8003a80 <UART_SetConfig+0x348>
 80039e8:	2302      	movs	r3, #2
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e048      	b.n	8003a80 <UART_SetConfig+0x348>
 80039ee:	2304      	movs	r3, #4
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e045      	b.n	8003a80 <UART_SetConfig+0x348>
 80039f4:	2308      	movs	r3, #8
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e042      	b.n	8003a80 <UART_SetConfig+0x348>
 80039fa:	bf00      	nop
 80039fc:	efff69f3 	.word	0xefff69f3
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40004c00 	.word	0x40004c00
 8003a14:	40005000 	.word	0x40005000
 8003a18:	40011400 	.word	0x40011400
 8003a1c:	40007800 	.word	0x40007800
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e02c      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a72      	ldr	r2, [pc, #456]	@ (8003bf4 <UART_SetConfig+0x4bc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d125      	bne.n	8003a7c <UART_SetConfig+0x344>
 8003a30:	4b71      	ldr	r3, [pc, #452]	@ (8003bf8 <UART_SetConfig+0x4c0>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a3e:	d017      	beq.n	8003a70 <UART_SetConfig+0x338>
 8003a40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a44:	d817      	bhi.n	8003a76 <UART_SetConfig+0x33e>
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a4a:	d00b      	beq.n	8003a64 <UART_SetConfig+0x32c>
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a50:	d811      	bhi.n	8003a76 <UART_SetConfig+0x33e>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <UART_SetConfig+0x326>
 8003a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5a:	d006      	beq.n	8003a6a <UART_SetConfig+0x332>
 8003a5c:	e00b      	b.n	8003a76 <UART_SetConfig+0x33e>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e00d      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a64:	2302      	movs	r3, #2
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e00a      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e007      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a70:	2308      	movs	r3, #8
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e004      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a76:	2310      	movs	r3, #16
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e001      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a88:	d15b      	bne.n	8003b42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a8a:	7ffb      	ldrb	r3, [r7, #31]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d828      	bhi.n	8003ae2 <UART_SetConfig+0x3aa>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <UART_SetConfig+0x360>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003ae3 	.word	0x08003ae3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ae3 	.word	0x08003ae3
 8003ab0:	08003ae3 	.word	0x08003ae3
 8003ab4:	08003ae3 	.word	0x08003ae3
 8003ab8:	08003adb 	.word	0x08003adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7fe fe9e 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8003ac0:	61b8      	str	r0, [r7, #24]
        break;
 8003ac2:	e013      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe feae 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	61b8      	str	r0, [r7, #24]
        break;
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003acc:	4b4b      	ldr	r3, [pc, #300]	@ (8003bfc <UART_SetConfig+0x4c4>)
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e00c      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad2:	f7fe fd81 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8003ad6:	61b8      	str	r0, [r7, #24]
        break;
 8003ad8:	e008      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ade:	61bb      	str	r3, [r7, #24]
        break;
 8003ae0:	e004      	b.n	8003aec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d074      	beq.n	8003bdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	005a      	lsls	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d916      	bls.n	8003b3c <UART_SetConfig+0x404>
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b14:	d212      	bcs.n	8003b3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f023 030f 	bic.w	r3, r3, #15
 8003b1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	89fb      	ldrh	r3, [r7, #14]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	89fa      	ldrh	r2, [r7, #14]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e04f      	b.n	8003bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	77bb      	strb	r3, [r7, #30]
 8003b40:	e04c      	b.n	8003bdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d828      	bhi.n	8003b9a <UART_SetConfig+0x462>
 8003b48:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <UART_SetConfig+0x418>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b9b 	.word	0x08003b9b
 8003b60:	08003b8b 	.word	0x08003b8b
 8003b64:	08003b9b 	.word	0x08003b9b
 8003b68:	08003b9b 	.word	0x08003b9b
 8003b6c:	08003b9b 	.word	0x08003b9b
 8003b70:	08003b93 	.word	0x08003b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe fe42 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8003b78:	61b8      	str	r0, [r7, #24]
        break;
 8003b7a:	e013      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7fe fe52 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003b80:	61b8      	str	r0, [r7, #24]
        break;
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <UART_SetConfig+0x4c4>)
 8003b86:	61bb      	str	r3, [r7, #24]
        break;
 8003b88:	e00c      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8a:	f7fe fd25 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8003b8e:	61b8      	str	r0, [r7, #24]
        break;
 8003b90:	e008      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b96:	61bb      	str	r3, [r7, #24]
        break;
 8003b98:	e004      	b.n	8003ba4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d018      	beq.n	8003bdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	085a      	lsrs	r2, r3, #1
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	441a      	add	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b0f      	cmp	r3, #15
 8003bc2:	d909      	bls.n	8003bd8 <UART_SetConfig+0x4a0>
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bca:	d205      	bcs.n	8003bd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	e001      	b.n	8003bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40007c00 	.word	0x40007c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	00f42400 	.word	0x00f42400

08003c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01a      	beq.n	8003d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfe:	d10a      	bne.n	8003d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b098      	sub	sp, #96	@ 0x60
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d54:	f7fd f8cc 	bl	8000ef0 <HAL_GetTick>
 8003d58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d12e      	bne.n	8003dc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f88c 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d021      	beq.n	8003dc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e062      	b.n	8003e8c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d149      	bne.n	8003e68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f856 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03c      	beq.n	8003e68 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	623b      	str	r3, [r7, #32]
   return(result);
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e40:	61fa      	str	r2, [r7, #28]
 8003e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e011      	b.n	8003e8c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3758      	adds	r7, #88	@ 0x58
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea4:	e04f      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d04b      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fd f81f 	bl	8000ef0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e04e      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d037      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b80      	cmp	r3, #128	@ 0x80
 8003eda:	d034      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b40      	cmp	r3, #64	@ 0x40
 8003ee0:	d031      	beq.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d110      	bne.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f838 	bl	8003f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2208      	movs	r2, #8
 8003f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e029      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f20:	d111      	bne.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f81e 	bl	8003f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e00f      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d0a0      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b095      	sub	sp, #84	@ 0x54
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d118      	bne.n	8004016 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6979      	ldr	r1, [r7, #20]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	613b      	str	r3, [r7, #16]
   return(result);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e6      	bne.n	8003fe4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800402a:	bf00      	nop
 800402c:	3754      	adds	r7, #84	@ 0x54
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004038:	b084      	sub	sp, #16
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	f107 001c 	add.w	r0, r7, #28
 8004046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800404a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800404e:	2b01      	cmp	r3, #1
 8004050:	d121      	bne.n	8004096 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004056:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	4b21      	ldr	r3, [pc, #132]	@ (80040e8 <USB_CoreInit+0xb0>)
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004076:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800407a:	2b01      	cmp	r3, #1
 800407c:	d105      	bne.n	800408a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa92 	bl	80045b4 <USB_CoreReset>
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e010      	b.n	80040b8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa86 	bl	80045b4 <USB_CoreReset>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80040b8:	7fbb      	ldrb	r3, [r7, #30]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10b      	bne.n	80040d6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f043 0206 	orr.w	r2, r3, #6
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040e2:	b004      	add	sp, #16
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	ffbdffbf 	.word	0xffbdffbf

080040ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 0201 	bic.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d115      	bne.n	800415c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800413c:	200a      	movs	r0, #10
 800413e:	f7fc fee3 	bl	8000f08 <HAL_Delay>
      ms += 10U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	330a      	adds	r3, #10
 8004146:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa25 	bl	8004598 <USB_GetMode>
 800414e:	4603      	mov	r3, r0
 8004150:	2b01      	cmp	r3, #1
 8004152:	d01e      	beq.n	8004192 <USB_SetCurrentMode+0x84>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2bc7      	cmp	r3, #199	@ 0xc7
 8004158:	d9f0      	bls.n	800413c <USB_SetCurrentMode+0x2e>
 800415a:	e01a      	b.n	8004192 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800416e:	200a      	movs	r0, #10
 8004170:	f7fc feca 	bl	8000f08 <HAL_Delay>
      ms += 10U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	330a      	adds	r3, #10
 8004178:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa0c 	bl	8004598 <USB_GetMode>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <USB_SetCurrentMode+0x84>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2bc7      	cmp	r3, #199	@ 0xc7
 800418a:	d9f0      	bls.n	800416e <USB_SetCurrentMode+0x60>
 800418c:	e001      	b.n	8004192 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e005      	b.n	800419e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2bc8      	cmp	r3, #200	@ 0xc8
 8004196:	d101      	bne.n	800419c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80041b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e009      	b.n	80041dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3340      	adds	r3, #64	@ 0x40
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3301      	adds	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b0e      	cmp	r3, #14
 80041e0:	d9f2      	bls.n	80041c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11c      	bne.n	8004224 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e005      	b.n	8004230 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004236:	461a      	mov	r2, r3
 8004238:	2300      	movs	r3, #0
 800423a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800423c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10d      	bne.n	8004260 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800424c:	2100      	movs	r1, #0
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f968 	bl	8004524 <USB_SetDevSpeed>
 8004254:	e008      	b.n	8004268 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004256:	2101      	movs	r1, #1
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f963 	bl	8004524 <USB_SetDevSpeed>
 800425e:	e003      	b.n	8004268 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004260:	2103      	movs	r1, #3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f95e 	bl	8004524 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004268:	2110      	movs	r1, #16
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8fa 	bl	8004464 <USB_FlushTxFifo>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f924 	bl	80044c8 <USB_FlushRxFifo>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e043      	b.n	800433c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042ca:	d118      	bne.n	80042fe <USB_DevInit+0x156>
    {
      if (i == 0U)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042de:	461a      	mov	r2, r3
 80042e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e013      	b.n	8004310 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f4:	461a      	mov	r2, r3
 80042f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	e008      	b.n	8004310 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430a:	461a      	mov	r2, r3
 800430c:	2300      	movs	r3, #0
 800430e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431c:	461a      	mov	r2, r3
 800431e:	2300      	movs	r3, #0
 8004320:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432e:	461a      	mov	r2, r3
 8004330:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004334:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3301      	adds	r3, #1
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004340:	461a      	mov	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4293      	cmp	r3, r2
 8004346:	d3b5      	bcc.n	80042b4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	e043      	b.n	80043d6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004360:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004364:	d118      	bne.n	8004398 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e013      	b.n	80043aa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438e:	461a      	mov	r2, r3
 8004390:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e008      	b.n	80043aa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a4:	461a      	mov	r2, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b6:	461a      	mov	r2, r3
 80043b8:	2300      	movs	r3, #0
 80043ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	3301      	adds	r3, #1
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043da:	461a      	mov	r2, r3
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4293      	cmp	r3, r2
 80043e0:	d3b5      	bcc.n	800434e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004402:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004404:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f043 0210 	orr.w	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <USB_DevInit+0x2b4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004424:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f043 0208 	orr.w	r2, r3, #8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004438:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <USB_DevInit+0x2b8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004458:	b004      	add	sp, #16
 800445a:	4770      	bx	lr
 800445c:	803c3800 	.word	0x803c3800
 8004460:	40000004 	.word	0x40000004

08004464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800447e:	d901      	bls.n	8004484 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e01b      	b.n	80044bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	daf2      	bge.n	8004472 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	019b      	lsls	r3, r3, #6
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044a8:	d901      	bls.n	80044ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e006      	b.n	80044bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d0f0      	beq.n	800449c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044e0:	d901      	bls.n	80044e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e018      	b.n	8004518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	daf2      	bge.n	80044d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2210      	movs	r2, #16
 80044f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3301      	adds	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004504:	d901      	bls.n	800450a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e006      	b.n	8004518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d0f0      	beq.n	80044f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0301 	and.w	r3, r3, #1
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045cc:	d901      	bls.n	80045d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e022      	b.n	8004618 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	daf2      	bge.n	80045c0 <USB_CoreReset+0xc>

  count = 10U;
 80045da:	230a      	movs	r3, #10
 80045dc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80045de:	e002      	b.n	80045e6 <USB_CoreReset+0x32>
  {
    count--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f9      	bne.n	80045e0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004604:	d901      	bls.n	800460a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e006      	b.n	8004618 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d0f0      	beq.n	80045f8 <USB_CoreReset+0x44>

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463a:	f3ef 8305 	mrs	r3, IPSR
 800463e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004640:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10f      	bne.n	8004666 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	607b      	str	r3, [r7, #4]
  return(result);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004652:	f3ef 8311 	mrs	r3, BASEPRI
 8004656:	603b      	str	r3, [r7, #0]
  return(result);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <osKernelInitialize+0x3a>
 800465e:	4b0e      	ldr	r3, [pc, #56]	@ (8004698 <osKernelInitialize+0x64>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d103      	bne.n	800466e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004666:	f06f 0305 	mvn.w	r3, #5
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e00c      	b.n	8004688 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <osKernelInitialize+0x64>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004676:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <osKernelInitialize+0x64>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e002      	b.n	8004688 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004688:	68fb      	ldr	r3, [r7, #12]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	2000086c 	.word	0x2000086c

0800469c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a2:	f3ef 8305 	mrs	r3, IPSR
 80046a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80046a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ae:	f3ef 8310 	mrs	r3, PRIMASK
 80046b2:	607b      	str	r3, [r7, #4]
  return(result);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ba:	f3ef 8311 	mrs	r3, BASEPRI
 80046be:	603b      	str	r3, [r7, #0]
  return(result);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <osKernelStart+0x3a>
 80046c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <osKernelStart+0x68>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d103      	bne.n	80046d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80046ce:	f06f 0305 	mvn.w	r3, #5
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e010      	b.n	80046f8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <osKernelStart+0x68>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d109      	bne.n	80046f2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046de:	f7ff ffa1 	bl	8004624 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046e2:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <osKernelStart+0x68>)
 80046e4:	2202      	movs	r2, #2
 80046e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046e8:	f001 f8e2 	bl	80058b0 <vTaskStartScheduler>
      stat = osOK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e002      	b.n	80046f8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80046f2:	f04f 33ff 	mov.w	r3, #4294967295
 80046f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046f8:	68fb      	ldr	r3, [r7, #12]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2000086c 	.word	0x2000086c

08004708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b090      	sub	sp, #64	@ 0x40
 800470c:	af04      	add	r7, sp, #16
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004718:	f3ef 8305 	mrs	r3, IPSR
 800471c:	61fb      	str	r3, [r7, #28]
  return(result);
 800471e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 808f 	bne.w	8004844 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004726:	f3ef 8310 	mrs	r3, PRIMASK
 800472a:	61bb      	str	r3, [r7, #24]
  return(result);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004732:	f3ef 8311 	mrs	r3, BASEPRI
 8004736:	617b      	str	r3, [r7, #20]
  return(result);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <osThreadNew+0x3e>
 800473e:	4b44      	ldr	r3, [pc, #272]	@ (8004850 <osThreadNew+0x148>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d07e      	beq.n	8004844 <osThreadNew+0x13c>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d07b      	beq.n	8004844 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004750:	2318      	movs	r3, #24
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295
 800475c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d045      	beq.n	80047f0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <osThreadNew+0x6a>
        name = attr->name;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <osThreadNew+0x90>
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	2b38      	cmp	r3, #56	@ 0x38
 800478a:	d805      	bhi.n	8004798 <osThreadNew+0x90>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <osThreadNew+0x94>
        return (NULL);
 8004798:	2300      	movs	r3, #0
 800479a:	e054      	b.n	8004846 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00e      	beq.n	80047d2 <osThreadNew+0xca>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2ba7      	cmp	r3, #167	@ 0xa7
 80047ba:	d90a      	bls.n	80047d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <osThreadNew+0xca>
        mem = 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	e010      	b.n	80047f4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <osThreadNew+0xec>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <osThreadNew+0xec>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <osThreadNew+0xec>
          mem = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	e001      	b.n	80047f4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d110      	bne.n	800481c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004802:	9202      	str	r2, [sp, #8]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800480e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fe4f 	bl	80054b4 <xTaskCreateStatic>
 8004816:	4603      	mov	r3, r0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e013      	b.n	8004844 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d110      	bne.n	8004844 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004824:	b29a      	uxth	r2, r3
 8004826:	f107 0310 	add.w	r3, r7, #16
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fea3 	bl	8005580 <xTaskCreate>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <osThreadNew+0x13c>
          hTask = NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004844:	693b      	ldr	r3, [r7, #16]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3730      	adds	r7, #48	@ 0x30
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000086c 	.word	0x2000086c

08004854 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800485c:	f3ef 8305 	mrs	r3, IPSR
 8004860:	613b      	str	r3, [r7, #16]
  return(result);
 8004862:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004868:	f3ef 8310 	mrs	r3, PRIMASK
 800486c:	60fb      	str	r3, [r7, #12]
  return(result);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004874:	f3ef 8311 	mrs	r3, BASEPRI
 8004878:	60bb      	str	r3, [r7, #8]
  return(result);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <osDelay+0x3c>
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <osDelay+0x58>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d103      	bne.n	8004890 <osDelay+0x3c>
    stat = osErrorISR;
 8004888:	f06f 0305 	mvn.w	r3, #5
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e007      	b.n	80048a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 ffd0 	bl	8005840 <vTaskDelay>
    }
  }

  return (stat);
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000086c 	.word	0x2000086c

080048b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a07      	ldr	r2, [pc, #28]	@ (80048dc <vApplicationGetIdleTaskMemory+0x2c>)
 80048c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a06      	ldr	r2, [pc, #24]	@ (80048e0 <vApplicationGetIdleTaskMemory+0x30>)
 80048c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2280      	movs	r2, #128	@ 0x80
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000870 	.word	0x20000870
 80048e0:	20000918 	.word	0x20000918

080048e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a07      	ldr	r2, [pc, #28]	@ (8004910 <vApplicationGetTimerTaskMemory+0x2c>)
 80048f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a06      	ldr	r2, [pc, #24]	@ (8004914 <vApplicationGetTimerTaskMemory+0x30>)
 80048fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004902:	601a      	str	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	20000b18 	.word	0x20000b18
 8004914:	20000bc0 	.word	0x20000bc0

08004918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f103 0208 	add.w	r2, r3, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f103 0208 	add.w	r2, r3, #8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f103 0208 	add.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d103      	bne.n	80049da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e00c      	b.n	80049f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3308      	adds	r3, #8
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e002      	b.n	80049e8 <vListInsert+0x2e>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d2f6      	bcs.n	80049e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	601a      	str	r2, [r3, #0]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6892      	ldr	r2, [r2, #8]
 8004a42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d103      	bne.n	8004a60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	1e5a      	subs	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10d      	bne.n	8004ab0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	b672      	cpsid	i
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	b662      	cpsie	i
 8004aa8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004ab0:	f002 f8d4 	bl	8006c5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004abc:	68f9      	ldr	r1, [r7, #12]
 8004abe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	441a      	add	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	68f9      	ldr	r1, [r7, #12]
 8004ae4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	22ff      	movs	r2, #255	@ 0xff
 8004af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	@ 0xff
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d114      	bne.n	8004b30 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01a      	beq.n	8004b44 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3310      	adds	r3, #16
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 f978 	bl	8005e08 <xTaskRemoveFromEventList>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d012      	beq.n	8004b44 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <xQueueGenericReset+0xd4>)
 8004b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	e009      	b.n	8004b44 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3310      	adds	r3, #16
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff feef 	bl	8004918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3324      	adds	r3, #36	@ 0x24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff feea 	bl	8004918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b44:	f002 f8c0 	bl	8006cc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b48:	2301      	movs	r3, #1
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	@ 0x38
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10d      	bne.n	8004b88 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	b672      	cpsid	i
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	b662      	cpsie	i
 8004b80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	b672      	cpsid	i
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	b662      	cpsie	i
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <xQueueGenericCreateStatic+0x5e>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <xQueueGenericCreateStatic+0x62>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueGenericCreateStatic+0x64>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	b672      	cpsid	i
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	b662      	cpsie	i
 8004bd4:	623b      	str	r3, [r7, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <xQueueGenericCreateStatic+0x90>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <xQueueGenericCreateStatic+0x94>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <xQueueGenericCreateStatic+0x96>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10d      	bne.n	8004c0e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	b672      	cpsid	i
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	b662      	cpsie	i
 8004c06:	61fb      	str	r3, [r7, #28]
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	e7fd      	b.n	8004c0a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c0e:	2350      	movs	r3, #80	@ 0x50
 8004c10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b50      	cmp	r3, #80	@ 0x50
 8004c16:	d00d      	beq.n	8004c34 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1c:	b672      	cpsid	i
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	b662      	cpsie	i
 8004c2c:	61bb      	str	r3, [r7, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	e7fd      	b.n	8004c30 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00d      	beq.n	8004c5c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c48:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f805 	bl	8004c66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3730      	adds	r7, #48	@ 0x30
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e002      	b.n	8004c88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c94:	2101      	movs	r1, #1
 8004c96:	69b8      	ldr	r0, [r7, #24]
 8004c98:	f7ff fef2 	bl	8004a80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	@ 0x38
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10d      	bne.n	8004ce4 <xQueueGenericSend+0x38>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	b672      	cpsid	i
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	b662      	cpsie	i
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <xQueueGenericSend+0x46>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <xQueueGenericSend+0x4a>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueGenericSend+0x4c>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <xQueueGenericSend+0x6c>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	b672      	cpsid	i
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	b662      	cpsie	i
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d103      	bne.n	8004d26 <xQueueGenericSend+0x7a>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <xQueueGenericSend+0x7e>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <xQueueGenericSend+0x80>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10d      	bne.n	8004d4c <xQueueGenericSend+0xa0>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	b672      	cpsid	i
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	b662      	cpsie	i
 8004d44:	623b      	str	r3, [r7, #32]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d4c:	f001 fa2a 	bl	80061a4 <xTaskGetSchedulerState>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <xQueueGenericSend+0xb0>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <xQueueGenericSend+0xb4>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <xQueueGenericSend+0xb6>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <xQueueGenericSend+0xd6>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	b672      	cpsid	i
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	b662      	cpsie	i
 8004d7a:	61fb      	str	r3, [r7, #28]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d82:	f001 ff6b 	bl	8006c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <xQueueGenericSend+0xec>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d129      	bne.n	8004dec <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d9e:	f000 fa1b 	bl	80051d8 <prvCopyDataToQueue>
 8004da2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	3324      	adds	r3, #36	@ 0x24
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f829 	bl	8005e08 <xTaskRemoveFromEventList>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d013      	beq.n	8004de4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8004ebc <xQueueGenericSend+0x210>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	e00a      	b.n	8004de4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004dd4:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <xQueueGenericSend+0x210>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004de4:	f001 ff70 	bl	8006cc8 <vPortExitCritical>
				return pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e063      	b.n	8004eb4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004df2:	f001 ff69 	bl	8006cc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e05c      	b.n	8004eb4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f865 	bl	8005ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e0e:	f001 ff5b 	bl	8006cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e12:	f000 fdc1 	bl	8005998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e16:	f001 ff21 	bl	8006c5c <vPortEnterCritical>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d103      	bne.n	8004e30 <xQueueGenericSend+0x184>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e36:	b25b      	sxtb	r3, r3
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d103      	bne.n	8004e46 <xQueueGenericSend+0x19a>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e46:	f001 ff3f 	bl	8006cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e4a:	1d3a      	adds	r2, r7, #4
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 f854 	bl	8005f00 <xTaskCheckForTimeOut>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d124      	bne.n	8004ea8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e60:	f000 fab2 	bl	80053c8 <prvIsQueueFull>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d018      	beq.n	8004e9c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 ff72 	bl	8005d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e7a:	f000 fa3d 	bl	80052f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e7e:	f000 fd99 	bl	80059b4 <xTaskResumeAll>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f47f af7c 	bne.w	8004d82 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ebc <xQueueGenericSend+0x210>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	e772      	b.n	8004d82 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e9e:	f000 fa2b 	bl	80052f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ea2:	f000 fd87 	bl	80059b4 <xTaskResumeAll>
 8004ea6:	e76c      	b.n	8004d82 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eaa:	f000 fa25 	bl	80052f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eae:	f000 fd81 	bl	80059b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004eb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3738      	adds	r7, #56	@ 0x38
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08e      	sub	sp, #56	@ 0x38
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10d      	bne.n	8004ef4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	b672      	cpsid	i
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	b662      	cpsie	i
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSendFromISR+0x42>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSendFromISR+0x46>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSendFromISR+0x48>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	b672      	cpsid	i
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	b662      	cpsie	i
 8004f20:	623b      	str	r3, [r7, #32]
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d103      	bne.n	8004f36 <xQueueGenericSendFromISR+0x76>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <xQueueGenericSendFromISR+0x7a>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericSendFromISR+0x7c>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	b672      	cpsid	i
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	b662      	cpsie	i
 8004f54:	61fb      	str	r3, [r7, #28]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f5c:	f001 ff66 	bl	8006e2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f60:	f3ef 8211 	mrs	r2, BASEPRI
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	61ba      	str	r2, [r7, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <xQueueGenericSendFromISR+0xd2>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d12c      	bne.n	8004fec <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fa2:	f000 f919 	bl	80051d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fa6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d112      	bne.n	8004fd6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d016      	beq.n	8004fe6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	3324      	adds	r3, #36	@ 0x24
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 ff23 	bl	8005e08 <xTaskRemoveFromEventList>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00e      	beq.n	8004fe6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e007      	b.n	8004fe6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fda:	3301      	adds	r3, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	b25a      	sxtb	r2, r3
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004fea:	e001      	b.n	8004ff0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ffa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3738      	adds	r7, #56	@ 0x38
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	@ 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005014:	2300      	movs	r3, #0
 8005016:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <xQueueReceive+0x36>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	b672      	cpsid	i
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	b662      	cpsie	i
 8005036:	623b      	str	r3, [r7, #32]
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <xQueueReceive+0x44>
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <xQueueReceive+0x48>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <xQueueReceive+0x4a>
 8005050:	2300      	movs	r3, #0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <xQueueReceive+0x6a>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505a:	b672      	cpsid	i
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	b662      	cpsie	i
 800506a:	61fb      	str	r3, [r7, #28]
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	e7fd      	b.n	800506e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005072:	f001 f897 	bl	80061a4 <xTaskGetSchedulerState>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <xQueueReceive+0x7a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <xQueueReceive+0x7e>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueReceive+0x80>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10d      	bne.n	80050a8 <xQueueReceive+0xa0>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	b672      	cpsid	i
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	b662      	cpsie	i
 80050a0:	61bb      	str	r3, [r7, #24]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050a8:	f001 fdd8 	bl	8006c5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01f      	beq.n	80050f8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050bc:	f000 f8f6 	bl	80052ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	1e5a      	subs	r2, r3, #1
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00f      	beq.n	80050f0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	3310      	adds	r3, #16
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fe97 	bl	8005e08 <xTaskRemoveFromEventList>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050e0:	4b3c      	ldr	r3, [pc, #240]	@ (80051d4 <xQueueReceive+0x1cc>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050f0:	f001 fdea 	bl	8006cc8 <vPortExitCritical>
				return pdPASS;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e069      	b.n	80051cc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050fe:	f001 fde3 	bl	8006cc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005102:	2300      	movs	r3, #0
 8005104:	e062      	b.n	80051cc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800510c:	f107 0310 	add.w	r3, r7, #16
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fedf 	bl	8005ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800511a:	f001 fdd5 	bl	8006cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800511e:	f000 fc3b 	bl	8005998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005122:	f001 fd9b 	bl	8006c5c <vPortEnterCritical>
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800512c:	b25b      	sxtb	r3, r3
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d103      	bne.n	800513c <xQueueReceive+0x134>
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005142:	b25b      	sxtb	r3, r3
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d103      	bne.n	8005152 <xQueueReceive+0x14a>
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005152:	f001 fdb9 	bl	8006cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005156:	1d3a      	adds	r2, r7, #4
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fece 	bl	8005f00 <xTaskCheckForTimeOut>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d123      	bne.n	80051b2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800516a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800516c:	f000 f916 	bl	800539c <prvIsQueueEmpty>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d017      	beq.n	80051a6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	3324      	adds	r3, #36	@ 0x24
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fdec 	bl	8005d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005186:	f000 f8b7 	bl	80052f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800518a:	f000 fc13 	bl	80059b4 <xTaskResumeAll>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d189      	bne.n	80050a8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005194:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <xQueueReceive+0x1cc>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	e780      	b.n	80050a8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a8:	f000 f8a6 	bl	80052f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ac:	f000 fc02 	bl	80059b4 <xTaskResumeAll>
 80051b0:	e77a      	b.n	80050a8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051b4:	f000 f8a0 	bl	80052f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051b8:	f000 fbfc 	bl	80059b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051be:	f000 f8ed 	bl	800539c <prvIsQueueEmpty>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f43f af6f 	beq.w	80050a8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3730      	adds	r7, #48	@ 0x30
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10d      	bne.n	8005212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d14d      	bne.n	800529a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 ffec 	bl	80061e0 <xTaskPriorityDisinherit>
 8005208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	e043      	b.n	800529a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d119      	bne.n	800524c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6858      	ldr	r0, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	461a      	mov	r2, r3
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	f002 f8b6 	bl	8007394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d32b      	bcc.n	800529a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]
 800524a:	e026      	b.n	800529a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68d8      	ldr	r0, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	461a      	mov	r2, r3
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	f002 f89c 	bl	8007394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	425b      	negs	r3, r3
 8005266:	441a      	add	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d207      	bcs.n	8005288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	425b      	negs	r3, r3
 8005282:	441a      	add	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d105      	bne.n	800529a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	3b01      	subs	r3, #1
 8005298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d018      	beq.n	80052f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	441a      	add	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d303      	bcc.n	80052e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68d9      	ldr	r1, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	461a      	mov	r2, r3
 80052ea:	6838      	ldr	r0, [r7, #0]
 80052ec:	f002 f852 	bl	8007394 <memcpy>
	}
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005300:	f001 fcac 	bl	8006c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800530a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800530c:	e011      	b.n	8005332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d012      	beq.n	800533c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3324      	adds	r3, #36	@ 0x24
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fd74 	bl	8005e08 <xTaskRemoveFromEventList>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005326:	f000 fe53 	bl	8005fd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	3b01      	subs	r3, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	dce9      	bgt.n	800530e <prvUnlockQueue+0x16>
 800533a:	e000      	b.n	800533e <prvUnlockQueue+0x46>
					break;
 800533c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	22ff      	movs	r2, #255	@ 0xff
 8005342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005346:	f001 fcbf 	bl	8006cc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800534a:	f001 fc87 	bl	8006c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005356:	e011      	b.n	800537c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3310      	adds	r3, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fd4f 	bl	8005e08 <xTaskRemoveFromEventList>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005370:	f000 fe2e 	bl	8005fd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005374:	7bbb      	ldrb	r3, [r7, #14]
 8005376:	3b01      	subs	r3, #1
 8005378:	b2db      	uxtb	r3, r3
 800537a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800537c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005380:	2b00      	cmp	r3, #0
 8005382:	dce9      	bgt.n	8005358 <prvUnlockQueue+0x60>
 8005384:	e000      	b.n	8005388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	22ff      	movs	r2, #255	@ 0xff
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005390:	f001 fc9a 	bl	8006cc8 <vPortExitCritical>
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053a4:	f001 fc5a 	bl	8006c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053b0:	2301      	movs	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e001      	b.n	80053ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ba:	f001 fc85 	bl	8006cc8 <vPortExitCritical>

	return xReturn;
 80053be:	68fb      	ldr	r3, [r7, #12]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053d0:	f001 fc44 	bl	8006c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d102      	bne.n	80053e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e001      	b.n	80053ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ea:	f001 fc6d 	bl	8006cc8 <vPortExitCritical>

	return xReturn;
 80053ee:	68fb      	ldr	r3, [r7, #12]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e014      	b.n	8005432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005408:	4a0f      	ldr	r2, [pc, #60]	@ (8005448 <vQueueAddToRegistry+0x50>)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005414:	490c      	ldr	r1, [pc, #48]	@ (8005448 <vQueueAddToRegistry+0x50>)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800541e:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <vQueueAddToRegistry+0x50>)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800542a:	e006      	b.n	800543a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b07      	cmp	r3, #7
 8005436:	d9e7      	bls.n	8005408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000fc0 	.word	0x20000fc0

0800544c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800545c:	f001 fbfe 	bl	8006c5c <vPortEnterCritical>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005466:	b25b      	sxtb	r3, r3
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d103      	bne.n	8005476 <vQueueWaitForMessageRestricted+0x2a>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800547c:	b25b      	sxtb	r3, r3
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d103      	bne.n	800548c <vQueueWaitForMessageRestricted+0x40>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800548c:	f001 fc1c 	bl	8006cc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3324      	adds	r3, #36	@ 0x24
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fc83 	bl	8005dac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054a6:	6978      	ldr	r0, [r7, #20]
 80054a8:	f7ff ff26 	bl	80052f8 <prvUnlockQueue>
	}
 80054ac:	bf00      	nop
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08e      	sub	sp, #56	@ 0x38
 80054b8:	af04      	add	r7, sp, #16
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10d      	bne.n	80054e4 <xTaskCreateStatic+0x30>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	b672      	cpsid	i
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	b662      	cpsie	i
 80054dc:	623b      	str	r3, [r7, #32]
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80054e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <xTaskCreateStatic+0x52>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	b672      	cpsid	i
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	b662      	cpsie	i
 80054fe:	61fb      	str	r3, [r7, #28]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005506:	23a8      	movs	r3, #168	@ 0xa8
 8005508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2ba8      	cmp	r3, #168	@ 0xa8
 800550e:	d00d      	beq.n	800552c <xTaskCreateStatic+0x78>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	b672      	cpsid	i
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	b662      	cpsie	i
 8005524:	61bb      	str	r3, [r7, #24]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800552c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800552e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01e      	beq.n	8005572 <xTaskCreateStatic+0xbe>
 8005534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01b      	beq.n	8005572 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	2202      	movs	r2, #2
 8005548:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800554c:	2300      	movs	r3, #0
 800554e:	9303      	str	r3, [sp, #12]
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	9302      	str	r3, [sp, #8]
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f851 	bl	800560c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800556a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800556c:	f000 f8f8 	bl	8005760 <prvAddNewTaskToReadyList>
 8005570:	e001      	b.n	8005576 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005576:	697b      	ldr	r3, [r7, #20]
	}
 8005578:	4618      	mov	r0, r3
 800557a:	3728      	adds	r7, #40	@ 0x28
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	@ 0x30
 8005584:	af04      	add	r7, sp, #16
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fc8f 	bl	8006eb8 <pvPortMalloc>
 800559a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00e      	beq.n	80055c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055a2:	20a8      	movs	r0, #168	@ 0xa8
 80055a4:	f001 fc88 	bl	8006eb8 <pvPortMalloc>
 80055a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80055b6:	e005      	b.n	80055c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055b8:	6978      	ldr	r0, [r7, #20]
 80055ba:	f001 fd4b 	bl	8007054 <vPortFree>
 80055be:	e001      	b.n	80055c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d017      	beq.n	80055fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	2300      	movs	r3, #0
 80055d6:	9303      	str	r3, [sp, #12]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	9302      	str	r3, [sp, #8]
 80055dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f80f 	bl	800560c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055ee:	69f8      	ldr	r0, [r7, #28]
 80055f0:	f000 f8b6 	bl	8005760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055f4:	2301      	movs	r3, #1
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e002      	b.n	8005600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005600:	69bb      	ldr	r3, [r7, #24]
	}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	461a      	mov	r2, r3
 8005624:	21a5      	movs	r1, #165	@ 0xa5
 8005626:	f001 fe31 	bl	800728c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005634:	440b      	add	r3, r1
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00d      	beq.n	800566a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	b672      	cpsid	i
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	b662      	cpsie	i
 8005662:	617b      	str	r3, [r7, #20]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01f      	beq.n	80056b0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e012      	b.n	800569c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	7819      	ldrb	r1, [r3, #0]
 800567e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	3334      	adds	r3, #52	@ 0x34
 8005686:	460a      	mov	r2, r1
 8005688:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3301      	adds	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	2b0f      	cmp	r3, #15
 80056a0:	d9e9      	bls.n	8005676 <prvInitialiseNewTask+0x6a>
 80056a2:	e000      	b.n	80056a6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80056a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056ae:	e003      	b.n	80056b8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	2b37      	cmp	r3, #55	@ 0x37
 80056bc:	d901      	bls.n	80056c2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056be:	2337      	movs	r3, #55	@ 0x37
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	2200      	movs	r2, #0
 80056d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff f93d 	bl	8004958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	3318      	adds	r3, #24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f938 	bl	8004958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	2200      	movs	r2, #0
 8005702:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	2200      	movs	r2, #0
 800570a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	3354      	adds	r3, #84	@ 0x54
 8005712:	224c      	movs	r2, #76	@ 0x4c
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fdb8 	bl	800728c <memset>
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	4a0d      	ldr	r2, [pc, #52]	@ (8005754 <prvInitialiseNewTask+0x148>)
 8005720:	659a      	str	r2, [r3, #88]	@ 0x58
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	4a0c      	ldr	r2, [pc, #48]	@ (8005758 <prvInitialiseNewTask+0x14c>)
 8005726:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	4a0c      	ldr	r2, [pc, #48]	@ (800575c <prvInitialiseNewTask+0x150>)
 800572c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68f9      	ldr	r1, [r7, #12]
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f001 f984 	bl	8006a40 <pxPortInitialiseStack>
 8005738:	4602      	mov	r2, r0
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800574a:	bf00      	nop
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	2000524c 	.word	0x2000524c
 8005758:	200052b4 	.word	0x200052b4
 800575c:	2000531c 	.word	0x2000531c

08005760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005768:	f001 fa78 	bl	8006c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800576c:	4b2d      	ldr	r3, [pc, #180]	@ (8005824 <prvAddNewTaskToReadyList+0xc4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	4a2c      	ldr	r2, [pc, #176]	@ (8005824 <prvAddNewTaskToReadyList+0xc4>)
 8005774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005776:	4b2c      	ldr	r3, [pc, #176]	@ (8005828 <prvAddNewTaskToReadyList+0xc8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800577e:	4a2a      	ldr	r2, [pc, #168]	@ (8005828 <prvAddNewTaskToReadyList+0xc8>)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005784:	4b27      	ldr	r3, [pc, #156]	@ (8005824 <prvAddNewTaskToReadyList+0xc4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d110      	bne.n	80057ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800578c:	f000 fc44 	bl	8006018 <prvInitialiseTaskLists>
 8005790:	e00d      	b.n	80057ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005792:	4b26      	ldr	r3, [pc, #152]	@ (800582c <prvAddNewTaskToReadyList+0xcc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800579a:	4b23      	ldr	r3, [pc, #140]	@ (8005828 <prvAddNewTaskToReadyList+0xc8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d802      	bhi.n	80057ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005828 <prvAddNewTaskToReadyList+0xc8>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057ae:	4b20      	ldr	r3, [pc, #128]	@ (8005830 <prvAddNewTaskToReadyList+0xd0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005830 <prvAddNewTaskToReadyList+0xd0>)
 80057b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005830 <prvAddNewTaskToReadyList+0xd0>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <prvAddNewTaskToReadyList+0xd4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d903      	bls.n	80057d4 <prvAddNewTaskToReadyList+0x74>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <prvAddNewTaskToReadyList+0xd4>)
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4a15      	ldr	r2, [pc, #84]	@ (8005838 <prvAddNewTaskToReadyList+0xd8>)
 80057e2:	441a      	add	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f7ff f8c1 	bl	8004972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057f0:	f001 fa6a 	bl	8006cc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057f4:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <prvAddNewTaskToReadyList+0xcc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00e      	beq.n	800581a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <prvAddNewTaskToReadyList+0xc8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	429a      	cmp	r2, r3
 8005808:	d207      	bcs.n	800581a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800580a:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <prvAddNewTaskToReadyList+0xdc>)
 800580c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	200014d4 	.word	0x200014d4
 8005828:	20001000 	.word	0x20001000
 800582c:	200014e0 	.word	0x200014e0
 8005830:	200014f0 	.word	0x200014f0
 8005834:	200014dc 	.word	0x200014dc
 8005838:	20001004 	.word	0x20001004
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01a      	beq.n	8005888 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005852:	4b15      	ldr	r3, [pc, #84]	@ (80058a8 <vTaskDelay+0x68>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <vTaskDelay+0x36>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	b672      	cpsid	i
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	b662      	cpsie	i
 800586e:	60bb      	str	r3, [r7, #8]
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	e7fd      	b.n	8005872 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005876:	f000 f88f 	bl	8005998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800587a:	2100      	movs	r1, #0
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fd23 	bl	80062c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005882:	f000 f897 	bl	80059b4 <xTaskResumeAll>
 8005886:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800588e:	4b07      	ldr	r3, [pc, #28]	@ (80058ac <vTaskDelay+0x6c>)
 8005890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200014fc 	.word	0x200014fc
 80058ac:	e000ed04 	.word	0xe000ed04

080058b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	@ 0x28
 80058b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058be:	463a      	mov	r2, r7
 80058c0:	1d39      	adds	r1, r7, #4
 80058c2:	f107 0308 	add.w	r3, r7, #8
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fff2 	bl	80048b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	9202      	str	r2, [sp, #8]
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	2300      	movs	r3, #0
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	2300      	movs	r3, #0
 80058dc:	460a      	mov	r2, r1
 80058de:	4926      	ldr	r1, [pc, #152]	@ (8005978 <vTaskStartScheduler+0xc8>)
 80058e0:	4826      	ldr	r0, [pc, #152]	@ (800597c <vTaskStartScheduler+0xcc>)
 80058e2:	f7ff fde7 	bl	80054b4 <xTaskCreateStatic>
 80058e6:	4603      	mov	r3, r0
 80058e8:	4a25      	ldr	r2, [pc, #148]	@ (8005980 <vTaskStartScheduler+0xd0>)
 80058ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058ec:	4b24      	ldr	r3, [pc, #144]	@ (8005980 <vTaskStartScheduler+0xd0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058f4:	2301      	movs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e001      	b.n	80058fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d102      	bne.n	800590a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005904:	f000 fd34 	bl	8006370 <xTimerCreateTimerTask>
 8005908:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d11d      	bne.n	800594c <vTaskStartScheduler+0x9c>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	b672      	cpsid	i
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	b662      	cpsie	i
 8005924:	613b      	str	r3, [r7, #16]
}
 8005926:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005928:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <vTaskStartScheduler+0xd4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3354      	adds	r3, #84	@ 0x54
 800592e:	4a16      	ldr	r2, [pc, #88]	@ (8005988 <vTaskStartScheduler+0xd8>)
 8005930:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005932:	4b16      	ldr	r3, [pc, #88]	@ (800598c <vTaskStartScheduler+0xdc>)
 8005934:	f04f 32ff 	mov.w	r2, #4294967295
 8005938:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800593a:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <vTaskStartScheduler+0xe0>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005940:	4b14      	ldr	r3, [pc, #80]	@ (8005994 <vTaskStartScheduler+0xe4>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005946:	f001 f90b 	bl	8006b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800594a:	e011      	b.n	8005970 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d10d      	bne.n	8005970 <vTaskStartScheduler+0xc0>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	b672      	cpsid	i
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	b662      	cpsie	i
 8005968:	60fb      	str	r3, [r7, #12]
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <vTaskStartScheduler+0xbc>
}
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	0800748c 	.word	0x0800748c
 800597c:	08005fe9 	.word	0x08005fe9
 8005980:	200014f8 	.word	0x200014f8
 8005984:	20001000 	.word	0x20001000
 8005988:	20000010 	.word	0x20000010
 800598c:	200014f4 	.word	0x200014f4
 8005990:	200014e0 	.word	0x200014e0
 8005994:	200014d8 	.word	0x200014d8

08005998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800599c:	4b04      	ldr	r3, [pc, #16]	@ (80059b0 <vTaskSuspendAll+0x18>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a03      	ldr	r2, [pc, #12]	@ (80059b0 <vTaskSuspendAll+0x18>)
 80059a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	200014fc 	.word	0x200014fc

080059b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059c2:	4b43      	ldr	r3, [pc, #268]	@ (8005ad0 <xTaskResumeAll+0x11c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <xTaskResumeAll+0x32>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	b672      	cpsid	i
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	b662      	cpsie	i
 80059de:	603b      	str	r3, [r7, #0]
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	e7fd      	b.n	80059e2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059e6:	f001 f939 	bl	8006c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059ea:	4b39      	ldr	r3, [pc, #228]	@ (8005ad0 <xTaskResumeAll+0x11c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4a37      	ldr	r2, [pc, #220]	@ (8005ad0 <xTaskResumeAll+0x11c>)
 80059f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f4:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <xTaskResumeAll+0x11c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d162      	bne.n	8005ac2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059fc:	4b35      	ldr	r3, [pc, #212]	@ (8005ad4 <xTaskResumeAll+0x120>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d05e      	beq.n	8005ac2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a04:	e02f      	b.n	8005a66 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a06:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <xTaskResumeAll+0x124>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff f80a 	bl	8004a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff f805 	bl	8004a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a26:	4b2d      	ldr	r3, [pc, #180]	@ (8005adc <xTaskResumeAll+0x128>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d903      	bls.n	8005a36 <xTaskResumeAll+0x82>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	4a2a      	ldr	r2, [pc, #168]	@ (8005adc <xTaskResumeAll+0x128>)
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4a27      	ldr	r2, [pc, #156]	@ (8005ae0 <xTaskResumeAll+0x12c>)
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f7fe ff90 	bl	8004972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	4b23      	ldr	r3, [pc, #140]	@ (8005ae4 <xTaskResumeAll+0x130>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d302      	bcc.n	8005a66 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005a60:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <xTaskResumeAll+0x134>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a66:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad8 <xTaskResumeAll+0x124>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1cb      	bne.n	8005a06 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a74:	f000 fb76 	bl	8006164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a78:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <xTaskResumeAll+0x138>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d010      	beq.n	8005aa6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a84:	f000 f846 	bl	8005b14 <xTaskIncrementTick>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005a8e:	4b16      	ldr	r3, [pc, #88]	@ (8005ae8 <xTaskResumeAll+0x134>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f1      	bne.n	8005a84 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005aa0:	4b12      	ldr	r3, [pc, #72]	@ (8005aec <xTaskResumeAll+0x138>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aa6:	4b10      	ldr	r3, [pc, #64]	@ (8005ae8 <xTaskResumeAll+0x134>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8005af0 <xTaskResumeAll+0x13c>)
 8005ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f001 f901 	bl	8006cc8 <vPortExitCritical>

	return xAlreadyYielded;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200014fc 	.word	0x200014fc
 8005ad4:	200014d4 	.word	0x200014d4
 8005ad8:	20001494 	.word	0x20001494
 8005adc:	200014dc 	.word	0x200014dc
 8005ae0:	20001004 	.word	0x20001004
 8005ae4:	20001000 	.word	0x20001000
 8005ae8:	200014e8 	.word	0x200014e8
 8005aec:	200014e4 	.word	0x200014e4
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005afa:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <xTaskGetTickCount+0x1c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b00:	687b      	ldr	r3, [r7, #4]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	200014d8 	.word	0x200014d8

08005b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b1e:	4b50      	ldr	r3, [pc, #320]	@ (8005c60 <xTaskIncrementTick+0x14c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 808c 	bne.w	8005c40 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b28:	4b4e      	ldr	r3, [pc, #312]	@ (8005c64 <xTaskIncrementTick+0x150>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b30:	4a4c      	ldr	r2, [pc, #304]	@ (8005c64 <xTaskIncrementTick+0x150>)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d123      	bne.n	8005b84 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005c68 <xTaskIncrementTick+0x154>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00d      	beq.n	8005b62 <xTaskIncrementTick+0x4e>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	b672      	cpsid	i
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	b662      	cpsie	i
 8005b5a:	603b      	str	r3, [r7, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <xTaskIncrementTick+0x4a>
 8005b62:	4b41      	ldr	r3, [pc, #260]	@ (8005c68 <xTaskIncrementTick+0x154>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	4b40      	ldr	r3, [pc, #256]	@ (8005c6c <xTaskIncrementTick+0x158>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005c68 <xTaskIncrementTick+0x154>)
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4a3e      	ldr	r2, [pc, #248]	@ (8005c6c <xTaskIncrementTick+0x158>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	4b3e      	ldr	r3, [pc, #248]	@ (8005c70 <xTaskIncrementTick+0x15c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c70 <xTaskIncrementTick+0x15c>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	f000 faf0 	bl	8006164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b84:	4b3b      	ldr	r3, [pc, #236]	@ (8005c74 <xTaskIncrementTick+0x160>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d349      	bcc.n	8005c22 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b8e:	4b36      	ldr	r3, [pc, #216]	@ (8005c68 <xTaskIncrementTick+0x154>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b98:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <xTaskIncrementTick+0x160>)
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9e:	601a      	str	r2, [r3, #0]
					break;
 8005ba0:	e03f      	b.n	8005c22 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba2:	4b31      	ldr	r3, [pc, #196]	@ (8005c68 <xTaskIncrementTick+0x154>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d203      	bcs.n	8005bc2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bba:	4a2e      	ldr	r2, [pc, #184]	@ (8005c74 <xTaskIncrementTick+0x160>)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bc0:	e02f      	b.n	8005c22 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe ff30 	bl	8004a2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	3318      	adds	r3, #24
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe ff27 	bl	8004a2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be2:	4b25      	ldr	r3, [pc, #148]	@ (8005c78 <xTaskIncrementTick+0x164>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d903      	bls.n	8005bf2 <xTaskIncrementTick+0xde>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	4a22      	ldr	r2, [pc, #136]	@ (8005c78 <xTaskIncrementTick+0x164>)
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005c7c <xTaskIncrementTick+0x168>)
 8005c00:	441a      	add	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f7fe feb2 	bl	8004972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c12:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <xTaskIncrementTick+0x16c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d3b8      	bcc.n	8005b8e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c20:	e7b5      	b.n	8005b8e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c22:	4b17      	ldr	r3, [pc, #92]	@ (8005c80 <xTaskIncrementTick+0x16c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c28:	4914      	ldr	r1, [pc, #80]	@ (8005c7c <xTaskIncrementTick+0x168>)
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d907      	bls.n	8005c4a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e004      	b.n	8005c4a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c40:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <xTaskIncrementTick+0x170>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	4a0f      	ldr	r2, [pc, #60]	@ (8005c84 <xTaskIncrementTick+0x170>)
 8005c48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c88 <xTaskIncrementTick+0x174>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005c52:	2301      	movs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c56:	697b      	ldr	r3, [r7, #20]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200014fc 	.word	0x200014fc
 8005c64:	200014d8 	.word	0x200014d8
 8005c68:	2000148c 	.word	0x2000148c
 8005c6c:	20001490 	.word	0x20001490
 8005c70:	200014ec 	.word	0x200014ec
 8005c74:	200014f4 	.word	0x200014f4
 8005c78:	200014dc 	.word	0x200014dc
 8005c7c:	20001004 	.word	0x20001004
 8005c80:	20001000 	.word	0x20001000
 8005c84:	200014e4 	.word	0x200014e4
 8005c88:	200014e8 	.word	0x200014e8

08005c8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c92:	4b2c      	ldr	r3, [pc, #176]	@ (8005d44 <vTaskSwitchContext+0xb8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <vTaskSwitchContext+0xbc>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ca0:	e049      	b.n	8005d36 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8005ca2:	4b29      	ldr	r3, [pc, #164]	@ (8005d48 <vTaskSwitchContext+0xbc>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca8:	4b28      	ldr	r3, [pc, #160]	@ (8005d4c <vTaskSwitchContext+0xc0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e013      	b.n	8005cd8 <vTaskSwitchContext+0x4c>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10d      	bne.n	8005cd2 <vTaskSwitchContext+0x46>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	b672      	cpsid	i
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	b662      	cpsie	i
 8005cca:	607b      	str	r3, [r7, #4]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <vTaskSwitchContext+0x42>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	491d      	ldr	r1, [pc, #116]	@ (8005d50 <vTaskSwitchContext+0xc4>)
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0e1      	beq.n	8005cb0 <vTaskSwitchContext+0x24>
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a16      	ldr	r2, [pc, #88]	@ (8005d50 <vTaskSwitchContext+0xc4>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d104      	bne.n	8005d1c <vTaskSwitchContext+0x90>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4a0c      	ldr	r2, [pc, #48]	@ (8005d54 <vTaskSwitchContext+0xc8>)
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	4a09      	ldr	r2, [pc, #36]	@ (8005d4c <vTaskSwitchContext+0xc0>)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d2c:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <vTaskSwitchContext+0xc8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3354      	adds	r3, #84	@ 0x54
 8005d32:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <vTaskSwitchContext+0xcc>)
 8005d34:	6013      	str	r3, [r2, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	200014fc 	.word	0x200014fc
 8005d48:	200014e8 	.word	0x200014e8
 8005d4c:	200014dc 	.word	0x200014dc
 8005d50:	20001004 	.word	0x20001004
 8005d54:	20001000 	.word	0x20001000
 8005d58:	20000010 	.word	0x20000010

08005d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10d      	bne.n	8005d88 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	b672      	cpsid	i
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	b662      	cpsie	i
 8005d80:	60fb      	str	r3, [r7, #12]
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d88:	4b07      	ldr	r3, [pc, #28]	@ (8005da8 <vTaskPlaceOnEventList+0x4c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3318      	adds	r3, #24
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fe fe12 	bl	80049ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d96:	2101      	movs	r1, #1
 8005d98:	6838      	ldr	r0, [r7, #0]
 8005d9a:	f000 fa95 	bl	80062c8 <prvAddCurrentTaskToDelayedList>
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20001000 	.word	0x20001000

08005dac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10d      	bne.n	8005dda <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	b672      	cpsid	i
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	b662      	cpsie	i
 8005dd2:	617b      	str	r3, [r7, #20]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dda:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <vTaskPlaceOnEventListRestricted+0x58>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3318      	adds	r3, #24
 8005de0:	4619      	mov	r1, r3
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7fe fdc5 	bl	8004972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295
 8005df2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	68b8      	ldr	r0, [r7, #8]
 8005df8:	f000 fa66 	bl	80062c8 <prvAddCurrentTaskToDelayedList>
	}
 8005dfc:	bf00      	nop
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20001000 	.word	0x20001000

08005e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10d      	bne.n	8005e3a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	b672      	cpsid	i
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	b662      	cpsie	i
 8005e32:	60fb      	str	r3, [r7, #12]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	3318      	adds	r3, #24
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fdf4 	bl	8004a2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e44:	4b1d      	ldr	r3, [pc, #116]	@ (8005ebc <xTaskRemoveFromEventList+0xb4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11d      	bne.n	8005e88 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe fdeb 	bl	8004a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e5a:	4b19      	ldr	r3, [pc, #100]	@ (8005ec0 <xTaskRemoveFromEventList+0xb8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d903      	bls.n	8005e6a <xTaskRemoveFromEventList+0x62>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	4a16      	ldr	r2, [pc, #88]	@ (8005ec0 <xTaskRemoveFromEventList+0xb8>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a13      	ldr	r2, [pc, #76]	@ (8005ec4 <xTaskRemoveFromEventList+0xbc>)
 8005e78:	441a      	add	r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fe fd76 	bl	8004972 <vListInsertEnd>
 8005e86:	e005      	b.n	8005e94 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3318      	adds	r3, #24
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	480e      	ldr	r0, [pc, #56]	@ (8005ec8 <xTaskRemoveFromEventList+0xc0>)
 8005e90:	f7fe fd6f 	bl	8004972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e98:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <xTaskRemoveFromEventList+0xc4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d905      	bls.n	8005eae <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <xTaskRemoveFromEventList+0xc8>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e001      	b.n	8005eb2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005eb2:	697b      	ldr	r3, [r7, #20]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	200014fc 	.word	0x200014fc
 8005ec0:	200014dc 	.word	0x200014dc
 8005ec4:	20001004 	.word	0x20001004
 8005ec8:	20001494 	.word	0x20001494
 8005ecc:	20001000 	.word	0x20001000
 8005ed0:	200014e8 	.word	0x200014e8

08005ed4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005edc:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <vTaskInternalSetTimeOutState+0x24>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <vTaskInternalSetTimeOutState+0x28>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	605a      	str	r2, [r3, #4]
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	200014ec 	.word	0x200014ec
 8005efc:	200014d8 	.word	0x200014d8

08005f00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10d      	bne.n	8005f2c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f14:	b672      	cpsid	i
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	b662      	cpsie	i
 8005f24:	613b      	str	r3, [r7, #16]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10d      	bne.n	8005f4e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f36:	b672      	cpsid	i
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	b662      	cpsie	i
 8005f46:	60fb      	str	r3, [r7, #12]
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005f4e:	f000 fe85 	bl	8006c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f52:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc8 <xTaskCheckForTimeOut+0xc8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6a:	d102      	bne.n	8005f72 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61fb      	str	r3, [r7, #28]
 8005f70:	e023      	b.n	8005fba <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b15      	ldr	r3, [pc, #84]	@ (8005fcc <xTaskCheckForTimeOut+0xcc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d007      	beq.n	8005f8e <xTaskCheckForTimeOut+0x8e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d302      	bcc.n	8005f8e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	e015      	b.n	8005fba <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d20b      	bcs.n	8005fb0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ff95 	bl	8005ed4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
 8005fae:	e004      	b.n	8005fba <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fba:	f000 fe85 	bl	8006cc8 <vPortExitCritical>

	return xReturn;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	200014d8 	.word	0x200014d8
 8005fcc:	200014ec 	.word	0x200014ec

08005fd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fd4:	4b03      	ldr	r3, [pc, #12]	@ (8005fe4 <vTaskMissedYield+0x14>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	bf00      	nop
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	200014e8 	.word	0x200014e8

08005fe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ff0:	f000 f852 	bl	8006098 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ff4:	4b06      	ldr	r3, [pc, #24]	@ (8006010 <prvIdleTask+0x28>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d9f9      	bls.n	8005ff0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ffc:	4b05      	ldr	r3, [pc, #20]	@ (8006014 <prvIdleTask+0x2c>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800600c:	e7f0      	b.n	8005ff0 <prvIdleTask+0x8>
 800600e:	bf00      	nop
 8006010:	20001004 	.word	0x20001004
 8006014:	e000ed04 	.word	0xe000ed04

08006018 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	e00c      	b.n	800603e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a12      	ldr	r2, [pc, #72]	@ (8006078 <prvInitialiseTaskLists+0x60>)
 8006030:	4413      	add	r3, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fc70 	bl	8004918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3301      	adds	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b37      	cmp	r3, #55	@ 0x37
 8006042:	d9ef      	bls.n	8006024 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006044:	480d      	ldr	r0, [pc, #52]	@ (800607c <prvInitialiseTaskLists+0x64>)
 8006046:	f7fe fc67 	bl	8004918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800604a:	480d      	ldr	r0, [pc, #52]	@ (8006080 <prvInitialiseTaskLists+0x68>)
 800604c:	f7fe fc64 	bl	8004918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006050:	480c      	ldr	r0, [pc, #48]	@ (8006084 <prvInitialiseTaskLists+0x6c>)
 8006052:	f7fe fc61 	bl	8004918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006056:	480c      	ldr	r0, [pc, #48]	@ (8006088 <prvInitialiseTaskLists+0x70>)
 8006058:	f7fe fc5e 	bl	8004918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800605c:	480b      	ldr	r0, [pc, #44]	@ (800608c <prvInitialiseTaskLists+0x74>)
 800605e:	f7fe fc5b 	bl	8004918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006062:	4b0b      	ldr	r3, [pc, #44]	@ (8006090 <prvInitialiseTaskLists+0x78>)
 8006064:	4a05      	ldr	r2, [pc, #20]	@ (800607c <prvInitialiseTaskLists+0x64>)
 8006066:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006068:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <prvInitialiseTaskLists+0x7c>)
 800606a:	4a05      	ldr	r2, [pc, #20]	@ (8006080 <prvInitialiseTaskLists+0x68>)
 800606c:	601a      	str	r2, [r3, #0]
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20001004 	.word	0x20001004
 800607c:	20001464 	.word	0x20001464
 8006080:	20001478 	.word	0x20001478
 8006084:	20001494 	.word	0x20001494
 8006088:	200014a8 	.word	0x200014a8
 800608c:	200014c0 	.word	0x200014c0
 8006090:	2000148c 	.word	0x2000148c
 8006094:	20001490 	.word	0x20001490

08006098 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800609e:	e019      	b.n	80060d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060a0:	f000 fddc 	bl	8006c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a4:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <prvCheckTasksWaitingTermination+0x50>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fcbb 	bl	8004a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060b6:	4b0d      	ldr	r3, [pc, #52]	@ (80060ec <prvCheckTasksWaitingTermination+0x54>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	4a0b      	ldr	r2, [pc, #44]	@ (80060ec <prvCheckTasksWaitingTermination+0x54>)
 80060be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060c0:	4b0b      	ldr	r3, [pc, #44]	@ (80060f0 <prvCheckTasksWaitingTermination+0x58>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	4a0a      	ldr	r2, [pc, #40]	@ (80060f0 <prvCheckTasksWaitingTermination+0x58>)
 80060c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ca:	f000 fdfd 	bl	8006cc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f810 	bl	80060f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060d4:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <prvCheckTasksWaitingTermination+0x58>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e1      	bne.n	80060a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200014a8 	.word	0x200014a8
 80060ec:	200014d4 	.word	0x200014d4
 80060f0:	200014bc 	.word	0x200014bc

080060f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3354      	adds	r3, #84	@ 0x54
 8006100:	4618      	mov	r0, r3
 8006102:	f001 f8cb 	bl	800729c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800610c:	2b00      	cmp	r3, #0
 800610e:	d108      	bne.n	8006122 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ff9d 	bl	8007054 <vPortFree>
				vPortFree( pxTCB );
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 ff9a 	bl	8007054 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006120:	e01b      	b.n	800615a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006128:	2b01      	cmp	r3, #1
 800612a:	d103      	bne.n	8006134 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 ff91 	bl	8007054 <vPortFree>
	}
 8006132:	e012      	b.n	800615a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800613a:	2b02      	cmp	r3, #2
 800613c:	d00d      	beq.n	800615a <prvDeleteTCB+0x66>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	b672      	cpsid	i
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	b662      	cpsie	i
 8006152:	60fb      	str	r3, [r7, #12]
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	e7fd      	b.n	8006156 <prvDeleteTCB+0x62>
	}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616a:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <prvResetNextTaskUnblockTime+0x38>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006174:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800617c:	e008      	b.n	8006190 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617e:	4b07      	ldr	r3, [pc, #28]	@ (800619c <prvResetNextTaskUnblockTime+0x38>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a04      	ldr	r2, [pc, #16]	@ (80061a0 <prvResetNextTaskUnblockTime+0x3c>)
 800618e:	6013      	str	r3, [r2, #0]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	2000148c 	.word	0x2000148c
 80061a0:	200014f4 	.word	0x200014f4

080061a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061aa:	4b0b      	ldr	r3, [pc, #44]	@ (80061d8 <xTaskGetSchedulerState+0x34>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061b2:	2301      	movs	r3, #1
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	e008      	b.n	80061ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b8:	4b08      	ldr	r3, [pc, #32]	@ (80061dc <xTaskGetSchedulerState+0x38>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061c0:	2302      	movs	r3, #2
 80061c2:	607b      	str	r3, [r7, #4]
 80061c4:	e001      	b.n	80061ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061ca:	687b      	ldr	r3, [r7, #4]
	}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	200014e0 	.word	0x200014e0
 80061dc:	200014fc 	.word	0x200014fc

080061e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d05c      	beq.n	80062b0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061f6:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <xTaskPriorityDisinherit+0xdc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d00d      	beq.n	800621c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	b672      	cpsid	i
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	b662      	cpsie	i
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	b672      	cpsid	i
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	b662      	cpsie	i
 8006238:	60bb      	str	r3, [r7, #8]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	1e5a      	subs	r2, r3, #1
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006252:	429a      	cmp	r2, r3
 8006254:	d02c      	beq.n	80062b0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800625a:	2b00      	cmp	r3, #0
 800625c:	d128      	bne.n	80062b0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3304      	adds	r3, #4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fbe2 	bl	8004a2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006280:	4b0f      	ldr	r3, [pc, #60]	@ (80062c0 <xTaskPriorityDisinherit+0xe0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d903      	bls.n	8006290 <xTaskPriorityDisinherit+0xb0>
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	4a0c      	ldr	r2, [pc, #48]	@ (80062c0 <xTaskPriorityDisinherit+0xe0>)
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4a09      	ldr	r2, [pc, #36]	@ (80062c4 <xTaskPriorityDisinherit+0xe4>)
 800629e:	441a      	add	r2, r3
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fe fb63 	bl	8004972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062b0:	697b      	ldr	r3, [r7, #20]
	}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20001000 	.word	0x20001000
 80062c0:	200014dc 	.word	0x200014dc
 80062c4:	20001004 	.word	0x20001004

080062c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062d2:	4b21      	ldr	r3, [pc, #132]	@ (8006358 <prvAddCurrentTaskToDelayedList+0x90>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062d8:	4b20      	ldr	r3, [pc, #128]	@ (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fba4 	bl	8004a2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d10a      	bne.n	8006302 <prvAddCurrentTaskToDelayedList+0x3a>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f2:	4b1a      	ldr	r3, [pc, #104]	@ (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4619      	mov	r1, r3
 80062fa:	4819      	ldr	r0, [pc, #100]	@ (8006360 <prvAddCurrentTaskToDelayedList+0x98>)
 80062fc:	f7fe fb39 	bl	8004972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006300:	e026      	b.n	8006350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800630a:	4b14      	ldr	r3, [pc, #80]	@ (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	429a      	cmp	r2, r3
 8006318:	d209      	bcs.n	800632e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800631a:	4b12      	ldr	r3, [pc, #72]	@ (8006364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f7fe fb47 	bl	80049ba <vListInsert>
}
 800632c:	e010      	b.n	8006350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800632e:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f7fe fb3d 	bl	80049ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006340:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	d202      	bcs.n	8006350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800634a:	4a08      	ldr	r2, [pc, #32]	@ (800636c <prvAddCurrentTaskToDelayedList+0xa4>)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6013      	str	r3, [r2, #0]
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200014d8 	.word	0x200014d8
 800635c:	20001000 	.word	0x20001000
 8006360:	200014c0 	.word	0x200014c0
 8006364:	20001490 	.word	0x20001490
 8006368:	2000148c 	.word	0x2000148c
 800636c:	200014f4 	.word	0x200014f4

08006370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	@ 0x28
 8006374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800637a:	f000 fb21 	bl	80069c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800637e:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <xTimerCreateTimerTask+0x88>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d021      	beq.n	80063ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800638e:	1d3a      	adds	r2, r7, #4
 8006390:	f107 0108 	add.w	r1, r7, #8
 8006394:	f107 030c 	add.w	r3, r7, #12
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe faa3 	bl	80048e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	9202      	str	r2, [sp, #8]
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	2302      	movs	r3, #2
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	460a      	mov	r2, r1
 80063b0:	4912      	ldr	r1, [pc, #72]	@ (80063fc <xTimerCreateTimerTask+0x8c>)
 80063b2:	4813      	ldr	r0, [pc, #76]	@ (8006400 <xTimerCreateTimerTask+0x90>)
 80063b4:	f7ff f87e 	bl	80054b4 <xTaskCreateStatic>
 80063b8:	4603      	mov	r3, r0
 80063ba:	4a12      	ldr	r2, [pc, #72]	@ (8006404 <xTimerCreateTimerTask+0x94>)
 80063bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063be:	4b11      	ldr	r3, [pc, #68]	@ (8006404 <xTimerCreateTimerTask+0x94>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063c6:	2301      	movs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10d      	bne.n	80063ec <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d4:	b672      	cpsid	i
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	b662      	cpsie	i
 80063e4:	613b      	str	r3, [r7, #16]
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80063ec:	697b      	ldr	r3, [r7, #20]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20001530 	.word	0x20001530
 80063fc:	08007494 	.word	0x08007494
 8006400:	08006549 	.word	0x08006549
 8006404:	20001534 	.word	0x20001534

08006408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	@ 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10d      	bne.n	800643c <xTimerGenericCommand+0x34>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	b672      	cpsid	i
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	b662      	cpsie	i
 8006434:	623b      	str	r3, [r7, #32]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800643c:	4b19      	ldr	r3, [pc, #100]	@ (80064a4 <xTimerGenericCommand+0x9c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d02a      	beq.n	800649a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b05      	cmp	r3, #5
 8006454:	dc18      	bgt.n	8006488 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006456:	f7ff fea5 	bl	80061a4 <xTaskGetSchedulerState>
 800645a:	4603      	mov	r3, r0
 800645c:	2b02      	cmp	r3, #2
 800645e:	d109      	bne.n	8006474 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006460:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <xTimerGenericCommand+0x9c>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	f107 0110 	add.w	r1, r7, #16
 8006468:	2300      	movs	r3, #0
 800646a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800646c:	f7fe fc1e 	bl	8004cac <xQueueGenericSend>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24
 8006472:	e012      	b.n	800649a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <xTimerGenericCommand+0x9c>)
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	f107 0110 	add.w	r1, r7, #16
 800647c:	2300      	movs	r3, #0
 800647e:	2200      	movs	r2, #0
 8006480:	f7fe fc14 	bl	8004cac <xQueueGenericSend>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24
 8006486:	e008      	b.n	800649a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <xTimerGenericCommand+0x9c>)
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	f107 0110 	add.w	r1, r7, #16
 8006490:	2300      	movs	r3, #0
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	f7fe fd14 	bl	8004ec0 <xQueueGenericSendFromISR>
 8006498:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	@ 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20001530 	.word	0x20001530

080064a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b2:	4b24      	ldr	r3, [pc, #144]	@ (8006544 <prvProcessExpiredTimer+0x9c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	3304      	adds	r3, #4
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fab3 	bl	8004a2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d025      	beq.n	8006520 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	18d1      	adds	r1, r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	6978      	ldr	r0, [r7, #20]
 80064e2:	f000 f8d7 	bl	8006694 <prvInsertTimerInActiveList>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d022      	beq.n	8006532 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064ec:	2300      	movs	r3, #0
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	2100      	movs	r1, #0
 80064f6:	6978      	ldr	r0, [r7, #20]
 80064f8:	f7ff ff86 	bl	8006408 <xTimerGenericCommand>
 80064fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d116      	bne.n	8006532 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	b672      	cpsid	i
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	b662      	cpsie	i
 8006518:	60fb      	str	r3, [r7, #12]
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	e7fd      	b.n	800651c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	6978      	ldr	r0, [r7, #20]
 8006538:	4798      	blx	r3
}
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20001528 	.word	0x20001528

08006548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006550:	f107 0308 	add.w	r3, r7, #8
 8006554:	4618      	mov	r0, r3
 8006556:	f000 f859 	bl	800660c <prvGetNextExpireTime>
 800655a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4619      	mov	r1, r3
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f805 	bl	8006570 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006566:	f000 f8d7 	bl	8006718 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800656a:	bf00      	nop
 800656c:	e7f0      	b.n	8006550 <prvTimerTask+0x8>
	...

08006570 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800657a:	f7ff fa0d 	bl	8005998 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f866 	bl	8006654 <prvSampleTimeNow>
 8006588:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d130      	bne.n	80065f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <prvProcessTimerOrBlockTask+0x3c>
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	429a      	cmp	r2, r3
 800659c:	d806      	bhi.n	80065ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800659e:	f7ff fa09 	bl	80059b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff ff7f 	bl	80064a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065aa:	e024      	b.n	80065f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065b2:	4b13      	ldr	r3, [pc, #76]	@ (8006600 <prvProcessTimerOrBlockTask+0x90>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <prvProcessTimerOrBlockTask+0x50>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <prvProcessTimerOrBlockTask+0x52>
 80065c0:	2300      	movs	r3, #0
 80065c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <prvProcessTimerOrBlockTask+0x94>)
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	4619      	mov	r1, r3
 80065d2:	f7fe ff3b 	bl	800544c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80065d6:	f7ff f9ed 	bl	80059b4 <xTaskResumeAll>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <prvProcessTimerOrBlockTask+0x98>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
}
 80065f0:	e001      	b.n	80065f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065f2:	f7ff f9df 	bl	80059b4 <xTaskResumeAll>
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	2000152c 	.word	0x2000152c
 8006604:	20001530 	.word	0x20001530
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006614:	4b0e      	ldr	r3, [pc, #56]	@ (8006650 <prvGetNextExpireTime+0x44>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <prvGetNextExpireTime+0x16>
 800661e:	2201      	movs	r2, #1
 8006620:	e000      	b.n	8006624 <prvGetNextExpireTime+0x18>
 8006622:	2200      	movs	r2, #0
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006630:	4b07      	ldr	r3, [pc, #28]	@ (8006650 <prvGetNextExpireTime+0x44>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	e001      	b.n	8006640 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006640:	68fb      	ldr	r3, [r7, #12]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20001528 	.word	0x20001528

08006654 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800665c:	f7ff fa4a 	bl	8005af4 <xTaskGetTickCount>
 8006660:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006662:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <prvSampleTimeNow+0x3c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	429a      	cmp	r2, r3
 800666a:	d205      	bcs.n	8006678 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800666c:	f000 f940 	bl	80068f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	e002      	b.n	800667e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800667e:	4a04      	ldr	r2, [pc, #16]	@ (8006690 <prvSampleTimeNow+0x3c>)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006684:	68fb      	ldr	r3, [r7, #12]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20001538 	.word	0x20001538

08006694 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d812      	bhi.n	80066e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d302      	bcc.n	80066ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e01b      	b.n	8006706 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066ce:	4b10      	ldr	r3, [pc, #64]	@ (8006710 <prvInsertTimerInActiveList+0x7c>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f7fe f96e 	bl	80049ba <vListInsert>
 80066de:	e012      	b.n	8006706 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d206      	bcs.n	80066f6 <prvInsertTimerInActiveList+0x62>
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d302      	bcc.n	80066f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e007      	b.n	8006706 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066f6:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <prvInsertTimerInActiveList+0x80>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f7fe f95a 	bl	80049ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006706:	697b      	ldr	r3, [r7, #20]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	2000152c 	.word	0x2000152c
 8006714:	20001528 	.word	0x20001528

08006718 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08e      	sub	sp, #56	@ 0x38
 800671c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800671e:	e0d4      	b.n	80068ca <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da1b      	bge.n	800675e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	3304      	adds	r3, #4
 800672a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800672c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10d      	bne.n	800674e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	b672      	cpsid	i
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	b662      	cpsie	i
 8006746:	61fb      	str	r3, [r7, #28]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800674e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006754:	6850      	ldr	r0, [r2, #4]
 8006756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006758:	6892      	ldr	r2, [r2, #8]
 800675a:	4611      	mov	r1, r2
 800675c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f2c0 80b2 	blt.w	80068ca <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	3304      	adds	r3, #4
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe f958 	bl	8004a2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800677c:	463b      	mov	r3, r7
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff ff68 	bl	8006654 <prvSampleTimeNow>
 8006784:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b09      	cmp	r3, #9
 800678a:	f200 809b 	bhi.w	80068c4 <prvProcessReceivedCommands+0x1ac>
 800678e:	a201      	add	r2, pc, #4	@ (adr r2, 8006794 <prvProcessReceivedCommands+0x7c>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067bd 	.word	0x080067bd
 800679c:	080067bd 	.word	0x080067bd
 80067a0:	08006837 	.word	0x08006837
 80067a4:	0800684b 	.word	0x0800684b
 80067a8:	0800689b 	.word	0x0800689b
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067bd 	.word	0x080067bd
 80067b4:	08006837 	.word	0x08006837
 80067b8:	0800684b 	.word	0x0800684b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	18d1      	adds	r1, r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067dc:	f7ff ff5a 	bl	8006694 <prvInsertTimerInActiveList>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d070      	beq.n	80068c8 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d065      	beq.n	80068c8 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	441a      	add	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	2100      	movs	r1, #0
 800680c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800680e:	f7ff fdfb 	bl	8006408 <xTimerGenericCommand>
 8006812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d156      	bne.n	80068c8 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	b672      	cpsid	i
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	b662      	cpsie	i
 800682e:	61bb      	str	r3, [r7, #24]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	b2da      	uxtb	r2, r3
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006848:	e03f      	b.n	80068ca <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10d      	bne.n	8006886 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686e:	b672      	cpsid	i
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	b662      	cpsie	i
 800687e:	617b      	str	r3, [r7, #20]
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	e7fd      	b.n	8006882 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	18d1      	adds	r1, r2, r3
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006894:	f7ff fefe 	bl	8006694 <prvInsertTimerInActiveList>
					break;
 8006898:	e017      	b.n	80068ca <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800689a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d103      	bne.n	80068b0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80068a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068aa:	f000 fbd3 	bl	8007054 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068ae:	e00c      	b.n	80068ca <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80068c2:	e002      	b.n	80068ca <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80068c4:	bf00      	nop
 80068c6:	e000      	b.n	80068ca <prvProcessReceivedCommands+0x1b2>
					break;
 80068c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068ca:	4b08      	ldr	r3, [pc, #32]	@ (80068ec <prvProcessReceivedCommands+0x1d4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1d39      	adds	r1, r7, #4
 80068d0:	2200      	movs	r2, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fb98 	bl	8005008 <xQueueReceive>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f47f af20 	bne.w	8006720 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	3730      	adds	r7, #48	@ 0x30
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20001530 	.word	0x20001530

080068f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068f6:	e04b      	b.n	8006990 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068f8:	4b2f      	ldr	r3, [pc, #188]	@ (80069b8 <prvSwitchTimerLists+0xc8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006902:	4b2d      	ldr	r3, [pc, #180]	@ (80069b8 <prvSwitchTimerLists+0xc8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3304      	adds	r3, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe f88b 	bl	8004a2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d031      	beq.n	8006990 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	429a      	cmp	r2, r3
 800693c:	d90e      	bls.n	800695c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800694a:	4b1b      	ldr	r3, [pc, #108]	@ (80069b8 <prvSwitchTimerLists+0xc8>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fe f830 	bl	80049ba <vListInsert>
 800695a:	e019      	b.n	8006990 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	2100      	movs	r1, #0
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff fd4e 	bl	8006408 <xTimerGenericCommand>
 800696c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	603b      	str	r3, [r7, #0]
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006990:	4b09      	ldr	r3, [pc, #36]	@ (80069b8 <prvSwitchTimerLists+0xc8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1ae      	bne.n	80068f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800699a:	4b07      	ldr	r3, [pc, #28]	@ (80069b8 <prvSwitchTimerLists+0xc8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069a0:	4b06      	ldr	r3, [pc, #24]	@ (80069bc <prvSwitchTimerLists+0xcc>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a04      	ldr	r2, [pc, #16]	@ (80069b8 <prvSwitchTimerLists+0xc8>)
 80069a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069a8:	4a04      	ldr	r2, [pc, #16]	@ (80069bc <prvSwitchTimerLists+0xcc>)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6013      	str	r3, [r2, #0]
}
 80069ae:	bf00      	nop
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20001528 	.word	0x20001528
 80069bc:	2000152c 	.word	0x2000152c

080069c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069c6:	f000 f949 	bl	8006c5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069ca:	4b15      	ldr	r3, [pc, #84]	@ (8006a20 <prvCheckForValidListAndQueue+0x60>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d120      	bne.n	8006a14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069d2:	4814      	ldr	r0, [pc, #80]	@ (8006a24 <prvCheckForValidListAndQueue+0x64>)
 80069d4:	f7fd ffa0 	bl	8004918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069d8:	4813      	ldr	r0, [pc, #76]	@ (8006a28 <prvCheckForValidListAndQueue+0x68>)
 80069da:	f7fd ff9d 	bl	8004918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069de:	4b13      	ldr	r3, [pc, #76]	@ (8006a2c <prvCheckForValidListAndQueue+0x6c>)
 80069e0:	4a10      	ldr	r2, [pc, #64]	@ (8006a24 <prvCheckForValidListAndQueue+0x64>)
 80069e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069e4:	4b12      	ldr	r3, [pc, #72]	@ (8006a30 <prvCheckForValidListAndQueue+0x70>)
 80069e6:	4a10      	ldr	r2, [pc, #64]	@ (8006a28 <prvCheckForValidListAndQueue+0x68>)
 80069e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069ea:	2300      	movs	r3, #0
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4b11      	ldr	r3, [pc, #68]	@ (8006a34 <prvCheckForValidListAndQueue+0x74>)
 80069f0:	4a11      	ldr	r2, [pc, #68]	@ (8006a38 <prvCheckForValidListAndQueue+0x78>)
 80069f2:	2110      	movs	r1, #16
 80069f4:	200a      	movs	r0, #10
 80069f6:	f7fe f8af 	bl	8004b58 <xQueueGenericCreateStatic>
 80069fa:	4603      	mov	r3, r0
 80069fc:	4a08      	ldr	r2, [pc, #32]	@ (8006a20 <prvCheckForValidListAndQueue+0x60>)
 80069fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <prvCheckForValidListAndQueue+0x60>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <prvCheckForValidListAndQueue+0x60>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	490b      	ldr	r1, [pc, #44]	@ (8006a3c <prvCheckForValidListAndQueue+0x7c>)
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fcf2 	bl	80053f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a14:	f000 f958 	bl	8006cc8 <vPortExitCritical>
}
 8006a18:	bf00      	nop
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20001530 	.word	0x20001530
 8006a24:	20001500 	.word	0x20001500
 8006a28:	20001514 	.word	0x20001514
 8006a2c:	20001528 	.word	0x20001528
 8006a30:	2000152c 	.word	0x2000152c
 8006a34:	200015dc 	.word	0x200015dc
 8006a38:	2000153c 	.word	0x2000153c
 8006a3c:	0800749c 	.word	0x0800749c

08006a40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3b04      	subs	r3, #4
 8006a50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3b04      	subs	r3, #4
 8006a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f023 0201 	bic.w	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3b04      	subs	r3, #4
 8006a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a70:	4a0c      	ldr	r2, [pc, #48]	@ (8006aa4 <pxPortInitialiseStack+0x64>)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3b14      	subs	r3, #20
 8006a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f06f 0202 	mvn.w	r2, #2
 8006a8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3b20      	subs	r3, #32
 8006a94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	08006aa9 	.word	0x08006aa9

08006aa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ab2:	4b15      	ldr	r3, [pc, #84]	@ (8006b08 <prvTaskExitError+0x60>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d00d      	beq.n	8006ad8 <prvTaskExitError+0x30>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <prvTaskExitError+0x2c>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	b672      	cpsid	i
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	b662      	cpsie	i
 8006aec:	60bb      	str	r3, [r7, #8]
}
 8006aee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006af0:	bf00      	nop
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0fc      	beq.n	8006af2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	2000000c 	.word	0x2000000c
 8006b0c:	00000000 	.word	0x00000000

08006b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b10:	4b07      	ldr	r3, [pc, #28]	@ (8006b30 <pxCurrentTCBConst2>)
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6808      	ldr	r0, [r1, #0]
 8006b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	f380 8809 	msr	PSP, r0
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	4770      	bx	lr
 8006b2c:	f3af 8000 	nop.w

08006b30 <pxCurrentTCBConst2>:
 8006b30:	20001000 	.word	0x20001000
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b38:	4808      	ldr	r0, [pc, #32]	@ (8006b5c <prvPortStartFirstTask+0x24>)
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	6800      	ldr	r0, [r0, #0]
 8006b3e:	f380 8808 	msr	MSP, r0
 8006b42:	f04f 0000 	mov.w	r0, #0
 8006b46:	f380 8814 	msr	CONTROL, r0
 8006b4a:	b662      	cpsie	i
 8006b4c:	b661      	cpsie	f
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	df00      	svc	0
 8006b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b5a:	bf00      	nop
 8006b5c:	e000ed08 	.word	0xe000ed08

08006b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b66:	4b37      	ldr	r3, [pc, #220]	@ (8006c44 <xPortStartScheduler+0xe4>)
 8006b68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	22ff      	movs	r2, #255	@ 0xff
 8006b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c48 <xPortStartScheduler+0xe8>)
 8006b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006b90:	2207      	movs	r2, #7
 8006b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b94:	e009      	b.n	8006baa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b96:	4b2d      	ldr	r3, [pc, #180]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb2:	2b80      	cmp	r3, #128	@ 0x80
 8006bb4:	d0ef      	beq.n	8006b96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bb6:	4b25      	ldr	r3, [pc, #148]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f1c3 0307 	rsb	r3, r3, #7
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d00d      	beq.n	8006bde <xPortStartScheduler+0x7e>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	b672      	cpsid	i
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	b662      	cpsie	i
 8006bd6:	60bb      	str	r3, [r7, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bde:	4b1b      	ldr	r3, [pc, #108]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	4a19      	ldr	r2, [pc, #100]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006be8:	4b18      	ldr	r3, [pc, #96]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bf0:	4a16      	ldr	r2, [pc, #88]	@ (8006c4c <xPortStartScheduler+0xec>)
 8006bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bfc:	4b14      	ldr	r3, [pc, #80]	@ (8006c50 <xPortStartScheduler+0xf0>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a13      	ldr	r2, [pc, #76]	@ (8006c50 <xPortStartScheduler+0xf0>)
 8006c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c08:	4b11      	ldr	r3, [pc, #68]	@ (8006c50 <xPortStartScheduler+0xf0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a10      	ldr	r2, [pc, #64]	@ (8006c50 <xPortStartScheduler+0xf0>)
 8006c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c14:	f000 f8dc 	bl	8006dd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c18:	4b0e      	ldr	r3, [pc, #56]	@ (8006c54 <xPortStartScheduler+0xf4>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c1e:	f000 f8fb 	bl	8006e18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c22:	4b0d      	ldr	r3, [pc, #52]	@ (8006c58 <xPortStartScheduler+0xf8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a0c      	ldr	r2, [pc, #48]	@ (8006c58 <xPortStartScheduler+0xf8>)
 8006c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c2e:	f7ff ff83 	bl	8006b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c32:	f7ff f82b 	bl	8005c8c <vTaskSwitchContext>
	prvTaskExitError();
 8006c36:	f7ff ff37 	bl	8006aa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	e000e400 	.word	0xe000e400
 8006c48:	2000162c 	.word	0x2000162c
 8006c4c:	20001630 	.word	0x20001630
 8006c50:	e000ed20 	.word	0xe000ed20
 8006c54:	2000000c 	.word	0x2000000c
 8006c58:	e000ef34 	.word	0xe000ef34

08006c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	b672      	cpsid	i
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	b662      	cpsie	i
 8006c76:	607b      	str	r3, [r7, #4]
}
 8006c78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <vPortEnterCritical+0x64>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	4a0f      	ldr	r2, [pc, #60]	@ (8006cc0 <vPortEnterCritical+0x64>)
 8006c82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c84:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc0 <vPortEnterCritical+0x64>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d112      	bne.n	8006cb2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <vPortEnterCritical+0x68>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <vPortEnterCritical+0x56>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	b672      	cpsid	i
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	b662      	cpsie	i
 8006caa:	603b      	str	r3, [r7, #0]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <vPortEnterCritical+0x52>
	}
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	2000000c 	.word	0x2000000c
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cce:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <vPortExitCritical+0x54>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10d      	bne.n	8006cf2 <vPortExitCritical+0x2a>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	b672      	cpsid	i
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	b662      	cpsie	i
 8006cea:	607b      	str	r3, [r7, #4]
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	e7fd      	b.n	8006cee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <vPortExitCritical+0x54>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	4a08      	ldr	r2, [pc, #32]	@ (8006d1c <vPortExitCritical+0x54>)
 8006cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cfc:	4b07      	ldr	r3, [pc, #28]	@ (8006d1c <vPortExitCritical+0x54>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <vPortExitCritical+0x48>
 8006d04:	2300      	movs	r3, #0
 8006d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	2000000c 	.word	0x2000000c

08006d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d20:	f3ef 8009 	mrs	r0, PSP
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	4b15      	ldr	r3, [pc, #84]	@ (8006d80 <pxCurrentTCBConst>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	f01e 0f10 	tst.w	lr, #16
 8006d30:	bf08      	it	eq
 8006d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	6010      	str	r0, [r2, #0]
 8006d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d44:	b672      	cpsid	i
 8006d46:	f380 8811 	msr	BASEPRI, r0
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	b662      	cpsie	i
 8006d54:	f7fe ff9a 	bl	8005c8c <vTaskSwitchContext>
 8006d58:	f04f 0000 	mov.w	r0, #0
 8006d5c:	f380 8811 	msr	BASEPRI, r0
 8006d60:	bc09      	pop	{r0, r3}
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	6808      	ldr	r0, [r1, #0]
 8006d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6a:	f01e 0f10 	tst.w	lr, #16
 8006d6e:	bf08      	it	eq
 8006d70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d74:	f380 8809 	msr	PSP, r0
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop

08006d80 <pxCurrentTCBConst>:
 8006d80:	20001000 	.word	0x20001000
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop

08006d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	b672      	cpsid	i
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	b662      	cpsie	i
 8006da2:	607b      	str	r3, [r7, #4]
}
 8006da4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006da6:	f7fe feb5 	bl	8005b14 <xTaskIncrementTick>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <SysTick_Handler+0x44>)
 8006db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	2300      	movs	r3, #0
 8006dba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	f383 8811 	msr	BASEPRI, r3
}
 8006dc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <vPortSetupTimerInterrupt+0x34>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <vPortSetupTimerInterrupt+0x38>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	@ (8006e0c <vPortSetupTimerInterrupt+0x3c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <vPortSetupTimerInterrupt+0x40>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	099b      	lsrs	r3, r3, #6
 8006dec:	4a09      	ldr	r2, [pc, #36]	@ (8006e14 <vPortSetupTimerInterrupt+0x44>)
 8006dee:	3b01      	subs	r3, #1
 8006df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006df2:	4b04      	ldr	r3, [pc, #16]	@ (8006e04 <vPortSetupTimerInterrupt+0x34>)
 8006df4:	2207      	movs	r2, #7
 8006df6:	601a      	str	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	e000e010 	.word	0xe000e010
 8006e08:	e000e018 	.word	0xe000e018
 8006e0c:	20000000 	.word	0x20000000
 8006e10:	10624dd3 	.word	0x10624dd3
 8006e14:	e000e014 	.word	0xe000e014

08006e18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006e28 <vPortEnableVFP+0x10>
 8006e1c:	6801      	ldr	r1, [r0, #0]
 8006e1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006e22:	6001      	str	r1, [r0, #0]
 8006e24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e26:	bf00      	nop
 8006e28:	e000ed88 	.word	0xe000ed88

08006e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e32:	f3ef 8305 	mrs	r3, IPSR
 8006e36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b0f      	cmp	r3, #15
 8006e3c:	d917      	bls.n	8006e6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea8 <vPortValidateInterruptPriority+0x7c>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e48:	4b18      	ldr	r3, [pc, #96]	@ (8006eac <vPortValidateInterruptPriority+0x80>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	7afa      	ldrb	r2, [r7, #11]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d20d      	bcs.n	8006e6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e56:	b672      	cpsid	i
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	b662      	cpsie	i
 8006e66:	607b      	str	r3, [r7, #4]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e6e:	4b10      	ldr	r3, [pc, #64]	@ (8006eb0 <vPortValidateInterruptPriority+0x84>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e76:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb4 <vPortValidateInterruptPriority+0x88>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d90d      	bls.n	8006e9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	b672      	cpsid	i
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	b662      	cpsie	i
 8006e92:	603b      	str	r3, [r7, #0]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <vPortValidateInterruptPriority+0x6a>
	}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	e000e3f0 	.word	0xe000e3f0
 8006eac:	2000162c 	.word	0x2000162c
 8006eb0:	e000ed0c 	.word	0xe000ed0c
 8006eb4:	20001630 	.word	0x20001630

08006eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	@ 0x28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ec4:	f7fe fd68 	bl	8005998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ec8:	4b5d      	ldr	r3, [pc, #372]	@ (8007040 <pvPortMalloc+0x188>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed0:	f000 f920 	bl	8007114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8007044 <pvPortMalloc+0x18c>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 8094 	bne.w	800700a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d020      	beq.n	8006f2a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006ee8:	2208      	movs	r2, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d017      	beq.n	8006f2a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f023 0307 	bic.w	r3, r3, #7
 8006f00:	3308      	adds	r3, #8
 8006f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00d      	beq.n	8006f2a <pvPortMalloc+0x72>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	b672      	cpsid	i
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	b662      	cpsie	i
 8006f22:	617b      	str	r3, [r7, #20]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d06c      	beq.n	800700a <pvPortMalloc+0x152>
 8006f30:	4b45      	ldr	r3, [pc, #276]	@ (8007048 <pvPortMalloc+0x190>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d867      	bhi.n	800700a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f3a:	4b44      	ldr	r3, [pc, #272]	@ (800704c <pvPortMalloc+0x194>)
 8006f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f3e:	4b43      	ldr	r3, [pc, #268]	@ (800704c <pvPortMalloc+0x194>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f44:	e004      	b.n	8006f50 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d903      	bls.n	8006f62 <pvPortMalloc+0xaa>
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f1      	bne.n	8006f46 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f62:	4b37      	ldr	r3, [pc, #220]	@ (8007040 <pvPortMalloc+0x188>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d04e      	beq.n	800700a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2208      	movs	r2, #8
 8006f72:	4413      	add	r3, r2
 8006f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	1ad2      	subs	r2, r2, r3
 8006f86:	2308      	movs	r3, #8
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d922      	bls.n	8006fd4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00d      	beq.n	8006fbc <pvPortMalloc+0x104>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	b672      	cpsid	i
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	b662      	cpsie	i
 8006fb4:	613b      	str	r3, [r7, #16]
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	1ad2      	subs	r2, r2, r3
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fce:	69b8      	ldr	r0, [r7, #24]
 8006fd0:	f000 f902 	bl	80071d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007048 <pvPortMalloc+0x190>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	4a1a      	ldr	r2, [pc, #104]	@ (8007048 <pvPortMalloc+0x190>)
 8006fe0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fe2:	4b19      	ldr	r3, [pc, #100]	@ (8007048 <pvPortMalloc+0x190>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8007050 <pvPortMalloc+0x198>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d203      	bcs.n	8006ff6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fee:	4b16      	ldr	r3, [pc, #88]	@ (8007048 <pvPortMalloc+0x190>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a17      	ldr	r2, [pc, #92]	@ (8007050 <pvPortMalloc+0x198>)
 8006ff4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <pvPortMalloc+0x18c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800700a:	f7fe fcd3 	bl	80059b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <pvPortMalloc+0x17c>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	b672      	cpsid	i
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	b662      	cpsie	i
 800702c:	60fb      	str	r3, [r7, #12]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <pvPortMalloc+0x178>
	return pvReturn;
 8007034:	69fb      	ldr	r3, [r7, #28]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3728      	adds	r7, #40	@ 0x28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2000523c 	.word	0x2000523c
 8007044:	20005248 	.word	0x20005248
 8007048:	20005240 	.word	0x20005240
 800704c:	20005234 	.word	0x20005234
 8007050:	20005244 	.word	0x20005244

08007054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d04e      	beq.n	8007104 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007066:	2308      	movs	r3, #8
 8007068:	425b      	negs	r3, r3
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	4b24      	ldr	r3, [pc, #144]	@ (800710c <vPortFree+0xb8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4013      	ands	r3, r2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <vPortFree+0x4a>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	b672      	cpsid	i
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	b662      	cpsie	i
 8007096:	60fb      	str	r3, [r7, #12]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00d      	beq.n	80070c2 <vPortFree+0x6e>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	b672      	cpsid	i
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	b662      	cpsie	i
 80070ba:	60bb      	str	r3, [r7, #8]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b11      	ldr	r3, [pc, #68]	@ (800710c <vPortFree+0xb8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d019      	beq.n	8007104 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d115      	bne.n	8007104 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4b0b      	ldr	r3, [pc, #44]	@ (800710c <vPortFree+0xb8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070e8:	f7fe fc56 	bl	8005998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	4b07      	ldr	r3, [pc, #28]	@ (8007110 <vPortFree+0xbc>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4413      	add	r3, r2
 80070f6:	4a06      	ldr	r2, [pc, #24]	@ (8007110 <vPortFree+0xbc>)
 80070f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f000 f86c 	bl	80071d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007100:	f7fe fc58 	bl	80059b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007104:	bf00      	nop
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20005248 	.word	0x20005248
 8007110:	20005240 	.word	0x20005240

08007114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800711a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800711e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007120:	4b27      	ldr	r3, [pc, #156]	@ (80071c0 <prvHeapInit+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00c      	beq.n	8007148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3307      	adds	r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4a1f      	ldr	r2, [pc, #124]	@ (80071c0 <prvHeapInit+0xac>)
 8007144:	4413      	add	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800714c:	4a1d      	ldr	r2, [pc, #116]	@ (80071c4 <prvHeapInit+0xb0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007152:	4b1c      	ldr	r3, [pc, #112]	@ (80071c4 <prvHeapInit+0xb0>)
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007160:	2208      	movs	r2, #8
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <prvHeapInit+0xb4>)
 8007174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007176:	4b14      	ldr	r3, [pc, #80]	@ (80071c8 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800717e:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <prvHeapInit+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007194:	4b0c      	ldr	r3, [pc, #48]	@ (80071c8 <prvHeapInit+0xb4>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	@ (80071cc <prvHeapInit+0xb8>)
 80071a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4a09      	ldr	r2, [pc, #36]	@ (80071d0 <prvHeapInit+0xbc>)
 80071aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ac:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <prvHeapInit+0xc0>)
 80071ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20001634 	.word	0x20001634
 80071c4:	20005234 	.word	0x20005234
 80071c8:	2000523c 	.word	0x2000523c
 80071cc:	20005244 	.word	0x20005244
 80071d0:	20005240 	.word	0x20005240
 80071d4:	20005248 	.word	0x20005248

080071d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071e0:	4b28      	ldr	r3, [pc, #160]	@ (8007284 <prvInsertBlockIntoFreeList+0xac>)
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <prvInsertBlockIntoFreeList+0x14>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d8f7      	bhi.n	80071e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	4413      	add	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d108      	bne.n	800721a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	441a      	add	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d118      	bne.n	8007260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b15      	ldr	r3, [pc, #84]	@ (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d00d      	beq.n	8007256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e008      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e003      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d002      	beq.n	8007276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20005234 	.word	0x20005234
 8007288:	2000523c 	.word	0x2000523c

0800728c <memset>:
 800728c:	4402      	add	r2, r0
 800728e:	4603      	mov	r3, r0
 8007290:	4293      	cmp	r3, r2
 8007292:	d100      	bne.n	8007296 <memset+0xa>
 8007294:	4770      	bx	lr
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	e7f9      	b.n	8007290 <memset+0x4>

0800729c <_reclaim_reent>:
 800729c:	4b29      	ldr	r3, [pc, #164]	@ (8007344 <_reclaim_reent+0xa8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4283      	cmp	r3, r0
 80072a2:	b570      	push	{r4, r5, r6, lr}
 80072a4:	4604      	mov	r4, r0
 80072a6:	d04b      	beq.n	8007340 <_reclaim_reent+0xa4>
 80072a8:	69c3      	ldr	r3, [r0, #28]
 80072aa:	b1ab      	cbz	r3, 80072d8 <_reclaim_reent+0x3c>
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	b16b      	cbz	r3, 80072cc <_reclaim_reent+0x30>
 80072b0:	2500      	movs	r5, #0
 80072b2:	69e3      	ldr	r3, [r4, #28]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	5959      	ldr	r1, [r3, r5]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d13b      	bne.n	8007334 <_reclaim_reent+0x98>
 80072bc:	3504      	adds	r5, #4
 80072be:	2d80      	cmp	r5, #128	@ 0x80
 80072c0:	d1f7      	bne.n	80072b2 <_reclaim_reent+0x16>
 80072c2:	69e3      	ldr	r3, [r4, #28]
 80072c4:	4620      	mov	r0, r4
 80072c6:	68d9      	ldr	r1, [r3, #12]
 80072c8:	f000 f872 	bl	80073b0 <_free_r>
 80072cc:	69e3      	ldr	r3, [r4, #28]
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	b111      	cbz	r1, 80072d8 <_reclaim_reent+0x3c>
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f86c 	bl	80073b0 <_free_r>
 80072d8:	6961      	ldr	r1, [r4, #20]
 80072da:	b111      	cbz	r1, 80072e2 <_reclaim_reent+0x46>
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 f867 	bl	80073b0 <_free_r>
 80072e2:	69e1      	ldr	r1, [r4, #28]
 80072e4:	b111      	cbz	r1, 80072ec <_reclaim_reent+0x50>
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 f862 	bl	80073b0 <_free_r>
 80072ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80072ee:	b111      	cbz	r1, 80072f6 <_reclaim_reent+0x5a>
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 f85d 	bl	80073b0 <_free_r>
 80072f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072f8:	b111      	cbz	r1, 8007300 <_reclaim_reent+0x64>
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 f858 	bl	80073b0 <_free_r>
 8007300:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007302:	b111      	cbz	r1, 800730a <_reclaim_reent+0x6e>
 8007304:	4620      	mov	r0, r4
 8007306:	f000 f853 	bl	80073b0 <_free_r>
 800730a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800730c:	b111      	cbz	r1, 8007314 <_reclaim_reent+0x78>
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f84e 	bl	80073b0 <_free_r>
 8007314:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007316:	b111      	cbz	r1, 800731e <_reclaim_reent+0x82>
 8007318:	4620      	mov	r0, r4
 800731a:	f000 f849 	bl	80073b0 <_free_r>
 800731e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007320:	b111      	cbz	r1, 8007328 <_reclaim_reent+0x8c>
 8007322:	4620      	mov	r0, r4
 8007324:	f000 f844 	bl	80073b0 <_free_r>
 8007328:	6a23      	ldr	r3, [r4, #32]
 800732a:	b14b      	cbz	r3, 8007340 <_reclaim_reent+0xa4>
 800732c:	4620      	mov	r0, r4
 800732e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007332:	4718      	bx	r3
 8007334:	680e      	ldr	r6, [r1, #0]
 8007336:	4620      	mov	r0, r4
 8007338:	f000 f83a 	bl	80073b0 <_free_r>
 800733c:	4631      	mov	r1, r6
 800733e:	e7bb      	b.n	80072b8 <_reclaim_reent+0x1c>
 8007340:	bd70      	pop	{r4, r5, r6, pc}
 8007342:	bf00      	nop
 8007344:	20000010 	.word	0x20000010

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4d0d      	ldr	r5, [pc, #52]	@ (8007380 <__libc_init_array+0x38>)
 800734c:	4c0d      	ldr	r4, [pc, #52]	@ (8007384 <__libc_init_array+0x3c>)
 800734e:	1b64      	subs	r4, r4, r5
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	2600      	movs	r6, #0
 8007354:	42a6      	cmp	r6, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	4d0b      	ldr	r5, [pc, #44]	@ (8007388 <__libc_init_array+0x40>)
 800735a:	4c0c      	ldr	r4, [pc, #48]	@ (800738c <__libc_init_array+0x44>)
 800735c:	f000 f87e 	bl	800745c <_init>
 8007360:	1b64      	subs	r4, r4, r5
 8007362:	10a4      	asrs	r4, r4, #2
 8007364:	2600      	movs	r6, #0
 8007366:	42a6      	cmp	r6, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007370:	4798      	blx	r3
 8007372:	3601      	adds	r6, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f855 3b04 	ldr.w	r3, [r5], #4
 800737a:	4798      	blx	r3
 800737c:	3601      	adds	r6, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	0800750c 	.word	0x0800750c
 8007384:	0800750c 	.word	0x0800750c
 8007388:	0800750c 	.word	0x0800750c
 800738c:	08007510 	.word	0x08007510

08007390 <__retarget_lock_acquire_recursive>:
 8007390:	4770      	bx	lr

08007392 <__retarget_lock_release_recursive>:
 8007392:	4770      	bx	lr

08007394 <memcpy>:
 8007394:	440a      	add	r2, r1
 8007396:	4291      	cmp	r1, r2
 8007398:	f100 33ff 	add.w	r3, r0, #4294967295
 800739c:	d100      	bne.n	80073a0 <memcpy+0xc>
 800739e:	4770      	bx	lr
 80073a0:	b510      	push	{r4, lr}
 80073a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073aa:	4291      	cmp	r1, r2
 80073ac:	d1f9      	bne.n	80073a2 <memcpy+0xe>
 80073ae:	bd10      	pop	{r4, pc}

080073b0 <_free_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4605      	mov	r5, r0
 80073b4:	2900      	cmp	r1, #0
 80073b6:	d041      	beq.n	800743c <_free_r+0x8c>
 80073b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073bc:	1f0c      	subs	r4, r1, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bfb8      	it	lt
 80073c2:	18e4      	addlt	r4, r4, r3
 80073c4:	f000 f83e 	bl	8007444 <__malloc_lock>
 80073c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007440 <_free_r+0x90>)
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	b933      	cbnz	r3, 80073dc <_free_r+0x2c>
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	6014      	str	r4, [r2, #0]
 80073d2:	4628      	mov	r0, r5
 80073d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d8:	f000 b83a 	b.w	8007450 <__malloc_unlock>
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d908      	bls.n	80073f2 <_free_r+0x42>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	1821      	adds	r1, r4, r0
 80073e4:	428b      	cmp	r3, r1
 80073e6:	bf01      	itttt	eq
 80073e8:	6819      	ldreq	r1, [r3, #0]
 80073ea:	685b      	ldreq	r3, [r3, #4]
 80073ec:	1809      	addeq	r1, r1, r0
 80073ee:	6021      	streq	r1, [r4, #0]
 80073f0:	e7ed      	b.n	80073ce <_free_r+0x1e>
 80073f2:	461a      	mov	r2, r3
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	b10b      	cbz	r3, 80073fc <_free_r+0x4c>
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	d9fa      	bls.n	80073f2 <_free_r+0x42>
 80073fc:	6811      	ldr	r1, [r2, #0]
 80073fe:	1850      	adds	r0, r2, r1
 8007400:	42a0      	cmp	r0, r4
 8007402:	d10b      	bne.n	800741c <_free_r+0x6c>
 8007404:	6820      	ldr	r0, [r4, #0]
 8007406:	4401      	add	r1, r0
 8007408:	1850      	adds	r0, r2, r1
 800740a:	4283      	cmp	r3, r0
 800740c:	6011      	str	r1, [r2, #0]
 800740e:	d1e0      	bne.n	80073d2 <_free_r+0x22>
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	6053      	str	r3, [r2, #4]
 8007416:	4408      	add	r0, r1
 8007418:	6010      	str	r0, [r2, #0]
 800741a:	e7da      	b.n	80073d2 <_free_r+0x22>
 800741c:	d902      	bls.n	8007424 <_free_r+0x74>
 800741e:	230c      	movs	r3, #12
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	e7d6      	b.n	80073d2 <_free_r+0x22>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	1821      	adds	r1, r4, r0
 8007428:	428b      	cmp	r3, r1
 800742a:	bf04      	itt	eq
 800742c:	6819      	ldreq	r1, [r3, #0]
 800742e:	685b      	ldreq	r3, [r3, #4]
 8007430:	6063      	str	r3, [r4, #4]
 8007432:	bf04      	itt	eq
 8007434:	1809      	addeq	r1, r1, r0
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	6054      	str	r4, [r2, #4]
 800743a:	e7ca      	b.n	80073d2 <_free_r+0x22>
 800743c:	bd38      	pop	{r3, r4, r5, pc}
 800743e:	bf00      	nop
 8007440:	20005388 	.word	0x20005388

08007444 <__malloc_lock>:
 8007444:	4801      	ldr	r0, [pc, #4]	@ (800744c <__malloc_lock+0x8>)
 8007446:	f7ff bfa3 	b.w	8007390 <__retarget_lock_acquire_recursive>
 800744a:	bf00      	nop
 800744c:	20005384 	.word	0x20005384

08007450 <__malloc_unlock>:
 8007450:	4801      	ldr	r0, [pc, #4]	@ (8007458 <__malloc_unlock+0x8>)
 8007452:	f7ff bf9e 	b.w	8007392 <__retarget_lock_release_recursive>
 8007456:	bf00      	nop
 8007458:	20005384 	.word	0x20005384

0800745c <_init>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr

08007468 <_fini>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr
