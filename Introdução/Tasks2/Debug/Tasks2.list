
Tasks2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007594  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007794  08007794  00008794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c4  080078c4  000091a0  2**0
                  CONTENTS
  4 .ARM          00000008  080078c4  080078c4  000088c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078cc  080078cc  000091a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078cc  080078cc  000088cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078d0  080078d0  000088d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080078d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08007934  00009060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  080079d4  00009100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051ec  200001a0  08007a74  000091a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000538c  08007a74  0000938c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022077  00000000  00000000  000091ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041cc  00000000  00000000  0002b245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  0002f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001466  00000000  00000000  00030e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000436e  00000000  00000000  000322a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f02a  00000000  00000000  00036614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d96d  00000000  00000000  0005563e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162fab  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000727c  00000000  00000000  00162ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0016a26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800777c 	.word	0x0800777c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	0800777c 	.word	0x0800777c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fcf9 	bl	8000f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f82a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f946 	bl	80007cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000540:	f000 f898 	bl	8000674 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000544:	f000 f8e4 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000548:	f000 f912 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054c:	f004 f920 	bl	8004790 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000550:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <main+0x48>)
 8000552:	2100      	movs	r1, #0
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x4c>)
 8000556:	f004 f985 	bl	8004864 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <main+0x50>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000560:	4a08      	ldr	r2, [pc, #32]	@ (8000584 <main+0x54>)
 8000562:	2100      	movs	r1, #0
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0x58>)
 8000566:	f004 f97d 	bl	8004864 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a07      	ldr	r2, [pc, #28]	@ (800058c <main+0x5c>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f004 f942 	bl	80047f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x44>
 8000578:	08007864 	.word	0x08007864
 800057c:	08000911 	.word	0x08000911
 8000580:	2000080c 	.word	0x2000080c
 8000584:	08007888 	.word	0x08007888
 8000588:	08000951 	.word	0x08000951
 800058c:	20000810 	.word	0x20000810

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 f804 	bl	80075ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 fc3a 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <SystemClock_Config+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	@ (800066c <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d8:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <SystemClock_Config+0xe0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fc67 	bl	8001eec <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f9e6 	bl	80009f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000628:	f001 fc10 	bl	8001e4c <HAL_PWREx_EnableOverDrive>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000632:	f000 f9df 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2103      	movs	r1, #3
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fef8 	bl	8002448 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800065e:	f000 f9c9 	bl	80009f4 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_ETH_Init+0x84>)
 800067a:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <MX_ETH_Init+0x88>)
 800067c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_ETH_Init+0x8c>)
 800068c:	22e1      	movs	r2, #225	@ 0xe1
 800068e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_ETH_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006a4:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <MX_ETH_Init+0x8c>)
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <MX_ETH_Init+0x90>)
 80006b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006b8:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_ETH_Init+0x94>)
 80006ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006be:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_ETH_Init+0x84>)
 80006c6:	f000 fd63 	bl	8001190 <HAL_ETH_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 f990 	bl	80009f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006d4:	2238      	movs	r2, #56	@ 0x38
 80006d6:	2100      	movs	r1, #0
 80006d8:	480c      	ldr	r0, [pc, #48]	@ (800070c <MX_ETH_Init+0x98>)
 80006da:	f006 ff67 	bl	80075ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_ETH_Init+0x98>)
 80006e0:	2221      	movs	r2, #33	@ 0x21
 80006e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_ETH_Init+0x98>)
 80006e6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80006ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_ETH_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200001f4 	.word	0x200001f4
 80006fc:	40028000 	.word	0x40028000
 8000700:	20000814 	.word	0x20000814
 8000704:	20000100 	.word	0x20000100
 8000708:	20000060 	.word	0x20000060
 800070c:	200001bc 	.word	0x200001bc

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <MX_USART3_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART3_UART_Init+0x58>)
 8000754:	f002 ffc6 	bl	80036e4 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f949 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002a4 	.word	0x200002a4
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2206      	movs	r2, #6
 8000780:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f001 f9ff 	bl	8001bb6 <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f919 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000032c 	.word	0x2000032c

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b47      	ldr	r3, [pc, #284]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a46      	ldr	r2, [pc, #280]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b44      	ldr	r3, [pc, #272]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b41      	ldr	r3, [pc, #260]	@ (8000900 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a40      	ldr	r2, [pc, #256]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b3e      	ldr	r3, [pc, #248]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b3b      	ldr	r3, [pc, #236]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a3a      	ldr	r2, [pc, #232]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a34      	ldr	r2, [pc, #208]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a2e      	ldr	r2, [pc, #184]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000878:	4822      	ldr	r0, [pc, #136]	@ (8000904 <MX_GPIO_Init+0x138>)
 800087a:	f001 f983 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	@ (8000908 <MX_GPIO_Init+0x13c>)
 8000884:	f001 f97e 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	@ (800090c <MX_GPIO_Init+0x140>)
 80008a0:	f000 ffc4 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	@ (8000904 <MX_GPIO_Init+0x138>)
 80008be:	f000 ffb5 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <MX_GPIO_Init+0x13c>)
 80008da:	f000 ffa7 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_GPIO_Init+0x13c>)
 80008f2:	f000 ff9b 	bl	800182c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	@ 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  /* Estado Running */
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Tarefa 1 - Running\r\n",
 8000918:	2364      	movs	r3, #100	@ 0x64
 800091a:	2214      	movs	r2, #20
 800091c:	4909      	ldr	r1, [pc, #36]	@ (8000944 <StartDefaultTask+0x34>)
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <StartDefaultTask+0x38>)
 8000920:	f002 ff2e 	bl	8003780 <HAL_UART_Transmit>
						  strlen("Tarefa 1 - Running\r\n"), 100);
	  /* Acende o LED para indicar execução (opcional) */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2101      	movs	r1, #1
 8000928:	4808      	ldr	r0, [pc, #32]	@ (800094c <StartDefaultTask+0x3c>)
 800092a:	f001 f92b 	bl	8001b84 <HAL_GPIO_WritePin>

	  /* Executa alguma atividade ou espera um tempo */
	  vTaskDelay(pdMS_TO_TICKS(1000));  // Tarefa entra em Blocked por 1 segundo
 800092e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000932:	f005 f805 	bl	8005940 <vTaskDelay>

	  /* O LED pode ser apagado ao final do ciclo (ou utilizado para feedback) */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2101      	movs	r1, #1
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <StartDefaultTask+0x3c>)
 800093c:	f001 f922 	bl	8001b84 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Tarefa 1 - Running\r\n",
 8000940:	bf00      	nop
 8000942:	e7e9      	b.n	8000918 <StartDefaultTask+0x8>
 8000944:	080077ac 	.word	0x080077ac
 8000948:	200002a4 	.word	0x200002a4
 800094c:	40020400 	.word	0x40020400

08000950 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	vTaskDelay(pdMS_TO_TICKS(3000));
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f004 fff0 	bl	8005940 <vTaskDelay>
  /* Infinite loop */
  for(;;)
  {
	  /* Suspende a Tarefa 1 */
	  vTaskSuspend(defaultTaskHandle);
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <StartTask02+0x68>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f005 f823 	bl	80059b0 <vTaskSuspend>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Tarefa 1 - Suspended\r\n",
 800096a:	2364      	movs	r3, #100	@ 0x64
 800096c:	2216      	movs	r2, #22
 800096e:	4913      	ldr	r1, [pc, #76]	@ (80009bc <StartTask02+0x6c>)
 8000970:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <StartTask02+0x70>)
 8000972:	f002 ff05 	bl	8003780 <HAL_UART_Transmit>
						  strlen("Tarefa 1 - Suspended\r\n"), 100);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Tarefa 2 - Executed (Suspending Tarefa 1)\r\n",
 8000976:	2364      	movs	r3, #100	@ 0x64
 8000978:	222b      	movs	r2, #43	@ 0x2b
 800097a:	4912      	ldr	r1, [pc, #72]	@ (80009c4 <StartTask02+0x74>)
 800097c:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <StartTask02+0x70>)
 800097e:	f002 feff 	bl	8003780 <HAL_UART_Transmit>
						  strlen("Tarefa 2 - Executed (Suspending Tarefa 1)\r\n"), 100);

	  /* Enquanto a Tarefa 1 está suspensa, espere um tempo */
	  vTaskDelay(pdMS_TO_TICKS(3000));
 8000982:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000986:	f004 ffdb 	bl	8005940 <vTaskDelay>

	  /* Retoma a Tarefa 1 */
	  vTaskResume(defaultTaskHandle);
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <StartTask02+0x68>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f005 f8ba 	bl	8005b08 <vTaskResume>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Tarefa 1 - Resumed\r\n",
 8000994:	2364      	movs	r3, #100	@ 0x64
 8000996:	2214      	movs	r2, #20
 8000998:	490b      	ldr	r1, [pc, #44]	@ (80009c8 <StartTask02+0x78>)
 800099a:	4809      	ldr	r0, [pc, #36]	@ (80009c0 <StartTask02+0x70>)
 800099c:	f002 fef0 	bl	8003780 <HAL_UART_Transmit>
						  strlen("Tarefa 1 - Resumed\r\n"), 100);
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Tarefa 2 - Executed (Resuming Tarefa 1)\r\n",
 80009a0:	2364      	movs	r3, #100	@ 0x64
 80009a2:	2229      	movs	r2, #41	@ 0x29
 80009a4:	4909      	ldr	r1, [pc, #36]	@ (80009cc <StartTask02+0x7c>)
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <StartTask02+0x70>)
 80009a8:	f002 feea 	bl	8003780 <HAL_UART_Transmit>
						  strlen("Tarefa 2 - Executed (Resuming Tarefa 1)\r\n"), 100);

	  /* Aguarda antes de repetir o ciclo de suspensão */
	  vTaskDelay(pdMS_TO_TICKS(5000));
 80009ac:	f241 3088 	movw	r0, #5000	@ 0x1388
 80009b0:	f004 ffc6 	bl	8005940 <vTaskDelay>
	  vTaskSuspend(defaultTaskHandle);
 80009b4:	bf00      	nop
 80009b6:	e7d3      	b.n	8000960 <StartTask02+0x10>
 80009b8:	2000080c 	.word	0x2000080c
 80009bc:	080077c4 	.word	0x080077c4
 80009c0:	200002a4 	.word	0x200002a4
 80009c4:	080077dc 	.word	0x080077dc
 80009c8:	08007808 	.word	0x08007808
 80009cc:	08007820 	.word	0x08007820

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 faaf 	bl	8000f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40001000 	.word	0x40001000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f000 fb7d 	bl	800113c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	@ 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8000ba8 <HAL_ETH_MspInit+0x158>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	f040 8096 	bne.w	8000ba0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a74:	4b4d      	ldr	r3, [pc, #308]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	4a4c      	ldr	r2, [pc, #304]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a80:	4b4a      	ldr	r3, [pc, #296]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	4b47      	ldr	r3, [pc, #284]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a46      	ldr	r2, [pc, #280]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a98:	4b44      	ldr	r3, [pc, #272]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa8:	4a40      	ldr	r2, [pc, #256]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aaa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	4a34      	ldr	r2, [pc, #208]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	4a2e      	ldr	r2, [pc, #184]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b08:	4a28      	ldr	r2, [pc, #160]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b1c:	2332      	movs	r3, #50	@ 0x32
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	481e      	ldr	r0, [pc, #120]	@ (8000bb0 <HAL_ETH_MspInit+0x160>)
 8000b38:	f000 fe78 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b3c:	2386      	movs	r3, #134	@ 0x86
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4817      	ldr	r0, [pc, #92]	@ (8000bb4 <HAL_ETH_MspInit+0x164>)
 8000b58:	f000 fe68 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	@ (8000bb8 <HAL_ETH_MspInit+0x168>)
 8000b7a:	f000 fe57 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b7e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b90:	230b      	movs	r3, #11
 8000b92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <HAL_ETH_MspInit+0x16c>)
 8000b9c:	f000 fe46 	bl	800182c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3738      	adds	r7, #56	@ 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40028000 	.word	0x40028000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40021800 	.word	0x40021800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2290      	movs	r2, #144	@ 0x90
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f006 fce3 	bl	80075ac <memset>
  if(huart->Instance==USART3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a22      	ldr	r2, [pc, #136]	@ (8000c74 <HAL_UART_MspInit+0xb4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d13c      	bne.n	8000c6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fe7a 	bl	80028f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c0a:	f7ff fef3 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c66:	f000 fde1 	bl	800182c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c6a:	bf00      	nop
 8000c6c:	37b8      	adds	r7, #184	@ 0xb8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004800 	.word	0x40004800
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ae      	sub	sp, #184	@ 0xb8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2290      	movs	r2, #144	@ 0x90
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 fc83 	bl	80075ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cae:	d159      	bne.n	8000d64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cb0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000cb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fe19 	bl	80028f8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ccc:	f7ff fe92 	bl	80009f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	4a25      	ldr	r2, [pc, #148]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cdc:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ce8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d02:	230a      	movs	r3, #10
 8000d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4818      	ldr	r0, [pc, #96]	@ (8000d70 <HAL_PCD_MspInit+0xf0>)
 8000d10:	f000 fd8c 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4810      	ldr	r0, [pc, #64]	@ (8000d70 <HAL_PCD_MspInit+0xf0>)
 8000d30:	f000 fd7c 	bl	800182c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d38:	4a0c      	ldr	r2, [pc, #48]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d56:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_PCD_MspInit+0xec>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d64:	bf00      	nop
 8000d66:	37b8      	adds	r7, #184	@ 0xb8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	@ 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d84:	4b33      	ldr	r3, [pc, #204]	@ (8000e54 <HAL_InitTick+0xe0>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	4a32      	ldr	r2, [pc, #200]	@ (8000e54 <HAL_InitTick+0xe0>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d90:	4b30      	ldr	r3, [pc, #192]	@ (8000e54 <HAL_InitTick+0xe0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d9c:	f107 0210 	add.w	r2, r7, #16
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fd74 	bl	8002894 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000db6:	f001 fd45 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8000dba:	6378      	str	r0, [r7, #52]	@ 0x34
 8000dbc:	e004      	b.n	8000dc8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dbe:	f001 fd41 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dca:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <HAL_InitTick+0xe4>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	0c9b      	lsrs	r3, r3, #18
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <HAL_InitTick+0xec>)
 8000dda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000dde:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000de2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000de4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dfc:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000dfe:	f002 f9a3 	bl	8003148 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d11b      	bne.n	8000e48 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e10:	4812      	ldr	r0, [pc, #72]	@ (8000e5c <HAL_InitTick+0xe8>)
 8000e12:	f002 f9fb 	bl	800320c <HAL_TIM_Base_Start_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d111      	bne.n	8000e48 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e24:	2036      	movs	r0, #54	@ 0x36
 8000e26:	f000 f9a5 	bl	8001174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d808      	bhi.n	8000e42 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2036      	movs	r0, #54	@ 0x36
 8000e36:	f000 f981 	bl	800113c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <HAL_InitTick+0xf0>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e002      	b.n	8000e48 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3738      	adds	r7, #56	@ 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	2000081c 	.word	0x2000081c
 8000e60:	40001000 	.word	0x40001000
 8000e64:	20000004 	.word	0x20000004

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <TIM6_DAC_IRQHandler+0x10>)
 8000ea6:	f002 fa29 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000081c 	.word	0x2000081c

08000eb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f006 fbaf 	bl	8007668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fb11 	bl	8000530 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f1c:	080078d4 	.word	0x080078d4
  ldr r2, =_sbss
 8000f20:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000f24:	2000538c 	.word	0x2000538c

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>

08000f2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f8f9 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f34:	200f      	movs	r0, #15
 8000f36:	f7ff ff1d 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fd61 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000868 	.word	0x20000868

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000868 	.word	0x20000868

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <__NVIC_SetPriorityGrouping+0x40>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <__NVIC_SetPriorityGrouping+0x40>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	05fa0000 	.word	0x05fa0000

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	@ (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e086      	b.n	80012b0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2220      	movs	r2, #32
 80011b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff fc4b 	bl	8000a50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b3f      	ldr	r3, [pc, #252]	@ (80012b8 <HAL_ETH_Init+0x128>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	4a3e      	ldr	r2, [pc, #248]	@ (80012b8 <HAL_ETH_Init+0x128>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c6:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <HAL_ETH_Init+0x128>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011d2:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <HAL_ETH_Init+0x12c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a39      	ldr	r2, [pc, #228]	@ (80012bc <HAL_ETH_Init+0x12c>)
 80011d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80011dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <HAL_ETH_Init+0x12c>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	4935      	ldr	r1, [pc, #212]	@ (80012bc <HAL_ETH_Init+0x12c>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011ec:	4b33      	ldr	r3, [pc, #204]	@ (80012bc <HAL_ETH_Init+0x12c>)
 80011ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001206:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001208:	f7ff feb0 	bl	8000f6c <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800120e:	e011      	b.n	8001234 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001210:	f7ff feac 	bl	8000f6c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800121e:	d909      	bls.n	8001234 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2204      	movs	r2, #4
 8001224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	22e0      	movs	r2, #224	@ 0xe0
 800122c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e03d      	b.n	80012b0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1e4      	bne.n	8001210 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f97a 	bl	8001540 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fa25 	bl	800169c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fa7b 	bl	800174e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	461a      	mov	r2, r3
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f9e3 	bl	800162c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001274:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_ETH_Init+0x130>)
 8001284:	430b      	orrs	r3, r1
 8001286:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800129a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2210      	movs	r2, #16
 80012aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	00020060 	.word	0x00020060

080012c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4b53      	ldr	r3, [pc, #332]	@ (8001428 <ETH_SetMACConfig+0x164>)
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	7b9b      	ldrb	r3, [r3, #14]
 80012e2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	7c12      	ldrb	r2, [r2, #16]
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	d102      	bne.n	80012f2 <ETH_SetMACConfig+0x2e>
 80012ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012f0:	e000      	b.n	80012f4 <ETH_SetMACConfig+0x30>
 80012f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80012f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	7c52      	ldrb	r2, [r2, #17]
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d102      	bne.n	8001304 <ETH_SetMACConfig+0x40>
 80012fe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001302:	e000      	b.n	8001306 <ETH_SetMACConfig+0x42>
 8001304:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001306:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800130c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	7fdb      	ldrb	r3, [r3, #31]
 8001312:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001314:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800131a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	7f92      	ldrb	r2, [r2, #30]
 8001320:	2a00      	cmp	r2, #0
 8001322:	d102      	bne.n	800132a <ETH_SetMACConfig+0x66>
 8001324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001328:	e000      	b.n	800132c <ETH_SetMACConfig+0x68>
 800132a:	2200      	movs	r2, #0
                        macconf->Speed |
 800132c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	7f1b      	ldrb	r3, [r3, #28]
 8001332:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001334:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800133a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001342:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	f892 2020 	ldrb.w	r2, [r2, #32]
 800134a:	2a00      	cmp	r2, #0
 800134c:	d102      	bne.n	8001354 <ETH_SetMACConfig+0x90>
 800134e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001352:	e000      	b.n	8001356 <ETH_SetMACConfig+0x92>
 8001354:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001356:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	7bdb      	ldrb	r3, [r3, #15]
 800135c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800135e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001364:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800136c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800136e:	4313      	orrs	r3, r2
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff fdfc 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80013a2:	4013      	ands	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d101      	bne.n	80013ba <ETH_SetMACConfig+0xf6>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	e000      	b.n	80013bc <ETH_SetMACConfig+0xf8>
 80013ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80013ca:	2a01      	cmp	r2, #1
 80013cc:	d101      	bne.n	80013d2 <ETH_SetMACConfig+0x10e>
 80013ce:	2208      	movs	r2, #8
 80013d0:	e000      	b.n	80013d4 <ETH_SetMACConfig+0x110>
 80013d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80013dc:	2a01      	cmp	r2, #1
 80013de:	d101      	bne.n	80013e4 <ETH_SetMACConfig+0x120>
 80013e0:	2204      	movs	r2, #4
 80013e2:	e000      	b.n	80013e6 <ETH_SetMACConfig+0x122>
 80013e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80013ee:	2a01      	cmp	r2, #1
 80013f0:	d101      	bne.n	80013f6 <ETH_SetMACConfig+0x132>
 80013f2:	2202      	movs	r2, #2
 80013f4:	e000      	b.n	80013f8 <ETH_SetMACConfig+0x134>
 80013f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013f8:	4313      	orrs	r3, r2
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff fdb7 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	fd20810f 	.word	0xfd20810f

0800142c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <ETH_SetDMAConfig+0x110>)
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	7b1b      	ldrb	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <ETH_SetDMAConfig+0x2c>
 8001452:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001456:	e000      	b.n	800145a <ETH_SetDMAConfig+0x2e>
 8001458:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7b5b      	ldrb	r3, [r3, #13]
 800145e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001460:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	7f52      	ldrb	r2, [r2, #29]
 8001466:	2a00      	cmp	r2, #0
 8001468:	d102      	bne.n	8001470 <ETH_SetDMAConfig+0x44>
 800146a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800146e:	e000      	b.n	8001472 <ETH_SetDMAConfig+0x46>
 8001470:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001472:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	7b9b      	ldrb	r3, [r3, #14]
 8001478:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800147a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001480:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7f1b      	ldrb	r3, [r3, #28]
 8001486:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001488:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	7f9b      	ldrb	r3, [r3, #30]
 800148e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001490:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001496:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800149e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014a0:	4313      	orrs	r3, r2
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b0:	461a      	mov	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fd5e 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d0:	461a      	mov	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001504:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800150e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001512:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fd2f 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	f8de3f23 	.word	0xf8de3f23

08001540 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0a6      	sub	sp, #152	@ 0x98
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001554:	2300      	movs	r3, #0
 8001556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800155e:	2301      	movs	r3, #1
 8001560:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800156a:	2301      	movs	r3, #1
 800156c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001582:	2300      	movs	r3, #0
 8001584:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800158c:	2300      	movs	r3, #0
 800158e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fe7f 	bl	80012c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001600:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001602:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001606:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001608:	2301      	movs	r3, #1
 800160a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff05 	bl	800142c <ETH_SetDMAConfig>
}
 8001622:	bf00      	nop
 8001624:	3798      	adds	r7, #152	@ 0x98
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3305      	adds	r3, #5
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	3204      	adds	r2, #4
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <ETH_MACAddressConfig+0x68>)
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3303      	adds	r3, #3
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	061a      	lsls	r2, r3, #24
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3302      	adds	r3, #2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	4313      	orrs	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <ETH_MACAddressConfig+0x6c>)
 800167e:	4413      	add	r3, r2
 8001680:	461a      	mov	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40028040 	.word	0x40028040
 8001698:	40028044 	.word	0x40028044

0800169c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e03e      	b.n	8001728 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68d9      	ldr	r1, [r3, #12]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	3206      	adds	r2, #6
 80016dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d80c      	bhi.n	800170c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68d9      	ldr	r1, [r3, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	e004      	b.n	8001716 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	461a      	mov	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d9bd      	bls.n	80016aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001740:	611a      	str	r2, [r3, #16]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e048      	b.n	80017ee <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6919      	ldr	r1, [r3, #16]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001798:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	3212      	adds	r2, #18
 80017ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d80c      	bhi.n	80017de <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6919      	ldr	r1, [r3, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	461a      	mov	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	e004      	b.n	80017e8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d9b3      	bls.n	800175c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800181e:	60da      	str	r2, [r3, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e175      	b.n	8001b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8164 	bne.w	8001b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d005      	beq.n	8001882 <HAL_GPIO_Init+0x56>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d130      	bne.n	80018e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d017      	beq.n	8001920 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80be 	beq.w	8001b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a65      	ldr	r2, [pc, #404]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b63      	ldr	r3, [pc, #396]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019ce:	4a61      	ldr	r2, [pc, #388]	@ (8001b54 <HAL_GPIO_Init+0x328>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a58      	ldr	r2, [pc, #352]	@ (8001b58 <HAL_GPIO_Init+0x32c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d037      	beq.n	8001a6a <HAL_GPIO_Init+0x23e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a57      	ldr	r2, [pc, #348]	@ (8001b5c <HAL_GPIO_Init+0x330>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_GPIO_Init+0x23a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a56      	ldr	r2, [pc, #344]	@ (8001b60 <HAL_GPIO_Init+0x334>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d02b      	beq.n	8001a62 <HAL_GPIO_Init+0x236>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a55      	ldr	r2, [pc, #340]	@ (8001b64 <HAL_GPIO_Init+0x338>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x232>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a54      	ldr	r2, [pc, #336]	@ (8001b68 <HAL_GPIO_Init+0x33c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x22e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a53      	ldr	r2, [pc, #332]	@ (8001b6c <HAL_GPIO_Init+0x340>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x22a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a52      	ldr	r2, [pc, #328]	@ (8001b70 <HAL_GPIO_Init+0x344>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x226>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a51      	ldr	r2, [pc, #324]	@ (8001b74 <HAL_GPIO_Init+0x348>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x222>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a50      	ldr	r2, [pc, #320]	@ (8001b78 <HAL_GPIO_Init+0x34c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x21e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b7c <HAL_GPIO_Init+0x350>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x21a>
 8001a42:	2309      	movs	r3, #9
 8001a44:	e012      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a46:	230a      	movs	r3, #10
 8001a48:	e010      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	e00e      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a7c:	4935      	ldr	r1, [pc, #212]	@ (8001b54 <HAL_GPIO_Init+0x328>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aae:	4a34      	ldr	r2, [pc, #208]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad8:	4a29      	ldr	r2, [pc, #164]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b02:	4a1f      	ldr	r2, [pc, #124]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <HAL_GPIO_Init+0x354>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	f67f ae86 	bls.w	800184c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40013800 	.word	0x40013800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40021400 	.word	0x40021400
 8001b70:	40021800 	.word	0x40021800
 8001b74:	40021c00 	.word	0x40021c00
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40022400 	.word	0x40022400
 8001b80:	40013c00 	.word	0x40013c00

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ba0:	e003      	b.n	8001baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	041a      	lsls	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af02      	add	r7, sp, #8
 8001bbc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e108      	b.n	8001dda <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f84c 	bl	8000c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bf6:	d102      	bne.n	8001bfe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fb20 	bl	8004248 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7c1a      	ldrb	r2, [r3, #16]
 8001c10:	f88d 2000 	strb.w	r2, [sp]
 8001c14:	3304      	adds	r3, #4
 8001c16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c18:	f002 fabc 	bl	8004194 <USB_CoreInit>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0d5      	b.n	8001dda <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 fb18 	bl	800426a <USB_SetCurrentMode>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0c6      	b.n	8001dda <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e04a      	b.n	8001ce8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	3315      	adds	r3, #21
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	3314      	adds	r3, #20
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	b298      	uxth	r0, r3
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	332e      	adds	r3, #46	@ 0x2e
 8001c8e:	4602      	mov	r2, r0
 8001c90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3318      	adds	r3, #24
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	331c      	adds	r3, #28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3320      	adds	r3, #32
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3324      	adds	r3, #36	@ 0x24
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	791b      	ldrb	r3, [r3, #4]
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3af      	bcc.n	8001c52 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	e044      	b.n	8001d82 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	791b      	ldrb	r3, [r3, #4]
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d3b5      	bcc.n	8001cf8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7c1a      	ldrb	r2, [r3, #16]
 8001d94:	f88d 2000 	strb.w	r2, [sp]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d9c:	f002 fab2 	bl	8004304 <USB_DevInit>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e013      	b.n	8001dda <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7b1b      	ldrb	r3, [r3, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f80b 	bl	8001de4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f002 fc6d 	bl	80046b2 <USB_DevDisconnect>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	10000003 	.word	0x10000003

08001e2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7a:	f7ff f877 	bl	8000f6c <HAL_GetTick>
 8001e7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e80:	e009      	b.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e82:	f7ff f873 	bl	8000f6c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e90:	d901      	bls.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e022      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e96:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ea4:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb0:	f7ff f85c 	bl	8000f6c <HAL_GetTick>
 8001eb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb6:	e009      	b.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eb8:	f7ff f858 	bl	8000f6c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ec6:	d901      	bls.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e007      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e29b      	b.n	800243a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8087 	beq.w	800201e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f10:	4b96      	ldr	r3, [pc, #600]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1c:	4b93      	ldr	r3, [pc, #588]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d112      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
 8001f28:	4b90      	ldr	r3, [pc, #576]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f34:	d10b      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f36:	4b8d      	ldr	r3, [pc, #564]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d06c      	beq.n	800201c <HAL_RCC_OscConfig+0x130>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d168      	bne.n	800201c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e275      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x7a>
 8001f58:	4b84      	ldr	r3, [pc, #528]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e02e      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x9c>
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7e      	ldr	r2, [pc, #504]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7b      	ldr	r2, [pc, #492]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e01d      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001f92:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b73      	ldr	r3, [pc, #460]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6b      	ldr	r2, [pc, #428]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ffce 	bl	8000f6c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe ffca 	bl	8000f6c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	@ 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e229      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b61      	ldr	r3, [pc, #388]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe ffba 	bl	8000f6c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7fe ffb6 	bl	8000f6c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	@ 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e215      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x110>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d069      	beq.n	80020fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202a:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b4d      	ldr	r3, [pc, #308]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b08      	cmp	r3, #8
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
 8002042:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1e9      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	493d      	ldr	r1, [pc, #244]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e040      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a38      	ldr	r2, [pc, #224]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe ff6c 	bl	8000f6c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7fe ff68 	bl	8000f6c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1c7      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b30      	ldr	r3, [pc, #192]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4929      	ldr	r1, [pc, #164]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a26      	ldr	r2, [pc, #152]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff48 	bl	8000f6c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe ff44 	bl	8000f6c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1a3      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d038      	beq.n	800217c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d019      	beq.n	8002146 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002116:	4a15      	ldr	r2, [pc, #84]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7fe ff25 	bl	8000f6c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe ff21 	bl	8000f6c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e180      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x23a>
 8002144:	e01a      	b.n	800217c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214a:	4a08      	ldr	r2, [pc, #32]	@ (800216c <HAL_RCC_OscConfig+0x280>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7fe ff0b 	bl	8000f6c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7fe ff07 	bl	8000f6c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d903      	bls.n	8002170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e166      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
 800216c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b92      	ldr	r3, [pc, #584]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a4 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b8c      	ldr	r3, [pc, #560]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b89      	ldr	r3, [pc, #548]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	4a88      	ldr	r2, [pc, #544]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a2:	4b86      	ldr	r3, [pc, #536]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4b83      	ldr	r3, [pc, #524]	@ (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021be:	4b80      	ldr	r3, [pc, #512]	@ (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7f      	ldr	r2, [pc, #508]	@ (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7fe fecf 	bl	8000f6c <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe fecb 	bl	8000f6c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	@ 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e12a      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	4b76      	ldr	r3, [pc, #472]	@ (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x31a>
 80021f8:	4b70      	ldr	r3, [pc, #448]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fc:	4a6f      	ldr	r2, [pc, #444]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	@ 0x70
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x33c>
 800220e:	4b6b      	ldr	r3, [pc, #428]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	4a6a      	ldr	r2, [pc, #424]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	@ 0x70
 800221a:	4b68      	ldr	r3, [pc, #416]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221e:	4a67      	ldr	r2, [pc, #412]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	@ 0x70
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x35e>
 8002230:	4b62      	ldr	r3, [pc, #392]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	4a61      	ldr	r2, [pc, #388]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	@ 0x70
 800223c:	4b5f      	ldr	r3, [pc, #380]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002240:	4a5e      	ldr	r2, [pc, #376]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	@ 0x70
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 800224a:	4b5c      	ldr	r3, [pc, #368]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	4a5b      	ldr	r2, [pc, #364]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	@ 0x70
 8002256:	4b59      	ldr	r3, [pc, #356]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225a:	4a58      	ldr	r2, [pc, #352]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7fe fe7f 	bl	8000f6c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fe7b 	bl	8000f6c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0d8      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b4c      	ldr	r3, [pc, #304]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x386>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe fe69 	bl	8000f6c <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fe65 	bl	8000f6c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0c2      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b3d      	ldr	r3, [pc, #244]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	4a3c      	ldr	r2, [pc, #240]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80ae 	beq.w	8002438 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b37      	ldr	r3, [pc, #220]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d06d      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d14b      	bne.n	8002388 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a31      	ldr	r2, [pc, #196]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fe36 	bl	8000f6c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fe32 	bl	8000f6c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e091      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b29      	ldr	r3, [pc, #164]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	491b      	ldr	r1, [pc, #108]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fe04 	bl	8000f6c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fe00 	bl	8000f6c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e05f      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x47c>
 8002386:	e057      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fdea 	bl	8000f6c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fde6 	bl	8000f6c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e045      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x4b0>
 80023ba:	e03d      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <HAL_RCC_OscConfig+0x558>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d030      	beq.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d129      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d122      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d119      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d10f      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d0      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b67      	ldr	r3, [pc, #412]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	4965      	ldr	r1, [pc, #404]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a58      	ldr	r2, [pc, #352]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d040      	beq.n	800256c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e073      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4936      	ldr	r1, [pc, #216]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe fd16 	bl	8000f6c <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7fe fd12 	bl	8000f6c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e053      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2d      	ldr	r3, [pc, #180]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d210      	bcs.n	800259c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b24      	ldr	r3, [pc, #144]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	4922      	ldr	r1, [pc, #136]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	@ (8002614 <HAL_RCC_ClockConfig+0x1cc>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <HAL_RCC_ClockConfig+0x1d0>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <HAL_RCC_ClockConfig+0x1d4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fbba 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00
 8002610:	40023800 	.word	0x40023800
 8002614:	080078ac 	.word	0x080078ac
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b094      	sub	sp, #80	@ 0x50
 8002626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	647b      	str	r3, [r7, #68]	@ 0x44
 800262c:	2300      	movs	r3, #0
 800262e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002630:	2300      	movs	r3, #0
 8002632:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002638:	4b79      	ldr	r3, [pc, #484]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d00d      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x40>
 8002644:	2b08      	cmp	r3, #8
 8002646:	f200 80e1 	bhi.w	800280c <HAL_RCC_GetSysClockFreq+0x1ec>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x34>
 800264e:	2b04      	cmp	r3, #4
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x3a>
 8002652:	e0db      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b73      	ldr	r3, [pc, #460]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x204>)
 8002656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002658:	e0db      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265a:	4b73      	ldr	r3, [pc, #460]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x208>)
 800265c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800265e:	e0d8      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002660:	4b6f      	ldr	r3, [pc, #444]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002668:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800266a:	4b6d      	ldr	r3, [pc, #436]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002680:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	633b      	str	r3, [r7, #48]	@ 0x30
 800268a:	2300      	movs	r3, #0
 800268c:	637b      	str	r3, [r7, #52]	@ 0x34
 800268e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4621      	mov	r1, r4
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	6139      	str	r1, [r7, #16]
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c4:	4659      	mov	r1, fp
 80026c6:	018b      	lsls	r3, r1, #6
 80026c8:	4651      	mov	r1, sl
 80026ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ce:	4651      	mov	r1, sl
 80026d0:	018a      	lsls	r2, r1, #6
 80026d2:	4651      	mov	r1, sl
 80026d4:	ebb2 0801 	subs.w	r8, r2, r1
 80026d8:	4659      	mov	r1, fp
 80026da:	eb63 0901 	sbc.w	r9, r3, r1
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f2:	4690      	mov	r8, r2
 80026f4:	4699      	mov	r9, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	eb18 0303 	adds.w	r3, r8, r3
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	462b      	mov	r3, r5
 8002700:	eb49 0303 	adc.w	r3, r9, r3
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002712:	4629      	mov	r1, r5
 8002714:	024b      	lsls	r3, r1, #9
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800271c:	4621      	mov	r1, r4
 800271e:	024a      	lsls	r2, r1, #9
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800272a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800272c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002730:	f7fd fd86 	bl	8000240 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800273c:	e058      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273e:	4b38      	ldr	r3, [pc, #224]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	2200      	movs	r2, #0
 8002746:	4618      	mov	r0, r3
 8002748:	4611      	mov	r1, r2
 800274a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
 8002754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002758:	4642      	mov	r2, r8
 800275a:	464b      	mov	r3, r9
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0159      	lsls	r1, r3, #5
 8002766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276a:	0150      	lsls	r0, r2, #5
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4641      	mov	r1, r8
 8002772:	ebb2 0a01 	subs.w	sl, r2, r1
 8002776:	4649      	mov	r1, r9
 8002778:	eb63 0b01 	sbc.w	fp, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800278c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002790:	ebb2 040a 	subs.w	r4, r2, sl
 8002794:	eb63 050b 	sbc.w	r5, r3, fp
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	00eb      	lsls	r3, r5, #3
 80027a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a6:	00e2      	lsls	r2, r4, #3
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	4643      	mov	r3, r8
 80027ae:	18e3      	adds	r3, r4, r3
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	464b      	mov	r3, r9
 80027b4:	eb45 0303 	adc.w	r3, r5, r3
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c6:	4629      	mov	r1, r5
 80027c8:	028b      	lsls	r3, r1, #10
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d0:	4621      	mov	r1, r4
 80027d2:	028a      	lsls	r2, r1, #10
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027da:	2200      	movs	r2, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	61fa      	str	r2, [r7, #28]
 80027e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e4:	f7fd fd2c 	bl	8000240 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x204>)
 800280e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002814:	4618      	mov	r0, r3
 8002816:	3750      	adds	r7, #80	@ 0x50
 8002818:	46bd      	mov	sp, r7
 800281a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	00f42400 	.word	0x00f42400
 8002828:	007a1200 	.word	0x007a1200

0800282c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	@ (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	080078bc 	.word	0x080078bc

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffdc 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0b5b      	lsrs	r3, r3, #13
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	@ (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	080078bc 	.word	0x080078bc

08002894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	220f      	movs	r2, #15
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028d6:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <HAL_RCC_GetClockConfig+0x60>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40023c00 	.word	0x40023c00

080028f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d012      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002920:	4b69      	ldr	r3, [pc, #420]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a68      	ldr	r2, [pc, #416]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800292a:	6093      	str	r3, [r2, #8]
 800292c:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002934:	4964      	ldr	r1, [pc, #400]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d017      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002952:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002958:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002960:	4959      	ldr	r1, [pc, #356]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002970:	d101      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d017      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800298e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002994:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	494a      	ldr	r1, [pc, #296]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ac:	d101      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 808b 	beq.w	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	4a39      	ldr	r2, [pc, #228]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e8:	4b37      	ldr	r3, [pc, #220]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029f4:	4b35      	ldr	r3, [pc, #212]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a34      	ldr	r2, [pc, #208]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a00:	f7fe fab4 	bl	8000f6c <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a08:	f7fe fab0 	bl	8000f6c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	@ 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e38f      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a26:	4b28      	ldr	r3, [pc, #160]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d035      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d02e      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a44:	4b20      	ldr	r3, [pc, #128]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a52:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a66:	4a18      	ldr	r2, [pc, #96]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a6c:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d114      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fa78 	bl	8000f6c <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fa74 	bl	8000f6c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e351      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ee      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002abe:	400b      	ands	r3, r1
 8002ac0:	4901      	ldr	r1, [pc, #4]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	0ffffcff 	.word	0x0ffffcff
 8002ad4:	4bac      	ldr	r3, [pc, #688]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4aab      	ldr	r2, [pc, #684]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ada:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ade:	6093      	str	r3, [r2, #8]
 8002ae0:	4ba9      	ldr	r3, [pc, #676]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	49a6      	ldr	r1, [pc, #664]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002afe:	4ba2      	ldr	r3, [pc, #648]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b04:	4aa0      	ldr	r2, [pc, #640]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	499b      	ldr	r1, [pc, #620]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2c:	4b96      	ldr	r3, [pc, #600]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b3a:	4993      	ldr	r1, [pc, #588]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b4e:	4b8e      	ldr	r3, [pc, #568]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b5c:	498a      	ldr	r1, [pc, #552]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b70:	4b85      	ldr	r3, [pc, #532]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b7e:	4982      	ldr	r1, [pc, #520]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b92:	4b7d      	ldr	r3, [pc, #500]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba0:	4979      	ldr	r1, [pc, #484]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb4:	4b74      	ldr	r3, [pc, #464]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	4971      	ldr	r1, [pc, #452]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f023 020c 	bic.w	r2, r3, #12
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	4968      	ldr	r1, [pc, #416]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf8:	4b63      	ldr	r3, [pc, #396]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c06:	4960      	ldr	r1, [pc, #384]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c28:	4957      	ldr	r1, [pc, #348]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c3c:	4b52      	ldr	r3, [pc, #328]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	494f      	ldr	r1, [pc, #316]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6c:	4946      	ldr	r1, [pc, #280]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c80:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	493e      	ldr	r1, [pc, #248]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb0:	4935      	ldr	r1, [pc, #212]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cc4:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cd2:	492d      	ldr	r1, [pc, #180]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d011      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ce6:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cf4:	4924      	ldr	r1, [pc, #144]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d34:	4914      	ldr	r1, [pc, #80]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d48:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d58:	490b      	ldr	r1, [pc, #44]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00f      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7c:	4902      	ldr	r1, [pc, #8]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d98:	4b8a      	ldr	r3, [pc, #552]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da8:	4986      	ldr	r1, [pc, #536]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00b      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dbc:	4b81      	ldr	r3, [pc, #516]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dcc:	497d      	ldr	r1, [pc, #500]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d006      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80d6 	beq.w	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002de8:	4b76      	ldr	r3, [pc, #472]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a75      	ldr	r2, [pc, #468]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe f8ba 	bl	8000f6c <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dfc:	f7fe f8b6 	bl	8000f6c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	@ 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e195      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d021      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11d      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e2e:	4b65      	ldr	r3, [pc, #404]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e3c:	4b61      	ldr	r3, [pc, #388]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e42:	0e1b      	lsrs	r3, r3, #24
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	019a      	lsls	r2, r3, #6
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	071b      	lsls	r3, r3, #28
 8002e62:	4958      	ldr	r1, [pc, #352]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d02e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e94:	d129      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e96:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ea4:	4b47      	ldr	r3, [pc, #284]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eaa:	0f1b      	lsrs	r3, r3, #28
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	019a      	lsls	r2, r3, #6
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	071b      	lsls	r3, r3, #28
 8002eca:	493e      	ldr	r1, [pc, #248]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ed8:	f023 021f 	bic.w	r2, r3, #31
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	4938      	ldr	r1, [pc, #224]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01d      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ef6:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efc:	0e1b      	lsrs	r3, r3, #24
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f04:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0a:	0f1b      	lsrs	r3, r3, #28
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	019a      	lsls	r2, r3, #6
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	061b      	lsls	r3, r3, #24
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	071b      	lsls	r3, r3, #28
 8002f2a:	4926      	ldr	r1, [pc, #152]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d011      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	019a      	lsls	r2, r3, #6
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	071b      	lsls	r3, r3, #28
 8002f5a:	491a      	ldr	r1, [pc, #104]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f62:	4b18      	ldr	r3, [pc, #96]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a17      	ldr	r2, [pc, #92]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6e:	f7fd fffd 	bl	8000f6c <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f76:	f7fd fff9 	bl	8000f6c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	@ 0x64
 8002f82:	d901      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0d8      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f88:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	f040 80ce 	bne.w	8003138 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f9c:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a08      	ldr	r2, [pc, #32]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa8:	f7fd ffe0 	bl	8000f6c <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fb0:	f7fd ffdc 	bl	8000f6c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d904      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0bb      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd4:	d0ec      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02e      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12a      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ffe:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800300c:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	0f1b      	lsrs	r3, r3, #28
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	019a      	lsls	r2, r3, #6
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	061b      	lsls	r3, r3, #24
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	4944      	ldr	r1, [pc, #272]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800303a:	4b42      	ldr	r3, [pc, #264]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003040:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	3b01      	subs	r3, #1
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	493d      	ldr	r1, [pc, #244]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d022      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003068:	d11d      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800306a:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	0e1b      	lsrs	r3, r3, #24
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003078:	4b32      	ldr	r3, [pc, #200]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	0f1b      	lsrs	r3, r3, #28
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	019a      	lsls	r2, r3, #6
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	4929      	ldr	r1, [pc, #164]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d028      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030b2:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b8:	0e1b      	lsrs	r3, r3, #24
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030c0:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	019a      	lsls	r2, r3, #6
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	431a      	orrs	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	071b      	lsls	r3, r3, #28
 80030e6:	4917      	ldr	r1, [pc, #92]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	4911      	ldr	r1, [pc, #68]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003104:	4b0f      	ldr	r3, [pc, #60]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fd ff2c 	bl	8000f6c <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003118:	f7fd ff28 	bl	8000f6c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e007      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800312a:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003136:	d1ef      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e049      	b.n	80031ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f841 	bl	80031f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 f9e8 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e054      	b.n	80032ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a26      	ldr	r2, [pc, #152]	@ (80032dc <HAL_TIM_Base_Start_IT+0xd0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d022      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324e:	d01d      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a22      	ldr	r2, [pc, #136]	@ (80032e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d018      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a21      	ldr	r2, [pc, #132]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00e      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <HAL_TIM_Base_Start_IT+0xe0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	@ (80032f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d115      	bne.n	80032b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <HAL_TIM_Base_Start_IT+0xec>)
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d015      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0xbe>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a4:	d011      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b6:	e008      	b.n	80032ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e000      	b.n	80032cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40001800 	.word	0x40001800
 80032f8:	00010007 	.word	0x00010007

080032fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0202 	mvn.w	r2, #2
 8003330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8e9 	bl	800351e <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8db 	bl	800350a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8ec 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d020      	beq.n	80033ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0204 	mvn.w	r2, #4
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8c3 	bl	800351e <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8b5 	bl	800350a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f8c6 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0208 	mvn.w	r2, #8
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f89d 	bl	800351e <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f88f 	bl	800350a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8a0 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d020      	beq.n	8003444 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0210 	mvn.w	r2, #16
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2208      	movs	r2, #8
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f877 	bl	800351e <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f869 	bl	800350a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f87a 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0201 	mvn.w	r2, #1
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fab4 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800348e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f913 	bl	80036bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f90b 	bl	80036d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00c      	beq.n	80034de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f834 	bl	8003546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00c      	beq.n	8003502 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f06f 0220 	mvn.w	r2, #32
 80034fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8d3 	bl	80036a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a43      	ldr	r2, [pc, #268]	@ (800367c <TIM_Base_SetConfig+0x120>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357a:	d00f      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a40      	ldr	r2, [pc, #256]	@ (8003680 <TIM_Base_SetConfig+0x124>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3f      	ldr	r2, [pc, #252]	@ (8003684 <TIM_Base_SetConfig+0x128>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3e      	ldr	r2, [pc, #248]	@ (8003688 <TIM_Base_SetConfig+0x12c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3d      	ldr	r2, [pc, #244]	@ (800368c <TIM_Base_SetConfig+0x130>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d108      	bne.n	80035ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a32      	ldr	r2, [pc, #200]	@ (800367c <TIM_Base_SetConfig+0x120>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02b      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035bc:	d027      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003680 <TIM_Base_SetConfig+0x124>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d023      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003684 <TIM_Base_SetConfig+0x128>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01f      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003688 <TIM_Base_SetConfig+0x12c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01b      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	@ (800368c <TIM_Base_SetConfig+0x130>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d017      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003690 <TIM_Base_SetConfig+0x134>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003694 <TIM_Base_SetConfig+0x138>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00f      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a29      	ldr	r2, [pc, #164]	@ (8003698 <TIM_Base_SetConfig+0x13c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a28      	ldr	r2, [pc, #160]	@ (800369c <TIM_Base_SetConfig+0x140>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <TIM_Base_SetConfig+0x144>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a26      	ldr	r2, [pc, #152]	@ (80036a4 <TIM_Base_SetConfig+0x148>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a0e      	ldr	r2, [pc, #56]	@ (800367c <TIM_Base_SetConfig+0x120>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0xf2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a10      	ldr	r2, [pc, #64]	@ (800368c <TIM_Base_SetConfig+0x130>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d103      	bne.n	8003656 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40010400 	.word	0x40010400
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800
 800369c:	40001800 	.word	0x40001800
 80036a0:	40001c00 	.word	0x40001c00
 80036a4:	40002000 	.word	0x40002000

080036a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e040      	b.n	8003778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fa5a 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fb16 	bl	8003d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8af 	bl	8003894 <UART_SetConfig>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e01b      	b.n	8003778 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800374e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800375e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fb95 	bl	8003ea0 <UART_CheckIdleState>
 8003776:	4603      	mov	r3, r0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	@ 0x28
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003794:	2b20      	cmp	r3, #32
 8003796:	d177      	bne.n	8003888 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UART_Transmit+0x24>
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e070      	b.n	800388a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2221      	movs	r2, #33	@ 0x21
 80037b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b6:	f7fd fbd9 	bl	8000f6c <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d4:	d108      	bne.n	80037e8 <HAL_UART_Transmit+0x68>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e003      	b.n	80037f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f0:	e02f      	b.n	8003852 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	@ 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fbf7 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e03b      	b.n	800388a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003826:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	3302      	adds	r3, #2
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	e007      	b.n	8003840 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3301      	adds	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1c9      	bne.n	80037f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	2140      	movs	r1, #64	@ 0x40
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fbc1 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e005      	b.n	800388a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4ba6      	ldr	r3, [pc, #664]	@ (8003b58 <UART_SetConfig+0x2c4>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a94      	ldr	r2, [pc, #592]	@ (8003b5c <UART_SetConfig+0x2c8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d120      	bne.n	8003952 <UART_SetConfig+0xbe>
 8003910:	4b93      	ldr	r3, [pc, #588]	@ (8003b60 <UART_SetConfig+0x2cc>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b03      	cmp	r3, #3
 800391c:	d816      	bhi.n	800394c <UART_SetConfig+0xb8>
 800391e:	a201      	add	r2, pc, #4	@ (adr r2, 8003924 <UART_SetConfig+0x90>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003935 	.word	0x08003935
 8003928:	08003941 	.word	0x08003941
 800392c:	0800393b 	.word	0x0800393b
 8003930:	08003947 	.word	0x08003947
 8003934:	2301      	movs	r3, #1
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e150      	b.n	8003bdc <UART_SetConfig+0x348>
 800393a:	2302      	movs	r3, #2
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e14d      	b.n	8003bdc <UART_SetConfig+0x348>
 8003940:	2304      	movs	r3, #4
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e14a      	b.n	8003bdc <UART_SetConfig+0x348>
 8003946:	2308      	movs	r3, #8
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e147      	b.n	8003bdc <UART_SetConfig+0x348>
 800394c:	2310      	movs	r3, #16
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e144      	b.n	8003bdc <UART_SetConfig+0x348>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a83      	ldr	r2, [pc, #524]	@ (8003b64 <UART_SetConfig+0x2d0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d132      	bne.n	80039c2 <UART_SetConfig+0x12e>
 800395c:	4b80      	ldr	r3, [pc, #512]	@ (8003b60 <UART_SetConfig+0x2cc>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d828      	bhi.n	80039bc <UART_SetConfig+0x128>
 800396a:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <UART_SetConfig+0xdc>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	080039a5 	.word	0x080039a5
 8003974:	080039bd 	.word	0x080039bd
 8003978:	080039bd 	.word	0x080039bd
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039b1 	.word	0x080039b1
 8003984:	080039bd 	.word	0x080039bd
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039bd 	.word	0x080039bd
 8003990:	080039ab 	.word	0x080039ab
 8003994:	080039bd 	.word	0x080039bd
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039bd 	.word	0x080039bd
 80039a0:	080039b7 	.word	0x080039b7
 80039a4:	2300      	movs	r3, #0
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e118      	b.n	8003bdc <UART_SetConfig+0x348>
 80039aa:	2302      	movs	r3, #2
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e115      	b.n	8003bdc <UART_SetConfig+0x348>
 80039b0:	2304      	movs	r3, #4
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e112      	b.n	8003bdc <UART_SetConfig+0x348>
 80039b6:	2308      	movs	r3, #8
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e10f      	b.n	8003bdc <UART_SetConfig+0x348>
 80039bc:	2310      	movs	r3, #16
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e10c      	b.n	8003bdc <UART_SetConfig+0x348>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a68      	ldr	r2, [pc, #416]	@ (8003b68 <UART_SetConfig+0x2d4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d120      	bne.n	8003a0e <UART_SetConfig+0x17a>
 80039cc:	4b64      	ldr	r3, [pc, #400]	@ (8003b60 <UART_SetConfig+0x2cc>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039d6:	2b30      	cmp	r3, #48	@ 0x30
 80039d8:	d013      	beq.n	8003a02 <UART_SetConfig+0x16e>
 80039da:	2b30      	cmp	r3, #48	@ 0x30
 80039dc:	d814      	bhi.n	8003a08 <UART_SetConfig+0x174>
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d009      	beq.n	80039f6 <UART_SetConfig+0x162>
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d810      	bhi.n	8003a08 <UART_SetConfig+0x174>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <UART_SetConfig+0x15c>
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d006      	beq.n	80039fc <UART_SetConfig+0x168>
 80039ee:	e00b      	b.n	8003a08 <UART_SetConfig+0x174>
 80039f0:	2300      	movs	r3, #0
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e0f2      	b.n	8003bdc <UART_SetConfig+0x348>
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e0ef      	b.n	8003bdc <UART_SetConfig+0x348>
 80039fc:	2304      	movs	r3, #4
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e0ec      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a02:	2308      	movs	r3, #8
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e0e9      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e0e6      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a56      	ldr	r2, [pc, #344]	@ (8003b6c <UART_SetConfig+0x2d8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d120      	bne.n	8003a5a <UART_SetConfig+0x1c6>
 8003a18:	4b51      	ldr	r3, [pc, #324]	@ (8003b60 <UART_SetConfig+0x2cc>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a24:	d013      	beq.n	8003a4e <UART_SetConfig+0x1ba>
 8003a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a28:	d814      	bhi.n	8003a54 <UART_SetConfig+0x1c0>
 8003a2a:	2b80      	cmp	r3, #128	@ 0x80
 8003a2c:	d009      	beq.n	8003a42 <UART_SetConfig+0x1ae>
 8003a2e:	2b80      	cmp	r3, #128	@ 0x80
 8003a30:	d810      	bhi.n	8003a54 <UART_SetConfig+0x1c0>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <UART_SetConfig+0x1a8>
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	d006      	beq.n	8003a48 <UART_SetConfig+0x1b4>
 8003a3a:	e00b      	b.n	8003a54 <UART_SetConfig+0x1c0>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e0cc      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a42:	2302      	movs	r3, #2
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e0c9      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e0c6      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e0c3      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a54:	2310      	movs	r3, #16
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e0c0      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a44      	ldr	r2, [pc, #272]	@ (8003b70 <UART_SetConfig+0x2dc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d125      	bne.n	8003ab0 <UART_SetConfig+0x21c>
 8003a64:	4b3e      	ldr	r3, [pc, #248]	@ (8003b60 <UART_SetConfig+0x2cc>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a72:	d017      	beq.n	8003aa4 <UART_SetConfig+0x210>
 8003a74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a78:	d817      	bhi.n	8003aaa <UART_SetConfig+0x216>
 8003a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7e:	d00b      	beq.n	8003a98 <UART_SetConfig+0x204>
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a84:	d811      	bhi.n	8003aaa <UART_SetConfig+0x216>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <UART_SetConfig+0x1fe>
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8e:	d006      	beq.n	8003a9e <UART_SetConfig+0x20a>
 8003a90:	e00b      	b.n	8003aaa <UART_SetConfig+0x216>
 8003a92:	2300      	movs	r3, #0
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e0a1      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e09e      	b.n	8003bdc <UART_SetConfig+0x348>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e09b      	b.n	8003bdc <UART_SetConfig+0x348>
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e098      	b.n	8003bdc <UART_SetConfig+0x348>
 8003aaa:	2310      	movs	r3, #16
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e095      	b.n	8003bdc <UART_SetConfig+0x348>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8003b74 <UART_SetConfig+0x2e0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d125      	bne.n	8003b06 <UART_SetConfig+0x272>
 8003aba:	4b29      	ldr	r3, [pc, #164]	@ (8003b60 <UART_SetConfig+0x2cc>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ac4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac8:	d017      	beq.n	8003afa <UART_SetConfig+0x266>
 8003aca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ace:	d817      	bhi.n	8003b00 <UART_SetConfig+0x26c>
 8003ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad4:	d00b      	beq.n	8003aee <UART_SetConfig+0x25a>
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ada:	d811      	bhi.n	8003b00 <UART_SetConfig+0x26c>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <UART_SetConfig+0x254>
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae4:	d006      	beq.n	8003af4 <UART_SetConfig+0x260>
 8003ae6:	e00b      	b.n	8003b00 <UART_SetConfig+0x26c>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e076      	b.n	8003bdc <UART_SetConfig+0x348>
 8003aee:	2302      	movs	r3, #2
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e073      	b.n	8003bdc <UART_SetConfig+0x348>
 8003af4:	2304      	movs	r3, #4
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e070      	b.n	8003bdc <UART_SetConfig+0x348>
 8003afa:	2308      	movs	r3, #8
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e06d      	b.n	8003bdc <UART_SetConfig+0x348>
 8003b00:	2310      	movs	r3, #16
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e06a      	b.n	8003bdc <UART_SetConfig+0x348>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <UART_SetConfig+0x2e4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d138      	bne.n	8003b82 <UART_SetConfig+0x2ee>
 8003b10:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <UART_SetConfig+0x2cc>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b1e:	d017      	beq.n	8003b50 <UART_SetConfig+0x2bc>
 8003b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b24:	d82a      	bhi.n	8003b7c <UART_SetConfig+0x2e8>
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b2a:	d00b      	beq.n	8003b44 <UART_SetConfig+0x2b0>
 8003b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b30:	d824      	bhi.n	8003b7c <UART_SetConfig+0x2e8>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <UART_SetConfig+0x2aa>
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3a:	d006      	beq.n	8003b4a <UART_SetConfig+0x2b6>
 8003b3c:	e01e      	b.n	8003b7c <UART_SetConfig+0x2e8>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e04b      	b.n	8003bdc <UART_SetConfig+0x348>
 8003b44:	2302      	movs	r3, #2
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e048      	b.n	8003bdc <UART_SetConfig+0x348>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e045      	b.n	8003bdc <UART_SetConfig+0x348>
 8003b50:	2308      	movs	r3, #8
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e042      	b.n	8003bdc <UART_SetConfig+0x348>
 8003b56:	bf00      	nop
 8003b58:	efff69f3 	.word	0xefff69f3
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40004400 	.word	0x40004400
 8003b68:	40004800 	.word	0x40004800
 8003b6c:	40004c00 	.word	0x40004c00
 8003b70:	40005000 	.word	0x40005000
 8003b74:	40011400 	.word	0x40011400
 8003b78:	40007800 	.word	0x40007800
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e02c      	b.n	8003bdc <UART_SetConfig+0x348>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a72      	ldr	r2, [pc, #456]	@ (8003d50 <UART_SetConfig+0x4bc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d125      	bne.n	8003bd8 <UART_SetConfig+0x344>
 8003b8c:	4b71      	ldr	r3, [pc, #452]	@ (8003d54 <UART_SetConfig+0x4c0>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b9a:	d017      	beq.n	8003bcc <UART_SetConfig+0x338>
 8003b9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ba0:	d817      	bhi.n	8003bd2 <UART_SetConfig+0x33e>
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba6:	d00b      	beq.n	8003bc0 <UART_SetConfig+0x32c>
 8003ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bac:	d811      	bhi.n	8003bd2 <UART_SetConfig+0x33e>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <UART_SetConfig+0x326>
 8003bb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bb6:	d006      	beq.n	8003bc6 <UART_SetConfig+0x332>
 8003bb8:	e00b      	b.n	8003bd2 <UART_SetConfig+0x33e>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	77fb      	strb	r3, [r7, #31]
 8003bbe:	e00d      	b.n	8003bdc <UART_SetConfig+0x348>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e00a      	b.n	8003bdc <UART_SetConfig+0x348>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e007      	b.n	8003bdc <UART_SetConfig+0x348>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e004      	b.n	8003bdc <UART_SetConfig+0x348>
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e001      	b.n	8003bdc <UART_SetConfig+0x348>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be4:	d15b      	bne.n	8003c9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d828      	bhi.n	8003c3e <UART_SetConfig+0x3aa>
 8003bec:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <UART_SetConfig+0x360>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c3f 	.word	0x08003c3f
 8003c04:	08003c2f 	.word	0x08003c2f
 8003c08:	08003c3f 	.word	0x08003c3f
 8003c0c:	08003c3f 	.word	0x08003c3f
 8003c10:	08003c3f 	.word	0x08003c3f
 8003c14:	08003c37 	.word	0x08003c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c18:	f7fe fe14 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	61b8      	str	r0, [r7, #24]
        break;
 8003c1e:	e013      	b.n	8003c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c20:	f7fe fe24 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8003c24:	61b8      	str	r0, [r7, #24]
        break;
 8003c26:	e00f      	b.n	8003c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c28:	4b4b      	ldr	r3, [pc, #300]	@ (8003d58 <UART_SetConfig+0x4c4>)
 8003c2a:	61bb      	str	r3, [r7, #24]
        break;
 8003c2c:	e00c      	b.n	8003c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2e:	f7fe fcf7 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8003c32:	61b8      	str	r0, [r7, #24]
        break;
 8003c34:	e008      	b.n	8003c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c3a:	61bb      	str	r3, [r7, #24]
        break;
 8003c3c:	e004      	b.n	8003c48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77bb      	strb	r3, [r7, #30]
        break;
 8003c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d074      	beq.n	8003d38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	005a      	lsls	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d916      	bls.n	8003c98 <UART_SetConfig+0x404>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c70:	d212      	bcs.n	8003c98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f023 030f 	bic.w	r3, r3, #15
 8003c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	89fa      	ldrh	r2, [r7, #14]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	e04f      	b.n	8003d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77bb      	strb	r3, [r7, #30]
 8003c9c:	e04c      	b.n	8003d38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d828      	bhi.n	8003cf6 <UART_SetConfig+0x462>
 8003ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <UART_SetConfig+0x418>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fdb8 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61b8      	str	r0, [r7, #24]
        break;
 8003cd6:	e013      	b.n	8003d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe fdc8 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61b8      	str	r0, [r7, #24]
        break;
 8003cde:	e00f      	b.n	8003d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <UART_SetConfig+0x4c4>)
 8003ce2:	61bb      	str	r3, [r7, #24]
        break;
 8003ce4:	e00c      	b.n	8003d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe fc9b 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8003cea:	61b8      	str	r0, [r7, #24]
        break;
 8003cec:	e008      	b.n	8003d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf2:	61bb      	str	r3, [r7, #24]
        break;
 8003cf4:	e004      	b.n	8003d00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8003cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	085a      	lsrs	r2, r3, #1
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	441a      	add	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b0f      	cmp	r3, #15
 8003d1e:	d909      	bls.n	8003d34 <UART_SetConfig+0x4a0>
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d26:	d205      	bcs.n	8003d34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e001      	b.n	8003d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d44:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40007c00 	.word	0x40007c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400

08003d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e5a:	d10a      	bne.n	8003e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b098      	sub	sp, #96	@ 0x60
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eb0:	f7fd f85c 	bl	8000f6c <HAL_GetTick>
 8003eb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d12e      	bne.n	8003f22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f88c 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d021      	beq.n	8003f22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003efe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e6      	bne.n	8003ede <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e062      	b.n	8003fe8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d149      	bne.n	8003fc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f856 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03c      	beq.n	8003fc4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	623b      	str	r3, [r7, #32]
   return(result);
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e6      	bne.n	8003f4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f9c:	61fa      	str	r2, [r7, #28]
 8003f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	69b9      	ldr	r1, [r7, #24]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e011      	b.n	8003fe8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3758      	adds	r7, #88	@ 0x58
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	e04f      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d04b      	beq.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fc ffaf 	bl	8000f6c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <UART_WaitOnFlagUntilTimeout+0x30>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e04e      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d037      	beq.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b80      	cmp	r3, #128	@ 0x80
 8004036:	d034      	beq.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	d031      	beq.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b08      	cmp	r3, #8
 800404a:	d110      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2208      	movs	r2, #8
 8004052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f838 	bl	80040ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2208      	movs	r2, #8
 800405e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e029      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407c:	d111      	bne.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f81e 	bl	80040ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e00f      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d0a0      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b095      	sub	sp, #84	@ 0x54
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e6      	bne.n	80040d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	61fb      	str	r3, [r7, #28]
   return(result);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3308      	adds	r3, #8
 8004122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800412a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e5      	bne.n	8004104 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413c:	2b01      	cmp	r3, #1
 800413e:	d118      	bne.n	8004172 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	60bb      	str	r3, [r7, #8]
   return(result);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f023 0310 	bic.w	r3, r3, #16
 8004154:	647b      	str	r3, [r7, #68]	@ 0x44
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6979      	ldr	r1, [r7, #20]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e6      	bne.n	8004140 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004186:	bf00      	nop
 8004188:	3754      	adds	r7, #84	@ 0x54
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004194:	b084      	sub	sp, #16
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	f107 001c 	add.w	r0, r7, #28
 80041a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d121      	bne.n	80041f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	4b21      	ldr	r3, [pc, #132]	@ (8004244 <USB_CoreInit+0xb0>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa92 	bl	8004710 <USB_CoreReset>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e010      	b.n	8004214 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa86 	bl	8004710 <USB_CoreReset>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004214:	7fbb      	ldrb	r3, [r7, #30]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10b      	bne.n	8004232 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f043 0206 	orr.w	r2, r3, #6
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800423e:	b004      	add	sp, #16
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	ffbdffbf 	.word	0xffbdffbf

08004248 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 0201 	bic.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d115      	bne.n	80042b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004298:	200a      	movs	r0, #10
 800429a:	f7fc fe73 	bl	8000f84 <HAL_Delay>
      ms += 10U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	330a      	adds	r3, #10
 80042a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fa25 	bl	80046f4 <USB_GetMode>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d01e      	beq.n	80042ee <USB_SetCurrentMode+0x84>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80042b4:	d9f0      	bls.n	8004298 <USB_SetCurrentMode+0x2e>
 80042b6:	e01a      	b.n	80042ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d115      	bne.n	80042ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042ca:	200a      	movs	r0, #10
 80042cc:	f7fc fe5a 	bl	8000f84 <HAL_Delay>
      ms += 10U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	330a      	adds	r3, #10
 80042d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa0c 	bl	80046f4 <USB_GetMode>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <USB_SetCurrentMode+0x84>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80042e6:	d9f0      	bls.n	80042ca <USB_SetCurrentMode+0x60>
 80042e8:	e001      	b.n	80042ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e005      	b.n	80042fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80042f2:	d101      	bne.n	80042f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004304:	b084      	sub	sp, #16
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e009      	b.n	8004338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3340      	adds	r3, #64	@ 0x40
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	2200      	movs	r2, #0
 8004330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3301      	adds	r3, #1
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b0e      	cmp	r3, #14
 800433c:	d9f2      	bls.n	8004324 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800433e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11c      	bne.n	8004380 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e005      	b.n	800438c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004392:	461a      	mov	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004398:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10d      	bne.n	80043bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043a8:	2100      	movs	r1, #0
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f968 	bl	8004680 <USB_SetDevSpeed>
 80043b0:	e008      	b.n	80043c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043b2:	2101      	movs	r1, #1
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f963 	bl	8004680 <USB_SetDevSpeed>
 80043ba:	e003      	b.n	80043c4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043bc:	2103      	movs	r1, #3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f95e 	bl	8004680 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043c4:	2110      	movs	r1, #16
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8fa 	bl	80045c0 <USB_FlushTxFifo>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f924 	bl	8004624 <USB_FlushRxFifo>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ec:	461a      	mov	r2, r3
 80043ee:	2300      	movs	r3, #0
 80043f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004404:	461a      	mov	r2, r3
 8004406:	2300      	movs	r3, #0
 8004408:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e043      	b.n	8004498 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004422:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004426:	d118      	bne.n	800445a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443a:	461a      	mov	r2, r3
 800443c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e013      	b.n	800446c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004450:	461a      	mov	r2, r3
 8004452:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	e008      	b.n	800446c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004466:	461a      	mov	r2, r3
 8004468:	2300      	movs	r3, #0
 800446a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004478:	461a      	mov	r2, r3
 800447a:	2300      	movs	r3, #0
 800447c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448a:	461a      	mov	r2, r3
 800448c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	3301      	adds	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800449c:	461a      	mov	r2, r3
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d3b5      	bcc.n	8004410 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e043      	b.n	8004532 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044c0:	d118      	bne.n	80044f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d4:	461a      	mov	r2, r3
 80044d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e013      	b.n	8004506 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ea:	461a      	mov	r2, r3
 80044ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e008      	b.n	8004506 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004500:	461a      	mov	r2, r3
 8004502:	2300      	movs	r3, #0
 8004504:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004512:	461a      	mov	r2, r3
 8004514:	2300      	movs	r3, #0
 8004516:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004524:	461a      	mov	r2, r3
 8004526:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800452a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	3301      	adds	r3, #1
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004536:	461a      	mov	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4293      	cmp	r3, r2
 800453c:	d3b5      	bcc.n	80044aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800454c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004550:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800455e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004560:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f043 0210 	orr.w	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	4b0f      	ldr	r3, [pc, #60]	@ (80045b8 <USB_DevInit+0x2b4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004580:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f043 0208 	orr.w	r2, r3, #8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004594:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <USB_DevInit+0x2b8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045b4:	b004      	add	sp, #16
 80045b6:	4770      	bx	lr
 80045b8:	803c3800 	.word	0x803c3800
 80045bc:	40000004 	.word	0x40000004

080045c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045da:	d901      	bls.n	80045e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e01b      	b.n	8004618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	daf2      	bge.n	80045ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004604:	d901      	bls.n	800460a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e006      	b.n	8004618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d0f0      	beq.n	80045f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800463c:	d901      	bls.n	8004642 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e018      	b.n	8004674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	daf2      	bge.n	8004630 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2210      	movs	r2, #16
 8004652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004660:	d901      	bls.n	8004666 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e006      	b.n	8004674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b10      	cmp	r3, #16
 8004670:	d0f0      	beq.n	8004654 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	68f9      	ldr	r1, [r7, #12]
 800469c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046a0:	4313      	orrs	r3, r2
 80046a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80046cc:	f023 0303 	bic.w	r3, r3, #3
 80046d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046e0:	f043 0302 	orr.w	r3, r3, #2
 80046e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0301 	and.w	r3, r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3301      	adds	r3, #1
 8004720:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004728:	d901      	bls.n	800472e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e022      	b.n	8004774 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	daf2      	bge.n	800471c <USB_CoreReset+0xc>

  count = 10U;
 8004736:	230a      	movs	r3, #10
 8004738:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800473a:	e002      	b.n	8004742 <USB_CoreReset+0x32>
  {
    count--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3b01      	subs	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f9      	bne.n	800473c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004760:	d901      	bls.n	8004766 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e006      	b.n	8004774 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d0f0      	beq.n	8004754 <USB_CoreReset+0x44>

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004796:	f3ef 8305 	mrs	r3, IPSR
 800479a:	60bb      	str	r3, [r7, #8]
  return(result);
 800479c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a2:	f3ef 8310 	mrs	r3, PRIMASK
 80047a6:	607b      	str	r3, [r7, #4]
  return(result);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ae:	f3ef 8311 	mrs	r3, BASEPRI
 80047b2:	603b      	str	r3, [r7, #0]
  return(result);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <osKernelInitialize+0x3a>
 80047ba:	4b0e      	ldr	r3, [pc, #56]	@ (80047f4 <osKernelInitialize+0x64>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d103      	bne.n	80047ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80047c2:	f06f 0305 	mvn.w	r3, #5
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e00c      	b.n	80047e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047ca:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <osKernelInitialize+0x64>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d105      	bne.n	80047de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047d2:	4b08      	ldr	r3, [pc, #32]	@ (80047f4 <osKernelInitialize+0x64>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e002      	b.n	80047e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000086c 	.word	0x2000086c

080047f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047fe:	f3ef 8305 	mrs	r3, IPSR
 8004802:	60bb      	str	r3, [r7, #8]
  return(result);
 8004804:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	607b      	str	r3, [r7, #4]
  return(result);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d105      	bne.n	8004822 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004816:	f3ef 8311 	mrs	r3, BASEPRI
 800481a:	603b      	str	r3, [r7, #0]
  return(result);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <osKernelStart+0x3a>
 8004822:	4b0f      	ldr	r3, [pc, #60]	@ (8004860 <osKernelStart+0x68>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d103      	bne.n	8004832 <osKernelStart+0x3a>
    stat = osErrorISR;
 800482a:	f06f 0305 	mvn.w	r3, #5
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e010      	b.n	8004854 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <osKernelStart+0x68>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d109      	bne.n	800484e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800483a:	f7ff ffa1 	bl	8004780 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800483e:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <osKernelStart+0x68>)
 8004840:	2202      	movs	r2, #2
 8004842:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004844:	f001 f9c2 	bl	8005bcc <vTaskStartScheduler>
      stat = osOK;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e002      	b.n	8004854 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	2000086c 	.word	0x2000086c

08004864 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b090      	sub	sp, #64	@ 0x40
 8004868:	af04      	add	r7, sp, #16
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004874:	f3ef 8305 	mrs	r3, IPSR
 8004878:	61fb      	str	r3, [r7, #28]
  return(result);
 800487a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 808f 	bne.w	80049a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	61bb      	str	r3, [r7, #24]
  return(result);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d105      	bne.n	800489a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800488e:	f3ef 8311 	mrs	r3, BASEPRI
 8004892:	617b      	str	r3, [r7, #20]
  return(result);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <osThreadNew+0x3e>
 800489a:	4b44      	ldr	r3, [pc, #272]	@ (80049ac <osThreadNew+0x148>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d07e      	beq.n	80049a0 <osThreadNew+0x13c>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d07b      	beq.n	80049a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80048ac:	2318      	movs	r3, #24
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295
 80048b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d045      	beq.n	800494c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <osThreadNew+0x6a>
        name = attr->name;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <osThreadNew+0x90>
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	2b38      	cmp	r3, #56	@ 0x38
 80048e6:	d805      	bhi.n	80048f4 <osThreadNew+0x90>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <osThreadNew+0x94>
        return (NULL);
 80048f4:	2300      	movs	r3, #0
 80048f6:	e054      	b.n	80049a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	089b      	lsrs	r3, r3, #2
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <osThreadNew+0xca>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2ba7      	cmp	r3, #167	@ 0xa7
 8004916:	d90a      	bls.n	800492e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <osThreadNew+0xca>
        mem = 1;
 8004928:	2301      	movs	r3, #1
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	e010      	b.n	8004950 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10c      	bne.n	8004950 <osThreadNew+0xec>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <osThreadNew+0xec>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <osThreadNew+0xec>
          mem = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	e001      	b.n	8004950 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d110      	bne.n	8004978 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800495e:	9202      	str	r2, [sp, #8]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800496a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fe21 	bl	80055b4 <xTaskCreateStatic>
 8004972:	4603      	mov	r3, r0
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e013      	b.n	80049a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d110      	bne.n	80049a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	b29a      	uxth	r2, r3
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fe75 	bl	8005680 <xTaskCreate>
 8004996:	4603      	mov	r3, r0
 8004998:	2b01      	cmp	r3, #1
 800499a:	d001      	beq.n	80049a0 <osThreadNew+0x13c>
          hTask = NULL;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049a0:	693b      	ldr	r3, [r7, #16]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3730      	adds	r7, #48	@ 0x30
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	2000086c 	.word	0x2000086c

080049b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a07      	ldr	r2, [pc, #28]	@ (80049dc <vApplicationGetIdleTaskMemory+0x2c>)
 80049c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4a06      	ldr	r2, [pc, #24]	@ (80049e0 <vApplicationGetIdleTaskMemory+0x30>)
 80049c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2280      	movs	r2, #128	@ 0x80
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000870 	.word	0x20000870
 80049e0:	20000918 	.word	0x20000918

080049e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <vApplicationGetTimerTaskMemory+0x2c>)
 80049f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a06      	ldr	r2, [pc, #24]	@ (8004a14 <vApplicationGetTimerTaskMemory+0x30>)
 80049fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a02:	601a      	str	r2, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	20000b18 	.word	0x20000b18
 8004a14:	20000bc0 	.word	0x20000bc0

08004a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f103 0208 	add.w	r2, r3, #8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f103 0208 	add.w	r2, r3, #8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f103 0208 	add.w	r2, r3, #8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d103      	bne.n	8004ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e00c      	b.n	8004af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3308      	adds	r3, #8
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e002      	b.n	8004ae8 <vListInsert+0x2e>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d2f6      	bcs.n	8004ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6852      	ldr	r2, [r2, #4]
 8004b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d103      	bne.n	8004b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	1e5a      	subs	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	b672      	cpsid	i
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	b662      	cpsie	i
 8004ba8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004bb0:	f002 f9e4 	bl	8006f7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbc:	68f9      	ldr	r1, [r7, #12]
 8004bbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	3b01      	subs	r3, #1
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	22ff      	movs	r2, #255	@ 0xff
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	22ff      	movs	r2, #255	@ 0xff
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d114      	bne.n	8004c30 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01a      	beq.n	8004c44 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3310      	adds	r3, #16
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 fa86 	bl	8006124 <xTaskRemoveFromEventList>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d012      	beq.n	8004c44 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <xQueueGenericReset+0xd4>)
 8004c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	e009      	b.n	8004c44 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3310      	adds	r3, #16
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff feef 	bl	8004a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3324      	adds	r3, #36	@ 0x24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff feea 	bl	8004a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c44:	f002 f9d0 	bl	8006fe8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c48:	2301      	movs	r3, #1
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	@ 0x38
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10d      	bne.n	8004c88 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c70:	b672      	cpsid	i
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	b662      	cpsie	i
 8004c80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10d      	bne.n	8004caa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c92:	b672      	cpsid	i
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	b662      	cpsie	i
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	e7fd      	b.n	8004ca6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <xQueueGenericCreateStatic+0x5e>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <xQueueGenericCreateStatic+0x62>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xQueueGenericCreateStatic+0x64>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	b672      	cpsid	i
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	b662      	cpsie	i
 8004cd4:	623b      	str	r3, [r7, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <xQueueGenericCreateStatic+0x90>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <xQueueGenericCreateStatic+0x94>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <xQueueGenericCreateStatic+0x96>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	b672      	cpsid	i
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	b662      	cpsie	i
 8004d06:	61fb      	str	r3, [r7, #28]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d0e:	2350      	movs	r3, #80	@ 0x50
 8004d10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b50      	cmp	r3, #80	@ 0x50
 8004d16:	d00d      	beq.n	8004d34 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	b672      	cpsid	i
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	b662      	cpsie	i
 8004d2c:	61bb      	str	r3, [r7, #24]
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d48:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f805 	bl	8004d66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3730      	adds	r7, #48	@ 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e002      	b.n	8004d88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d94:	2101      	movs	r1, #1
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f7ff fef2 	bl	8004b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	@ 0x38
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <xQueueGenericSend+0x38>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dcc:	b672      	cpsid	i
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	b662      	cpsie	i
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericSend+0x46>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xQueueGenericSend+0x4a>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueGenericSend+0x4c>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10d      	bne.n	8004e18 <xQueueGenericSend+0x6c>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	b672      	cpsid	i
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	b662      	cpsie	i
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	e7fd      	b.n	8004e14 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSend+0x7a>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <xQueueGenericSend+0x7e>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <xQueueGenericSend+0x80>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <xQueueGenericSend+0xa0>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e34:	b672      	cpsid	i
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	b662      	cpsie	i
 8004e44:	623b      	str	r3, [r7, #32]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e4c:	f001 fb38 	bl	80064c0 <xTaskGetSchedulerState>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <xQueueGenericSend+0xb0>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <xQueueGenericSend+0xb4>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <xQueueGenericSend+0xb6>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <xQueueGenericSend+0xd6>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	b672      	cpsid	i
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	b662      	cpsie	i
 8004e7a:	61fb      	str	r3, [r7, #28]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e82:	f002 f87b 	bl	8006f7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <xQueueGenericSend+0xec>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d129      	bne.n	8004eec <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e9e:	f000 fa1b 	bl	80052d8 <prvCopyDataToQueue>
 8004ea2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	3324      	adds	r3, #36	@ 0x24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f937 	bl	8006124 <xTaskRemoveFromEventList>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8004fbc <xQueueGenericSend+0x210>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	e00a      	b.n	8004ee4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ed4:	4b39      	ldr	r3, [pc, #228]	@ (8004fbc <xQueueGenericSend+0x210>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ee4:	f002 f880 	bl	8006fe8 <vPortExitCritical>
				return pdPASS;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e063      	b.n	8004fb4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ef2:	f002 f879 	bl	8006fe8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e05c      	b.n	8004fb4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f973 	bl	80061f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f0e:	f002 f86b 	bl	8006fe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f12:	f000 fecf 	bl	8005cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f16:	f002 f831 	bl	8006f7c <vPortEnterCritical>
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d103      	bne.n	8004f30 <xQueueGenericSend+0x184>
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d103      	bne.n	8004f46 <xQueueGenericSend+0x19a>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f46:	f002 f84f 	bl	8006fe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f4a:	1d3a      	adds	r2, r7, #4
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 f962 	bl	800621c <xTaskCheckForTimeOut>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d124      	bne.n	8004fa8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f60:	f000 fab2 	bl	80054c8 <prvIsQueueFull>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	3310      	adds	r3, #16
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 f880 	bl	8006078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f7a:	f000 fa3d 	bl	80053f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f7e:	f000 fea7 	bl	8005cd0 <xTaskResumeAll>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f af7c 	bne.w	8004e82 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <xQueueGenericSend+0x210>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	e772      	b.n	8004e82 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f9e:	f000 fa2b 	bl	80053f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fa2:	f000 fe95 	bl	8005cd0 <xTaskResumeAll>
 8004fa6:	e76c      	b.n	8004e82 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004faa:	f000 fa25 	bl	80053f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fae:	f000 fe8f 	bl	8005cd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3738      	adds	r7, #56	@ 0x38
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	e000ed04 	.word	0xe000ed04

08004fc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08e      	sub	sp, #56	@ 0x38
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10d      	bne.n	8004ff4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	b672      	cpsid	i
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	b662      	cpsie	i
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	e7fd      	b.n	8004ff0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <xQueueGenericSendFromISR+0x42>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <xQueueGenericSendFromISR+0x46>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <xQueueGenericSendFromISR+0x48>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10d      	bne.n	8005028 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005010:	b672      	cpsid	i
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	b662      	cpsie	i
 8005020:	623b      	str	r3, [r7, #32]
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d103      	bne.n	8005036 <xQueueGenericSendFromISR+0x76>
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <xQueueGenericSendFromISR+0x7a>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueGenericSendFromISR+0x7c>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10d      	bne.n	800505c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	b672      	cpsid	i
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	b662      	cpsie	i
 8005054:	61fb      	str	r3, [r7, #28]
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800505c:	f002 f876 	bl	800714c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005060:	f3ef 8211 	mrs	r2, BASEPRI
 8005064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005068:	b672      	cpsid	i
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	b662      	cpsie	i
 8005078:	61ba      	str	r2, [r7, #24]
 800507a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800507c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <xQueueGenericSendFromISR+0xd2>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d12c      	bne.n	80050ec <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050a2:	f000 f919 	bl	80052d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d112      	bne.n	80050d6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d016      	beq.n	80050e6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	3324      	adds	r3, #36	@ 0x24
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 f831 	bl	8006124 <xTaskRemoveFromEventList>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e007      	b.n	80050e6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050da:	3301      	adds	r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	b25a      	sxtb	r2, r3
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80050e6:	2301      	movs	r3, #1
 80050e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80050ea:	e001      	b.n	80050f0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3738      	adds	r7, #56	@ 0x38
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08c      	sub	sp, #48	@ 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <xQueueReceive+0x36>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	b672      	cpsid	i
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	b662      	cpsie	i
 8005136:	623b      	str	r3, [r7, #32]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d103      	bne.n	800514c <xQueueReceive+0x44>
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <xQueueReceive+0x48>
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <xQueueReceive+0x4a>
 8005150:	2300      	movs	r3, #0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <xQueueReceive+0x6a>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	b672      	cpsid	i
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	b662      	cpsie	i
 800516a:	61fb      	str	r3, [r7, #28]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005172:	f001 f9a5 	bl	80064c0 <xTaskGetSchedulerState>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <xQueueReceive+0x7a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <xQueueReceive+0x7e>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <xQueueReceive+0x80>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <xQueueReceive+0xa0>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005190:	b672      	cpsid	i
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	b662      	cpsie	i
 80051a0:	61bb      	str	r3, [r7, #24]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a8:	f001 fee8 	bl	8006f7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01f      	beq.n	80051f8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051bc:	f000 f8f6 	bl	80053ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00f      	beq.n	80051f0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	3310      	adds	r3, #16
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 ffa5 	bl	8006124 <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051e0:	4b3c      	ldr	r3, [pc, #240]	@ (80052d4 <xQueueReceive+0x1cc>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051f0:	f001 fefa 	bl	8006fe8 <vPortExitCritical>
				return pdPASS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e069      	b.n	80052cc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051fe:	f001 fef3 	bl	8006fe8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005202:	2300      	movs	r3, #0
 8005204:	e062      	b.n	80052cc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	4618      	mov	r0, r3
 8005212:	f000 ffed 	bl	80061f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005216:	2301      	movs	r3, #1
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800521a:	f001 fee5 	bl	8006fe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800521e:	f000 fd49 	bl	8005cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005222:	f001 feab 	bl	8006f7c <vPortEnterCritical>
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800522c:	b25b      	sxtb	r3, r3
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d103      	bne.n	800523c <xQueueReceive+0x134>
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005242:	b25b      	sxtb	r3, r3
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d103      	bne.n	8005252 <xQueueReceive+0x14a>
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005252:	f001 fec9 	bl	8006fe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005256:	1d3a      	adds	r2, r7, #4
 8005258:	f107 0310 	add.w	r3, r7, #16
 800525c:	4611      	mov	r1, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ffdc 	bl	800621c <xTaskCheckForTimeOut>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d123      	bne.n	80052b2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800526a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800526c:	f000 f916 	bl	800549c <prvIsQueueEmpty>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d017      	beq.n	80052a6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	3324      	adds	r3, #36	@ 0x24
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fefa 	bl	8006078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005284:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005286:	f000 f8b7 	bl	80053f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800528a:	f000 fd21 	bl	8005cd0 <xTaskResumeAll>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d189      	bne.n	80051a8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005294:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <xQueueReceive+0x1cc>)
 8005296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	e780      	b.n	80051a8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052a8:	f000 f8a6 	bl	80053f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052ac:	f000 fd10 	bl	8005cd0 <xTaskResumeAll>
 80052b0:	e77a      	b.n	80051a8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052b4:	f000 f8a0 	bl	80053f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052b8:	f000 fd0a 	bl	8005cd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052be:	f000 f8ed 	bl	800549c <prvIsQueueEmpty>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f43f af6f 	beq.w	80051a8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3730      	adds	r7, #48	@ 0x30
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d14d      	bne.n	800539a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f001 f8fa 	bl	80064fc <xTaskPriorityDisinherit>
 8005308:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	e043      	b.n	800539a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d119      	bne.n	800534c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6858      	ldr	r0, [r3, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	461a      	mov	r2, r3
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	f002 f9c6 	bl	80076b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	429a      	cmp	r2, r3
 8005340:	d32b      	bcc.n	800539a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	e026      	b.n	800539a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68d8      	ldr	r0, [r3, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	461a      	mov	r2, r3
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	f002 f9ac 	bl	80076b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	425b      	negs	r3, r3
 8005366:	441a      	add	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d207      	bcs.n	8005388 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	425b      	negs	r3, r3
 8005382:	441a      	add	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d105      	bne.n	800539a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	3b01      	subs	r3, #1
 8005398:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80053a2:	697b      	ldr	r3, [r7, #20]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d018      	beq.n	80053f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	441a      	add	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d303      	bcc.n	80053e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68d9      	ldr	r1, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	461a      	mov	r2, r3
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	f002 f962 	bl	80076b4 <memcpy>
	}
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005400:	f001 fdbc 	bl	8006f7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800540a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800540c:	e011      	b.n	8005432 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d012      	beq.n	800543c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3324      	adds	r3, #36	@ 0x24
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fe82 	bl	8006124 <xTaskRemoveFromEventList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005426:	f000 ff61 	bl	80062ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	3b01      	subs	r3, #1
 800542e:	b2db      	uxtb	r3, r3
 8005430:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dce9      	bgt.n	800540e <prvUnlockQueue+0x16>
 800543a:	e000      	b.n	800543e <prvUnlockQueue+0x46>
					break;
 800543c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	22ff      	movs	r2, #255	@ 0xff
 8005442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005446:	f001 fdcf 	bl	8006fe8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800544a:	f001 fd97 	bl	8006f7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005454:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005456:	e011      	b.n	800547c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d012      	beq.n	8005486 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3310      	adds	r3, #16
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fe5d 	bl	8006124 <xTaskRemoveFromEventList>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005470:	f000 ff3c 	bl	80062ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005474:	7bbb      	ldrb	r3, [r7, #14]
 8005476:	3b01      	subs	r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800547c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005480:	2b00      	cmp	r3, #0
 8005482:	dce9      	bgt.n	8005458 <prvUnlockQueue+0x60>
 8005484:	e000      	b.n	8005488 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005486:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	22ff      	movs	r2, #255	@ 0xff
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005490:	f001 fdaa 	bl	8006fe8 <vPortExitCritical>
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054a4:	f001 fd6a 	bl	8006f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e001      	b.n	80054ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ba:	f001 fd95 	bl	8006fe8 <vPortExitCritical>

	return xReturn;
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054d0:	f001 fd54 	bl	8006f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d102      	bne.n	80054e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e001      	b.n	80054ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ea:	f001 fd7d 	bl	8006fe8 <vPortExitCritical>

	return xReturn;
 80054ee:	68fb      	ldr	r3, [r7, #12]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e014      	b.n	8005532 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005508:	4a0f      	ldr	r2, [pc, #60]	@ (8005548 <vQueueAddToRegistry+0x50>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005514:	490c      	ldr	r1, [pc, #48]	@ (8005548 <vQueueAddToRegistry+0x50>)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800551e:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <vQueueAddToRegistry+0x50>)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800552a:	e006      	b.n	800553a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b07      	cmp	r3, #7
 8005536:	d9e7      	bls.n	8005508 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000fc0 	.word	0x20000fc0

0800554c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800555c:	f001 fd0e 	bl	8006f7c <vPortEnterCritical>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005566:	b25b      	sxtb	r3, r3
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d103      	bne.n	8005576 <vQueueWaitForMessageRestricted+0x2a>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800557c:	b25b      	sxtb	r3, r3
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d103      	bne.n	800558c <vQueueWaitForMessageRestricted+0x40>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800558c:	f001 fd2c 	bl	8006fe8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3324      	adds	r3, #36	@ 0x24
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fd91 	bl	80060c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f7ff ff26 	bl	80053f8 <prvUnlockQueue>
	}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	@ 0x38
 80055b8:	af04      	add	r7, sp, #16
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10d      	bne.n	80055e4 <xTaskCreateStatic+0x30>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	b672      	cpsid	i
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	b662      	cpsie	i
 80055dc:	623b      	str	r3, [r7, #32]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80055e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10d      	bne.n	8005606 <xTaskCreateStatic+0x52>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	b672      	cpsid	i
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	b662      	cpsie	i
 80055fe:	61fb      	str	r3, [r7, #28]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005606:	23a8      	movs	r3, #168	@ 0xa8
 8005608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2ba8      	cmp	r3, #168	@ 0xa8
 800560e:	d00d      	beq.n	800562c <xTaskCreateStatic+0x78>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	b672      	cpsid	i
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	b662      	cpsie	i
 8005624:	61bb      	str	r3, [r7, #24]
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	e7fd      	b.n	8005628 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800562c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01e      	beq.n	8005672 <xTaskCreateStatic+0xbe>
 8005634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01b      	beq.n	8005672 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	2202      	movs	r2, #2
 8005648:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800564c:	2300      	movs	r3, #0
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	9302      	str	r3, [sp, #8]
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f851 	bl	800570c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800566a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800566c:	f000 f8f8 	bl	8005860 <prvAddNewTaskToReadyList>
 8005670:	e001      	b.n	8005676 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005676:	697b      	ldr	r3, [r7, #20]
	}
 8005678:	4618      	mov	r0, r3
 800567a:	3728      	adds	r7, #40	@ 0x28
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	@ 0x30
 8005684:	af04      	add	r7, sp, #16
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4618      	mov	r0, r3
 8005696:	f001 fd9f 	bl	80071d8 <pvPortMalloc>
 800569a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00e      	beq.n	80056c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056a2:	20a8      	movs	r0, #168	@ 0xa8
 80056a4:	f001 fd98 	bl	80071d8 <pvPortMalloc>
 80056a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80056b6:	e005      	b.n	80056c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056b8:	6978      	ldr	r0, [r7, #20]
 80056ba:	f001 fe5b 	bl	8007374 <vPortFree>
 80056be:	e001      	b.n	80056c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d017      	beq.n	80056fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	2300      	movs	r3, #0
 80056d6:	9303      	str	r3, [sp, #12]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	9302      	str	r3, [sp, #8]
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f80f 	bl	800570c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ee:	69f8      	ldr	r0, [r7, #28]
 80056f0:	f000 f8b6 	bl	8005860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056f4:	2301      	movs	r3, #1
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	e002      	b.n	8005700 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056fa:	f04f 33ff 	mov.w	r3, #4294967295
 80056fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005700:	69bb      	ldr	r3, [r7, #24]
	}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	461a      	mov	r2, r3
 8005724:	21a5      	movs	r1, #165	@ 0xa5
 8005726:	f001 ff41 	bl	80075ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005734:	440b      	add	r3, r1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f023 0307 	bic.w	r3, r3, #7
 8005742:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	b672      	cpsid	i
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	b662      	cpsie	i
 8005762:	617b      	str	r3, [r7, #20]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01f      	beq.n	80057b0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e012      	b.n	800579c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	7819      	ldrb	r1, [r3, #0]
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	3334      	adds	r3, #52	@ 0x34
 8005786:	460a      	mov	r2, r1
 8005788:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3301      	adds	r3, #1
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d9e9      	bls.n	8005776 <prvInitialiseNewTask+0x6a>
 80057a2:	e000      	b.n	80057a6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80057a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057ae:	e003      	b.n	80057b8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	2b37      	cmp	r3, #55	@ 0x37
 80057bc:	d901      	bls.n	80057c2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057be:	2337      	movs	r3, #55	@ 0x37
 80057c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	2200      	movs	r2, #0
 80057d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	3304      	adds	r3, #4
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff f93d 	bl	8004a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	3318      	adds	r3, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff f938 	bl	8004a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	2200      	movs	r2, #0
 800580a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	3354      	adds	r3, #84	@ 0x54
 8005812:	224c      	movs	r2, #76	@ 0x4c
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fec8 	bl	80075ac <memset>
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <prvInitialiseNewTask+0x148>)
 8005820:	659a      	str	r2, [r3, #88]	@ 0x58
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	4a0c      	ldr	r2, [pc, #48]	@ (8005858 <prvInitialiseNewTask+0x14c>)
 8005826:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	4a0c      	ldr	r2, [pc, #48]	@ (800585c <prvInitialiseNewTask+0x150>)
 800582c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	68f9      	ldr	r1, [r7, #12]
 8005832:	69b8      	ldr	r0, [r7, #24]
 8005834:	f001 fa92 	bl	8006d5c <pxPortInitialiseStack>
 8005838:	4602      	mov	r2, r0
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800583e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800584a:	bf00      	nop
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	2000524c 	.word	0x2000524c
 8005858:	200052b4 	.word	0x200052b4
 800585c:	2000531c 	.word	0x2000531c

08005860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005868:	f001 fb88 	bl	8006f7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800586c:	4b2d      	ldr	r3, [pc, #180]	@ (8005924 <prvAddNewTaskToReadyList+0xc4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	4a2c      	ldr	r2, [pc, #176]	@ (8005924 <prvAddNewTaskToReadyList+0xc4>)
 8005874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005876:	4b2c      	ldr	r3, [pc, #176]	@ (8005928 <prvAddNewTaskToReadyList+0xc8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800587e:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <prvAddNewTaskToReadyList+0xc8>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005884:	4b27      	ldr	r3, [pc, #156]	@ (8005924 <prvAddNewTaskToReadyList+0xc4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d110      	bne.n	80058ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800588c:	f000 fd52 	bl	8006334 <prvInitialiseTaskLists>
 8005890:	e00d      	b.n	80058ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005892:	4b26      	ldr	r3, [pc, #152]	@ (800592c <prvAddNewTaskToReadyList+0xcc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800589a:	4b23      	ldr	r3, [pc, #140]	@ (8005928 <prvAddNewTaskToReadyList+0xc8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d802      	bhi.n	80058ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005928 <prvAddNewTaskToReadyList+0xc8>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058ae:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <prvAddNewTaskToReadyList+0xd0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005930 <prvAddNewTaskToReadyList+0xd0>)
 80058b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <prvAddNewTaskToReadyList+0xd0>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005934 <prvAddNewTaskToReadyList+0xd4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d903      	bls.n	80058d4 <prvAddNewTaskToReadyList+0x74>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	4a18      	ldr	r2, [pc, #96]	@ (8005934 <prvAddNewTaskToReadyList+0xd4>)
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <prvAddNewTaskToReadyList+0xd8>)
 80058e2:	441a      	add	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7ff f8c1 	bl	8004a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058f0:	f001 fb7a 	bl	8006fe8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058f4:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <prvAddNewTaskToReadyList+0xcc>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00e      	beq.n	800591a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <prvAddNewTaskToReadyList+0xc8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	429a      	cmp	r2, r3
 8005908:	d207      	bcs.n	800591a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800590a:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <prvAddNewTaskToReadyList+0xdc>)
 800590c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	200014d4 	.word	0x200014d4
 8005928:	20001000 	.word	0x20001000
 800592c:	200014e0 	.word	0x200014e0
 8005930:	200014f0 	.word	0x200014f0
 8005934:	200014dc 	.word	0x200014dc
 8005938:	20001004 	.word	0x20001004
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01a      	beq.n	8005988 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005952:	4b15      	ldr	r3, [pc, #84]	@ (80059a8 <vTaskDelay+0x68>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <vTaskDelay+0x36>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	b672      	cpsid	i
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	b662      	cpsie	i
 800596e:	60bb      	str	r3, [r7, #8]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005976:	f000 f99d 	bl	8005cb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800597a:	2100      	movs	r1, #0
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fe31 	bl	80065e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005982:	f000 f9a5 	bl	8005cd0 <xTaskResumeAll>
 8005986:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800598e:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <vTaskDelay+0x6c>)
 8005990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	200014fc 	.word	0x200014fc
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80059b8:	f001 fae0 	bl	8006f7c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <vTaskSuspend+0x18>
 80059c2:	4b31      	ldr	r3, [pc, #196]	@ (8005a88 <vTaskSuspend+0xd8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	e000      	b.n	80059ca <vTaskSuspend+0x1a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff f8ab 	bl	8004b2c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3318      	adds	r3, #24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff f8a2 	bl	8004b2c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4827      	ldr	r0, [pc, #156]	@ (8005a8c <vTaskSuspend+0xdc>)
 80059f0:	f7ff f83f 	bl	8004a72 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d103      	bne.n	8005a08 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005a08:	f001 faee 	bl	8006fe8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005a0c:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <vTaskSuspend+0xe0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005a14:	f001 fab2 	bl	8006f7c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005a18:	f000 fd32 	bl	8006480 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005a1c:	f001 fae4 	bl	8006fe8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005a20:	4b19      	ldr	r3, [pc, #100]	@ (8005a88 <vTaskSuspend+0xd8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d12a      	bne.n	8005a80 <vTaskSuspend+0xd0>
		{
			if( xSchedulerRunning != pdFALSE )
 8005a2a:	4b19      	ldr	r3, [pc, #100]	@ (8005a90 <vTaskSuspend+0xe0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01a      	beq.n	8005a68 <vTaskSuspend+0xb8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005a32:	4b18      	ldr	r3, [pc, #96]	@ (8005a94 <vTaskSuspend+0xe4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <vTaskSuspend+0xa6>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	b672      	cpsid	i
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	b662      	cpsie	i
 8005a4e:	60bb      	str	r3, [r7, #8]
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	e7fd      	b.n	8005a52 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8005a56:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <vTaskSuspend+0xe8>)
 8005a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a66:	e00b      	b.n	8005a80 <vTaskSuspend+0xd0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005a68:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <vTaskSuspend+0xdc>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <vTaskSuspend+0xec>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d103      	bne.n	8005a7c <vTaskSuspend+0xcc>
					pxCurrentTCB = NULL;
 8005a74:	4b04      	ldr	r3, [pc, #16]	@ (8005a88 <vTaskSuspend+0xd8>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
	}
 8005a7a:	e001      	b.n	8005a80 <vTaskSuspend+0xd0>
					vTaskSwitchContext();
 8005a7c:	f000 fa94 	bl	8005fa8 <vTaskSwitchContext>
	}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20001000 	.word	0x20001000
 8005a8c:	200014c0 	.word	0x200014c0
 8005a90:	200014e0 	.word	0x200014e0
 8005a94:	200014fc 	.word	0x200014fc
 8005a98:	e000ed04 	.word	0xe000ed04
 8005a9c:	200014d4 	.word	0x200014d4

08005aa0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10d      	bne.n	8005ad2 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	b672      	cpsid	i
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	b662      	cpsie	i
 8005aca:	60fb      	str	r3, [r7, #12]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b00 <prvTaskIsTaskSuspended+0x60>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d10a      	bne.n	8005af2 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	4a08      	ldr	r2, [pc, #32]	@ (8005b04 <prvTaskIsTaskSuspended+0x64>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d005      	beq.n	8005af2 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8005aee:	2301      	movs	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005af2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005af4:	4618      	mov	r0, r3
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	200014c0 	.word	0x200014c0
 8005b04:	20001494 	.word	0x20001494

08005b08 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10d      	bne.n	8005b36 <vTaskResume+0x2e>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	b672      	cpsid	i
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	b662      	cpsie	i
 8005b2e:	60bb      	str	r3, [r7, #8]
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	e7fd      	b.n	8005b32 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005b36:	4b21      	ldr	r3, [pc, #132]	@ (8005bbc <vTaskResume+0xb4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d038      	beq.n	8005bb2 <vTaskResume+0xaa>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d035      	beq.n	8005bb2 <vTaskResume+0xaa>
		{
			taskENTER_CRITICAL();
 8005b46:	f001 fa19 	bl	8006f7c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff ffa8 	bl	8005aa0 <prvTaskIsTaskSuspended>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02b      	beq.n	8005bae <vTaskResume+0xa6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe ffe6 	bl	8004b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b64:	4b16      	ldr	r3, [pc, #88]	@ (8005bc0 <vTaskResume+0xb8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d903      	bls.n	8005b74 <vTaskResume+0x6c>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	4a13      	ldr	r2, [pc, #76]	@ (8005bc0 <vTaskResume+0xb8>)
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4a10      	ldr	r2, [pc, #64]	@ (8005bc4 <vTaskResume+0xbc>)
 8005b82:	441a      	add	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fe ff71 	bl	8004a72 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b94:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <vTaskResume+0xb4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d307      	bcc.n	8005bae <vTaskResume+0xa6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <vTaskResume+0xc0>)
 8005ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005bae:	f001 fa1b 	bl	8006fe8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20001000 	.word	0x20001000
 8005bc0:	200014dc 	.word	0x200014dc
 8005bc4:	20001004 	.word	0x20001004
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	@ 0x28
 8005bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bda:	463a      	mov	r2, r7
 8005bdc:	1d39      	adds	r1, r7, #4
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fee4 	bl	80049b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	9202      	str	r2, [sp, #8]
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	460a      	mov	r2, r1
 8005bfa:	4926      	ldr	r1, [pc, #152]	@ (8005c94 <vTaskStartScheduler+0xc8>)
 8005bfc:	4826      	ldr	r0, [pc, #152]	@ (8005c98 <vTaskStartScheduler+0xcc>)
 8005bfe:	f7ff fcd9 	bl	80055b4 <xTaskCreateStatic>
 8005c02:	4603      	mov	r3, r0
 8005c04:	4a25      	ldr	r2, [pc, #148]	@ (8005c9c <vTaskStartScheduler+0xd0>)
 8005c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c08:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <vTaskStartScheduler+0xd0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c10:	2301      	movs	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e001      	b.n	8005c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d102      	bne.n	8005c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c20:	f000 fd34 	bl	800668c <xTimerCreateTimerTask>
 8005c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d11d      	bne.n	8005c68 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	b672      	cpsid	i
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	b662      	cpsie	i
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c44:	4b16      	ldr	r3, [pc, #88]	@ (8005ca0 <vTaskStartScheduler+0xd4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3354      	adds	r3, #84	@ 0x54
 8005c4a:	4a16      	ldr	r2, [pc, #88]	@ (8005ca4 <vTaskStartScheduler+0xd8>)
 8005c4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c4e:	4b16      	ldr	r3, [pc, #88]	@ (8005ca8 <vTaskStartScheduler+0xdc>)
 8005c50:	f04f 32ff 	mov.w	r2, #4294967295
 8005c54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c56:	4b15      	ldr	r3, [pc, #84]	@ (8005cac <vTaskStartScheduler+0xe0>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c5c:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <vTaskStartScheduler+0xe4>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c62:	f001 f90d 	bl	8006e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c66:	e011      	b.n	8005c8c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d10d      	bne.n	8005c8c <vTaskStartScheduler+0xc0>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c74:	b672      	cpsid	i
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	b662      	cpsie	i
 8005c84:	60fb      	str	r3, [r7, #12]
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <vTaskStartScheduler+0xbc>
}
 8005c8c:	bf00      	nop
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	0800784c 	.word	0x0800784c
 8005c98:	08006305 	.word	0x08006305
 8005c9c:	200014f8 	.word	0x200014f8
 8005ca0:	20001000 	.word	0x20001000
 8005ca4:	20000010 	.word	0x20000010
 8005ca8:	200014f4 	.word	0x200014f4
 8005cac:	200014e0 	.word	0x200014e0
 8005cb0:	200014d8 	.word	0x200014d8

08005cb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cb8:	4b04      	ldr	r3, [pc, #16]	@ (8005ccc <vTaskSuspendAll+0x18>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	4a03      	ldr	r2, [pc, #12]	@ (8005ccc <vTaskSuspendAll+0x18>)
 8005cc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	200014fc 	.word	0x200014fc

08005cd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cde:	4b43      	ldr	r3, [pc, #268]	@ (8005dec <xTaskResumeAll+0x11c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10d      	bne.n	8005d02 <xTaskResumeAll+0x32>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	b672      	cpsid	i
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	b662      	cpsie	i
 8005cfa:	603b      	str	r3, [r7, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d02:	f001 f93b 	bl	8006f7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d06:	4b39      	ldr	r3, [pc, #228]	@ (8005dec <xTaskResumeAll+0x11c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	4a37      	ldr	r2, [pc, #220]	@ (8005dec <xTaskResumeAll+0x11c>)
 8005d0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d10:	4b36      	ldr	r3, [pc, #216]	@ (8005dec <xTaskResumeAll+0x11c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d162      	bne.n	8005dde <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d18:	4b35      	ldr	r3, [pc, #212]	@ (8005df0 <xTaskResumeAll+0x120>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05e      	beq.n	8005dde <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d20:	e02f      	b.n	8005d82 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d22:	4b34      	ldr	r3, [pc, #208]	@ (8005df4 <xTaskResumeAll+0x124>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3318      	adds	r3, #24
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fefc 	bl	8004b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fef7 	bl	8004b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d42:	4b2d      	ldr	r3, [pc, #180]	@ (8005df8 <xTaskResumeAll+0x128>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d903      	bls.n	8005d52 <xTaskResumeAll+0x82>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005df8 <xTaskResumeAll+0x128>)
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a27      	ldr	r2, [pc, #156]	@ (8005dfc <xTaskResumeAll+0x12c>)
 8005d60:	441a      	add	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4619      	mov	r1, r3
 8005d68:	4610      	mov	r0, r2
 8005d6a:	f7fe fe82 	bl	8004a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d72:	4b23      	ldr	r3, [pc, #140]	@ (8005e00 <xTaskResumeAll+0x130>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005d7c:	4b21      	ldr	r3, [pc, #132]	@ (8005e04 <xTaskResumeAll+0x134>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d82:	4b1c      	ldr	r3, [pc, #112]	@ (8005df4 <xTaskResumeAll+0x124>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1cb      	bne.n	8005d22 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d90:	f000 fb76 	bl	8006480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d94:	4b1c      	ldr	r3, [pc, #112]	@ (8005e08 <xTaskResumeAll+0x138>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d010      	beq.n	8005dc2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005da0:	f000 f846 	bl	8005e30 <xTaskIncrementTick>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005daa:	4b16      	ldr	r3, [pc, #88]	@ (8005e04 <xTaskResumeAll+0x134>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f1      	bne.n	8005da0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005dbc:	4b12      	ldr	r3, [pc, #72]	@ (8005e08 <xTaskResumeAll+0x138>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dc2:	4b10      	ldr	r3, [pc, #64]	@ (8005e04 <xTaskResumeAll+0x134>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dce:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <xTaskResumeAll+0x13c>)
 8005dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dde:	f001 f903 	bl	8006fe8 <vPortExitCritical>

	return xAlreadyYielded;
 8005de2:	68bb      	ldr	r3, [r7, #8]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200014fc 	.word	0x200014fc
 8005df0:	200014d4 	.word	0x200014d4
 8005df4:	20001494 	.word	0x20001494
 8005df8:	200014dc 	.word	0x200014dc
 8005dfc:	20001004 	.word	0x20001004
 8005e00:	20001000 	.word	0x20001000
 8005e04:	200014e8 	.word	0x200014e8
 8005e08:	200014e4 	.word	0x200014e4
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e16:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <xTaskGetTickCount+0x1c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e1c:	687b      	ldr	r3, [r7, #4]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	200014d8 	.word	0x200014d8

08005e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3a:	4b50      	ldr	r3, [pc, #320]	@ (8005f7c <xTaskIncrementTick+0x14c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 808c 	bne.w	8005f5c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e44:	4b4e      	ldr	r3, [pc, #312]	@ (8005f80 <xTaskIncrementTick+0x150>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e4c:	4a4c      	ldr	r2, [pc, #304]	@ (8005f80 <xTaskIncrementTick+0x150>)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d123      	bne.n	8005ea0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e58:	4b4a      	ldr	r3, [pc, #296]	@ (8005f84 <xTaskIncrementTick+0x154>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00d      	beq.n	8005e7e <xTaskIncrementTick+0x4e>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	b672      	cpsid	i
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	b662      	cpsie	i
 8005e76:	603b      	str	r3, [r7, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <xTaskIncrementTick+0x4a>
 8005e7e:	4b41      	ldr	r3, [pc, #260]	@ (8005f84 <xTaskIncrementTick+0x154>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	4b40      	ldr	r3, [pc, #256]	@ (8005f88 <xTaskIncrementTick+0x158>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a3e      	ldr	r2, [pc, #248]	@ (8005f84 <xTaskIncrementTick+0x154>)
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f88 <xTaskIncrementTick+0x158>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	4b3e      	ldr	r3, [pc, #248]	@ (8005f8c <xTaskIncrementTick+0x15c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3301      	adds	r3, #1
 8005e98:	4a3c      	ldr	r2, [pc, #240]	@ (8005f8c <xTaskIncrementTick+0x15c>)
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	f000 faf0 	bl	8006480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8005f90 <xTaskIncrementTick+0x160>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d349      	bcc.n	8005f3e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eaa:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <xTaskIncrementTick+0x154>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb4:	4b36      	ldr	r3, [pc, #216]	@ (8005f90 <xTaskIncrementTick+0x160>)
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	601a      	str	r2, [r3, #0]
					break;
 8005ebc:	e03f      	b.n	8005f3e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebe:	4b31      	ldr	r3, [pc, #196]	@ (8005f84 <xTaskIncrementTick+0x154>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d203      	bcs.n	8005ede <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8005f90 <xTaskIncrementTick+0x160>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005edc:	e02f      	b.n	8005f3e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe fe22 	bl	8004b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	3318      	adds	r3, #24
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe fe19 	bl	8004b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efe:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <xTaskIncrementTick+0x164>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d903      	bls.n	8005f0e <xTaskIncrementTick+0xde>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0a:	4a22      	ldr	r2, [pc, #136]	@ (8005f94 <xTaskIncrementTick+0x164>)
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f98 <xTaskIncrementTick+0x168>)
 8005f1c:	441a      	add	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7fe fda4 	bl	8004a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f9c <xTaskIncrementTick+0x16c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d3b8      	bcc.n	8005eaa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f3c:	e7b5      	b.n	8005eaa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f3e:	4b17      	ldr	r3, [pc, #92]	@ (8005f9c <xTaskIncrementTick+0x16c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f44:	4914      	ldr	r1, [pc, #80]	@ (8005f98 <xTaskIncrementTick+0x168>)
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d907      	bls.n	8005f66 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e004      	b.n	8005f66 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f5c:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <xTaskIncrementTick+0x170>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	4a0f      	ldr	r2, [pc, #60]	@ (8005fa0 <xTaskIncrementTick+0x170>)
 8005f64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <xTaskIncrementTick+0x174>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f72:	697b      	ldr	r3, [r7, #20]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	200014fc 	.word	0x200014fc
 8005f80:	200014d8 	.word	0x200014d8
 8005f84:	2000148c 	.word	0x2000148c
 8005f88:	20001490 	.word	0x20001490
 8005f8c:	200014ec 	.word	0x200014ec
 8005f90:	200014f4 	.word	0x200014f4
 8005f94:	200014dc 	.word	0x200014dc
 8005f98:	20001004 	.word	0x20001004
 8005f9c:	20001000 	.word	0x20001000
 8005fa0:	200014e4 	.word	0x200014e4
 8005fa4:	200014e8 	.word	0x200014e8

08005fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fae:	4b2c      	ldr	r3, [pc, #176]	@ (8006060 <vTaskSwitchContext+0xb8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8006064 <vTaskSwitchContext+0xbc>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fbc:	e049      	b.n	8006052 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8005fbe:	4b29      	ldr	r3, [pc, #164]	@ (8006064 <vTaskSwitchContext+0xbc>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc4:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <vTaskSwitchContext+0xc0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e013      	b.n	8005ff4 <vTaskSwitchContext+0x4c>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10d      	bne.n	8005fee <vTaskSwitchContext+0x46>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	b672      	cpsid	i
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	b662      	cpsie	i
 8005fe6:	607b      	str	r3, [r7, #4]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <vTaskSwitchContext+0x42>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	491d      	ldr	r1, [pc, #116]	@ (800606c <vTaskSwitchContext+0xc4>)
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0e1      	beq.n	8005fcc <vTaskSwitchContext+0x24>
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4a16      	ldr	r2, [pc, #88]	@ (800606c <vTaskSwitchContext+0xc4>)
 8006014:	4413      	add	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	3308      	adds	r3, #8
 800602a:	429a      	cmp	r2, r3
 800602c:	d104      	bne.n	8006038 <vTaskSwitchContext+0x90>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	605a      	str	r2, [r3, #4]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	4a0c      	ldr	r2, [pc, #48]	@ (8006070 <vTaskSwitchContext+0xc8>)
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	4a09      	ldr	r2, [pc, #36]	@ (8006068 <vTaskSwitchContext+0xc0>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006048:	4b09      	ldr	r3, [pc, #36]	@ (8006070 <vTaskSwitchContext+0xc8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3354      	adds	r3, #84	@ 0x54
 800604e:	4a09      	ldr	r2, [pc, #36]	@ (8006074 <vTaskSwitchContext+0xcc>)
 8006050:	6013      	str	r3, [r2, #0]
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	200014fc 	.word	0x200014fc
 8006064:	200014e8 	.word	0x200014e8
 8006068:	200014dc 	.word	0x200014dc
 800606c:	20001004 	.word	0x20001004
 8006070:	20001000 	.word	0x20001000
 8006074:	20000010 	.word	0x20000010

08006078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608c:	b672      	cpsid	i
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	b662      	cpsie	i
 800609c:	60fb      	str	r3, [r7, #12]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060a4:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <vTaskPlaceOnEventList+0x4c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3318      	adds	r3, #24
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7fe fd04 	bl	8004aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060b2:	2101      	movs	r1, #1
 80060b4:	6838      	ldr	r0, [r7, #0]
 80060b6:	f000 fa95 	bl	80065e4 <prvAddCurrentTaskToDelayedList>
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20001000 	.word	0x20001000

080060c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10d      	bne.n	80060f6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060de:	b672      	cpsid	i
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	b662      	cpsie	i
 80060ee:	617b      	str	r3, [r7, #20]
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	e7fd      	b.n	80060f2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006120 <vTaskPlaceOnEventListRestricted+0x58>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3318      	adds	r3, #24
 80060fc:	4619      	mov	r1, r3
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7fe fcb7 	bl	8004a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	68b8      	ldr	r0, [r7, #8]
 8006114:	f000 fa66 	bl	80065e4 <prvAddCurrentTaskToDelayedList>
	}
 8006118:	bf00      	nop
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20001000 	.word	0x20001000

08006124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10d      	bne.n	8006156 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	b672      	cpsid	i
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	b662      	cpsie	i
 800614e:	60fb      	str	r3, [r7, #12]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	3318      	adds	r3, #24
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fce6 	bl	8004b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006160:	4b1d      	ldr	r3, [pc, #116]	@ (80061d8 <xTaskRemoveFromEventList+0xb4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11d      	bne.n	80061a4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3304      	adds	r3, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fcdd 	bl	8004b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006176:	4b19      	ldr	r3, [pc, #100]	@ (80061dc <xTaskRemoveFromEventList+0xb8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d903      	bls.n	8006186 <xTaskRemoveFromEventList+0x62>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006182:	4a16      	ldr	r2, [pc, #88]	@ (80061dc <xTaskRemoveFromEventList+0xb8>)
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a13      	ldr	r2, [pc, #76]	@ (80061e0 <xTaskRemoveFromEventList+0xbc>)
 8006194:	441a      	add	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7fe fc68 	bl	8004a72 <vListInsertEnd>
 80061a2:	e005      	b.n	80061b0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	3318      	adds	r3, #24
 80061a8:	4619      	mov	r1, r3
 80061aa:	480e      	ldr	r0, [pc, #56]	@ (80061e4 <xTaskRemoveFromEventList+0xc0>)
 80061ac:	f7fe fc61 	bl	8004a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b4:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <xTaskRemoveFromEventList+0xc4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d905      	bls.n	80061ca <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061be:	2301      	movs	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061c2:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <xTaskRemoveFromEventList+0xc8>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e001      	b.n	80061ce <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061ce:	697b      	ldr	r3, [r7, #20]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	200014fc 	.word	0x200014fc
 80061dc:	200014dc 	.word	0x200014dc
 80061e0:	20001004 	.word	0x20001004
 80061e4:	20001494 	.word	0x20001494
 80061e8:	20001000 	.word	0x20001000
 80061ec:	200014e8 	.word	0x200014e8

080061f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <vTaskInternalSetTimeOutState+0x24>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <vTaskInternalSetTimeOutState+0x28>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	605a      	str	r2, [r3, #4]
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	200014ec 	.word	0x200014ec
 8006218:	200014d8 	.word	0x200014d8

0800621c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10d      	bne.n	8006248 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	b672      	cpsid	i
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	b662      	cpsie	i
 8006240:	613b      	str	r3, [r7, #16]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10d      	bne.n	800626a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	b672      	cpsid	i
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	b662      	cpsie	i
 8006262:	60fb      	str	r3, [r7, #12]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800626a:	f000 fe87 	bl	8006f7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800626e:	4b1d      	ldr	r3, [pc, #116]	@ (80062e4 <xTaskCheckForTimeOut+0xc8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d102      	bne.n	800628e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	e023      	b.n	80062d6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <xTaskCheckForTimeOut+0xcc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d007      	beq.n	80062aa <xTaskCheckForTimeOut+0x8e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e015      	b.n	80062d6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d20b      	bcs.n	80062cc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad2      	subs	r2, r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ff95 	bl	80061f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	e004      	b.n	80062d6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062d2:	2301      	movs	r3, #1
 80062d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062d6:	f000 fe87 	bl	8006fe8 <vPortExitCritical>

	return xReturn;
 80062da:	69fb      	ldr	r3, [r7, #28]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	200014d8 	.word	0x200014d8
 80062e8:	200014ec 	.word	0x200014ec

080062ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062f0:	4b03      	ldr	r3, [pc, #12]	@ (8006300 <vTaskMissedYield+0x14>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	200014e8 	.word	0x200014e8

08006304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800630c:	f000 f852 	bl	80063b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006310:	4b06      	ldr	r3, [pc, #24]	@ (800632c <prvIdleTask+0x28>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d9f9      	bls.n	800630c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006318:	4b05      	ldr	r3, [pc, #20]	@ (8006330 <prvIdleTask+0x2c>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006328:	e7f0      	b.n	800630c <prvIdleTask+0x8>
 800632a:	bf00      	nop
 800632c:	20001004 	.word	0x20001004
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	e00c      	b.n	800635a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4a12      	ldr	r2, [pc, #72]	@ (8006394 <prvInitialiseTaskLists+0x60>)
 800634c:	4413      	add	r3, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fb62 	bl	8004a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3301      	adds	r3, #1
 8006358:	607b      	str	r3, [r7, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b37      	cmp	r3, #55	@ 0x37
 800635e:	d9ef      	bls.n	8006340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006360:	480d      	ldr	r0, [pc, #52]	@ (8006398 <prvInitialiseTaskLists+0x64>)
 8006362:	f7fe fb59 	bl	8004a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006366:	480d      	ldr	r0, [pc, #52]	@ (800639c <prvInitialiseTaskLists+0x68>)
 8006368:	f7fe fb56 	bl	8004a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800636c:	480c      	ldr	r0, [pc, #48]	@ (80063a0 <prvInitialiseTaskLists+0x6c>)
 800636e:	f7fe fb53 	bl	8004a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006372:	480c      	ldr	r0, [pc, #48]	@ (80063a4 <prvInitialiseTaskLists+0x70>)
 8006374:	f7fe fb50 	bl	8004a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006378:	480b      	ldr	r0, [pc, #44]	@ (80063a8 <prvInitialiseTaskLists+0x74>)
 800637a:	f7fe fb4d 	bl	8004a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800637e:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <prvInitialiseTaskLists+0x78>)
 8006380:	4a05      	ldr	r2, [pc, #20]	@ (8006398 <prvInitialiseTaskLists+0x64>)
 8006382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006384:	4b0a      	ldr	r3, [pc, #40]	@ (80063b0 <prvInitialiseTaskLists+0x7c>)
 8006386:	4a05      	ldr	r2, [pc, #20]	@ (800639c <prvInitialiseTaskLists+0x68>)
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20001004 	.word	0x20001004
 8006398:	20001464 	.word	0x20001464
 800639c:	20001478 	.word	0x20001478
 80063a0:	20001494 	.word	0x20001494
 80063a4:	200014a8 	.word	0x200014a8
 80063a8:	200014c0 	.word	0x200014c0
 80063ac:	2000148c 	.word	0x2000148c
 80063b0:	20001490 	.word	0x20001490

080063b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ba:	e019      	b.n	80063f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063bc:	f000 fdde 	bl	8006f7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c0:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <prvCheckTasksWaitingTermination+0x50>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fbad 	bl	8004b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <prvCheckTasksWaitingTermination+0x54>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006408 <prvCheckTasksWaitingTermination+0x54>)
 80063da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063dc:	4b0b      	ldr	r3, [pc, #44]	@ (800640c <prvCheckTasksWaitingTermination+0x58>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	4a0a      	ldr	r2, [pc, #40]	@ (800640c <prvCheckTasksWaitingTermination+0x58>)
 80063e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063e6:	f000 fdff 	bl	8006fe8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f810 	bl	8006410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f0:	4b06      	ldr	r3, [pc, #24]	@ (800640c <prvCheckTasksWaitingTermination+0x58>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e1      	bne.n	80063bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	200014a8 	.word	0x200014a8
 8006408:	200014d4 	.word	0x200014d4
 800640c:	200014bc 	.word	0x200014bc

08006410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3354      	adds	r3, #84	@ 0x54
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f8cd 	bl	80075bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006428:	2b00      	cmp	r3, #0
 800642a:	d108      	bne.n	800643e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006430:	4618      	mov	r0, r3
 8006432:	f000 ff9f 	bl	8007374 <vPortFree>
				vPortFree( pxTCB );
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 ff9c 	bl	8007374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800643c:	e01b      	b.n	8006476 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006444:	2b01      	cmp	r3, #1
 8006446:	d103      	bne.n	8006450 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ff93 	bl	8007374 <vPortFree>
	}
 800644e:	e012      	b.n	8006476 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006456:	2b02      	cmp	r3, #2
 8006458:	d00d      	beq.n	8006476 <prvDeleteTCB+0x66>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	b672      	cpsid	i
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	b662      	cpsie	i
 800646e:	60fb      	str	r3, [r7, #12]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <prvDeleteTCB+0x62>
	}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006486:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <prvResetNextTaskUnblockTime+0x38>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006490:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <prvResetNextTaskUnblockTime+0x3c>)
 8006492:	f04f 32ff 	mov.w	r2, #4294967295
 8006496:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006498:	e008      	b.n	80064ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649a:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <prvResetNextTaskUnblockTime+0x38>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4a04      	ldr	r2, [pc, #16]	@ (80064bc <prvResetNextTaskUnblockTime+0x3c>)
 80064aa:	6013      	str	r3, [r2, #0]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	2000148c 	.word	0x2000148c
 80064bc:	200014f4 	.word	0x200014f4

080064c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064c6:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <xTaskGetSchedulerState+0x34>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d102      	bne.n	80064d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064ce:	2301      	movs	r3, #1
 80064d0:	607b      	str	r3, [r7, #4]
 80064d2:	e008      	b.n	80064e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d4:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <xTaskGetSchedulerState+0x38>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064dc:	2302      	movs	r3, #2
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	e001      	b.n	80064e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064e2:	2300      	movs	r3, #0
 80064e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064e6:	687b      	ldr	r3, [r7, #4]
	}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	200014e0 	.word	0x200014e0
 80064f8:	200014fc 	.word	0x200014fc

080064fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d05c      	beq.n	80065cc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006512:	4b31      	ldr	r3, [pc, #196]	@ (80065d8 <xTaskPriorityDisinherit+0xdc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	429a      	cmp	r2, r3
 800651a:	d00d      	beq.n	8006538 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	b672      	cpsid	i
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	b662      	cpsie	i
 8006530:	60fb      	str	r3, [r7, #12]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10d      	bne.n	800655c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	b672      	cpsid	i
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	b662      	cpsie	i
 8006554:	60bb      	str	r3, [r7, #8]
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006560:	1e5a      	subs	r2, r3, #1
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656e:	429a      	cmp	r2, r3
 8006570:	d02c      	beq.n	80065cc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006576:	2b00      	cmp	r3, #0
 8006578:	d128      	bne.n	80065cc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fad4 	bl	8004b2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659c:	4b0f      	ldr	r3, [pc, #60]	@ (80065dc <xTaskPriorityDisinherit+0xe0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d903      	bls.n	80065ac <xTaskPriorityDisinherit+0xb0>
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	4a0c      	ldr	r2, [pc, #48]	@ (80065dc <xTaskPriorityDisinherit+0xe0>)
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4a09      	ldr	r2, [pc, #36]	@ (80065e0 <xTaskPriorityDisinherit+0xe4>)
 80065ba:	441a      	add	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f7fe fa55 	bl	8004a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065cc:	697b      	ldr	r3, [r7, #20]
	}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20001000 	.word	0x20001000
 80065dc:	200014dc 	.word	0x200014dc
 80065e0:	20001004 	.word	0x20001004

080065e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065ee:	4b21      	ldr	r3, [pc, #132]	@ (8006674 <prvAddCurrentTaskToDelayedList+0x90>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065f4:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <prvAddCurrentTaskToDelayedList+0x94>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fa96 	bl	8004b2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d10a      	bne.n	800661e <prvAddCurrentTaskToDelayedList+0x3a>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800660e:	4b1a      	ldr	r3, [pc, #104]	@ (8006678 <prvAddCurrentTaskToDelayedList+0x94>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4819      	ldr	r0, [pc, #100]	@ (800667c <prvAddCurrentTaskToDelayedList+0x98>)
 8006618:	f7fe fa2b 	bl	8004a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800661c:	e026      	b.n	800666c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4413      	add	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006626:	4b14      	ldr	r3, [pc, #80]	@ (8006678 <prvAddCurrentTaskToDelayedList+0x94>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d209      	bcs.n	800664a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006636:	4b12      	ldr	r3, [pc, #72]	@ (8006680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <prvAddCurrentTaskToDelayedList+0x94>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fe fa39 	bl	8004aba <vListInsert>
}
 8006648:	e010      	b.n	800666c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800664a:	4b0e      	ldr	r3, [pc, #56]	@ (8006684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <prvAddCurrentTaskToDelayedList+0x94>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f7fe fa2f 	bl	8004aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800665c:	4b0a      	ldr	r3, [pc, #40]	@ (8006688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	d202      	bcs.n	800666c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006666:	4a08      	ldr	r2, [pc, #32]	@ (8006688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	200014d8 	.word	0x200014d8
 8006678:	20001000 	.word	0x20001000
 800667c:	200014c0 	.word	0x200014c0
 8006680:	20001490 	.word	0x20001490
 8006684:	2000148c 	.word	0x2000148c
 8006688:	200014f4 	.word	0x200014f4

0800668c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	@ 0x28
 8006690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006696:	f000 fb21 	bl	8006cdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800669a:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <xTimerCreateTimerTask+0x88>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d021      	beq.n	80066e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066aa:	1d3a      	adds	r2, r7, #4
 80066ac:	f107 0108 	add.w	r1, r7, #8
 80066b0:	f107 030c 	add.w	r3, r7, #12
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe f995 	bl	80049e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	9202      	str	r2, [sp, #8]
 80066c2:	9301      	str	r3, [sp, #4]
 80066c4:	2302      	movs	r3, #2
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	460a      	mov	r2, r1
 80066cc:	4912      	ldr	r1, [pc, #72]	@ (8006718 <xTimerCreateTimerTask+0x8c>)
 80066ce:	4813      	ldr	r0, [pc, #76]	@ (800671c <xTimerCreateTimerTask+0x90>)
 80066d0:	f7fe ff70 	bl	80055b4 <xTaskCreateStatic>
 80066d4:	4603      	mov	r3, r0
 80066d6:	4a12      	ldr	r2, [pc, #72]	@ (8006720 <xTimerCreateTimerTask+0x94>)
 80066d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066da:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <xTimerCreateTimerTask+0x94>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066e2:	2301      	movs	r3, #1
 80066e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10d      	bne.n	8006708 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	b672      	cpsid	i
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	b662      	cpsie	i
 8006700:	613b      	str	r3, [r7, #16]
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	e7fd      	b.n	8006704 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006708:	697b      	ldr	r3, [r7, #20]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20001530 	.word	0x20001530
 8006718:	08007854 	.word	0x08007854
 800671c:	08006865 	.word	0x08006865
 8006720:	20001534 	.word	0x20001534

08006724 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	@ 0x28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006732:	2300      	movs	r3, #0
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10d      	bne.n	8006758 <xTimerGenericCommand+0x34>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	b672      	cpsid	i
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	b662      	cpsie	i
 8006750:	623b      	str	r3, [r7, #32]
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006758:	4b19      	ldr	r3, [pc, #100]	@ (80067c0 <xTimerGenericCommand+0x9c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d02a      	beq.n	80067b6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b05      	cmp	r3, #5
 8006770:	dc18      	bgt.n	80067a4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006772:	f7ff fea5 	bl	80064c0 <xTaskGetSchedulerState>
 8006776:	4603      	mov	r3, r0
 8006778:	2b02      	cmp	r3, #2
 800677a:	d109      	bne.n	8006790 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800677c:	4b10      	ldr	r3, [pc, #64]	@ (80067c0 <xTimerGenericCommand+0x9c>)
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	f107 0110 	add.w	r1, r7, #16
 8006784:	2300      	movs	r3, #0
 8006786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006788:	f7fe fb10 	bl	8004dac <xQueueGenericSend>
 800678c:	6278      	str	r0, [r7, #36]	@ 0x24
 800678e:	e012      	b.n	80067b6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006790:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <xTimerGenericCommand+0x9c>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	f107 0110 	add.w	r1, r7, #16
 8006798:	2300      	movs	r3, #0
 800679a:	2200      	movs	r2, #0
 800679c:	f7fe fb06 	bl	8004dac <xQueueGenericSend>
 80067a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80067a2:	e008      	b.n	80067b6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067a4:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <xTimerGenericCommand+0x9c>)
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	f107 0110 	add.w	r1, r7, #16
 80067ac:	2300      	movs	r3, #0
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	f7fe fc06 	bl	8004fc0 <xQueueGenericSendFromISR>
 80067b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3728      	adds	r7, #40	@ 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20001530 	.word	0x20001530

080067c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ce:	4b24      	ldr	r3, [pc, #144]	@ (8006860 <prvProcessExpiredTimer+0x9c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3304      	adds	r3, #4
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe f9a5 	bl	8004b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d025      	beq.n	800683c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	18d1      	adds	r1, r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	6978      	ldr	r0, [r7, #20]
 80067fe:	f000 f8d7 	bl	80069b0 <prvInsertTimerInActiveList>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d022      	beq.n	800684e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006808:	2300      	movs	r3, #0
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	2300      	movs	r3, #0
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	2100      	movs	r1, #0
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f7ff ff86 	bl	8006724 <xTimerGenericCommand>
 8006818:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d116      	bne.n	800684e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	b672      	cpsid	i
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	b662      	cpsie	i
 8006834:	60fb      	str	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	6978      	ldr	r0, [r7, #20]
 8006854:	4798      	blx	r3
}
 8006856:	bf00      	nop
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20001528 	.word	0x20001528

08006864 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800686c:	f107 0308 	add.w	r3, r7, #8
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f859 	bl	8006928 <prvGetNextExpireTime>
 8006876:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4619      	mov	r1, r3
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f805 	bl	800688c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006882:	f000 f8d7 	bl	8006a34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006886:	bf00      	nop
 8006888:	e7f0      	b.n	800686c <prvTimerTask+0x8>
	...

0800688c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006896:	f7ff fa0d 	bl	8005cb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800689a:	f107 0308 	add.w	r3, r7, #8
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f866 	bl	8006970 <prvSampleTimeNow>
 80068a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d130      	bne.n	800690e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <prvProcessTimerOrBlockTask+0x3c>
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d806      	bhi.n	80068c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068ba:	f7ff fa09 	bl	8005cd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ff7f 	bl	80067c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068c6:	e024      	b.n	8006912 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068ce:	4b13      	ldr	r3, [pc, #76]	@ (800691c <prvProcessTimerOrBlockTask+0x90>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <prvProcessTimerOrBlockTask+0x50>
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <prvProcessTimerOrBlockTask+0x52>
 80068dc:	2300      	movs	r3, #0
 80068de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006920 <prvProcessTimerOrBlockTask+0x94>)
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	f7fe fe2d 	bl	800554c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068f2:	f7ff f9ed 	bl	8005cd0 <xTaskResumeAll>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068fc:	4b09      	ldr	r3, [pc, #36]	@ (8006924 <prvProcessTimerOrBlockTask+0x98>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	f3bf 8f6f 	isb	sy
}
 800690c:	e001      	b.n	8006912 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800690e:	f7ff f9df 	bl	8005cd0 <xTaskResumeAll>
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	2000152c 	.word	0x2000152c
 8006920:	20001530 	.word	0x20001530
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006930:	4b0e      	ldr	r3, [pc, #56]	@ (800696c <prvGetNextExpireTime+0x44>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <prvGetNextExpireTime+0x16>
 800693a:	2201      	movs	r2, #1
 800693c:	e000      	b.n	8006940 <prvGetNextExpireTime+0x18>
 800693e:	2200      	movs	r2, #0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800694c:	4b07      	ldr	r3, [pc, #28]	@ (800696c <prvGetNextExpireTime+0x44>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	e001      	b.n	800695c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800695c:	68fb      	ldr	r3, [r7, #12]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20001528 	.word	0x20001528

08006970 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006978:	f7ff fa4a 	bl	8005e10 <xTaskGetTickCount>
 800697c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800697e:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <prvSampleTimeNow+0x3c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	429a      	cmp	r2, r3
 8006986:	d205      	bcs.n	8006994 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006988:	f000 f940 	bl	8006c0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	e002      	b.n	800699a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800699a:	4a04      	ldr	r2, [pc, #16]	@ (80069ac <prvSampleTimeNow+0x3c>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069a0:	68fb      	ldr	r3, [r7, #12]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20001538 	.word	0x20001538

080069b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d812      	bhi.n	80069fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e01b      	b.n	8006a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069ea:	4b10      	ldr	r3, [pc, #64]	@ (8006a2c <prvInsertTimerInActiveList+0x7c>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f7fe f860 	bl	8004aba <vListInsert>
 80069fa:	e012      	b.n	8006a22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d206      	bcs.n	8006a12 <prvInsertTimerInActiveList+0x62>
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d302      	bcc.n	8006a12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	e007      	b.n	8006a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a12:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <prvInsertTimerInActiveList+0x80>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7fe f84c 	bl	8004aba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a22:	697b      	ldr	r3, [r7, #20]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	2000152c 	.word	0x2000152c
 8006a30:	20001528 	.word	0x20001528

08006a34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08e      	sub	sp, #56	@ 0x38
 8006a38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a3a:	e0d4      	b.n	8006be6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da1b      	bge.n	8006a7a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	3304      	adds	r3, #4
 8006a46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10d      	bne.n	8006a6a <prvProcessReceivedCommands+0x36>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	b672      	cpsid	i
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	b662      	cpsie	i
 8006a62:	61fb      	str	r3, [r7, #28]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a70:	6850      	ldr	r0, [r2, #4]
 8006a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a74:	6892      	ldr	r2, [r2, #8]
 8006a76:	4611      	mov	r1, r2
 8006a78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f2c0 80b2 	blt.w	8006be6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe f84a 	bl	8004b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a98:	463b      	mov	r3, r7
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff ff68 	bl	8006970 <prvSampleTimeNow>
 8006aa0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	f200 809b 	bhi.w	8006be0 <prvProcessReceivedCommands+0x1ac>
 8006aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <prvProcessReceivedCommands+0x7c>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006ad9 	.word	0x08006ad9
 8006abc:	08006b53 	.word	0x08006b53
 8006ac0:	08006b67 	.word	0x08006b67
 8006ac4:	08006bb7 	.word	0x08006bb7
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ad9 	.word	0x08006ad9
 8006ad0:	08006b53 	.word	0x08006b53
 8006ad4:	08006b67 	.word	0x08006b67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ada:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	18d1      	adds	r1, r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af8:	f7ff ff5a 	bl	80069b0 <prvInsertTimerInActiveList>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d070      	beq.n	8006be4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d065      	beq.n	8006be4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	441a      	add	r2, r3
 8006b20:	2300      	movs	r3, #0
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	2100      	movs	r1, #0
 8006b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b2a:	f7ff fdfb 	bl	8006724 <xTimerGenericCommand>
 8006b2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d156      	bne.n	8006be4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	b672      	cpsid	i
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	b662      	cpsie	i
 8006b4a:	61bb      	str	r3, [r7, #24]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b58:	f023 0301 	bic.w	r3, r3, #1
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b64:	e03f      	b.n	8006be6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	b672      	cpsid	i
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	b662      	cpsie	i
 8006b9a:	617b      	str	r3, [r7, #20]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	18d1      	adds	r1, r2, r3
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bb0:	f7ff fefe 	bl	80069b0 <prvInsertTimerInActiveList>
					break;
 8006bb4:	e017      	b.n	8006be6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d103      	bne.n	8006bcc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006bc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bc6:	f000 fbd5 	bl	8007374 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bca:	e00c      	b.n	8006be6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bd2:	f023 0301 	bic.w	r3, r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006bde:	e002      	b.n	8006be6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006be0:	bf00      	nop
 8006be2:	e000      	b.n	8006be6 <prvProcessReceivedCommands+0x1b2>
					break;
 8006be4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006be6:	4b08      	ldr	r3, [pc, #32]	@ (8006c08 <prvProcessReceivedCommands+0x1d4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	1d39      	adds	r1, r7, #4
 8006bec:	2200      	movs	r2, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fa8a 	bl	8005108 <xQueueReceive>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f47f af20 	bne.w	8006a3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	3730      	adds	r7, #48	@ 0x30
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20001530 	.word	0x20001530

08006c0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c12:	e04b      	b.n	8006cac <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c14:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd4 <prvSwitchTimerLists+0xc8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8006cd4 <prvSwitchTimerLists+0xc8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd ff7d 	bl	8004b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d031      	beq.n	8006cac <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4413      	add	r3, r2
 8006c50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d90e      	bls.n	8006c78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c66:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd4 <prvSwitchTimerLists+0xc8>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4610      	mov	r0, r2
 8006c72:	f7fd ff22 	bl	8004aba <vListInsert>
 8006c76:	e019      	b.n	8006cac <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	2100      	movs	r1, #0
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7ff fd4e 	bl	8006724 <xTimerGenericCommand>
 8006c88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10d      	bne.n	8006cac <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c94:	b672      	cpsid	i
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	b662      	cpsie	i
 8006ca4:	603b      	str	r3, [r7, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cac:	4b09      	ldr	r3, [pc, #36]	@ (8006cd4 <prvSwitchTimerLists+0xc8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1ae      	bne.n	8006c14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cb6:	4b07      	ldr	r3, [pc, #28]	@ (8006cd4 <prvSwitchTimerLists+0xc8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <prvSwitchTimerLists+0xcc>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a04      	ldr	r2, [pc, #16]	@ (8006cd4 <prvSwitchTimerLists+0xc8>)
 8006cc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006cc4:	4a04      	ldr	r2, [pc, #16]	@ (8006cd8 <prvSwitchTimerLists+0xcc>)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6013      	str	r3, [r2, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20001528 	.word	0x20001528
 8006cd8:	2000152c 	.word	0x2000152c

08006cdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ce2:	f000 f94b 	bl	8006f7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ce6:	4b15      	ldr	r3, [pc, #84]	@ (8006d3c <prvCheckForValidListAndQueue+0x60>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d120      	bne.n	8006d30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cee:	4814      	ldr	r0, [pc, #80]	@ (8006d40 <prvCheckForValidListAndQueue+0x64>)
 8006cf0:	f7fd fe92 	bl	8004a18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cf4:	4813      	ldr	r0, [pc, #76]	@ (8006d44 <prvCheckForValidListAndQueue+0x68>)
 8006cf6:	f7fd fe8f 	bl	8004a18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cfa:	4b13      	ldr	r3, [pc, #76]	@ (8006d48 <prvCheckForValidListAndQueue+0x6c>)
 8006cfc:	4a10      	ldr	r2, [pc, #64]	@ (8006d40 <prvCheckForValidListAndQueue+0x64>)
 8006cfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d00:	4b12      	ldr	r3, [pc, #72]	@ (8006d4c <prvCheckForValidListAndQueue+0x70>)
 8006d02:	4a10      	ldr	r2, [pc, #64]	@ (8006d44 <prvCheckForValidListAndQueue+0x68>)
 8006d04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d06:	2300      	movs	r3, #0
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	4b11      	ldr	r3, [pc, #68]	@ (8006d50 <prvCheckForValidListAndQueue+0x74>)
 8006d0c:	4a11      	ldr	r2, [pc, #68]	@ (8006d54 <prvCheckForValidListAndQueue+0x78>)
 8006d0e:	2110      	movs	r1, #16
 8006d10:	200a      	movs	r0, #10
 8006d12:	f7fd ffa1 	bl	8004c58 <xQueueGenericCreateStatic>
 8006d16:	4603      	mov	r3, r0
 8006d18:	4a08      	ldr	r2, [pc, #32]	@ (8006d3c <prvCheckForValidListAndQueue+0x60>)
 8006d1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d1c:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <prvCheckForValidListAndQueue+0x60>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d24:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <prvCheckForValidListAndQueue+0x60>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	490b      	ldr	r1, [pc, #44]	@ (8006d58 <prvCheckForValidListAndQueue+0x7c>)
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe fbe4 	bl	80054f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d30:	f000 f95a 	bl	8006fe8 <vPortExitCritical>
}
 8006d34:	bf00      	nop
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20001530 	.word	0x20001530
 8006d40:	20001500 	.word	0x20001500
 8006d44:	20001514 	.word	0x20001514
 8006d48:	20001528 	.word	0x20001528
 8006d4c:	2000152c 	.word	0x2000152c
 8006d50:	200015dc 	.word	0x200015dc
 8006d54:	2000153c 	.word	0x2000153c
 8006d58:	0800785c 	.word	0x0800785c

08006d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3b04      	subs	r3, #4
 8006d6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f023 0201 	bic.w	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3b04      	subs	r3, #4
 8006d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc0 <pxPortInitialiseStack+0x64>)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3b14      	subs	r3, #20
 8006d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3b04      	subs	r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f06f 0202 	mvn.w	r2, #2
 8006daa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3b20      	subs	r3, #32
 8006db0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	08006dc5 	.word	0x08006dc5

08006dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dce:	4b15      	ldr	r3, [pc, #84]	@ (8006e24 <prvTaskExitError+0x60>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d00d      	beq.n	8006df4 <prvTaskExitError+0x30>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	b672      	cpsid	i
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	b662      	cpsie	i
 8006dec:	60fb      	str	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	e7fd      	b.n	8006df0 <prvTaskExitError+0x2c>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df8:	b672      	cpsid	i
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	b662      	cpsie	i
 8006e08:	60bb      	str	r3, [r7, #8]
}
 8006e0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e0c:	bf00      	nop
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0fc      	beq.n	8006e0e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000000c 	.word	0x2000000c
	...

08006e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e30:	4b07      	ldr	r3, [pc, #28]	@ (8006e50 <pxCurrentTCBConst2>)
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	6808      	ldr	r0, [r1, #0]
 8006e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	f380 8809 	msr	PSP, r0
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f380 8811 	msr	BASEPRI, r0
 8006e4a:	4770      	bx	lr
 8006e4c:	f3af 8000 	nop.w

08006e50 <pxCurrentTCBConst2>:
 8006e50:	20001000 	.word	0x20001000
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e58:	4808      	ldr	r0, [pc, #32]	@ (8006e7c <prvPortStartFirstTask+0x24>)
 8006e5a:	6800      	ldr	r0, [r0, #0]
 8006e5c:	6800      	ldr	r0, [r0, #0]
 8006e5e:	f380 8808 	msr	MSP, r0
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f380 8814 	msr	CONTROL, r0
 8006e6a:	b662      	cpsie	i
 8006e6c:	b661      	cpsie	f
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	df00      	svc	0
 8006e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e7a:	bf00      	nop
 8006e7c:	e000ed08 	.word	0xe000ed08

08006e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e86:	4b37      	ldr	r3, [pc, #220]	@ (8006f64 <xPortStartScheduler+0xe4>)
 8006e88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	22ff      	movs	r2, #255	@ 0xff
 8006e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8006f68 <xPortStartScheduler+0xe8>)
 8006eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006eae:	4b2f      	ldr	r3, [pc, #188]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eb4:	e009      	b.n	8006eca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed2:	2b80      	cmp	r3, #128	@ 0x80
 8006ed4:	d0ef      	beq.n	8006eb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ed6:	4b25      	ldr	r3, [pc, #148]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1c3 0307 	rsb	r3, r3, #7
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d00d      	beq.n	8006efe <xPortStartScheduler+0x7e>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee6:	b672      	cpsid	i
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	b662      	cpsie	i
 8006ef6:	60bb      	str	r3, [r7, #8]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006efe:	4b1b      	ldr	r3, [pc, #108]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	4a19      	ldr	r2, [pc, #100]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f08:	4b18      	ldr	r3, [pc, #96]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f10:	4a16      	ldr	r2, [pc, #88]	@ (8006f6c <xPortStartScheduler+0xec>)
 8006f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f1c:	4b14      	ldr	r3, [pc, #80]	@ (8006f70 <xPortStartScheduler+0xf0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a13      	ldr	r2, [pc, #76]	@ (8006f70 <xPortStartScheduler+0xf0>)
 8006f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f28:	4b11      	ldr	r3, [pc, #68]	@ (8006f70 <xPortStartScheduler+0xf0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a10      	ldr	r2, [pc, #64]	@ (8006f70 <xPortStartScheduler+0xf0>)
 8006f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f34:	f000 f8dc 	bl	80070f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f38:	4b0e      	ldr	r3, [pc, #56]	@ (8006f74 <xPortStartScheduler+0xf4>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f3e:	f000 f8fb 	bl	8007138 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f42:	4b0d      	ldr	r3, [pc, #52]	@ (8006f78 <xPortStartScheduler+0xf8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a0c      	ldr	r2, [pc, #48]	@ (8006f78 <xPortStartScheduler+0xf8>)
 8006f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f4e:	f7ff ff83 	bl	8006e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f52:	f7ff f829 	bl	8005fa8 <vTaskSwitchContext>
	prvTaskExitError();
 8006f56:	f7ff ff35 	bl	8006dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	e000e400 	.word	0xe000e400
 8006f68:	2000162c 	.word	0x2000162c
 8006f6c:	20001630 	.word	0x20001630
 8006f70:	e000ed20 	.word	0xe000ed20
 8006f74:	2000000c 	.word	0x2000000c
 8006f78:	e000ef34 	.word	0xe000ef34

08006f7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	b672      	cpsid	i
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	b662      	cpsie	i
 8006f96:	607b      	str	r3, [r7, #4]
}
 8006f98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f9a:	4b11      	ldr	r3, [pc, #68]	@ (8006fe0 <vPortEnterCritical+0x64>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8006fe0 <vPortEnterCritical+0x64>)
 8006fa2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe0 <vPortEnterCritical+0x64>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d112      	bne.n	8006fd2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fac:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <vPortEnterCritical+0x68>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <vPortEnterCritical+0x56>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	b672      	cpsid	i
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	b662      	cpsie	i
 8006fca:	603b      	str	r3, [r7, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	e7fd      	b.n	8006fce <vPortEnterCritical+0x52>
	}
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fee:	4b13      	ldr	r3, [pc, #76]	@ (800703c <vPortExitCritical+0x54>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10d      	bne.n	8007012 <vPortExitCritical+0x2a>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	b672      	cpsid	i
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	b662      	cpsie	i
 800700a:	607b      	str	r3, [r7, #4]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007012:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <vPortExitCritical+0x54>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3b01      	subs	r3, #1
 8007018:	4a08      	ldr	r2, [pc, #32]	@ (800703c <vPortExitCritical+0x54>)
 800701a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800701c:	4b07      	ldr	r3, [pc, #28]	@ (800703c <vPortExitCritical+0x54>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <vPortExitCritical+0x48>
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	2000000c 	.word	0x2000000c

08007040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b15      	ldr	r3, [pc, #84]	@ (80070a0 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	f01e 0f10 	tst.w	lr, #16
 8007050:	bf08      	it	eq
 8007052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007064:	b672      	cpsid	i
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	b662      	cpsie	i
 8007074:	f7fe ff98 	bl	8005fa8 <vTaskSwitchContext>
 8007078:	f04f 0000 	mov.w	r0, #0
 800707c:	f380 8811 	msr	BASEPRI, r0
 8007080:	bc09      	pop	{r0, r3}
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708a:	f01e 0f10 	tst.w	lr, #16
 800708e:	bf08      	it	eq
 8007090:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007094:	f380 8809 	msr	PSP, r0
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <pxCurrentTCBConst>:
 80070a0:	20001000 	.word	0x20001000
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	b672      	cpsid	i
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	b662      	cpsie	i
 80070c2:	607b      	str	r3, [r7, #4]
}
 80070c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070c6:	f7fe feb3 	bl	8005e30 <xTaskIncrementTick>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070d0:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <SysTick_Handler+0x44>)
 80070d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	2300      	movs	r3, #0
 80070da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f383 8811 	msr	BASEPRI, r3
}
 80070e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007124 <vPortSetupTimerInterrupt+0x34>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007128 <vPortSetupTimerInterrupt+0x38>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007100:	4b0a      	ldr	r3, [pc, #40]	@ (800712c <vPortSetupTimerInterrupt+0x3c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a0a      	ldr	r2, [pc, #40]	@ (8007130 <vPortSetupTimerInterrupt+0x40>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	099b      	lsrs	r3, r3, #6
 800710c:	4a09      	ldr	r2, [pc, #36]	@ (8007134 <vPortSetupTimerInterrupt+0x44>)
 800710e:	3b01      	subs	r3, #1
 8007110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007112:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <vPortSetupTimerInterrupt+0x34>)
 8007114:	2207      	movs	r2, #7
 8007116:	601a      	str	r2, [r3, #0]
}
 8007118:	bf00      	nop
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	e000e010 	.word	0xe000e010
 8007128:	e000e018 	.word	0xe000e018
 800712c:	20000000 	.word	0x20000000
 8007130:	10624dd3 	.word	0x10624dd3
 8007134:	e000e014 	.word	0xe000e014

08007138 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007138:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007148 <vPortEnableVFP+0x10>
 800713c:	6801      	ldr	r1, [r0, #0]
 800713e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007142:	6001      	str	r1, [r0, #0]
 8007144:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007146:	bf00      	nop
 8007148:	e000ed88 	.word	0xe000ed88

0800714c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007152:	f3ef 8305 	mrs	r3, IPSR
 8007156:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b0f      	cmp	r3, #15
 800715c:	d917      	bls.n	800718e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800715e:	4a1a      	ldr	r2, [pc, #104]	@ (80071c8 <vPortValidateInterruptPriority+0x7c>)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007168:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <vPortValidateInterruptPriority+0x80>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	7afa      	ldrb	r2, [r7, #11]
 800716e:	429a      	cmp	r2, r3
 8007170:	d20d      	bcs.n	800718e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	b672      	cpsid	i
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	b662      	cpsie	i
 8007186:	607b      	str	r3, [r7, #4]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800718e:	4b10      	ldr	r3, [pc, #64]	@ (80071d0 <vPortValidateInterruptPriority+0x84>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007196:	4b0f      	ldr	r3, [pc, #60]	@ (80071d4 <vPortValidateInterruptPriority+0x88>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d90d      	bls.n	80071ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	b672      	cpsid	i
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	b662      	cpsie	i
 80071b2:	603b      	str	r3, [r7, #0]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <vPortValidateInterruptPriority+0x6a>
	}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	e000e3f0 	.word	0xe000e3f0
 80071cc:	2000162c 	.word	0x2000162c
 80071d0:	e000ed0c 	.word	0xe000ed0c
 80071d4:	20001630 	.word	0x20001630

080071d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	@ 0x28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071e4:	f7fe fd66 	bl	8005cb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071e8:	4b5d      	ldr	r3, [pc, #372]	@ (8007360 <pvPortMalloc+0x188>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071f0:	f000 f920 	bl	8007434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007364 <pvPortMalloc+0x18c>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 8094 	bne.w	800732a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007208:	2208      	movs	r2, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	2b00      	cmp	r3, #0
 8007218:	d017      	beq.n	800724a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f023 0307 	bic.w	r3, r3, #7
 8007220:	3308      	adds	r3, #8
 8007222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <pvPortMalloc+0x72>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	b672      	cpsid	i
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	b662      	cpsie	i
 8007242:	617b      	str	r3, [r7, #20]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d06c      	beq.n	800732a <pvPortMalloc+0x152>
 8007250:	4b45      	ldr	r3, [pc, #276]	@ (8007368 <pvPortMalloc+0x190>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d867      	bhi.n	800732a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800725a:	4b44      	ldr	r3, [pc, #272]	@ (800736c <pvPortMalloc+0x194>)
 800725c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800725e:	4b43      	ldr	r3, [pc, #268]	@ (800736c <pvPortMalloc+0x194>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007264:	e004      	b.n	8007270 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d903      	bls.n	8007282 <pvPortMalloc+0xaa>
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f1      	bne.n	8007266 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007282:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <pvPortMalloc+0x188>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007288:	429a      	cmp	r2, r3
 800728a:	d04e      	beq.n	800732a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2208      	movs	r2, #8
 8007292:	4413      	add	r3, r2
 8007294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	1ad2      	subs	r2, r2, r3
 80072a6:	2308      	movs	r3, #8
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d922      	bls.n	80072f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <pvPortMalloc+0x104>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	b672      	cpsid	i
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	b662      	cpsie	i
 80072d4:	613b      	str	r3, [r7, #16]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072ee:	69b8      	ldr	r0, [r7, #24]
 80072f0:	f000 f902 	bl	80074f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007368 <pvPortMalloc+0x190>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007368 <pvPortMalloc+0x190>)
 8007300:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007302:	4b19      	ldr	r3, [pc, #100]	@ (8007368 <pvPortMalloc+0x190>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b1a      	ldr	r3, [pc, #104]	@ (8007370 <pvPortMalloc+0x198>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d203      	bcs.n	8007316 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800730e:	4b16      	ldr	r3, [pc, #88]	@ (8007368 <pvPortMalloc+0x190>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a17      	ldr	r2, [pc, #92]	@ (8007370 <pvPortMalloc+0x198>)
 8007314:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	4b12      	ldr	r3, [pc, #72]	@ (8007364 <pvPortMalloc+0x18c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	431a      	orrs	r2, r3
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800732a:	f7fe fcd1 	bl	8005cd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00d      	beq.n	8007354 <pvPortMalloc+0x17c>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733c:	b672      	cpsid	i
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	b662      	cpsie	i
 800734c:	60fb      	str	r3, [r7, #12]
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	e7fd      	b.n	8007350 <pvPortMalloc+0x178>
	return pvReturn;
 8007354:	69fb      	ldr	r3, [r7, #28]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3728      	adds	r7, #40	@ 0x28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	2000523c 	.word	0x2000523c
 8007364:	20005248 	.word	0x20005248
 8007368:	20005240 	.word	0x20005240
 800736c:	20005234 	.word	0x20005234
 8007370:	20005244 	.word	0x20005244

08007374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d04e      	beq.n	8007424 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007386:	2308      	movs	r3, #8
 8007388:	425b      	negs	r3, r3
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	4413      	add	r3, r2
 800738e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	4b24      	ldr	r3, [pc, #144]	@ (800742c <vPortFree+0xb8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4013      	ands	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10d      	bne.n	80073be <vPortFree+0x4a>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a6:	b672      	cpsid	i
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	b662      	cpsie	i
 80073b6:	60fb      	str	r3, [r7, #12]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00d      	beq.n	80073e2 <vPortFree+0x6e>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	b672      	cpsid	i
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	b662      	cpsie	i
 80073da:	60bb      	str	r3, [r7, #8]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	4b11      	ldr	r3, [pc, #68]	@ (800742c <vPortFree+0xb8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d019      	beq.n	8007424 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d115      	bne.n	8007424 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <vPortFree+0xb8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007408:	f7fe fc54 	bl	8005cb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <vPortFree+0xbc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4413      	add	r3, r2
 8007416:	4a06      	ldr	r2, [pc, #24]	@ (8007430 <vPortFree+0xbc>)
 8007418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800741a:	6938      	ldr	r0, [r7, #16]
 800741c:	f000 f86c 	bl	80074f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007420:	f7fe fc56 	bl	8005cd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007424:	bf00      	nop
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20005248 	.word	0x20005248
 8007430:	20005240 	.word	0x20005240

08007434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800743a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800743e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007440:	4b27      	ldr	r3, [pc, #156]	@ (80074e0 <prvHeapInit+0xac>)
 8007442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00c      	beq.n	8007468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3307      	adds	r3, #7
 8007452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0307 	bic.w	r3, r3, #7
 800745a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	4a1f      	ldr	r2, [pc, #124]	@ (80074e0 <prvHeapInit+0xac>)
 8007464:	4413      	add	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800746c:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <prvHeapInit+0xb0>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007472:	4b1c      	ldr	r3, [pc, #112]	@ (80074e4 <prvHeapInit+0xb0>)
 8007474:	2200      	movs	r2, #0
 8007476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	4413      	add	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007480:	2208      	movs	r2, #8
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a15      	ldr	r2, [pc, #84]	@ (80074e8 <prvHeapInit+0xb4>)
 8007494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007496:	4b14      	ldr	r3, [pc, #80]	@ (80074e8 <prvHeapInit+0xb4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800749e:	4b12      	ldr	r3, [pc, #72]	@ (80074e8 <prvHeapInit+0xb4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074b4:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <prvHeapInit+0xb4>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	@ (80074ec <prvHeapInit+0xb8>)
 80074c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4a09      	ldr	r2, [pc, #36]	@ (80074f0 <prvHeapInit+0xbc>)
 80074ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074cc:	4b09      	ldr	r3, [pc, #36]	@ (80074f4 <prvHeapInit+0xc0>)
 80074ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20001634 	.word	0x20001634
 80074e4:	20005234 	.word	0x20005234
 80074e8:	2000523c 	.word	0x2000523c
 80074ec:	20005244 	.word	0x20005244
 80074f0:	20005240 	.word	0x20005240
 80074f4:	20005248 	.word	0x20005248

080074f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007500:	4b28      	ldr	r3, [pc, #160]	@ (80075a4 <prvInsertBlockIntoFreeList+0xac>)
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e002      	b.n	800750c <prvInsertBlockIntoFreeList+0x14>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d8f7      	bhi.n	8007506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4413      	add	r3, r2
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d108      	bne.n	800753a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	441a      	add	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	441a      	add	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d118      	bne.n	8007580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b15      	ldr	r3, [pc, #84]	@ (80075a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d00d      	beq.n	8007576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	441a      	add	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	e008      	b.n	8007588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007576:	4b0c      	ldr	r3, [pc, #48]	@ (80075a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e003      	b.n	8007588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d002      	beq.n	8007596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20005234 	.word	0x20005234
 80075a8:	2000523c 	.word	0x2000523c

080075ac <memset>:
 80075ac:	4402      	add	r2, r0
 80075ae:	4603      	mov	r3, r0
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d100      	bne.n	80075b6 <memset+0xa>
 80075b4:	4770      	bx	lr
 80075b6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ba:	e7f9      	b.n	80075b0 <memset+0x4>

080075bc <_reclaim_reent>:
 80075bc:	4b29      	ldr	r3, [pc, #164]	@ (8007664 <_reclaim_reent+0xa8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4283      	cmp	r3, r0
 80075c2:	b570      	push	{r4, r5, r6, lr}
 80075c4:	4604      	mov	r4, r0
 80075c6:	d04b      	beq.n	8007660 <_reclaim_reent+0xa4>
 80075c8:	69c3      	ldr	r3, [r0, #28]
 80075ca:	b1ab      	cbz	r3, 80075f8 <_reclaim_reent+0x3c>
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	b16b      	cbz	r3, 80075ec <_reclaim_reent+0x30>
 80075d0:	2500      	movs	r5, #0
 80075d2:	69e3      	ldr	r3, [r4, #28]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	5959      	ldr	r1, [r3, r5]
 80075d8:	2900      	cmp	r1, #0
 80075da:	d13b      	bne.n	8007654 <_reclaim_reent+0x98>
 80075dc:	3504      	adds	r5, #4
 80075de:	2d80      	cmp	r5, #128	@ 0x80
 80075e0:	d1f7      	bne.n	80075d2 <_reclaim_reent+0x16>
 80075e2:	69e3      	ldr	r3, [r4, #28]
 80075e4:	4620      	mov	r0, r4
 80075e6:	68d9      	ldr	r1, [r3, #12]
 80075e8:	f000 f872 	bl	80076d0 <_free_r>
 80075ec:	69e3      	ldr	r3, [r4, #28]
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	b111      	cbz	r1, 80075f8 <_reclaim_reent+0x3c>
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 f86c 	bl	80076d0 <_free_r>
 80075f8:	6961      	ldr	r1, [r4, #20]
 80075fa:	b111      	cbz	r1, 8007602 <_reclaim_reent+0x46>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 f867 	bl	80076d0 <_free_r>
 8007602:	69e1      	ldr	r1, [r4, #28]
 8007604:	b111      	cbz	r1, 800760c <_reclaim_reent+0x50>
 8007606:	4620      	mov	r0, r4
 8007608:	f000 f862 	bl	80076d0 <_free_r>
 800760c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800760e:	b111      	cbz	r1, 8007616 <_reclaim_reent+0x5a>
 8007610:	4620      	mov	r0, r4
 8007612:	f000 f85d 	bl	80076d0 <_free_r>
 8007616:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007618:	b111      	cbz	r1, 8007620 <_reclaim_reent+0x64>
 800761a:	4620      	mov	r0, r4
 800761c:	f000 f858 	bl	80076d0 <_free_r>
 8007620:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007622:	b111      	cbz	r1, 800762a <_reclaim_reent+0x6e>
 8007624:	4620      	mov	r0, r4
 8007626:	f000 f853 	bl	80076d0 <_free_r>
 800762a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800762c:	b111      	cbz	r1, 8007634 <_reclaim_reent+0x78>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f84e 	bl	80076d0 <_free_r>
 8007634:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007636:	b111      	cbz	r1, 800763e <_reclaim_reent+0x82>
 8007638:	4620      	mov	r0, r4
 800763a:	f000 f849 	bl	80076d0 <_free_r>
 800763e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007640:	b111      	cbz	r1, 8007648 <_reclaim_reent+0x8c>
 8007642:	4620      	mov	r0, r4
 8007644:	f000 f844 	bl	80076d0 <_free_r>
 8007648:	6a23      	ldr	r3, [r4, #32]
 800764a:	b14b      	cbz	r3, 8007660 <_reclaim_reent+0xa4>
 800764c:	4620      	mov	r0, r4
 800764e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007652:	4718      	bx	r3
 8007654:	680e      	ldr	r6, [r1, #0]
 8007656:	4620      	mov	r0, r4
 8007658:	f000 f83a 	bl	80076d0 <_free_r>
 800765c:	4631      	mov	r1, r6
 800765e:	e7bb      	b.n	80075d8 <_reclaim_reent+0x1c>
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	bf00      	nop
 8007664:	20000010 	.word	0x20000010

08007668 <__libc_init_array>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	4d0d      	ldr	r5, [pc, #52]	@ (80076a0 <__libc_init_array+0x38>)
 800766c:	4c0d      	ldr	r4, [pc, #52]	@ (80076a4 <__libc_init_array+0x3c>)
 800766e:	1b64      	subs	r4, r4, r5
 8007670:	10a4      	asrs	r4, r4, #2
 8007672:	2600      	movs	r6, #0
 8007674:	42a6      	cmp	r6, r4
 8007676:	d109      	bne.n	800768c <__libc_init_array+0x24>
 8007678:	4d0b      	ldr	r5, [pc, #44]	@ (80076a8 <__libc_init_array+0x40>)
 800767a:	4c0c      	ldr	r4, [pc, #48]	@ (80076ac <__libc_init_array+0x44>)
 800767c:	f000 f87e 	bl	800777c <_init>
 8007680:	1b64      	subs	r4, r4, r5
 8007682:	10a4      	asrs	r4, r4, #2
 8007684:	2600      	movs	r6, #0
 8007686:	42a6      	cmp	r6, r4
 8007688:	d105      	bne.n	8007696 <__libc_init_array+0x2e>
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007690:	4798      	blx	r3
 8007692:	3601      	adds	r6, #1
 8007694:	e7ee      	b.n	8007674 <__libc_init_array+0xc>
 8007696:	f855 3b04 	ldr.w	r3, [r5], #4
 800769a:	4798      	blx	r3
 800769c:	3601      	adds	r6, #1
 800769e:	e7f2      	b.n	8007686 <__libc_init_array+0x1e>
 80076a0:	080078cc 	.word	0x080078cc
 80076a4:	080078cc 	.word	0x080078cc
 80076a8:	080078cc 	.word	0x080078cc
 80076ac:	080078d0 	.word	0x080078d0

080076b0 <__retarget_lock_acquire_recursive>:
 80076b0:	4770      	bx	lr

080076b2 <__retarget_lock_release_recursive>:
 80076b2:	4770      	bx	lr

080076b4 <memcpy>:
 80076b4:	440a      	add	r2, r1
 80076b6:	4291      	cmp	r1, r2
 80076b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076bc:	d100      	bne.n	80076c0 <memcpy+0xc>
 80076be:	4770      	bx	lr
 80076c0:	b510      	push	{r4, lr}
 80076c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ca:	4291      	cmp	r1, r2
 80076cc:	d1f9      	bne.n	80076c2 <memcpy+0xe>
 80076ce:	bd10      	pop	{r4, pc}

080076d0 <_free_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d041      	beq.n	800775c <_free_r+0x8c>
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f0c      	subs	r4, r1, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfb8      	it	lt
 80076e2:	18e4      	addlt	r4, r4, r3
 80076e4:	f000 f83e 	bl	8007764 <__malloc_lock>
 80076e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007760 <_free_r+0x90>)
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	b933      	cbnz	r3, 80076fc <_free_r+0x2c>
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	6014      	str	r4, [r2, #0]
 80076f2:	4628      	mov	r0, r5
 80076f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f8:	f000 b83a 	b.w	8007770 <__malloc_unlock>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d908      	bls.n	8007712 <_free_r+0x42>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	1821      	adds	r1, r4, r0
 8007704:	428b      	cmp	r3, r1
 8007706:	bf01      	itttt	eq
 8007708:	6819      	ldreq	r1, [r3, #0]
 800770a:	685b      	ldreq	r3, [r3, #4]
 800770c:	1809      	addeq	r1, r1, r0
 800770e:	6021      	streq	r1, [r4, #0]
 8007710:	e7ed      	b.n	80076ee <_free_r+0x1e>
 8007712:	461a      	mov	r2, r3
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	b10b      	cbz	r3, 800771c <_free_r+0x4c>
 8007718:	42a3      	cmp	r3, r4
 800771a:	d9fa      	bls.n	8007712 <_free_r+0x42>
 800771c:	6811      	ldr	r1, [r2, #0]
 800771e:	1850      	adds	r0, r2, r1
 8007720:	42a0      	cmp	r0, r4
 8007722:	d10b      	bne.n	800773c <_free_r+0x6c>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	4401      	add	r1, r0
 8007728:	1850      	adds	r0, r2, r1
 800772a:	4283      	cmp	r3, r0
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	d1e0      	bne.n	80076f2 <_free_r+0x22>
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	6053      	str	r3, [r2, #4]
 8007736:	4408      	add	r0, r1
 8007738:	6010      	str	r0, [r2, #0]
 800773a:	e7da      	b.n	80076f2 <_free_r+0x22>
 800773c:	d902      	bls.n	8007744 <_free_r+0x74>
 800773e:	230c      	movs	r3, #12
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	e7d6      	b.n	80076f2 <_free_r+0x22>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	1821      	adds	r1, r4, r0
 8007748:	428b      	cmp	r3, r1
 800774a:	bf04      	itt	eq
 800774c:	6819      	ldreq	r1, [r3, #0]
 800774e:	685b      	ldreq	r3, [r3, #4]
 8007750:	6063      	str	r3, [r4, #4]
 8007752:	bf04      	itt	eq
 8007754:	1809      	addeq	r1, r1, r0
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	6054      	str	r4, [r2, #4]
 800775a:	e7ca      	b.n	80076f2 <_free_r+0x22>
 800775c:	bd38      	pop	{r3, r4, r5, pc}
 800775e:	bf00      	nop
 8007760:	20005388 	.word	0x20005388

08007764 <__malloc_lock>:
 8007764:	4801      	ldr	r0, [pc, #4]	@ (800776c <__malloc_lock+0x8>)
 8007766:	f7ff bfa3 	b.w	80076b0 <__retarget_lock_acquire_recursive>
 800776a:	bf00      	nop
 800776c:	20005384 	.word	0x20005384

08007770 <__malloc_unlock>:
 8007770:	4801      	ldr	r0, [pc, #4]	@ (8007778 <__malloc_unlock+0x8>)
 8007772:	f7ff bf9e 	b.w	80076b2 <__retarget_lock_release_recursive>
 8007776:	bf00      	nop
 8007778:	20005384 	.word	0x20005384

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
