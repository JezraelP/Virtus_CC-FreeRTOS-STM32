
Semaphore2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08008aa8  08008aa8  00009aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bec  08008bec  0000a1a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008bec  08008bec  00009bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf4  08008bf4  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf4  08008bf4  00009bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bf8  08008bf8  00009bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008bfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008c5c  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008cfc  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051fc  200001a0  08008d9c  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000539c  08008d9c  0000a39c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022648  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042bf  00000000  00000000  0002c816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a58  00000000  00000000  00030ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001486  00000000  00000000  00032530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000046a9  00000000  00000000  000339b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f611  00000000  00000000  0003805f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dd1d  00000000  00000000  00057670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016538d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000752c  00000000  00000000  001653d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  0016c8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008a90 	.word	0x08008a90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008a90 	.word	0x08008a90

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005f0:	d104      	bne.n	80005fc <HAL_GPIO_EXTI_Callback+0x1c>
		osSemaphoreRelease(BinarySem01Handle);
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x24>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fbd2 	bl	8004da0 <osSemaphoreRelease>
	}
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000814 	.word	0x20000814

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fd6b 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f836 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f952 	bl	80008bc <MX_GPIO_Init>
  MX_ETH_Init();
 8000618:	f000 f8a4 	bl	8000764 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800061c:	f000 f8f0 	bl	8000800 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000620:	f000 f91e 	bl	8000860 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000624:	f004 f9aa 	bl	800497c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 0, &BinarySem01_attributes);
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <main+0x58>)
 800062a:	2100      	movs	r1, #0
 800062c:	2001      	movs	r0, #1
 800062e:	f004 fab5 	bl	8004b9c <osSemaphoreNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0b      	ldr	r2, [pc, #44]	@ (8000664 <main+0x5c>)
 8000636:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <main+0x60>)
 800063a:	2100      	movs	r1, #0
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <main+0x64>)
 800063e:	f004 fa07 	bl	8004a50 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <main+0x68>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000648:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <main+0x6c>)
 800064a:	2100      	movs	r1, #0
 800064c:	480a      	ldr	r0, [pc, #40]	@ (8000678 <main+0x70>)
 800064e:	f004 f9ff 	bl	8004a50 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a09      	ldr	r2, [pc, #36]	@ (800067c <main+0x74>)
 8000656:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000658:	f004 f9c4 	bl	80049e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x54>
 8000660:	08008b90 	.word	0x08008b90
 8000664:	20000814 	.word	0x20000814
 8000668:	08008b48 	.word	0x08008b48
 800066c:	08000a11 	.word	0x08000a11
 8000670:	2000080c 	.word	0x2000080c
 8000674:	08008b6c 	.word	0x08008b6c
 8000678:	08000a91 	.word	0x08000a91
 800067c:	20000810 	.word	0x20000810

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2234      	movs	r2, #52	@ 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fd28 	bl	80080e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a4:	f001 fcb8 	bl	8002018 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <SystemClock_Config+0xdc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a2b      	ldr	r2, [pc, #172]	@ (800075c <SystemClock_Config+0xdc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <SystemClock_Config+0xdc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c0:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <SystemClock_Config+0xe0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c8:	4a25      	ldr	r2, [pc, #148]	@ (8000760 <SystemClock_Config+0xe0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f4:	2360      	movs	r3, #96	@ 0x60
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fce5 	bl	80020d8 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000714:	f000 fa0e 	bl	8000b34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000718:	f001 fc8e 	bl	8002038 <HAL_PWREx_EnableOverDrive>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000722:	f000 fa07 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2103      	movs	r1, #3
 8000742:	4618      	mov	r0, r3
 8000744:	f001 ff76 	bl	8002634 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800074e:	f000 f9f1 	bl	8000b34 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_ETH_Init+0x84>)
 800076a:	4a20      	ldr	r2, [pc, #128]	@ (80007ec <MX_ETH_Init+0x88>)
 800076c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_ETH_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_ETH_Init+0x8c>)
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_ETH_Init+0x8c>)
 800077c:	22e1      	movs	r2, #225	@ 0xe1
 800077e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_ETH_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_ETH_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_ETH_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_ETH_Init+0x84>)
 8000794:	4a16      	ldr	r2, [pc, #88]	@ (80007f0 <MX_ETH_Init+0x8c>)
 8000796:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_ETH_Init+0x84>)
 800079a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800079e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_ETH_Init+0x84>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <MX_ETH_Init+0x90>)
 80007a4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_ETH_Init+0x84>)
 80007a8:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <MX_ETH_Init+0x94>)
 80007aa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_ETH_Init+0x84>)
 80007ae:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007b2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <MX_ETH_Init+0x84>)
 80007b6:	f000 fdc9 	bl	800134c <HAL_ETH_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007c0:	f000 f9b8 	bl	8000b34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007c4:	2238      	movs	r2, #56	@ 0x38
 80007c6:	2100      	movs	r1, #0
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <MX_ETH_Init+0x98>)
 80007ca:	f007 fc8b 	bl	80080e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_ETH_Init+0x98>)
 80007d0:	2221      	movs	r2, #33	@ 0x21
 80007d2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_ETH_Init+0x98>)
 80007d6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007da:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_ETH_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200001f4 	.word	0x200001f4
 80007ec:	40028000 	.word	0x40028000
 80007f0:	20000818 	.word	0x20000818
 80007f4:	20000100 	.word	0x20000100
 80007f8:	20000060 	.word	0x20000060
 80007fc:	200001bc 	.word	0x200001bc

08000800 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <MX_USART3_UART_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART3_UART_Init+0x58>)
 8000844:	f003 f844 	bl	80038d0 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f971 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200002a4 	.word	0x200002a4
 800085c:	40004800 	.word	0x40004800

08000860 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800086a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2206      	movs	r2, #6
 8000870:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2202      	movs	r2, #2
 8000876:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2202      	movs	r2, #2
 8000882:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2201      	movs	r2, #1
 8000888:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2201      	movs	r2, #1
 800089a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	f001 fa7e 	bl	8001da4 <HAL_PCD_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f941 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000032c 	.word	0x2000032c

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b4b      	ldr	r3, [pc, #300]	@ (8000a00 <MX_GPIO_Init+0x144>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a4a      	ldr	r2, [pc, #296]	@ (8000a00 <MX_GPIO_Init+0x144>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b48      	ldr	r3, [pc, #288]	@ (8000a00 <MX_GPIO_Init+0x144>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	4b45      	ldr	r3, [pc, #276]	@ (8000a00 <MX_GPIO_Init+0x144>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a44      	ldr	r2, [pc, #272]	@ (8000a00 <MX_GPIO_Init+0x144>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b42      	ldr	r3, [pc, #264]	@ (8000a00 <MX_GPIO_Init+0x144>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b3f      	ldr	r3, [pc, #252]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a3e      	ldr	r2, [pc, #248]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b39      	ldr	r3, [pc, #228]	@ (8000a00 <MX_GPIO_Init+0x144>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a38      	ldr	r2, [pc, #224]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a32      	ldr	r2, [pc, #200]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <MX_GPIO_Init+0x144>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b2a      	ldr	r3, [pc, #168]	@ (8000a00 <MX_GPIO_Init+0x144>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000968:	4826      	ldr	r0, [pc, #152]	@ (8000a04 <MX_GPIO_Init+0x148>)
 800096a:	f001 f9e9 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2140      	movs	r1, #64	@ 0x40
 8000972:	4825      	ldr	r0, [pc, #148]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000974:	f001 f9e4 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	481f      	ldr	r0, [pc, #124]	@ (8000a0c <MX_GPIO_Init+0x150>)
 8000990:	f001 f82a 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000994:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4815      	ldr	r0, [pc, #84]	@ (8000a04 <MX_GPIO_Init+0x148>)
 80009ae:	f001 f81b 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b2:	2340      	movs	r3, #64	@ 0x40
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 80009ca:	f001 f80d 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 80009e2:	f001 f801 	bl	80019e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	2028      	movs	r0, #40	@ 0x28
 80009ec:	f000 fc84 	bl	80012f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f0:	2028      	movs	r0, #40	@ 0x28
 80009f2:	f000 fc9d 	bl	8001330 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	@ 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400
 8000a08:	40021800 	.word	0x40021800
 8000a0c:	40020800 	.word	0x40020800

08000a10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b092      	sub	sp, #72	@ 0x48
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char buf[64];
  /* Infinite loop */
  for(;;)
  {
    snprintf(buf, sizeof(buf), "T1 waiting for semaphore\r \n");
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <StartDefaultTask+0x70>)
 8000a1e:	2140      	movs	r1, #64	@ 0x40
 8000a20:	4618      	mov	r0, r3
 8000a22:	f007 fb2b 	bl	800807c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fc08 	bl	8000240 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f107 0108 	add.w	r1, r7, #8
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <StartDefaultTask+0x74>)
 8000a3e:	f002 ff95 	bl	800396c <HAL_UART_Transmit>

    osSemaphoreAcquire(BinarySem01Handle, osWaitForever);
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <StartDefaultTask+0x78>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 f942 	bl	8004cd4 <osSemaphoreAcquire>

    snprintf(buf, sizeof(buf), "T1 holding semaphore\r \n");
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4a0d      	ldr	r2, [pc, #52]	@ (8000a8c <StartDefaultTask+0x7c>)
 8000a56:	2140      	movs	r1, #64	@ 0x40
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 fb0f 	bl	800807c <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbec 	bl	8000240 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f107 0108 	add.w	r1, r7, #8
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <StartDefaultTask+0x74>)
 8000a76:	f002 ff79 	bl	800396c <HAL_UART_Transmit>
  {
 8000a7a:	bf00      	nop
 8000a7c:	e7cc      	b.n	8000a18 <StartDefaultTask+0x8>
 8000a7e:	bf00      	nop
 8000a80:	08008ac8 	.word	0x08008ac8
 8000a84:	200002a4 	.word	0x200002a4
 8000a88:	20000814 	.word	0x20000814
 8000a8c:	08008ae4 	.word	0x08008ae4

08000a90 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b092      	sub	sp, #72	@ 0x48
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	char buf[64];
  /* Infinite loop */
  for(;;)
  {
	  snprintf(buf, sizeof(buf), "T2 waiting for semaphore\r \n");
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4a18      	ldr	r2, [pc, #96]	@ (8000b00 <StartTask02+0x70>)
 8000a9e:	2140      	movs	r1, #64	@ 0x40
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f007 faeb 	bl	800807c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fbc8 	bl	8000240 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f107 0108 	add.w	r1, r7, #8
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <StartTask02+0x74>)
 8000abe:	f002 ff55 	bl	800396c <HAL_UART_Transmit>

	  osSemaphoreAcquire(BinarySem01Handle, osWaitForever);
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <StartTask02+0x78>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 f902 	bl	8004cd4 <osSemaphoreAcquire>

	  snprintf(buf, sizeof(buf), "T2 holding semaphore\r \n");
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <StartTask02+0x7c>)
 8000ad6:	2140      	movs	r1, #64	@ 0x40
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f007 facf 	bl	800807c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fbac 	bl	8000240 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	f107 0108 	add.w	r1, r7, #8
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <StartTask02+0x74>)
 8000af6:	f002 ff39 	bl	800396c <HAL_UART_Transmit>
  {
 8000afa:	bf00      	nop
 8000afc:	e7cc      	b.n	8000a98 <StartTask02+0x8>
 8000afe:	bf00      	nop
 8000b00:	08008afc 	.word	0x08008afc
 8000b04:	200002a4 	.word	0x200002a4
 8000b08:	20000814 	.word	0x20000814
 8000b0c:	08008b18 	.word	0x08008b18

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 faed 	bl	8001100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40001000 	.word	0x40001000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a10      	ldr	r2, [pc, #64]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 fbbb 	bl	80012f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	@ 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a4e      	ldr	r2, [pc, #312]	@ (8000ce8 <HAL_ETH_MspInit+0x158>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f040 8096 	bne.w	8000ce0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bc8:	623b      	str	r3, [r7, #32]
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	4a46      	ldr	r2, [pc, #280]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd8:	4b44      	ldr	r3, [pc, #272]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	4b41      	ldr	r3, [pc, #260]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	4a40      	ldr	r2, [pc, #256]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c00:	4a3a      	ldr	r2, [pc, #232]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c08:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c18:	4a34      	ldr	r2, [pc, #208]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c20:	4b32      	ldr	r3, [pc, #200]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c30:	4a2e      	ldr	r2, [pc, #184]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c38:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c44:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c48:	4a28      	ldr	r2, [pc, #160]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c50:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <HAL_ETH_MspInit+0x15c>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c5c:	2332      	movs	r3, #50	@ 0x32
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	481e      	ldr	r0, [pc, #120]	@ (8000cf0 <HAL_ETH_MspInit+0x160>)
 8000c78:	f000 feb6 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c7c:	2386      	movs	r3, #134	@ 0x86
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8c:	230b      	movs	r3, #11
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4817      	ldr	r0, [pc, #92]	@ (8000cf4 <HAL_ETH_MspInit+0x164>)
 8000c98:	f000 fea6 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480f      	ldr	r0, [pc, #60]	@ (8000cf8 <HAL_ETH_MspInit+0x168>)
 8000cba:	f000 fe95 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cbe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <HAL_ETH_MspInit+0x16c>)
 8000cdc:	f000 fe84 	bl	80019e8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	@ 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40028000 	.word	0x40028000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40021800 	.word	0x40021800

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ae      	sub	sp, #184	@ 0xb8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2290      	movs	r2, #144	@ 0x90
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f007 f9df 	bl	80080e4 <memset>
  if(huart->Instance==USART3)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	@ (8000db4 <HAL_UART_MspInit+0xb4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d13c      	bne.n	8000daa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fed0 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4a:	f7ff fef3 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	4a19      	ldr	r2, [pc, #100]	@ (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5a:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_UART_MspInit+0xb8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <HAL_UART_MspInit+0xbc>)
 8000da6:	f000 fe1f 	bl	80019e8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000daa:	bf00      	nop
 8000dac:	37b8      	adds	r7, #184	@ 0xb8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004800 	.word	0x40004800
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2290      	movs	r2, #144	@ 0x90
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f007 f97f 	bl	80080e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dee:	d159      	bne.n	8000ea4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000df0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000df4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fe6f 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e0c:	f7ff fe92 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	4a25      	ldr	r2, [pc, #148]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1c:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e28:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e42:	230a      	movs	r3, #10
 8000e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <HAL_PCD_MspInit+0xf0>)
 8000e50:	f000 fdca 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <HAL_PCD_MspInit+0xf0>)
 8000e70:	f000 fdba 	bl	80019e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e78:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e7e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e90:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e98:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <HAL_PCD_MspInit+0xec>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37b8      	adds	r7, #184	@ 0xb8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	@ 0x38
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ec4:	4b33      	ldr	r3, [pc, #204]	@ (8000f94 <HAL_InitTick+0xe0>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	4a32      	ldr	r2, [pc, #200]	@ (8000f94 <HAL_InitTick+0xe0>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed0:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <HAL_InitTick+0xe0>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000edc:	f107 0210 	add.w	r2, r7, #16
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fdca 	bl	8002a80 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d103      	bne.n	8000efe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ef6:	f001 fd9b 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8000efa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000efc:	e004      	b.n	8000f08 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000efe:	f001 fd97 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8000f02:	4603      	mov	r3, r0
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0a:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <HAL_InitTick+0xe4>)
 8000f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f10:	0c9b      	lsrs	r3, r3, #18
 8000f12:	3b01      	subs	r3, #1
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f18:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <HAL_InitTick+0xec>)
 8000f1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f24:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f3c:	4817      	ldr	r0, [pc, #92]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f3e:	f002 f9f9 	bl	8003334 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d11b      	bne.n	8000f88 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f50:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <HAL_InitTick+0xe8>)
 8000f52:	f002 fa51 	bl	80033f8 <HAL_TIM_Base_Start_IT>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d111      	bne.n	8000f88 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f64:	2036      	movs	r0, #54	@ 0x36
 8000f66:	f000 f9e3 	bl	8001330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d808      	bhi.n	8000f82 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	2036      	movs	r0, #54	@ 0x36
 8000f76:	f000 f9bf 	bl	80012f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_InitTick+0xf0>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e002      	b.n	8000f88 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3738      	adds	r7, #56	@ 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	20000820 	.word	0x20000820
 8000fa0:	40001000 	.word	0x40001000
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fe2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe6:	f000 fec5 	bl	8001d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM6_DAC_IRQHandler+0x10>)
 8000ff6:	f002 fa77 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000820 	.word	0x20000820

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f007 f8b4 	bl	80081a0 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20080000 	.word	0x20080000
 8001064:	00000400 	.word	0x00000400
 8001068:	2000086c 	.word	0x2000086c
 800106c:	200053a0 	.word	0x200053a0

08001070 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001098:	f7ff ffea 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f007 f873 	bl	80081ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fa9f 	bl	8000608 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010d8:	08008bfc 	.word	0x08008bfc
  ldr r2, =_sbss
 80010dc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80010e0:	2000539c 	.word	0x2000539c

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>

080010e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ea:	2003      	movs	r0, #3
 80010ec:	f000 f8f9 	bl	80012e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f0:	200f      	movs	r0, #15
 80010f2:	f7ff fedf 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f6:	f7ff fd23 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20000870 	.word	0x20000870

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000870 	.word	0x20000870

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0000 	.word	0x05fa0000

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	@ (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff4c 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130a:	f7ff ff61 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 800130e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff ffb1 	bl	800127c <NVIC_EncodePriority>
 800131a:	4602      	mov	r2, r0
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff80 	bl	8001228 <__NVIC_SetPriority>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff54 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e086      	b.n	800146c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001364:	2b00      	cmp	r3, #0
 8001366:	d106      	bne.n	8001376 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fc0d 	bl	8000b90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <HAL_ETH_Init+0x128>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a3e      	ldr	r2, [pc, #248]	@ (8001474 <HAL_ETH_Init+0x128>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b3c      	ldr	r3, [pc, #240]	@ (8001474 <HAL_ETH_Init+0x128>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800138e:	4b3a      	ldr	r3, [pc, #232]	@ (8001478 <HAL_ETH_Init+0x12c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a39      	ldr	r2, [pc, #228]	@ (8001478 <HAL_ETH_Init+0x12c>)
 8001394:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001398:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800139a:	4b37      	ldr	r3, [pc, #220]	@ (8001478 <HAL_ETH_Init+0x12c>)
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4935      	ldr	r1, [pc, #212]	@ (8001478 <HAL_ETH_Init+0x12c>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013a8:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_ETH_Init+0x12c>)
 80013aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c4:	f7ff feb0 	bl	8001128 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ca:	e011      	b.n	80013f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013cc:	f7ff feac 	bl	8001128 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013da:	d909      	bls.n	80013f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2204      	movs	r2, #4
 80013e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	22e0      	movs	r2, #224	@ 0xe0
 80013e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e03d      	b.n	800146c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1e4      	bne.n	80013cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f97a 	bl	80016fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fa25 	bl	8001858 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fa7b 	bl	800190a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	461a      	mov	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f9e3 	bl	80017e8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001430:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_ETH_Init+0x130>)
 8001440:	430b      	orrs	r3, r1
 8001442:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001456:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2210      	movs	r2, #16
 8001466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	00020060 	.word	0x00020060

08001480 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <ETH_SetMACConfig+0x164>)
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	7b9b      	ldrb	r3, [r3, #14]
 800149e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	7c12      	ldrb	r2, [r2, #16]
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d102      	bne.n	80014ae <ETH_SetMACConfig+0x2e>
 80014a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014ac:	e000      	b.n	80014b0 <ETH_SetMACConfig+0x30>
 80014ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	7c52      	ldrb	r2, [r2, #17]
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d102      	bne.n	80014c0 <ETH_SetMACConfig+0x40>
 80014ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014be:	e000      	b.n	80014c2 <ETH_SetMACConfig+0x42>
 80014c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	7fdb      	ldrb	r3, [r3, #31]
 80014ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	7f92      	ldrb	r2, [r2, #30]
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d102      	bne.n	80014e6 <ETH_SetMACConfig+0x66>
 80014e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e4:	e000      	b.n	80014e8 <ETH_SetMACConfig+0x68>
 80014e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80014e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	7f1b      	ldrb	r3, [r3, #28]
 80014ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001506:	2a00      	cmp	r2, #0
 8001508:	d102      	bne.n	8001510 <ETH_SetMACConfig+0x90>
 800150a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150e:	e000      	b.n	8001512 <ETH_SetMACConfig+0x92>
 8001510:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001512:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7bdb      	ldrb	r3, [r3, #15]
 8001518:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800151a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001520:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001528:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800152a:	4313      	orrs	r3, r2
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff fdfc 	bl	8001140 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001566:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800156e:	2a00      	cmp	r2, #0
 8001570:	d101      	bne.n	8001576 <ETH_SetMACConfig+0xf6>
 8001572:	2280      	movs	r2, #128	@ 0x80
 8001574:	e000      	b.n	8001578 <ETH_SetMACConfig+0xf8>
 8001576:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001578:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800157e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001586:	2a01      	cmp	r2, #1
 8001588:	d101      	bne.n	800158e <ETH_SetMACConfig+0x10e>
 800158a:	2208      	movs	r2, #8
 800158c:	e000      	b.n	8001590 <ETH_SetMACConfig+0x110>
 800158e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001590:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001598:	2a01      	cmp	r2, #1
 800159a:	d101      	bne.n	80015a0 <ETH_SetMACConfig+0x120>
 800159c:	2204      	movs	r2, #4
 800159e:	e000      	b.n	80015a2 <ETH_SetMACConfig+0x122>
 80015a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80015aa:	2a01      	cmp	r2, #1
 80015ac:	d101      	bne.n	80015b2 <ETH_SetMACConfig+0x132>
 80015ae:	2202      	movs	r2, #2
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0x134>
 80015b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b4:	4313      	orrs	r3, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fdb7 	bl	8001140 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	fd20810f 	.word	0xfd20810f

080015e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <ETH_SetDMAConfig+0x110>)
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	7b1b      	ldrb	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <ETH_SetDMAConfig+0x2c>
 800160e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001612:	e000      	b.n	8001616 <ETH_SetDMAConfig+0x2e>
 8001614:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	7b5b      	ldrb	r3, [r3, #13]
 800161a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800161c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	7f52      	ldrb	r2, [r2, #29]
 8001622:	2a00      	cmp	r2, #0
 8001624:	d102      	bne.n	800162c <ETH_SetDMAConfig+0x44>
 8001626:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800162a:	e000      	b.n	800162e <ETH_SetDMAConfig+0x46>
 800162c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800162e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	7b9b      	ldrb	r3, [r3, #14]
 8001634:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001636:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800163c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	7f1b      	ldrb	r3, [r3, #28]
 8001642:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001644:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	7f9b      	ldrb	r3, [r3, #30]
 800164a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800164c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001652:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800165a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800165c:	4313      	orrs	r3, r2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166c:	461a      	mov	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fd5e 	bl	8001140 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800169c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fd2f 	bl	8001140 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	f8de3f23 	.word	0xf8de3f23

080016fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0a6      	sub	sp, #152	@ 0x98
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001710:	2300      	movs	r3, #0
 8001712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800172c:	2301      	movs	r3, #1
 800172e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800173e:	2300      	movs	r3, #0
 8001740:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001748:	2300      	movs	r3, #0
 800174a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001764:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001768:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800176a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001776:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe7f 	bl	8001480 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001790:	2301      	movs	r3, #1
 8001792:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017bc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff05 	bl	80015e8 <ETH_SetDMAConfig>
}
 80017de:	bf00      	nop
 80017e0:	3798      	adds	r7, #152	@ 0x98
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3305      	adds	r3, #5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	3204      	adds	r2, #4
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <ETH_MACAddressConfig+0x68>)
 800180a:	4413      	add	r3, r2
 800180c:	461a      	mov	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3303      	adds	r3, #3
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	061a      	lsls	r2, r3, #24
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3302      	adds	r3, #2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	4313      	orrs	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <ETH_MACAddressConfig+0x6c>)
 800183a:	4413      	add	r3, r2
 800183c:	461a      	mov	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40028040 	.word	0x40028040
 8001854:	40028044 	.word	0x40028044

08001858 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e03e      	b.n	80018e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68d9      	ldr	r1, [r3, #12]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	3206      	adds	r2, #6
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d80c      	bhi.n	80018c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e004      	b.n	80018d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	461a      	mov	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d9bd      	bls.n	8001866 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fc:	611a      	str	r2, [r3, #16]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e048      	b.n	80019aa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6919      	ldr	r1, [r3, #16]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001954:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	3212      	adds	r2, #18
 8001976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d80c      	bhi.n	800199a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	e004      	b.n	80019a4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d9b3      	bls.n	8001918 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e175      	b.n	8001cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8164 	bne.w	8001cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d005      	beq.n	8001a3e <HAL_GPIO_Init+0x56>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d130      	bne.n	8001aa0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80be 	beq.w	8001cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b66      	ldr	r3, [pc, #408]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	4a65      	ldr	r2, [pc, #404]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7e:	4b63      	ldr	r3, [pc, #396]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b8a:	4a61      	ldr	r2, [pc, #388]	@ (8001d10 <HAL_GPIO_Init+0x328>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	@ (8001d14 <HAL_GPIO_Init+0x32c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d037      	beq.n	8001c26 <HAL_GPIO_Init+0x23e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a57      	ldr	r2, [pc, #348]	@ (8001d18 <HAL_GPIO_Init+0x330>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d031      	beq.n	8001c22 <HAL_GPIO_Init+0x23a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a56      	ldr	r2, [pc, #344]	@ (8001d1c <HAL_GPIO_Init+0x334>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x236>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a55      	ldr	r2, [pc, #340]	@ (8001d20 <HAL_GPIO_Init+0x338>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x232>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a54      	ldr	r2, [pc, #336]	@ (8001d24 <HAL_GPIO_Init+0x33c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x22e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a53      	ldr	r2, [pc, #332]	@ (8001d28 <HAL_GPIO_Init+0x340>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x22a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a52      	ldr	r2, [pc, #328]	@ (8001d2c <HAL_GPIO_Init+0x344>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x226>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a51      	ldr	r2, [pc, #324]	@ (8001d30 <HAL_GPIO_Init+0x348>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x222>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a50      	ldr	r2, [pc, #320]	@ (8001d34 <HAL_GPIO_Init+0x34c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x21e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d38 <HAL_GPIO_Init+0x350>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x21a>
 8001bfe:	2309      	movs	r3, #9
 8001c00:	e012      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c02:	230a      	movs	r3, #10
 8001c04:	e010      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c06:	2308      	movs	r3, #8
 8001c08:	e00e      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00c      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00a      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x240>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	@ (8001d10 <HAL_GPIO_Init+0x328>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b3d      	ldr	r3, [pc, #244]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b32      	ldr	r3, [pc, #200]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a29      	ldr	r2, [pc, #164]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <HAL_GPIO_Init+0x354>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f ae86 	bls.w	8001a08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40022400 	.word	0x40022400
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fc24 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e108      	b.n	8001fc8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fff5 	bl	8000dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de4:	d102      	bne.n	8001dec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 fb1f 	bl	8004434 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7c1a      	ldrb	r2, [r3, #16]
 8001dfe:	f88d 2000 	strb.w	r2, [sp]
 8001e02:	3304      	adds	r3, #4
 8001e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e06:	f002 fabb 	bl	8004380 <USB_CoreInit>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d5      	b.n	8001fc8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fb17 	bl	8004456 <USB_SetCurrentMode>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0c6      	b.n	8001fc8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e04a      	b.n	8001ed6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3315      	adds	r3, #21
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3314      	adds	r3, #20
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	332e      	adds	r3, #46	@ 0x2e
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3318      	adds	r3, #24
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	331c      	adds	r3, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3324      	adds	r3, #36	@ 0x24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	791b      	ldrb	r3, [r3, #4]
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3af      	bcc.n	8001e40 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e044      	b.n	8001f70 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3b5      	bcc.n	8001ee6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7c1a      	ldrb	r2, [r3, #16]
 8001f82:	f88d 2000 	strb.w	r2, [sp]
 8001f86:	3304      	adds	r3, #4
 8001f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8a:	f002 fab1 	bl	80044f0 <USB_DevInit>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e013      	b.n	8001fc8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7b1b      	ldrb	r3, [r3, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f80a 	bl	8001fd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 fc6c 	bl	800489e <USB_DevDisconnect>

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_PCDEx_ActivateLPM+0x44>)
 8002000:	4313      	orrs	r3, r2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	10000003 	.word	0x10000003

08002018 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40007000 	.word	0x40007000

08002038 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a22      	ldr	r2, [pc, #136]	@ (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002066:	f7ff f85f 	bl	8001128 <HAL_GetTick>
 800206a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800206c:	e009      	b.n	8002082 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800206e:	f7ff f85b 	bl	8001128 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800207c:	d901      	bls.n	8002082 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e022      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208e:	d1ee      	bne.n	800206e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002090:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800209c:	f7ff f844 	bl	8001128 <HAL_GetTick>
 80020a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020a2:	e009      	b.n	80020b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020a4:	f7ff f840 	bl	8001128 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020b2:	d901      	bls.n	80020b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e007      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020c4:	d1ee      	bne.n	80020a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e29b      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8087 	beq.w	800220a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020fc:	4b96      	ldr	r3, [pc, #600]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00c      	beq.n	8002122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002108:	4b93      	ldr	r3, [pc, #588]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d112      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
 8002114:	4b90      	ldr	r3, [pc, #576]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002120:	d10b      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002122:	4b8d      	ldr	r3, [pc, #564]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06c      	beq.n	8002208 <HAL_RCC_OscConfig+0x130>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d168      	bne.n	8002208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e275      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x7a>
 8002144:	4b84      	ldr	r3, [pc, #528]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a83      	ldr	r2, [pc, #524]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02e      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x9c>
 800215a:	4b7f      	ldr	r3, [pc, #508]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7e      	ldr	r2, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b7c      	ldr	r3, [pc, #496]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7b      	ldr	r2, [pc, #492]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0xc0>
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b73      	ldr	r3, [pc, #460]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a72      	ldr	r2, [pc, #456]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002198:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ffb6 	bl	8001128 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe ffb2 	bl	8001128 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e229      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b61      	ldr	r3, [pc, #388]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe8>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe ffa2 	bl	8001128 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe ff9e 	bl	8001128 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e215      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b57      	ldr	r3, [pc, #348]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x110>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d069      	beq.n	80022ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002216:	4b50      	ldr	r3, [pc, #320]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b4d      	ldr	r3, [pc, #308]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x190>
 800222e:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1e9      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	493d      	ldr	r1, [pc, #244]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e040      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a38      	ldr	r2, [pc, #224]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff54 	bl	8001128 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe ff50 	bl	8001128 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1c7      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b30      	ldr	r3, [pc, #192]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4929      	ldr	r1, [pc, #164]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
 80022b6:	e018      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a26      	ldr	r2, [pc, #152]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe ff30 	bl	8001128 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022cc:	f7fe ff2c 	bl	8001128 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1a3      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d038      	beq.n	8002368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002302:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe ff0d 	bl	8001128 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe ff09 	bl	8001128 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e180      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x23a>
 8002330:	e01a      	b.n	8002368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe fef3 	bl	8001128 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002346:	f7fe feef 	bl	8001128 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d903      	bls.n	800235c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e166      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
 8002358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a4 	beq.w	80024be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b8c      	ldr	r3, [pc, #560]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b89      	ldr	r3, [pc, #548]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a88      	ldr	r2, [pc, #544]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b86      	ldr	r3, [pc, #536]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b83      	ldr	r3, [pc, #524]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023aa:	4b80      	ldr	r3, [pc, #512]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7f      	ldr	r2, [pc, #508]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe feb7 	bl	8001128 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe feb3 	bl	8001128 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	@ 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e12a      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d0:	4b76      	ldr	r3, [pc, #472]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x31a>
 80023e4:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	4a6f      	ldr	r2, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f0:	e02d      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x33c>
 80023fa:	4b6b      	ldr	r3, [pc, #428]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a6a      	ldr	r2, [pc, #424]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70
 8002406:	4b68      	ldr	r3, [pc, #416]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240a:	4a67      	ldr	r2, [pc, #412]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	@ 0x70
 8002412:	e01c      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x35e>
 800241c:	4b62      	ldr	r3, [pc, #392]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a61      	ldr	r2, [pc, #388]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
 8002428:	4b5f      	ldr	r3, [pc, #380]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4a5e      	ldr	r2, [pc, #376]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	@ 0x70
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 8002436:	4b5c      	ldr	r3, [pc, #368]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	4a5b      	ldr	r2, [pc, #364]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	@ 0x70
 8002442:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe fe67 	bl	8001128 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fe63 	bl	8001128 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0d8      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b4c      	ldr	r3, [pc, #304]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x386>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fe51 	bl	8001128 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fe4d 	bl	8001128 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0c2      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a3c      	ldr	r2, [pc, #240]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80ae 	beq.w	8002624 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d06d      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d14b      	bne.n	8002574 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b32      	ldr	r3, [pc, #200]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a31      	ldr	r2, [pc, #196]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fe1e 	bl	8001128 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fe1a 	bl	8001128 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e091      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	491b      	ldr	r1, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a18      	ldr	r2, [pc, #96]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fdec 	bl	8001128 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fde8 	bl	8001128 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e05f      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x47c>
 8002572:	e057      	b.n	8002624 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0b      	ldr	r2, [pc, #44]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fdd2 	bl	8001128 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fdce 	bl	8001128 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e045      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x4b0>
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x54c>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_RCC_OscConfig+0x558>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d030      	beq.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d129      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d122      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d119      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d10f      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0d0      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b67      	ldr	r3, [pc, #412]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 020f 	bic.w	r2, r3, #15
 8002662:	4965      	ldr	r1, [pc, #404]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d040      	beq.n	8002758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b41      	ldr	r3, [pc, #260]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e073      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	4b3d      	ldr	r3, [pc, #244]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b39      	ldr	r3, [pc, #228]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4936      	ldr	r1, [pc, #216]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fcfe 	bl	8001128 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fcfa 	bl	8001128 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e053      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d210      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	4922      	ldr	r1, [pc, #136]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	@ (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_ClockConfig+0x1d4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fb64 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	08008ba0 	.word	0x08008ba0
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b094      	sub	sp, #80	@ 0x50
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	647b      	str	r3, [r7, #68]	@ 0x44
 8002818:	2300      	movs	r3, #0
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	2300      	movs	r3, #0
 800281e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80e1 	bhi.w	80029f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e0db      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b73      	ldr	r3, [pc, #460]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002844:	e0db      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b73      	ldr	r3, [pc, #460]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800284a:	e0d8      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002854:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002856:	4b6d      	ldr	r3, [pc, #436]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800286c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800286e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002874:	633b      	str	r3, [r7, #48]	@ 0x30
 8002876:	2300      	movs	r3, #0
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
 800287a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800287e:	4622      	mov	r2, r4
 8002880:	462b      	mov	r3, r5
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	0159      	lsls	r1, r3, #5
 800288c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002890:	0150      	lsls	r0, r2, #5
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4621      	mov	r1, r4
 8002898:	1a51      	subs	r1, r2, r1
 800289a:	6139      	str	r1, [r7, #16]
 800289c:	4629      	mov	r1, r5
 800289e:	eb63 0301 	sbc.w	r3, r3, r1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b0:	4659      	mov	r1, fp
 80028b2:	018b      	lsls	r3, r1, #6
 80028b4:	4651      	mov	r1, sl
 80028b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ba:	4651      	mov	r1, sl
 80028bc:	018a      	lsls	r2, r1, #6
 80028be:	4651      	mov	r1, sl
 80028c0:	ebb2 0801 	subs.w	r8, r2, r1
 80028c4:	4659      	mov	r1, fp
 80028c6:	eb63 0901 	sbc.w	r9, r3, r1
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028de:	4690      	mov	r8, r2
 80028e0:	4699      	mov	r9, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	eb18 0303 	adds.w	r3, r8, r3
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	462b      	mov	r3, r5
 80028ec:	eb49 0303 	adc.w	r3, r9, r3
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028fe:	4629      	mov	r1, r5
 8002900:	024b      	lsls	r3, r1, #9
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002908:	4621      	mov	r1, r4
 800290a:	024a      	lsls	r2, r1, #9
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800291c:	f7fd fce8 	bl	80002f0 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002928:	e058      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	2200      	movs	r2, #0
 8002932:	4618      	mov	r0, r3
 8002934:	4611      	mov	r1, r2
 8002936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	f04f 0000 	mov.w	r0, #0
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	0159      	lsls	r1, r3, #5
 8002952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002956:	0150      	lsls	r0, r2, #5
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4641      	mov	r1, r8
 800295e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002962:	4649      	mov	r1, r9
 8002964:	eb63 0b01 	sbc.w	fp, r3, r1
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800297c:	ebb2 040a 	subs.w	r4, r2, sl
 8002980:	eb63 050b 	sbc.w	r5, r3, fp
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	00eb      	lsls	r3, r5, #3
 800298e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002992:	00e2      	lsls	r2, r4, #3
 8002994:	4614      	mov	r4, r2
 8002996:	461d      	mov	r5, r3
 8002998:	4643      	mov	r3, r8
 800299a:	18e3      	adds	r3, r4, r3
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	464b      	mov	r3, r9
 80029a0:	eb45 0303 	adc.w	r3, r5, r3
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029b2:	4629      	mov	r1, r5
 80029b4:	028b      	lsls	r3, r1, #10
 80029b6:	4621      	mov	r1, r4
 80029b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029bc:	4621      	mov	r1, r4
 80029be:	028a      	lsls	r2, r1, #10
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c6:	2200      	movs	r2, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	61fa      	str	r2, [r7, #28]
 80029cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d0:	f7fd fc8e 	bl	80002f0 <__aeabi_uldivmod>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4613      	mov	r3, r2
 80029da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029f6:	e002      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80029fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3750      	adds	r7, #80	@ 0x50
 8002a04:	46bd      	mov	sp, r7
 8002a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200

08002a18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08008bb0 	.word	0x08008bb0

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a5c:	f7ff ffdc 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0b5b      	lsrs	r3, r3, #13
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08008bb0 	.word	0x08008bb0

08002a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <HAL_RCC_GetClockConfig+0x60>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40023c00 	.word	0x40023c00

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d012      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b0c:	4b69      	ldr	r3, [pc, #420]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a68      	ldr	r2, [pc, #416]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	4b66      	ldr	r3, [pc, #408]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b20:	4964      	ldr	r1, [pc, #400]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d017      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4c:	4959      	ldr	r1, [pc, #356]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	494a      	ldr	r1, [pc, #296]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b98:	d101      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 808b 	beq.w	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	4a39      	ldr	r2, [pc, #228]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd4:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002be0:	4b35      	ldr	r3, [pc, #212]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a34      	ldr	r2, [pc, #208]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe fa9c 	bl	8001128 <HAL_GetTick>
 8002bf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7fe fa98 	bl	8001128 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	@ 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e38f      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c06:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c12:	4b28      	ldr	r3, [pc, #160]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d035      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d02e      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c30:	4b20      	ldr	r3, [pc, #128]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c52:	4a18      	ldr	r2, [pc, #96]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c58:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d114      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fa60 	bl	8001128 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fa5c 	bl	8001128 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e351      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ee      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	4901      	ldr	r1, [pc, #4]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	0ffffcff 	.word	0x0ffffcff
 8002cc0:	4bac      	ldr	r3, [pc, #688]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4aab      	ldr	r2, [pc, #684]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	4ba9      	ldr	r3, [pc, #676]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd8:	49a6      	ldr	r1, [pc, #664]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cea:	4ba2      	ldr	r3, [pc, #648]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf0:	4aa0      	ldr	r2, [pc, #640]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cfa:	4b9e      	ldr	r3, [pc, #632]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	499b      	ldr	r1, [pc, #620]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d18:	4b96      	ldr	r3, [pc, #600]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d26:	4993      	ldr	r1, [pc, #588]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d48:	498a      	ldr	r1, [pc, #552]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d5c:	4b85      	ldr	r3, [pc, #532]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d6a:	4982      	ldr	r1, [pc, #520]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8c:	4979      	ldr	r1, [pc, #484]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da0:	4b74      	ldr	r3, [pc, #464]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	4971      	ldr	r1, [pc, #452]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc8:	f023 020c 	bic.w	r2, r3, #12
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd0:	4968      	ldr	r1, [pc, #416]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de4:	4b63      	ldr	r3, [pc, #396]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	4960      	ldr	r1, [pc, #384]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e06:	4b5b      	ldr	r3, [pc, #364]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e14:	4957      	ldr	r1, [pc, #348]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e28:	4b52      	ldr	r3, [pc, #328]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	494f      	ldr	r1, [pc, #316]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	4946      	ldr	r1, [pc, #280]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e6c:	4b41      	ldr	r3, [pc, #260]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	493e      	ldr	r1, [pc, #248]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e8e:	4b39      	ldr	r3, [pc, #228]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9c:	4935      	ldr	r1, [pc, #212]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb0:	4b30      	ldr	r3, [pc, #192]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ebe:	492d      	ldr	r1, [pc, #180]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d011      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ed2:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee0:	4924      	ldr	r1, [pc, #144]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f12:	4b18      	ldr	r3, [pc, #96]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f20:	4914      	ldr	r1, [pc, #80]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f44:	490b      	ldr	r1, [pc, #44]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00f      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f68:	4902      	ldr	r1, [pc, #8]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f70:	e002      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f84:	4b8a      	ldr	r3, [pc, #552]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	4986      	ldr	r1, [pc, #536]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fa8:	4b81      	ldr	r3, [pc, #516]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb8:	497d      	ldr	r1, [pc, #500]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d006      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80d6 	beq.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fd4:	4b76      	ldr	r3, [pc, #472]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a75      	ldr	r2, [pc, #468]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fe f8a2 	bl	8001128 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fe8:	f7fe f89e 	bl	8001128 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e195      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d021      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11d      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800301a:	4b65      	ldr	r3, [pc, #404]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003028:	4b61      	ldr	r3, [pc, #388]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302e:	0e1b      	lsrs	r3, r3, #24
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	019a      	lsls	r2, r3, #6
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	4958      	ldr	r1, [pc, #352]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02e      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003080:	d129      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003082:	4b4b      	ldr	r3, [pc, #300]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003090:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003096:	0f1b      	lsrs	r3, r3, #28
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	019a      	lsls	r2, r3, #6
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	071b      	lsls	r3, r3, #28
 80030b6:	493e      	ldr	r1, [pc, #248]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030be:	4b3c      	ldr	r3, [pc, #240]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c4:	f023 021f 	bic.w	r2, r3, #31
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4938      	ldr	r1, [pc, #224]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01d      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030e2:	4b33      	ldr	r3, [pc, #204]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030e8:	0e1b      	lsrs	r3, r3, #24
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030f0:	4b2f      	ldr	r3, [pc, #188]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f6:	0f1b      	lsrs	r3, r3, #28
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	019a      	lsls	r2, r3, #6
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	4926      	ldr	r1, [pc, #152]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	019a      	lsls	r2, r3, #6
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	491a      	ldr	r1, [pc, #104]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800314e:	4b18      	ldr	r3, [pc, #96]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315a:	f7fd ffe5 	bl	8001128 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003162:	f7fd ffe1 	bl	8001128 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	@ 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0d8      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003174:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	f040 80ce 	bne.w	8003324 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fd ffc8 	bl	8001128 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800319a:	e00b      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800319c:	f7fd ffc4 	bl	8001128 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d904      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0bb      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031c0:	d0ec      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02e      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d12a      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ea:	4b51      	ldr	r3, [pc, #324]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	0f1b      	lsrs	r3, r3, #28
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	019a      	lsls	r2, r3, #6
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	4944      	ldr	r1, [pc, #272]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003226:	4b42      	ldr	r3, [pc, #264]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800322c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	493d      	ldr	r1, [pc, #244]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003254:	d11d      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003256:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003264:	4b32      	ldr	r3, [pc, #200]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	0f1b      	lsrs	r3, r3, #28
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	019a      	lsls	r2, r3, #6
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	4929      	ldr	r1, [pc, #164]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	0e1b      	lsrs	r3, r3, #24
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	019a      	lsls	r2, r3, #6
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	431a      	orrs	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	071b      	lsls	r3, r3, #28
 80032d2:	4917      	ldr	r1, [pc, #92]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	4911      	ldr	r1, [pc, #68]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fd ff14 	bl	8001128 <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003304:	f7fd ff10 	bl	8001128 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e007      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800331e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003322:	d1ef      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e049      	b.n	80033da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f841 	bl	80033e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f000 f9e8 	bl	8003748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e054      	b.n	80034ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a26      	ldr	r2, [pc, #152]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	d01d      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a22      	ldr	r2, [pc, #136]	@ (80034cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a21      	ldr	r2, [pc, #132]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1f      	ldr	r2, [pc, #124]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <HAL_TIM_Base_Start_IT+0xe4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1b      	ldr	r2, [pc, #108]	@ (80034e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d115      	bne.n	80034a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d015      	beq.n	80034b6 <HAL_TIM_Base_Start_IT+0xbe>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003490:	d011      	beq.n	80034b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	e008      	b.n	80034b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e000      	b.n	80034b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40010400 	.word	0x40010400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40001800 	.word	0x40001800
 80034e4:	00010007 	.word	0x00010007

080034e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d020      	beq.n	800354c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01b      	beq.n	800354c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0202 	mvn.w	r2, #2
 800351c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8e9 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8db 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8ec 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d020      	beq.n	8003598 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0204 	mvn.w	r2, #4
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8c3 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8b5 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8c6 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d020      	beq.n	80035e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0208 	mvn.w	r2, #8
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f89d 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f88f 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8a0 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d020      	beq.n	8003630 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f877 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f869 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f87a 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0201 	mvn.w	r2, #1
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fa5e 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00c      	beq.n	8003682 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f913 	bl	80038a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f90b 	bl	80038bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f834 	bl	8003732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0220 	mvn.w	r2, #32
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8d3 	bl	8003894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a43      	ldr	r2, [pc, #268]	@ (8003868 <TIM_Base_SetConfig+0x120>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003766:	d00f      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a40      	ldr	r2, [pc, #256]	@ (800386c <TIM_Base_SetConfig+0x124>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00b      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3f      	ldr	r2, [pc, #252]	@ (8003870 <TIM_Base_SetConfig+0x128>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3e      	ldr	r2, [pc, #248]	@ (8003874 <TIM_Base_SetConfig+0x12c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3d      	ldr	r2, [pc, #244]	@ (8003878 <TIM_Base_SetConfig+0x130>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a32      	ldr	r2, [pc, #200]	@ (8003868 <TIM_Base_SetConfig+0x120>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d027      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2f      	ldr	r2, [pc, #188]	@ (800386c <TIM_Base_SetConfig+0x124>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d023      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003870 <TIM_Base_SetConfig+0x128>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01f      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003874 <TIM_Base_SetConfig+0x12c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <TIM_Base_SetConfig+0x130>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d017      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	@ (800387c <TIM_Base_SetConfig+0x134>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003880 <TIM_Base_SetConfig+0x138>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a29      	ldr	r2, [pc, #164]	@ (8003884 <TIM_Base_SetConfig+0x13c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a28      	ldr	r2, [pc, #160]	@ (8003888 <TIM_Base_SetConfig+0x140>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a27      	ldr	r2, [pc, #156]	@ (800388c <TIM_Base_SetConfig+0x144>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a26      	ldr	r2, [pc, #152]	@ (8003890 <TIM_Base_SetConfig+0x148>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d108      	bne.n	800380c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a0e      	ldr	r2, [pc, #56]	@ (8003868 <TIM_Base_SetConfig+0x120>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_Base_SetConfig+0xf2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a10      	ldr	r2, [pc, #64]	@ (8003878 <TIM_Base_SetConfig+0x130>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d103      	bne.n	8003842 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f043 0204 	orr.w	r2, r3, #4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	601a      	str	r2, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40010000 	.word	0x40010000
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40000c00 	.word	0x40000c00
 8003878:	40010400 	.word	0x40010400
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800
 8003888:	40001800 	.word	0x40001800
 800388c:	40001c00 	.word	0x40001c00
 8003890:	40002000 	.word	0x40002000

08003894 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e040      	b.n	8003964 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fa04 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	@ 0x24
 80038fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fb16 	bl	8003f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8af 	bl	8003a80 <UART_SetConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e01b      	b.n	8003964 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800393a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800394a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb95 	bl	800408c <UART_CheckIdleState>
 8003962:	4603      	mov	r3, r0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	@ 0x28
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003980:	2b20      	cmp	r3, #32
 8003982:	d177      	bne.n	8003a74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Transmit+0x24>
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e070      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2221      	movs	r2, #33	@ 0x21
 80039a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a2:	f7fd fbc1 	bl	8001128 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d108      	bne.n	80039d4 <HAL_UART_Transmit+0x68>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	e003      	b.n	80039dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039dc:	e02f      	b.n	8003a3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	@ 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fbf7 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e03b      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	3302      	adds	r3, #2
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e007      	b.n	8003a2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1c9      	bne.n	80039de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2140      	movs	r1, #64	@ 0x40
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fbc1 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e005      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4ba6      	ldr	r3, [pc, #664]	@ (8003d44 <UART_SetConfig+0x2c4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a94      	ldr	r2, [pc, #592]	@ (8003d48 <UART_SetConfig+0x2c8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d120      	bne.n	8003b3e <UART_SetConfig+0xbe>
 8003afc:	4b93      	ldr	r3, [pc, #588]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d816      	bhi.n	8003b38 <UART_SetConfig+0xb8>
 8003b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <UART_SetConfig+0x90>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b2d 	.word	0x08003b2d
 8003b18:	08003b27 	.word	0x08003b27
 8003b1c:	08003b33 	.word	0x08003b33
 8003b20:	2301      	movs	r3, #1
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e150      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b26:	2302      	movs	r3, #2
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e14d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e14a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b32:	2308      	movs	r3, #8
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e147      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e144      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a83      	ldr	r2, [pc, #524]	@ (8003d50 <UART_SetConfig+0x2d0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d132      	bne.n	8003bae <UART_SetConfig+0x12e>
 8003b48:	4b80      	ldr	r3, [pc, #512]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d828      	bhi.n	8003ba8 <UART_SetConfig+0x128>
 8003b56:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <UART_SetConfig+0xdc>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003ba9 	.word	0x08003ba9
 8003b64:	08003ba9 	.word	0x08003ba9
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003b9d 	.word	0x08003b9d
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003b97 	.word	0x08003b97
 8003b80:	08003ba9 	.word	0x08003ba9
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003ba9 	.word	0x08003ba9
 8003b8c:	08003ba3 	.word	0x08003ba3
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e118      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b96:	2302      	movs	r3, #2
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e115      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e112      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e10f      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e10c      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a68      	ldr	r2, [pc, #416]	@ (8003d54 <UART_SetConfig+0x2d4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d120      	bne.n	8003bfa <UART_SetConfig+0x17a>
 8003bb8:	4b64      	ldr	r3, [pc, #400]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bc2:	2b30      	cmp	r3, #48	@ 0x30
 8003bc4:	d013      	beq.n	8003bee <UART_SetConfig+0x16e>
 8003bc6:	2b30      	cmp	r3, #48	@ 0x30
 8003bc8:	d814      	bhi.n	8003bf4 <UART_SetConfig+0x174>
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d009      	beq.n	8003be2 <UART_SetConfig+0x162>
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d810      	bhi.n	8003bf4 <UART_SetConfig+0x174>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x15c>
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d006      	beq.n	8003be8 <UART_SetConfig+0x168>
 8003bda:	e00b      	b.n	8003bf4 <UART_SetConfig+0x174>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e0f2      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003be2:	2302      	movs	r3, #2
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e0ef      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003be8:	2304      	movs	r3, #4
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0ec      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e0e9      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0e6      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a56      	ldr	r2, [pc, #344]	@ (8003d58 <UART_SetConfig+0x2d8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d120      	bne.n	8003c46 <UART_SetConfig+0x1c6>
 8003c04:	4b51      	ldr	r3, [pc, #324]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c10:	d013      	beq.n	8003c3a <UART_SetConfig+0x1ba>
 8003c12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c14:	d814      	bhi.n	8003c40 <UART_SetConfig+0x1c0>
 8003c16:	2b80      	cmp	r3, #128	@ 0x80
 8003c18:	d009      	beq.n	8003c2e <UART_SetConfig+0x1ae>
 8003c1a:	2b80      	cmp	r3, #128	@ 0x80
 8003c1c:	d810      	bhi.n	8003c40 <UART_SetConfig+0x1c0>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x1a8>
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	d006      	beq.n	8003c34 <UART_SetConfig+0x1b4>
 8003c26:	e00b      	b.n	8003c40 <UART_SetConfig+0x1c0>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e0cc      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e0c9      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c34:	2304      	movs	r3, #4
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0c6      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e0c3      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c40:	2310      	movs	r3, #16
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e0c0      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a44      	ldr	r2, [pc, #272]	@ (8003d5c <UART_SetConfig+0x2dc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d125      	bne.n	8003c9c <UART_SetConfig+0x21c>
 8003c50:	4b3e      	ldr	r3, [pc, #248]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5e:	d017      	beq.n	8003c90 <UART_SetConfig+0x210>
 8003c60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c64:	d817      	bhi.n	8003c96 <UART_SetConfig+0x216>
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c6a:	d00b      	beq.n	8003c84 <UART_SetConfig+0x204>
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c70:	d811      	bhi.n	8003c96 <UART_SetConfig+0x216>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <UART_SetConfig+0x1fe>
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7a:	d006      	beq.n	8003c8a <UART_SetConfig+0x20a>
 8003c7c:	e00b      	b.n	8003c96 <UART_SetConfig+0x216>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e0a1      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c84:	2302      	movs	r3, #2
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e09e      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e09b      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c90:	2308      	movs	r3, #8
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e098      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c96:	2310      	movs	r3, #16
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e095      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d60 <UART_SetConfig+0x2e0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d125      	bne.n	8003cf2 <UART_SetConfig+0x272>
 8003ca6:	4b29      	ldr	r3, [pc, #164]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cb4:	d017      	beq.n	8003ce6 <UART_SetConfig+0x266>
 8003cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cba:	d817      	bhi.n	8003cec <UART_SetConfig+0x26c>
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc0:	d00b      	beq.n	8003cda <UART_SetConfig+0x25a>
 8003cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc6:	d811      	bhi.n	8003cec <UART_SetConfig+0x26c>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <UART_SetConfig+0x254>
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd0:	d006      	beq.n	8003ce0 <UART_SetConfig+0x260>
 8003cd2:	e00b      	b.n	8003cec <UART_SetConfig+0x26c>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e076      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e073      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e070      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e06d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cec:	2310      	movs	r3, #16
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e06a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <UART_SetConfig+0x2e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d138      	bne.n	8003d6e <UART_SetConfig+0x2ee>
 8003cfc:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d0a:	d017      	beq.n	8003d3c <UART_SetConfig+0x2bc>
 8003d0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d10:	d82a      	bhi.n	8003d68 <UART_SetConfig+0x2e8>
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d16:	d00b      	beq.n	8003d30 <UART_SetConfig+0x2b0>
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1c:	d824      	bhi.n	8003d68 <UART_SetConfig+0x2e8>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <UART_SetConfig+0x2aa>
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d26:	d006      	beq.n	8003d36 <UART_SetConfig+0x2b6>
 8003d28:	e01e      	b.n	8003d68 <UART_SetConfig+0x2e8>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e04b      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d30:	2302      	movs	r3, #2
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e048      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d36:	2304      	movs	r3, #4
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e045      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e042      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d42:	bf00      	nop
 8003d44:	efff69f3 	.word	0xefff69f3
 8003d48:	40011000 	.word	0x40011000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40004400 	.word	0x40004400
 8003d54:	40004800 	.word	0x40004800
 8003d58:	40004c00 	.word	0x40004c00
 8003d5c:	40005000 	.word	0x40005000
 8003d60:	40011400 	.word	0x40011400
 8003d64:	40007800 	.word	0x40007800
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e02c      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a72      	ldr	r2, [pc, #456]	@ (8003f3c <UART_SetConfig+0x4bc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d125      	bne.n	8003dc4 <UART_SetConfig+0x344>
 8003d78:	4b71      	ldr	r3, [pc, #452]	@ (8003f40 <UART_SetConfig+0x4c0>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d86:	d017      	beq.n	8003db8 <UART_SetConfig+0x338>
 8003d88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d8c:	d817      	bhi.n	8003dbe <UART_SetConfig+0x33e>
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d92:	d00b      	beq.n	8003dac <UART_SetConfig+0x32c>
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d98:	d811      	bhi.n	8003dbe <UART_SetConfig+0x33e>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <UART_SetConfig+0x326>
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003da2:	d006      	beq.n	8003db2 <UART_SetConfig+0x332>
 8003da4:	e00b      	b.n	8003dbe <UART_SetConfig+0x33e>
 8003da6:	2300      	movs	r3, #0
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e00d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dac:	2302      	movs	r3, #2
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e00a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003db2:	2304      	movs	r3, #4
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e007      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003db8:	2308      	movs	r3, #8
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e004      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e001      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd0:	d15b      	bne.n	8003e8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d828      	bhi.n	8003e2a <UART_SetConfig+0x3aa>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0x360>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe fe14 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003e08:	61b8      	str	r0, [r7, #24]
        break;
 8003e0a:	e013      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe fe24 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4b      	ldr	r3, [pc, #300]	@ (8003f44 <UART_SetConfig+0x4c4>)
 8003e16:	61bb      	str	r3, [r7, #24]
        break;
 8003e18:	e00c      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe fcf7 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8003e1e:	61b8      	str	r0, [r7, #24]
        break;
 8003e20:	e008      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e26:	61bb      	str	r3, [r7, #24]
        break;
 8003e28:	e004      	b.n	8003e34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	77bb      	strb	r3, [r7, #30]
        break;
 8003e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d074      	beq.n	8003f24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	005a      	lsls	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	d916      	bls.n	8003e84 <UART_SetConfig+0x404>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5c:	d212      	bcs.n	8003e84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f023 030f 	bic.w	r3, r3, #15
 8003e66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	89fa      	ldrh	r2, [r7, #14]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e04f      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	77bb      	strb	r3, [r7, #30]
 8003e88:	e04c      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d828      	bhi.n	8003ee2 <UART_SetConfig+0x462>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <UART_SetConfig+0x418>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe fdb8 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61b8      	str	r0, [r7, #24]
        break;
 8003ec2:	e013      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe fdc8 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <UART_SetConfig+0x4c4>)
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e00c      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7fe fc9b 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8003ed6:	61b8      	str	r0, [r7, #24]
        break;
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e004      	b.n	8003eec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eea:	bf00      	nop
    }

    if (pclk != 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085a      	lsrs	r2, r3, #1
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d909      	bls.n	8003f20 <UART_SetConfig+0x4a0>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f12:	d205      	bcs.n	8003f20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e001      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40007c00 	.word	0x40007c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004046:	d10a      	bne.n	800405e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b098      	sub	sp, #96	@ 0x60
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800409c:	f7fd f844 	bl	8001128 <HAL_GetTick>
 80040a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d12e      	bne.n	800410e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f88c 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d021      	beq.n	800410e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040de:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e062      	b.n	80041d4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d149      	bne.n	80041b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f856 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03c      	beq.n	80041b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	623b      	str	r3, [r7, #32]
   return(result);
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004154:	633b      	str	r3, [r7, #48]	@ 0x30
 8004156:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800415a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004188:	61fa      	str	r2, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	617b      	str	r3, [r7, #20]
   return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e011      	b.n	80041d4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3758      	adds	r7, #88	@ 0x58
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ec:	e04f      	b.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d04b      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fc ff97 	bl	8001128 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <UART_WaitOnFlagUntilTimeout+0x30>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e04e      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d037      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b80      	cmp	r3, #128	@ 0x80
 8004222:	d034      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b40      	cmp	r3, #64	@ 0x40
 8004228:	d031      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b08      	cmp	r3, #8
 8004236:	d110      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2208      	movs	r2, #8
 800423e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f838 	bl	80042b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2208      	movs	r2, #8
 800424a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e029      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004268:	d111      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f81e 	bl	80042b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e00f      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d0a0      	beq.n	80041ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b095      	sub	sp, #84	@ 0x54
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e6      	bne.n	80042be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3308      	adds	r3, #8
 80042f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3308      	adds	r3, #8
 800430e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004310:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004312:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e5      	bne.n	80042f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	2b01      	cmp	r3, #1
 800432a:	d118      	bne.n	800435e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	60bb      	str	r3, [r7, #8]
   return(result);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 0310 	bic.w	r3, r3, #16
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6979      	ldr	r1, [r7, #20]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	613b      	str	r3, [r7, #16]
   return(result);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e6      	bne.n	800432c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004372:	bf00      	nop
 8004374:	3754      	adds	r7, #84	@ 0x54
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004380:	b084      	sub	sp, #16
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	f107 001c 	add.w	r0, r7, #28
 800438e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004392:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004396:	2b01      	cmp	r3, #1
 8004398:	d121      	bne.n	80043de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <USB_CoreInit+0xb0>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa92 	bl	80048fc <USB_CoreReset>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e010      	b.n	8004400 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa86 	bl	80048fc <USB_CoreReset>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004400:	7fbb      	ldrb	r3, [r7, #30]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10b      	bne.n	800441e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f043 0206 	orr.w	r2, r3, #6
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800442a:	b004      	add	sp, #16
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	ffbdffbf 	.word	0xffbdffbf

08004434 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f023 0201 	bic.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d115      	bne.n	80044a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004484:	200a      	movs	r0, #10
 8004486:	f7fc fe5b 	bl	8001140 <HAL_Delay>
      ms += 10U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	330a      	adds	r3, #10
 800448e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa25 	bl	80048e0 <USB_GetMode>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d01e      	beq.n	80044da <USB_SetCurrentMode+0x84>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2bc7      	cmp	r3, #199	@ 0xc7
 80044a0:	d9f0      	bls.n	8004484 <USB_SetCurrentMode+0x2e>
 80044a2:	e01a      	b.n	80044da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d115      	bne.n	80044d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044b6:	200a      	movs	r0, #10
 80044b8:	f7fc fe42 	bl	8001140 <HAL_Delay>
      ms += 10U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	330a      	adds	r3, #10
 80044c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa0c 	bl	80048e0 <USB_GetMode>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <USB_SetCurrentMode+0x84>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80044d2:	d9f0      	bls.n	80044b6 <USB_SetCurrentMode+0x60>
 80044d4:	e001      	b.n	80044da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e005      	b.n	80044e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80044de:	d101      	bne.n	80044e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044f0:	b084      	sub	sp, #16
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e009      	b.n	8004524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	3340      	adds	r3, #64	@ 0x40
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	2200      	movs	r2, #0
 800451c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b0e      	cmp	r3, #14
 8004528:	d9f2      	bls.n	8004510 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800452a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11c      	bne.n	800456c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004540:	f043 0302 	orr.w	r3, r3, #2
 8004544:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e005      	b.n	8004578 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004584:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10d      	bne.n	80045a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800458c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004594:	2100      	movs	r1, #0
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f968 	bl	800486c <USB_SetDevSpeed>
 800459c:	e008      	b.n	80045b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800459e:	2101      	movs	r1, #1
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f963 	bl	800486c <USB_SetDevSpeed>
 80045a6:	e003      	b.n	80045b0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045a8:	2103      	movs	r1, #3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f95e 	bl	800486c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045b0:	2110      	movs	r1, #16
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8fa 	bl	80047ac <USB_FlushTxFifo>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f924 	bl	8004810 <USB_FlushRxFifo>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e4:	461a      	mov	r2, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f0:	461a      	mov	r2, r3
 80045f2:	2300      	movs	r3, #0
 80045f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e043      	b.n	8004684 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800460e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004612:	d118      	bne.n	8004646 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004626:	461a      	mov	r2, r3
 8004628:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e013      	b.n	8004658 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e008      	b.n	8004658 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004664:	461a      	mov	r2, r3
 8004666:	2300      	movs	r3, #0
 8004668:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004676:	461a      	mov	r2, r3
 8004678:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800467c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3301      	adds	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004688:	461a      	mov	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4293      	cmp	r3, r2
 800468e:	d3b5      	bcc.n	80045fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	e043      	b.n	800471e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ac:	d118      	bne.n	80046e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e013      	b.n	80046f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d6:	461a      	mov	r2, r3
 80046d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e008      	b.n	80046f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ec:	461a      	mov	r2, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fe:	461a      	mov	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004710:	461a      	mov	r2, r3
 8004712:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004716:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	3301      	adds	r3, #1
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004722:	461a      	mov	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4293      	cmp	r3, r2
 8004728:	d3b5      	bcc.n	8004696 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800473c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800474a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800474c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <USB_DevInit+0x2b4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800476c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f043 0208 	orr.w	r2, r3, #8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004780:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <USB_DevInit+0x2b8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	803c3800 	.word	0x803c3800
 80047a8:	40000004 	.word	0x40000004

080047ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047c6:	d901      	bls.n	80047cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e01b      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	daf2      	bge.n	80047ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	019b      	lsls	r3, r3, #6
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047f0:	d901      	bls.n	80047f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e006      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d0f0      	beq.n	80047e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004828:	d901      	bls.n	800482e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e018      	b.n	8004860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	daf2      	bge.n	800481c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2210      	movs	r2, #16
 800483e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800484c:	d901      	bls.n	8004852 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e006      	b.n	8004860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b10      	cmp	r3, #16
 800485c:	d0f0      	beq.n	8004840 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048b8:	f023 0303 	bic.w	r3, r3, #3
 80048bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0301 	and.w	r3, r3, #1
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004914:	d901      	bls.n	800491a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e022      	b.n	8004960 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	daf2      	bge.n	8004908 <USB_CoreReset+0xc>

  count = 10U;
 8004922:	230a      	movs	r3, #10
 8004924:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004926:	e002      	b.n	800492e <USB_CoreReset+0x32>
  {
    count--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f9      	bne.n	8004928 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f043 0201 	orr.w	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800494c:	d901      	bls.n	8004952 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e006      	b.n	8004960 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d0f0      	beq.n	8004940 <USB_CoreReset+0x44>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	60bb      	str	r3, [r7, #8]
  return(result);
 8004988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	607b      	str	r3, [r7, #4]
  return(result);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	603b      	str	r3, [r7, #0]
  return(result);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <osKernelInitialize+0x3a>
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <osKernelInitialize+0x64>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d103      	bne.n	80049b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80049ae:	f06f 0305 	mvn.w	r3, #5
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e00c      	b.n	80049d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049b6:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <osKernelInitialize+0x64>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <osKernelInitialize+0x64>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295
 80049ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000874 	.word	0x20000874

080049e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ea:	f3ef 8305 	mrs	r3, IPSR
 80049ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80049f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f6:	f3ef 8310 	mrs	r3, PRIMASK
 80049fa:	607b      	str	r3, [r7, #4]
  return(result);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a02:	f3ef 8311 	mrs	r3, BASEPRI
 8004a06:	603b      	str	r3, [r7, #0]
  return(result);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <osKernelStart+0x3a>
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a4c <osKernelStart+0x68>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d103      	bne.n	8004a1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004a16:	f06f 0305 	mvn.w	r3, #5
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e010      	b.n	8004a40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <osKernelStart+0x68>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d109      	bne.n	8004a3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a26:	f7ff ffa1 	bl	800496c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a2a:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <osKernelStart+0x68>)
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a30:	f001 fd30 	bl	8006494 <vTaskStartScheduler>
      stat = osOK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e002      	b.n	8004a40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000874 	.word	0x20000874

08004a50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b090      	sub	sp, #64	@ 0x40
 8004a54:	af04      	add	r7, sp, #16
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a60:	f3ef 8305 	mrs	r3, IPSR
 8004a64:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 808f 	bne.w	8004b8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d105      	bne.n	8004a86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a7e:	617b      	str	r3, [r7, #20]
  return(result);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <osThreadNew+0x3e>
 8004a86:	4b44      	ldr	r3, [pc, #272]	@ (8004b98 <osThreadNew+0x148>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d07e      	beq.n	8004b8c <osThreadNew+0x13c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d07b      	beq.n	8004b8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a98:	2318      	movs	r3, #24
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d045      	beq.n	8004b38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <osThreadNew+0x6a>
        name = attr->name;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <osThreadNew+0x90>
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	2b38      	cmp	r3, #56	@ 0x38
 8004ad2:	d805      	bhi.n	8004ae0 <osThreadNew+0x90>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <osThreadNew+0x94>
        return (NULL);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e054      	b.n	8004b8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <osThreadNew+0xca>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b02:	d90a      	bls.n	8004b1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <osThreadNew+0xca>
        mem = 1;
 8004b14:	2301      	movs	r3, #1
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	e010      	b.n	8004b3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <osThreadNew+0xec>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <osThreadNew+0xec>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <osThreadNew+0xec>
          mem = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	e001      	b.n	8004b3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d110      	bne.n	8004b64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b4a:	9202      	str	r2, [sp, #8]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f001 fad5 	bl	8006108 <xTaskCreateStatic>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	e013      	b.n	8004b8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	f107 0310 	add.w	r3, r7, #16
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f001 fb29 	bl	80061d4 <xTaskCreate>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d001      	beq.n	8004b8c <osThreadNew+0x13c>
          hTask = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b8c:	693b      	ldr	r3, [r7, #16]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3730      	adds	r7, #48	@ 0x30
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000874 	.word	0x20000874

08004b9c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	@ 0x30
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bac:	f3ef 8305 	mrs	r3, IPSR
 8004bb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f040 8086 	bne.w	8004cc6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bba:	f3ef 8310 	mrs	r3, PRIMASK
 8004bbe:	617b      	str	r3, [r7, #20]
  return(result);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bca:	613b      	str	r3, [r7, #16]
  return(result);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <osSemaphoreNew+0x3e>
 8004bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd0 <osSemaphoreNew+0x134>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d075      	beq.n	8004cc6 <osSemaphoreNew+0x12a>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d072      	beq.n	8004cc6 <osSemaphoreNew+0x12a>
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d86e      	bhi.n	8004cc6 <osSemaphoreNew+0x12a>
    mem = -1;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <osSemaphoreNew+0x6e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c02:	d902      	bls.n	8004c0a <osSemaphoreNew+0x6e>
        mem = 1;
 8004c04:	2301      	movs	r3, #1
 8004c06:	623b      	str	r3, [r7, #32]
 8004c08:	e00c      	b.n	8004c24 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <osSemaphoreNew+0x88>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <osSemaphoreNew+0x88>
          mem = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	e001      	b.n	8004c24 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d04c      	beq.n	8004cc6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d128      	bne.n	8004c84 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10a      	bne.n	8004c4e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	9200      	str	r2, [sp, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2100      	movs	r1, #0
 8004c44:	2001      	movs	r0, #1
 8004c46:	f000 fa57 	bl	80050f8 <xQueueGenericCreateStatic>
 8004c4a:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c4c:	e005      	b.n	8004c5a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004c4e:	2203      	movs	r2, #3
 8004c50:	2100      	movs	r1, #0
 8004c52:	2001      	movs	r0, #1
 8004c54:	f000 fad7 	bl	8005206 <xQueueGenericCreate>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d022      	beq.n	8004ca6 <osSemaphoreNew+0x10a>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01f      	beq.n	8004ca6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004c66:	2300      	movs	r3, #0
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c6e:	f000 fba7 	bl	80053c0 <xQueueGenericSend>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d016      	beq.n	8004ca6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004c78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c7a:	f001 f86f 	bl	8005d5c <vQueueDelete>
            hSemaphore = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c82:	e010      	b.n	8004ca6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d108      	bne.n	8004c9c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fb1d 	bl	80052d2 <xQueueCreateCountingSemaphoreStatic>
 8004c98:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c9a:	e004      	b.n	8004ca6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fb54 	bl	800534c <xQueueCreateCountingSemaphore>
 8004ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <osSemaphoreNew+0x11e>
          name = attr->name;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e001      	b.n	8004cbe <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004cbe:	69f9      	ldr	r1, [r7, #28]
 8004cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cc2:	f001 f999 	bl	8005ff8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3728      	adds	r7, #40	@ 0x28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000874 	.word	0x20000874

08004cd4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004cec:	f06f 0303 	mvn.w	r3, #3
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e04b      	b.n	8004d8c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf4:	f3ef 8305 	mrs	r3, IPSR
 8004cf8:	617b      	str	r3, [r7, #20]
  return(result);
 8004cfa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10f      	bne.n	8004d20 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8310 	mrs	r3, PRIMASK
 8004d04:	613b      	str	r3, [r7, #16]
  return(result);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d026      	beq.n	8004d66 <osSemaphoreAcquire+0x92>
 8004d18:	4b1f      	ldr	r3, [pc, #124]	@ (8004d98 <osSemaphoreAcquire+0xc4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d122      	bne.n	8004d66 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004d26:	f06f 0303 	mvn.w	r3, #3
 8004d2a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d2c:	e02d      	b.n	8004d8a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004d32:	f107 0308 	add.w	r3, r7, #8
 8004d36:	461a      	mov	r2, r3
 8004d38:	2100      	movs	r1, #0
 8004d3a:	69b8      	ldr	r0, [r7, #24]
 8004d3c:	f000 ff86 	bl	8005c4c <xQueueReceiveFromISR>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d003      	beq.n	8004d4e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004d46:	f06f 0302 	mvn.w	r3, #2
 8004d4a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d4c:	e01d      	b.n	8004d8a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01a      	beq.n	8004d8a <osSemaphoreAcquire+0xb6>
 8004d54:	4b11      	ldr	r3, [pc, #68]	@ (8004d9c <osSemaphoreAcquire+0xc8>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004d64:	e011      	b.n	8004d8a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	69b8      	ldr	r0, [r7, #24]
 8004d6a:	f000 fe57 	bl	8005a1c <xQueueSemaphoreTake>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d00b      	beq.n	8004d8c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004d7a:	f06f 0301 	mvn.w	r3, #1
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e004      	b.n	8004d8c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004d82:	f06f 0302 	mvn.w	r3, #2
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e000      	b.n	8004d8c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004d8a:	bf00      	nop
      }
    }
  }

  return (stat);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000874 	.word	0x20000874
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004db6:	f06f 0303 	mvn.w	r3, #3
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e03e      	b.n	8004e3c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dbe:	f3ef 8305 	mrs	r3, IPSR
 8004dc2:	617b      	str	r3, [r7, #20]
  return(result);
 8004dc4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10f      	bne.n	8004dea <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dca:	f3ef 8310 	mrs	r3, PRIMASK
 8004dce:	613b      	str	r3, [r7, #16]
  return(result);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01e      	beq.n	8004e20 <osSemaphoreRelease+0x80>
 8004de2:	4b19      	ldr	r3, [pc, #100]	@ (8004e48 <osSemaphoreRelease+0xa8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d11a      	bne.n	8004e20 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4619      	mov	r1, r3
 8004df4:	69b8      	ldr	r0, [r7, #24]
 8004df6:	f000 fc90 	bl	800571a <xQueueGiveFromISR>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d003      	beq.n	8004e08 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004e00:	f06f 0302 	mvn.w	r3, #2
 8004e04:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e06:	e018      	b.n	8004e3a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <osSemaphoreRelease+0x9a>
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e4c <osSemaphoreRelease+0xac>)
 8004e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e1e:	e00c      	b.n	8004e3a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e20:	2300      	movs	r3, #0
 8004e22:	2200      	movs	r2, #0
 8004e24:	2100      	movs	r1, #0
 8004e26:	69b8      	ldr	r0, [r7, #24]
 8004e28:	f000 faca 	bl	80053c0 <xQueueGenericSend>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d004      	beq.n	8004e3c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004e32:	f06f 0302 	mvn.w	r3, #2
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	e000      	b.n	8004e3c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e3a:	bf00      	nop
    }
  }

  return (stat);
 8004e3c:	69fb      	ldr	r3, [r7, #28]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000874 	.word	0x20000874
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a07      	ldr	r2, [pc, #28]	@ (8004e7c <vApplicationGetIdleTaskMemory+0x2c>)
 8004e60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a06      	ldr	r2, [pc, #24]	@ (8004e80 <vApplicationGetIdleTaskMemory+0x30>)
 8004e66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2280      	movs	r2, #128	@ 0x80
 8004e6c:	601a      	str	r2, [r3, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000878 	.word	0x20000878
 8004e80:	20000920 	.word	0x20000920

08004e84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a07      	ldr	r2, [pc, #28]	@ (8004eb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4a06      	ldr	r2, [pc, #24]	@ (8004eb4 <vApplicationGetTimerTaskMemory+0x30>)
 8004e9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000b20 	.word	0x20000b20
 8004eb4:	20000bc8 	.word	0x20000bc8

08004eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f103 0208 	add.w	r2, r3, #8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f103 0208 	add.w	r2, r3, #8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f103 0208 	add.w	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	601a      	str	r2, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d103      	bne.n	8004f7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e00c      	b.n	8004f94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e002      	b.n	8004f88 <vListInsert+0x2e>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d2f6      	bcs.n	8004f82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	601a      	str	r2, [r3, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6892      	ldr	r2, [r2, #8]
 8004fe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6852      	ldr	r2, [r2, #4]
 8004fec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d103      	bne.n	8005000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10d      	bne.n	8005050 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	b672      	cpsid	i
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	b662      	cpsie	i
 8005048:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	e7fd      	b.n	800504c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005050:	f002 fcfc 	bl	8007a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	441a      	add	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005080:	3b01      	subs	r3, #1
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	441a      	add	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	22ff      	movs	r2, #255	@ 0xff
 8005094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	22ff      	movs	r2, #255	@ 0xff
 800509c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d114      	bne.n	80050d0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01a      	beq.n	80050e4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3310      	adds	r3, #16
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 fc9a 	bl	80069ec <xTaskRemoveFromEventList>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d012      	beq.n	80050e4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <xQueueGenericReset+0xd4>)
 80050c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	e009      	b.n	80050e4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3310      	adds	r3, #16
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff feef 	bl	8004eb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3324      	adds	r3, #36	@ 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff feea 	bl	8004eb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050e4:	f002 fce8 	bl	8007ab8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050e8:	2301      	movs	r3, #1
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08e      	sub	sp, #56	@ 0x38
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10d      	bne.n	8005128 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	b672      	cpsid	i
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	b662      	cpsie	i
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	e7fd      	b.n	8005124 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10d      	bne.n	800514a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	b672      	cpsid	i
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	b662      	cpsie	i
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <xQueueGenericCreateStatic+0x5e>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <xQueueGenericCreateStatic+0x62>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <xQueueGenericCreateStatic+0x64>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005164:	b672      	cpsid	i
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	b662      	cpsie	i
 8005174:	623b      	str	r3, [r7, #32]
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <xQueueGenericCreateStatic+0x90>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <xQueueGenericCreateStatic+0x94>
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <xQueueGenericCreateStatic+0x96>
 800518c:	2300      	movs	r3, #0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10d      	bne.n	80051ae <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	b672      	cpsid	i
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	b662      	cpsie	i
 80051a6:	61fb      	str	r3, [r7, #28]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051ae:	2350      	movs	r3, #80	@ 0x50
 80051b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b50      	cmp	r3, #80	@ 0x50
 80051b6:	d00d      	beq.n	80051d4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	b672      	cpsid	i
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	b662      	cpsie	i
 80051cc:	61bb      	str	r3, [r7, #24]
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f848 	bl	800528c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80051fe:	4618      	mov	r0, r3
 8005200:	3730      	adds	r7, #48	@ 0x30
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005206:	b580      	push	{r7, lr}
 8005208:	b08a      	sub	sp, #40	@ 0x28
 800520a:	af02      	add	r7, sp, #8
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <xQueueGenericCreate+0x30>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	b672      	cpsid	i
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	b662      	cpsie	i
 800522e:	613b      	str	r3, [r7, #16]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e004      	b.n	800524c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3350      	adds	r3, #80	@ 0x50
 8005250:	4618      	mov	r0, r3
 8005252:	f002 fd29 	bl	8007ca8 <pvPortMalloc>
 8005256:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3350      	adds	r3, #80	@ 0x50
 8005266:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f805 	bl	800528c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005282:	69bb      	ldr	r3, [r7, #24]
	}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e002      	b.n	80052ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052ba:	2101      	movs	r1, #1
 80052bc:	69b8      	ldr	r0, [r7, #24]
 80052be:	f7ff feaf 	bl	8005020 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	78fa      	ldrb	r2, [r7, #3]
 80052c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b08a      	sub	sp, #40	@ 0x28
 80052d6:	af02      	add	r7, sp, #8
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10d      	bne.n	8005300 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	b672      	cpsid	i
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	b662      	cpsie	i
 80052f8:	61bb      	str	r3, [r7, #24]
}
 80052fa:	bf00      	nop
 80052fc:	bf00      	nop
 80052fe:	e7fd      	b.n	80052fc <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d90d      	bls.n	8005324 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530c:	b672      	cpsid	i
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	b662      	cpsie	i
 800531c:	617b      	str	r3, [r7, #20]
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005324:	2302      	movs	r3, #2
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff fee2 	bl	80050f8 <xQueueGenericCreateStatic>
 8005334:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005342:	69fb      	ldr	r3, [r7, #28]
	}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005360:	b672      	cpsid	i
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	b662      	cpsie	i
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d90d      	bls.n	800539c <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	b672      	cpsid	i
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	b662      	cpsie	i
 8005394:	60fb      	str	r3, [r7, #12]
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	e7fd      	b.n	8005398 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800539c:	2202      	movs	r2, #2
 800539e:	2100      	movs	r1, #0
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ff30 	bl	8005206 <xQueueGenericCreate>
 80053a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053b4:	697b      	ldr	r3, [r7, #20]
	}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08e      	sub	sp, #56	@ 0x38
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10d      	bne.n	80053f8 <xQueueGenericSend+0x38>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	b672      	cpsid	i
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	b662      	cpsie	i
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <xQueueGenericSend+0x46>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xQueueGenericSend+0x4a>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueGenericSend+0x4c>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10d      	bne.n	800542c <xQueueGenericSend+0x6c>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	b672      	cpsid	i
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	b662      	cpsie	i
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d103      	bne.n	800543a <xQueueGenericSend+0x7a>
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <xQueueGenericSend+0x7e>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <xQueueGenericSend+0x80>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10d      	bne.n	8005460 <xQueueGenericSend+0xa0>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005448:	b672      	cpsid	i
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	b662      	cpsie	i
 8005458:	623b      	str	r3, [r7, #32]
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005460:	f001 fc92 	bl	8006d88 <xTaskGetSchedulerState>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <xQueueGenericSend+0xb0>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <xQueueGenericSend+0xb4>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <xQueueGenericSend+0xb6>
 8005474:	2300      	movs	r3, #0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10d      	bne.n	8005496 <xQueueGenericSend+0xd6>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547e:	b672      	cpsid	i
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	b662      	cpsie	i
 800548e:	61fb      	str	r3, [r7, #28]
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	e7fd      	b.n	8005492 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005496:	f002 fad9 	bl	8007a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <xQueueGenericSend+0xec>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d129      	bne.n	8005500 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054b2:	f000 fc91 	bl	8005dd8 <prvCopyDataToQueue>
 80054b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d010      	beq.n	80054e2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	3324      	adds	r3, #36	@ 0x24
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fa91 	bl	80069ec <xTaskRemoveFromEventList>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054d0:	4b3f      	ldr	r3, [pc, #252]	@ (80055d0 <xQueueGenericSend+0x210>)
 80054d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	e00a      	b.n	80054f8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <xQueueGenericSend+0x210>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054f8:	f002 fade 	bl	8007ab8 <vPortExitCritical>
				return pdPASS;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e063      	b.n	80055c8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005506:	f002 fad7 	bl	8007ab8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800550a:	2300      	movs	r3, #0
 800550c:	e05c      	b.n	80055c8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800550e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005514:	f107 0314 	add.w	r3, r7, #20
 8005518:	4618      	mov	r0, r3
 800551a:	f001 facd 	bl	8006ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005522:	f002 fac9 	bl	8007ab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005526:	f001 f829 	bl	800657c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800552a:	f002 fa8f 	bl	8007a4c <vPortEnterCritical>
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005534:	b25b      	sxtb	r3, r3
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d103      	bne.n	8005544 <xQueueGenericSend+0x184>
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800554a:	b25b      	sxtb	r3, r3
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d103      	bne.n	800555a <xQueueGenericSend+0x19a>
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800555a:	f002 faad 	bl	8007ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800555e:	1d3a      	adds	r2, r7, #4
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f001 fabc 	bl	8006ae4 <xTaskCheckForTimeOut>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d124      	bne.n	80055bc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005574:	f000 fd28 	bl	8005fc8 <prvIsQueueFull>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d018      	beq.n	80055b0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	3310      	adds	r3, #16
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f001 f9da 	bl	8006940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800558c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800558e:	f000 fcb3 	bl	8005ef8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005592:	f001 f801 	bl	8006598 <xTaskResumeAll>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	f47f af7c 	bne.w	8005496 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800559e:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <xQueueGenericSend+0x210>)
 80055a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	e772      	b.n	8005496 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055b2:	f000 fca1 	bl	8005ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b6:	f000 ffef 	bl	8006598 <xTaskResumeAll>
 80055ba:	e76c      	b.n	8005496 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055be:	f000 fc9b 	bl	8005ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055c2:	f000 ffe9 	bl	8006598 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3738      	adds	r7, #56	@ 0x38
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08e      	sub	sp, #56	@ 0x38
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10d      	bne.n	8005608 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <xQueueGenericSendFromISR+0x42>
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueGenericSendFromISR+0x46>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueGenericSendFromISR+0x48>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10d      	bne.n	800563c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	b672      	cpsid	i
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	b662      	cpsie	i
 8005634:	623b      	str	r3, [r7, #32]
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d103      	bne.n	800564a <xQueueGenericSendFromISR+0x76>
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <xQueueGenericSendFromISR+0x7a>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xQueueGenericSendFromISR+0x7c>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	b672      	cpsid	i
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	b662      	cpsie	i
 8005668:	61fb      	str	r3, [r7, #28]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005670:	f002 fad4 	bl	8007c1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005674:	f3ef 8211 	mrs	r2, BASEPRI
 8005678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567c:	b672      	cpsid	i
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	b662      	cpsie	i
 800568c:	61ba      	str	r2, [r7, #24]
 800568e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005690:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <xQueueGenericSendFromISR+0xd2>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d12c      	bne.n	8005700 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056b6:	f000 fb8f 	bl	8005dd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d112      	bne.n	80056ea <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d016      	beq.n	80056fa <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	3324      	adds	r3, #36	@ 0x24
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f98b 	bl	80069ec <xTaskRemoveFromEventList>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00e      	beq.n	80056fa <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e007      	b.n	80056fa <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	3301      	adds	r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	b25a      	sxtb	r2, r3
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056fa:	2301      	movs	r3, #1
 80056fc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80056fe:	e001      	b.n	8005704 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005700:	2300      	movs	r3, #0
 8005702:	637b      	str	r3, [r7, #52]	@ 0x34
 8005704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005706:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800570e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005712:	4618      	mov	r0, r3
 8005714:	3738      	adds	r7, #56	@ 0x38
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b08e      	sub	sp, #56	@ 0x38
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <xQueueGiveFromISR+0x30>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	b672      	cpsid	i
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	b662      	cpsie	i
 8005742:	623b      	str	r3, [r7, #32]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <xQueueGiveFromISR+0x54>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	b672      	cpsid	i
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	b662      	cpsie	i
 8005766:	61fb      	str	r3, [r7, #28]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <xQueueGiveFromISR+0x64>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <xQueueGiveFromISR+0x68>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <xQueueGiveFromISR+0x6a>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10d      	bne.n	80057a4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	b672      	cpsid	i
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	b662      	cpsie	i
 800579c:	61bb      	str	r3, [r7, #24]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057a4:	f002 fa3a 	bl	8007c1c <vPortValidateInterruptPriority>
	__asm volatile
 80057a8:	f3ef 8211 	mrs	r2, BASEPRI
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	b672      	cpsid	i
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	b662      	cpsie	i
 80057c0:	617a      	str	r2, [r7, #20]
 80057c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80057c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d22b      	bcs.n	8005830 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d112      	bne.n	800581a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d016      	beq.n	800582a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	3324      	adds	r3, #36	@ 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f8f3 	bl	80069ec <xTaskRemoveFromEventList>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00e      	beq.n	800582a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e007      	b.n	800582a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800581a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800581e:	3301      	adds	r3, #1
 8005820:	b2db      	uxtb	r3, r3
 8005822:	b25a      	sxtb	r2, r3
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800582a:	2301      	movs	r3, #1
 800582c:	637b      	str	r3, [r7, #52]	@ 0x34
 800582e:	e001      	b.n	8005834 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005830:	2300      	movs	r3, #0
 8005832:	637b      	str	r3, [r7, #52]	@ 0x34
 8005834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005836:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f383 8811 	msr	BASEPRI, r3
}
 800583e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005842:	4618      	mov	r0, r3
 8005844:	3738      	adds	r7, #56	@ 0x38
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	@ 0x30
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10d      	bne.n	8005882 <xQueueReceive+0x36>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	b672      	cpsid	i
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	b662      	cpsie	i
 800587a:	623b      	str	r3, [r7, #32]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <xQueueReceive+0x44>
 8005888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <xQueueReceive+0x48>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <xQueueReceive+0x4a>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <xQueueReceive+0x6a>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589e:	b672      	cpsid	i
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	b662      	cpsie	i
 80058ae:	61fb      	str	r3, [r7, #28]
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058b6:	f001 fa67 	bl	8006d88 <xTaskGetSchedulerState>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d102      	bne.n	80058c6 <xQueueReceive+0x7a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <xQueueReceive+0x7e>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <xQueueReceive+0x80>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <xQueueReceive+0xa0>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	b672      	cpsid	i
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	b662      	cpsie	i
 80058e4:	61bb      	str	r3, [r7, #24]
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058ec:	f002 f8ae 	bl	8007a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01f      	beq.n	800593c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005900:	f000 fad4 	bl	8005eac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	1e5a      	subs	r2, r3, #1
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	3310      	adds	r3, #16
 8005918:	4618      	mov	r0, r3
 800591a:	f001 f867 	bl	80069ec <xTaskRemoveFromEventList>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005924:	4b3c      	ldr	r3, [pc, #240]	@ (8005a18 <xQueueReceive+0x1cc>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005934:	f002 f8c0 	bl	8007ab8 <vPortExitCritical>
				return pdPASS;
 8005938:	2301      	movs	r3, #1
 800593a:	e069      	b.n	8005a10 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005942:	f002 f8b9 	bl	8007ab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005946:	2300      	movs	r3, #0
 8005948:	e062      	b.n	8005a10 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800594a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005950:	f107 0310 	add.w	r3, r7, #16
 8005954:	4618      	mov	r0, r3
 8005956:	f001 f8af 	bl	8006ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800595a:	2301      	movs	r3, #1
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800595e:	f002 f8ab 	bl	8007ab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005962:	f000 fe0b 	bl	800657c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005966:	f002 f871 	bl	8007a4c <vPortEnterCritical>
 800596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005970:	b25b      	sxtb	r3, r3
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d103      	bne.n	8005980 <xQueueReceive+0x134>
 8005978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005986:	b25b      	sxtb	r3, r3
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d103      	bne.n	8005996 <xQueueReceive+0x14a>
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005996:	f002 f88f 	bl	8007ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800599a:	1d3a      	adds	r2, r7, #4
 800599c:	f107 0310 	add.w	r3, r7, #16
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 f89e 	bl	8006ae4 <xTaskCheckForTimeOut>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d123      	bne.n	80059f6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059b0:	f000 faf4 	bl	8005f9c <prvIsQueueEmpty>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d017      	beq.n	80059ea <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	3324      	adds	r3, #36	@ 0x24
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4611      	mov	r1, r2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 ffbc 	bl	8006940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ca:	f000 fa95 	bl	8005ef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059ce:	f000 fde3 	bl	8006598 <xTaskResumeAll>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d189      	bne.n	80058ec <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80059d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a18 <xQueueReceive+0x1cc>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	e780      	b.n	80058ec <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ec:	f000 fa84 	bl	8005ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059f0:	f000 fdd2 	bl	8006598 <xTaskResumeAll>
 80059f4:	e77a      	b.n	80058ec <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059f8:	f000 fa7e 	bl	8005ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059fc:	f000 fdcc 	bl	8006598 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a02:	f000 facb 	bl	8005f9c <prvIsQueueEmpty>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f43f af6f 	beq.w	80058ec <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3730      	adds	r7, #48	@ 0x30
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08e      	sub	sp, #56	@ 0x38
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10d      	bne.n	8005a54 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	b672      	cpsid	i
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	b662      	cpsie	i
 8005a4c:	623b      	str	r3, [r7, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a60:	b672      	cpsid	i
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	b662      	cpsie	i
 8005a70:	61fb      	str	r3, [r7, #28]
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a78:	f001 f986 	bl	8006d88 <xTaskGetSchedulerState>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <xQueueSemaphoreTake+0x6c>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <xQueueSemaphoreTake+0x70>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <xQueueSemaphoreTake+0x72>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10d      	bne.n	8005aae <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	b672      	cpsid	i
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	b662      	cpsie	i
 8005aa6:	61bb      	str	r3, [r7, #24]
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	e7fd      	b.n	8005aaa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aae:	f001 ffcd 	bl	8007a4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d024      	beq.n	8005b08 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ace:	f001 fadd 	bl	800708c <pvTaskIncrementMutexHeldCount>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00f      	beq.n	8005b00 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae2:	3310      	adds	r3, #16
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff81 	bl	80069ec <xTaskRemoveFromEventList>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005af0:	4b55      	ldr	r3, [pc, #340]	@ (8005c48 <xQueueSemaphoreTake+0x22c>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b00:	f001 ffda 	bl	8007ab8 <vPortExitCritical>
				return pdPASS;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e09a      	b.n	8005c3e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d114      	bne.n	8005b38 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00d      	beq.n	8005b30 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	b672      	cpsid	i
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	b662      	cpsie	i
 8005b28:	617b      	str	r3, [r7, #20]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b30:	f001 ffc2 	bl	8007ab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e082      	b.n	8005c3e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ffb8 	bl	8006ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b4c:	f001 ffb4 	bl	8007ab8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b50:	f000 fd14 	bl	800657c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b54:	f001 ff7a 	bl	8007a4c <vPortEnterCritical>
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d103      	bne.n	8005b6e <xQueueSemaphoreTake+0x152>
 8005b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d103      	bne.n	8005b84 <xQueueSemaphoreTake+0x168>
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b84:	f001 ff98 	bl	8007ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b88:	463a      	mov	r2, r7
 8005b8a:	f107 030c 	add.w	r3, r7, #12
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 ffa7 	bl	8006ae4 <xTaskCheckForTimeOut>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d132      	bne.n	8005c02 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b9e:	f000 f9fd 	bl	8005f9c <prvIsQueueEmpty>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d026      	beq.n	8005bf6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005bb0:	f001 ff4c 	bl	8007a4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 f903 	bl	8006dc4 <xTaskPriorityInherit>
 8005bbe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005bc0:	f001 ff7a 	bl	8007ab8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	3324      	adds	r3, #36	@ 0x24
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 feb7 	bl	8006940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bd4:	f000 f990 	bl	8005ef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bd8:	f000 fcde 	bl	8006598 <xTaskResumeAll>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f47f af65 	bne.w	8005aae <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005be4:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <xQueueSemaphoreTake+0x22c>)
 8005be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	e75b      	b.n	8005aae <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bf8:	f000 f97e 	bl	8005ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfc:	f000 fccc 	bl	8006598 <xTaskResumeAll>
 8005c00:	e755      	b.n	8005aae <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c04:	f000 f978 	bl	8005ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c08:	f000 fcc6 	bl	8006598 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c0e:	f000 f9c5 	bl	8005f9c <prvIsQueueEmpty>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f43f af4a 	beq.w	8005aae <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005c20:	f001 ff14 	bl	8007a4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c26:	f000 f8bf 	bl	8005da8 <prvGetDisinheritPriorityAfterTimeout>
 8005c2a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f9a2 	bl	8006f7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c38:	f001 ff3e 	bl	8007ab8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3738      	adds	r7, #56	@ 0x38
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08e      	sub	sp, #56	@ 0x38
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	b672      	cpsid	i
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	b662      	cpsie	i
 8005c76:	623b      	str	r3, [r7, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <xQueueReceiveFromISR+0x40>
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xQueueReceiveFromISR+0x44>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xQueueReceiveFromISR+0x46>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10d      	bne.n	8005cb2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	b672      	cpsid	i
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	b662      	cpsie	i
 8005caa:	61fb      	str	r3, [r7, #28]
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	e7fd      	b.n	8005cae <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cb2:	f001 ffb3 	bl	8007c1c <vPortValidateInterruptPriority>
	__asm volatile
 8005cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	b672      	cpsid	i
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	b662      	cpsie	i
 8005cce:	61ba      	str	r2, [r7, #24]
 8005cd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02f      	beq.n	8005d42 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cf0:	f000 f8dc 	bl	8005eac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	1e5a      	subs	r2, r3, #1
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005cfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d112      	bne.n	8005d2c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	3310      	adds	r3, #16
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fe6a 	bl	80069ec <xTaskRemoveFromEventList>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e007      	b.n	8005d3c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d30:	3301      	adds	r3, #1
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	b25a      	sxtb	r2, r3
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d40:	e001      	b.n	8005d46 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f383 8811 	msr	BASEPRI, r3
}
 8005d50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3738      	adds	r7, #56	@ 0x38
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10d      	bne.n	8005d8a <vQueueDelete+0x2e>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	b672      	cpsid	i
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	b662      	cpsie	i
 8005d82:	60bb      	str	r3, [r7, #8]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f95e 	bl	800604c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f002 f852 	bl	8007e44 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d006      	beq.n	8005dc6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e001      	b.n	8005dca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005dca:	68fb      	ldr	r3, [r7, #12]
	}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10d      	bne.n	8005e12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d14d      	bne.n	8005e9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f846 	bl	8006e94 <xTaskPriorityDisinherit>
 8005e08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	e043      	b.n	8005e9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d119      	bne.n	8005e4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6858      	ldr	r0, [r3, #4]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	461a      	mov	r2, r3
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	f002 f9e8 	bl	80081f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d32b      	bcc.n	8005e9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	e026      	b.n	8005e9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68d8      	ldr	r0, [r3, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e54:	461a      	mov	r2, r3
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	f002 f9ce 	bl	80081f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	425b      	negs	r3, r3
 8005e66:	441a      	add	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d207      	bcs.n	8005e88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e80:	425b      	negs	r3, r3
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d105      	bne.n	8005e9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ea2:	697b      	ldr	r3, [r7, #20]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	441a      	add	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d303      	bcc.n	8005ee0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68d9      	ldr	r1, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6838      	ldr	r0, [r7, #0]
 8005eec:	f002 f984 	bl	80081f8 <memcpy>
	}
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f00:	f001 fda4 	bl	8007a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f0c:	e011      	b.n	8005f32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d012      	beq.n	8005f3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3324      	adds	r3, #36	@ 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fd66 	bl	80069ec <xTaskRemoveFromEventList>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f26:	f000 fe45 	bl	8006bb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dce9      	bgt.n	8005f0e <prvUnlockQueue+0x16>
 8005f3a:	e000      	b.n	8005f3e <prvUnlockQueue+0x46>
					break;
 8005f3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	22ff      	movs	r2, #255	@ 0xff
 8005f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f46:	f001 fdb7 	bl	8007ab8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f4a:	f001 fd7f 	bl	8007a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f56:	e011      	b.n	8005f7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3310      	adds	r3, #16
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fd41 	bl	80069ec <xTaskRemoveFromEventList>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f70:	f000 fe20 	bl	8006bb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dce9      	bgt.n	8005f58 <prvUnlockQueue+0x60>
 8005f84:	e000      	b.n	8005f88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	22ff      	movs	r2, #255	@ 0xff
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f90:	f001 fd92 	bl	8007ab8 <vPortExitCritical>
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa4:	f001 fd52 	bl	8007a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e001      	b.n	8005fba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 fd7d 	bl	8007ab8 <vPortExitCritical>

	return xReturn;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fd0:	f001 fd3c 	bl	8007a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d102      	bne.n	8005fe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e001      	b.n	8005fea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fea:	f001 fd65 	bl	8007ab8 <vPortExitCritical>

	return xReturn;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e014      	b.n	8006032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006008:	4a0f      	ldr	r2, [pc, #60]	@ (8006048 <vQueueAddToRegistry+0x50>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006014:	490c      	ldr	r1, [pc, #48]	@ (8006048 <vQueueAddToRegistry+0x50>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800601e:	4a0a      	ldr	r2, [pc, #40]	@ (8006048 <vQueueAddToRegistry+0x50>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800602a:	e006      	b.n	800603a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b07      	cmp	r3, #7
 8006036:	d9e7      	bls.n	8006008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000fc8 	.word	0x20000fc8

0800604c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e016      	b.n	8006088 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800605a:	4a10      	ldr	r2, [pc, #64]	@ (800609c <vQueueUnregisterQueue+0x50>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	4413      	add	r3, r2
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d10b      	bne.n	8006082 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800606a:	4a0c      	ldr	r2, [pc, #48]	@ (800609c <vQueueUnregisterQueue+0x50>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2100      	movs	r1, #0
 8006070:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006074:	4a09      	ldr	r2, [pc, #36]	@ (800609c <vQueueUnregisterQueue+0x50>)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	2200      	movs	r2, #0
 800607e:	605a      	str	r2, [r3, #4]
				break;
 8006080:	e006      	b.n	8006090 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b07      	cmp	r3, #7
 800608c:	d9e5      	bls.n	800605a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20000fc8 	.word	0x20000fc8

080060a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060b0:	f001 fccc 	bl	8007a4c <vPortEnterCritical>
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060ba:	b25b      	sxtb	r3, r3
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d103      	bne.n	80060ca <vQueueWaitForMessageRestricted+0x2a>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d103      	bne.n	80060e0 <vQueueWaitForMessageRestricted+0x40>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e0:	f001 fcea 	bl	8007ab8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3324      	adds	r3, #36	@ 0x24
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fc4b 	bl	8006990 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff fefc 	bl	8005ef8 <prvUnlockQueue>
	}
 8006100:	bf00      	nop
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	@ 0x38
 800610c:	af04      	add	r7, sp, #16
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10d      	bne.n	8006138 <xTaskCreateStatic+0x30>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	b672      	cpsid	i
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	b662      	cpsie	i
 8006130:	623b      	str	r3, [r7, #32]
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <xTaskCreateStatic+0x52>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	b672      	cpsid	i
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	b662      	cpsie	i
 8006152:	61fb      	str	r3, [r7, #28]
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	e7fd      	b.n	8006156 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800615a:	23a8      	movs	r3, #168	@ 0xa8
 800615c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2ba8      	cmp	r3, #168	@ 0xa8
 8006162:	d00d      	beq.n	8006180 <xTaskCreateStatic+0x78>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	b672      	cpsid	i
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	b662      	cpsie	i
 8006178:	61bb      	str	r3, [r7, #24]
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	e7fd      	b.n	800617c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006180:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01e      	beq.n	80061c6 <xTaskCreateStatic+0xbe>
 8006188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01b      	beq.n	80061c6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800618e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006196:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	2202      	movs	r2, #2
 800619c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061a0:	2300      	movs	r3, #0
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	9302      	str	r3, [sp, #8]
 80061a8:	f107 0314 	add.w	r3, r7, #20
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f851 	bl	8006260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061c0:	f000 f8f8 	bl	80063b4 <prvAddNewTaskToReadyList>
 80061c4:	e001      	b.n	80061ca <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061ca:	697b      	ldr	r3, [r7, #20]
	}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3728      	adds	r7, #40	@ 0x28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	@ 0x30
 80061d8:	af04      	add	r7, sp, #16
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 fd5d 	bl	8007ca8 <pvPortMalloc>
 80061ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00e      	beq.n	8006214 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061f6:	20a8      	movs	r0, #168	@ 0xa8
 80061f8:	f001 fd56 	bl	8007ca8 <pvPortMalloc>
 80061fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	631a      	str	r2, [r3, #48]	@ 0x30
 800620a:	e005      	b.n	8006218 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800620c:	6978      	ldr	r0, [r7, #20]
 800620e:	f001 fe19 	bl	8007e44 <vPortFree>
 8006212:	e001      	b.n	8006218 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d017      	beq.n	800624e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	2300      	movs	r3, #0
 800622a:	9303      	str	r3, [sp, #12]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	9302      	str	r3, [sp, #8]
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f80f 	bl	8006260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006242:	69f8      	ldr	r0, [r7, #28]
 8006244:	f000 f8b6 	bl	80063b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006248:	2301      	movs	r3, #1
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	e002      	b.n	8006254 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006254:	69bb      	ldr	r3, [r7, #24]
	}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	461a      	mov	r2, r3
 8006278:	21a5      	movs	r1, #165	@ 0xa5
 800627a:	f001 ff33 	bl	80080e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006288:	440b      	add	r3, r1
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f023 0307 	bic.w	r3, r3, #7
 8006296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <prvInitialiseNewTask+0x5e>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	b672      	cpsid	i
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	b662      	cpsie	i
 80062b6:	617b      	str	r3, [r7, #20]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01f      	beq.n	8006304 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	e012      	b.n	80062f0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	7819      	ldrb	r1, [r3, #0]
 80062d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	3334      	adds	r3, #52	@ 0x34
 80062da:	460a      	mov	r2, r1
 80062dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d006      	beq.n	80062f8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d9e9      	bls.n	80062ca <prvInitialiseNewTask+0x6a>
 80062f6:	e000      	b.n	80062fa <prvInitialiseNewTask+0x9a>
			{
				break;
 80062f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006302:	e003      	b.n	800630c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	2b37      	cmp	r3, #55	@ 0x37
 8006310:	d901      	bls.n	8006316 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006312:	2337      	movs	r3, #55	@ 0x37
 8006314:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800631a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006320:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	2200      	movs	r2, #0
 8006326:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fde3 	bl	8004ef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	3318      	adds	r3, #24
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fdde 	bl	8004ef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006340:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006350:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	2200      	movs	r2, #0
 800635e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	3354      	adds	r3, #84	@ 0x54
 8006366:	224c      	movs	r2, #76	@ 0x4c
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f001 feba 	bl	80080e4 <memset>
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	4a0d      	ldr	r2, [pc, #52]	@ (80063a8 <prvInitialiseNewTask+0x148>)
 8006374:	659a      	str	r2, [r3, #88]	@ 0x58
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	4a0c      	ldr	r2, [pc, #48]	@ (80063ac <prvInitialiseNewTask+0x14c>)
 800637a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	4a0c      	ldr	r2, [pc, #48]	@ (80063b0 <prvInitialiseNewTask+0x150>)
 8006380:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	69b8      	ldr	r0, [r7, #24]
 8006388:	f001 fa50 	bl	800782c <pxPortInitialiseStack>
 800638c:	4602      	mov	r2, r0
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800639c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800639e:	bf00      	nop
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20005254 	.word	0x20005254
 80063ac:	200052bc 	.word	0x200052bc
 80063b0:	20005324 	.word	0x20005324

080063b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063bc:	f001 fb46 	bl	8007a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ca:	4b2c      	ldr	r3, [pc, #176]	@ (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063d2:	4a2a      	ldr	r2, [pc, #168]	@ (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d8:	4b27      	ldr	r3, [pc, #156]	@ (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d110      	bne.n	8006402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063e0:	f000 fc0c 	bl	8006bfc <prvInitialiseTaskLists>
 80063e4:	e00d      	b.n	8006402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063e6:	4b26      	ldr	r3, [pc, #152]	@ (8006480 <prvAddNewTaskToReadyList+0xcc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ee:	4b23      	ldr	r3, [pc, #140]	@ (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d802      	bhi.n	8006402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063fc:	4a1f      	ldr	r2, [pc, #124]	@ (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006402:	4b20      	ldr	r3, [pc, #128]	@ (8006484 <prvAddNewTaskToReadyList+0xd0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	4a1e      	ldr	r2, [pc, #120]	@ (8006484 <prvAddNewTaskToReadyList+0xd0>)
 800640a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800640c:	4b1d      	ldr	r3, [pc, #116]	@ (8006484 <prvAddNewTaskToReadyList+0xd0>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006418:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <prvAddNewTaskToReadyList+0xd4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d903      	bls.n	8006428 <prvAddNewTaskToReadyList+0x74>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	4a18      	ldr	r2, [pc, #96]	@ (8006488 <prvAddNewTaskToReadyList+0xd4>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4a15      	ldr	r2, [pc, #84]	@ (800648c <prvAddNewTaskToReadyList+0xd8>)
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe fd67 	bl	8004f12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006444:	f001 fb38 	bl	8007ab8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006448:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <prvAddNewTaskToReadyList+0xcc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006450:	4b0a      	ldr	r3, [pc, #40]	@ (800647c <prvAddNewTaskToReadyList+0xc8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645a:	429a      	cmp	r2, r3
 800645c:	d207      	bcs.n	800646e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800645e:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <prvAddNewTaskToReadyList+0xdc>)
 8006460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200014dc 	.word	0x200014dc
 800647c:	20001008 	.word	0x20001008
 8006480:	200014e8 	.word	0x200014e8
 8006484:	200014f8 	.word	0x200014f8
 8006488:	200014e4 	.word	0x200014e4
 800648c:	2000100c 	.word	0x2000100c
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	@ 0x28
 8006498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064a2:	463a      	mov	r2, r7
 80064a4:	1d39      	adds	r1, r7, #4
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fcd0 	bl	8004e50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	9202      	str	r2, [sp, #8]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2300      	movs	r3, #0
 80064c0:	460a      	mov	r2, r1
 80064c2:	4926      	ldr	r1, [pc, #152]	@ (800655c <vTaskStartScheduler+0xc8>)
 80064c4:	4826      	ldr	r0, [pc, #152]	@ (8006560 <vTaskStartScheduler+0xcc>)
 80064c6:	f7ff fe1f 	bl	8006108 <xTaskCreateStatic>
 80064ca:	4603      	mov	r3, r0
 80064cc:	4a25      	ldr	r2, [pc, #148]	@ (8006564 <vTaskStartScheduler+0xd0>)
 80064ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064d0:	4b24      	ldr	r3, [pc, #144]	@ (8006564 <vTaskStartScheduler+0xd0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064d8:	2301      	movs	r3, #1
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e001      	b.n	80064e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d102      	bne.n	80064ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064e8:	f000 fe38 	bl	800715c <xTimerCreateTimerTask>
 80064ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d11d      	bne.n	8006530 <vTaskStartScheduler+0x9c>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	613b      	str	r3, [r7, #16]
}
 800650a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800650c:	4b16      	ldr	r3, [pc, #88]	@ (8006568 <vTaskStartScheduler+0xd4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3354      	adds	r3, #84	@ 0x54
 8006512:	4a16      	ldr	r2, [pc, #88]	@ (800656c <vTaskStartScheduler+0xd8>)
 8006514:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006516:	4b16      	ldr	r3, [pc, #88]	@ (8006570 <vTaskStartScheduler+0xdc>)
 8006518:	f04f 32ff 	mov.w	r2, #4294967295
 800651c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800651e:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <vTaskStartScheduler+0xe0>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006524:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <vTaskStartScheduler+0xe4>)
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800652a:	f001 fa11 	bl	8007950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800652e:	e011      	b.n	8006554 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d10d      	bne.n	8006554 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	b672      	cpsid	i
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	b662      	cpsie	i
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <vTaskStartScheduler+0xbc>
}
 8006554:	bf00      	nop
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	08008b30 	.word	0x08008b30
 8006560:	08006bcd 	.word	0x08006bcd
 8006564:	20001500 	.word	0x20001500
 8006568:	20001008 	.word	0x20001008
 800656c:	20000010 	.word	0x20000010
 8006570:	200014fc 	.word	0x200014fc
 8006574:	200014e8 	.word	0x200014e8
 8006578:	200014e0 	.word	0x200014e0

0800657c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006580:	4b04      	ldr	r3, [pc, #16]	@ (8006594 <vTaskSuspendAll+0x18>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	4a03      	ldr	r2, [pc, #12]	@ (8006594 <vTaskSuspendAll+0x18>)
 8006588:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20001504 	.word	0x20001504

08006598 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065a6:	4b43      	ldr	r3, [pc, #268]	@ (80066b4 <xTaskResumeAll+0x11c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10d      	bne.n	80065ca <xTaskResumeAll+0x32>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b2:	b672      	cpsid	i
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	b662      	cpsie	i
 80065c2:	603b      	str	r3, [r7, #0]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065ca:	f001 fa3f 	bl	8007a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065ce:	4b39      	ldr	r3, [pc, #228]	@ (80066b4 <xTaskResumeAll+0x11c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	4a37      	ldr	r2, [pc, #220]	@ (80066b4 <xTaskResumeAll+0x11c>)
 80065d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d8:	4b36      	ldr	r3, [pc, #216]	@ (80066b4 <xTaskResumeAll+0x11c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d162      	bne.n	80066a6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e0:	4b35      	ldr	r3, [pc, #212]	@ (80066b8 <xTaskResumeAll+0x120>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d05e      	beq.n	80066a6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e8:	e02f      	b.n	800664a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ea:	4b34      	ldr	r3, [pc, #208]	@ (80066bc <xTaskResumeAll+0x124>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3318      	adds	r3, #24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fce8 	bl	8004fcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe fce3 	bl	8004fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660a:	4b2d      	ldr	r3, [pc, #180]	@ (80066c0 <xTaskResumeAll+0x128>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d903      	bls.n	800661a <xTaskResumeAll+0x82>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006616:	4a2a      	ldr	r2, [pc, #168]	@ (80066c0 <xTaskResumeAll+0x128>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4a27      	ldr	r2, [pc, #156]	@ (80066c4 <xTaskResumeAll+0x12c>)
 8006628:	441a      	add	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7fe fc6e 	bl	8004f12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663a:	4b23      	ldr	r3, [pc, #140]	@ (80066c8 <xTaskResumeAll+0x130>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006644:	4b21      	ldr	r3, [pc, #132]	@ (80066cc <xTaskResumeAll+0x134>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664a:	4b1c      	ldr	r3, [pc, #112]	@ (80066bc <xTaskResumeAll+0x124>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1cb      	bne.n	80065ea <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006658:	f000 fb76 	bl	8006d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800665c:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <xTaskResumeAll+0x138>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006668:	f000 f846 	bl	80066f8 <xTaskIncrementTick>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006672:	4b16      	ldr	r3, [pc, #88]	@ (80066cc <xTaskResumeAll+0x134>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3b01      	subs	r3, #1
 800667c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f1      	bne.n	8006668 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006684:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <xTaskResumeAll+0x138>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800668a:	4b10      	ldr	r3, [pc, #64]	@ (80066cc <xTaskResumeAll+0x134>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006696:	4b0f      	ldr	r3, [pc, #60]	@ (80066d4 <xTaskResumeAll+0x13c>)
 8006698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066a6:	f001 fa07 	bl	8007ab8 <vPortExitCritical>

	return xAlreadyYielded;
 80066aa:	68bb      	ldr	r3, [r7, #8]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20001504 	.word	0x20001504
 80066b8:	200014dc 	.word	0x200014dc
 80066bc:	2000149c 	.word	0x2000149c
 80066c0:	200014e4 	.word	0x200014e4
 80066c4:	2000100c 	.word	0x2000100c
 80066c8:	20001008 	.word	0x20001008
 80066cc:	200014f0 	.word	0x200014f0
 80066d0:	200014ec 	.word	0x200014ec
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066de:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <xTaskGetTickCount+0x1c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066e4:	687b      	ldr	r3, [r7, #4]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	200014e0 	.word	0x200014e0

080066f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006702:	4b50      	ldr	r3, [pc, #320]	@ (8006844 <xTaskIncrementTick+0x14c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f040 808c 	bne.w	8006824 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800670c:	4b4e      	ldr	r3, [pc, #312]	@ (8006848 <xTaskIncrementTick+0x150>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006714:	4a4c      	ldr	r2, [pc, #304]	@ (8006848 <xTaskIncrementTick+0x150>)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d123      	bne.n	8006768 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006720:	4b4a      	ldr	r3, [pc, #296]	@ (800684c <xTaskIncrementTick+0x154>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00d      	beq.n	8006746 <xTaskIncrementTick+0x4e>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	b672      	cpsid	i
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	b662      	cpsie	i
 800673e:	603b      	str	r3, [r7, #0]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <xTaskIncrementTick+0x4a>
 8006746:	4b41      	ldr	r3, [pc, #260]	@ (800684c <xTaskIncrementTick+0x154>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	4b40      	ldr	r3, [pc, #256]	@ (8006850 <xTaskIncrementTick+0x158>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a3e      	ldr	r2, [pc, #248]	@ (800684c <xTaskIncrementTick+0x154>)
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	4a3e      	ldr	r2, [pc, #248]	@ (8006850 <xTaskIncrementTick+0x158>)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	4b3e      	ldr	r3, [pc, #248]	@ (8006854 <xTaskIncrementTick+0x15c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	4a3c      	ldr	r2, [pc, #240]	@ (8006854 <xTaskIncrementTick+0x15c>)
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	f000 faf0 	bl	8006d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006768:	4b3b      	ldr	r3, [pc, #236]	@ (8006858 <xTaskIncrementTick+0x160>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	429a      	cmp	r2, r3
 8006770:	d349      	bcc.n	8006806 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006772:	4b36      	ldr	r3, [pc, #216]	@ (800684c <xTaskIncrementTick+0x154>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800677c:	4b36      	ldr	r3, [pc, #216]	@ (8006858 <xTaskIncrementTick+0x160>)
 800677e:	f04f 32ff 	mov.w	r2, #4294967295
 8006782:	601a      	str	r2, [r3, #0]
					break;
 8006784:	e03f      	b.n	8006806 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006786:	4b31      	ldr	r3, [pc, #196]	@ (800684c <xTaskIncrementTick+0x154>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d203      	bcs.n	80067a6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800679e:	4a2e      	ldr	r2, [pc, #184]	@ (8006858 <xTaskIncrementTick+0x160>)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067a4:	e02f      	b.n	8006806 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fc0e 	bl	8004fcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	3318      	adds	r3, #24
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe fc05 	bl	8004fcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c6:	4b25      	ldr	r3, [pc, #148]	@ (800685c <xTaskIncrementTick+0x164>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d903      	bls.n	80067d6 <xTaskIncrementTick+0xde>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d2:	4a22      	ldr	r2, [pc, #136]	@ (800685c <xTaskIncrementTick+0x164>)
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006860 <xTaskIncrementTick+0x168>)
 80067e4:	441a      	add	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4619      	mov	r1, r3
 80067ec:	4610      	mov	r0, r2
 80067ee:	f7fe fb90 	bl	8004f12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006864 <xTaskIncrementTick+0x16c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d3b8      	bcc.n	8006772 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006800:	2301      	movs	r3, #1
 8006802:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006804:	e7b5      	b.n	8006772 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006806:	4b17      	ldr	r3, [pc, #92]	@ (8006864 <xTaskIncrementTick+0x16c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680c:	4914      	ldr	r1, [pc, #80]	@ (8006860 <xTaskIncrementTick+0x168>)
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d907      	bls.n	800682e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e004      	b.n	800682e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006824:	4b10      	ldr	r3, [pc, #64]	@ (8006868 <xTaskIncrementTick+0x170>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	4a0f      	ldr	r2, [pc, #60]	@ (8006868 <xTaskIncrementTick+0x170>)
 800682c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800682e:	4b0f      	ldr	r3, [pc, #60]	@ (800686c <xTaskIncrementTick+0x174>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006836:	2301      	movs	r3, #1
 8006838:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800683a:	697b      	ldr	r3, [r7, #20]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20001504 	.word	0x20001504
 8006848:	200014e0 	.word	0x200014e0
 800684c:	20001494 	.word	0x20001494
 8006850:	20001498 	.word	0x20001498
 8006854:	200014f4 	.word	0x200014f4
 8006858:	200014fc 	.word	0x200014fc
 800685c:	200014e4 	.word	0x200014e4
 8006860:	2000100c 	.word	0x2000100c
 8006864:	20001008 	.word	0x20001008
 8006868:	200014ec 	.word	0x200014ec
 800686c:	200014f0 	.word	0x200014f0

08006870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006876:	4b2c      	ldr	r3, [pc, #176]	@ (8006928 <vTaskSwitchContext+0xb8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800687e:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <vTaskSwitchContext+0xbc>)
 8006880:	2201      	movs	r2, #1
 8006882:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006884:	e049      	b.n	800691a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006886:	4b29      	ldr	r3, [pc, #164]	@ (800692c <vTaskSwitchContext+0xbc>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688c:	4b28      	ldr	r3, [pc, #160]	@ (8006930 <vTaskSwitchContext+0xc0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e013      	b.n	80068bc <vTaskSwitchContext+0x4c>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10d      	bne.n	80068b6 <vTaskSwitchContext+0x46>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689e:	b672      	cpsid	i
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	b662      	cpsie	i
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <vTaskSwitchContext+0x42>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	491d      	ldr	r1, [pc, #116]	@ (8006934 <vTaskSwitchContext+0xc4>)
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0e1      	beq.n	8006894 <vTaskSwitchContext+0x24>
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4a16      	ldr	r2, [pc, #88]	@ (8006934 <vTaskSwitchContext+0xc4>)
 80068dc:	4413      	add	r3, r2
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3308      	adds	r3, #8
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d104      	bne.n	8006900 <vTaskSwitchContext+0x90>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	605a      	str	r2, [r3, #4]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4a0c      	ldr	r2, [pc, #48]	@ (8006938 <vTaskSwitchContext+0xc8>)
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <vTaskSwitchContext+0xc0>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006910:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <vTaskSwitchContext+0xc8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3354      	adds	r3, #84	@ 0x54
 8006916:	4a09      	ldr	r2, [pc, #36]	@ (800693c <vTaskSwitchContext+0xcc>)
 8006918:	6013      	str	r3, [r2, #0]
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20001504 	.word	0x20001504
 800692c:	200014f0 	.word	0x200014f0
 8006930:	200014e4 	.word	0x200014e4
 8006934:	2000100c 	.word	0x2000100c
 8006938:	20001008 	.word	0x20001008
 800693c:	20000010 	.word	0x20000010

08006940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10d      	bne.n	800696c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	b672      	cpsid	i
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	b662      	cpsie	i
 8006964:	60fb      	str	r3, [r7, #12]
}
 8006966:	bf00      	nop
 8006968:	bf00      	nop
 800696a:	e7fd      	b.n	8006968 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800696c:	4b07      	ldr	r3, [pc, #28]	@ (800698c <vTaskPlaceOnEventList+0x4c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3318      	adds	r3, #24
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fe faf0 	bl	8004f5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800697a:	2101      	movs	r1, #1
 800697c:	6838      	ldr	r0, [r7, #0]
 800697e:	f000 fb99 	bl	80070b4 <prvAddCurrentTaskToDelayedList>
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20001008 	.word	0x20001008

08006990 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10d      	bne.n	80069be <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a6:	b672      	cpsid	i
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	b662      	cpsie	i
 80069b6:	617b      	str	r3, [r7, #20]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069be:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <vTaskPlaceOnEventListRestricted+0x58>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3318      	adds	r3, #24
 80069c4:	4619      	mov	r1, r3
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7fe faa3 	bl	8004f12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80069d2:	f04f 33ff 	mov.w	r3, #4294967295
 80069d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	68b8      	ldr	r0, [r7, #8]
 80069dc:	f000 fb6a 	bl	80070b4 <prvAddCurrentTaskToDelayedList>
	}
 80069e0:	bf00      	nop
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20001008 	.word	0x20001008

080069ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a06:	b672      	cpsid	i
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	b662      	cpsie	i
 8006a16:	60fb      	str	r3, [r7, #12]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3318      	adds	r3, #24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fad2 	bl	8004fcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a28:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa0 <xTaskRemoveFromEventList+0xb4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d11d      	bne.n	8006a6c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe fac9 	bl	8004fcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3e:	4b19      	ldr	r3, [pc, #100]	@ (8006aa4 <xTaskRemoveFromEventList+0xb8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d903      	bls.n	8006a4e <xTaskRemoveFromEventList+0x62>
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	4a16      	ldr	r2, [pc, #88]	@ (8006aa4 <xTaskRemoveFromEventList+0xb8>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4a13      	ldr	r2, [pc, #76]	@ (8006aa8 <xTaskRemoveFromEventList+0xbc>)
 8006a5c:	441a      	add	r2, r3
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7fe fa54 	bl	8004f12 <vListInsertEnd>
 8006a6a:	e005      	b.n	8006a78 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	3318      	adds	r3, #24
 8006a70:	4619      	mov	r1, r3
 8006a72:	480e      	ldr	r0, [pc, #56]	@ (8006aac <xTaskRemoveFromEventList+0xc0>)
 8006a74:	f7fe fa4d 	bl	8004f12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab0 <xTaskRemoveFromEventList+0xc4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d905      	bls.n	8006a92 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a86:	2301      	movs	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab4 <xTaskRemoveFromEventList+0xc8>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e001      	b.n	8006a96 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a96:	697b      	ldr	r3, [r7, #20]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20001504 	.word	0x20001504
 8006aa4:	200014e4 	.word	0x200014e4
 8006aa8:	2000100c 	.word	0x2000100c
 8006aac:	2000149c 	.word	0x2000149c
 8006ab0:	20001008 	.word	0x20001008
 8006ab4:	200014f0 	.word	0x200014f0

08006ab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ac0:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <vTaskInternalSetTimeOutState+0x24>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ac8:	4b05      	ldr	r3, [pc, #20]	@ (8006ae0 <vTaskInternalSetTimeOutState+0x28>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	605a      	str	r2, [r3, #4]
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	200014f4 	.word	0x200014f4
 8006ae0:	200014e0 	.word	0x200014e0

08006ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10d      	bne.n	8006b10 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	b672      	cpsid	i
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	b662      	cpsie	i
 8006b08:	613b      	str	r3, [r7, #16]
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	e7fd      	b.n	8006b0c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10d      	bne.n	8006b32 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	b672      	cpsid	i
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	b662      	cpsie	i
 8006b2a:	60fb      	str	r3, [r7, #12]
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006b32:	f000 ff8b 	bl	8007a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b36:	4b1d      	ldr	r3, [pc, #116]	@ (8006bac <xTaskCheckForTimeOut+0xc8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d102      	bne.n	8006b56 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	e023      	b.n	8006b9e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <xTaskCheckForTimeOut+0xcc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d007      	beq.n	8006b72 <xTaskCheckForTimeOut+0x8e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d302      	bcc.n	8006b72 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	e015      	b.n	8006b9e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d20b      	bcs.n	8006b94 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff ff95 	bl	8006ab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	e004      	b.n	8006b9e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b9e:	f000 ff8b 	bl	8007ab8 <vPortExitCritical>

	return xReturn;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200014e0 	.word	0x200014e0
 8006bb0:	200014f4 	.word	0x200014f4

08006bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bb8:	4b03      	ldr	r3, [pc, #12]	@ (8006bc8 <vTaskMissedYield+0x14>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	200014f0 	.word	0x200014f0

08006bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bd4:	f000 f852 	bl	8006c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bd8:	4b06      	ldr	r3, [pc, #24]	@ (8006bf4 <prvIdleTask+0x28>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d9f9      	bls.n	8006bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006be0:	4b05      	ldr	r3, [pc, #20]	@ (8006bf8 <prvIdleTask+0x2c>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bf0:	e7f0      	b.n	8006bd4 <prvIdleTask+0x8>
 8006bf2:	bf00      	nop
 8006bf4:	2000100c 	.word	0x2000100c
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c02:	2300      	movs	r3, #0
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	e00c      	b.n	8006c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4a12      	ldr	r2, [pc, #72]	@ (8006c5c <prvInitialiseTaskLists+0x60>)
 8006c14:	4413      	add	r3, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe f94e 	bl	8004eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	607b      	str	r3, [r7, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b37      	cmp	r3, #55	@ 0x37
 8006c26:	d9ef      	bls.n	8006c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c28:	480d      	ldr	r0, [pc, #52]	@ (8006c60 <prvInitialiseTaskLists+0x64>)
 8006c2a:	f7fe f945 	bl	8004eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c2e:	480d      	ldr	r0, [pc, #52]	@ (8006c64 <prvInitialiseTaskLists+0x68>)
 8006c30:	f7fe f942 	bl	8004eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c34:	480c      	ldr	r0, [pc, #48]	@ (8006c68 <prvInitialiseTaskLists+0x6c>)
 8006c36:	f7fe f93f 	bl	8004eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c3a:	480c      	ldr	r0, [pc, #48]	@ (8006c6c <prvInitialiseTaskLists+0x70>)
 8006c3c:	f7fe f93c 	bl	8004eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c40:	480b      	ldr	r0, [pc, #44]	@ (8006c70 <prvInitialiseTaskLists+0x74>)
 8006c42:	f7fe f939 	bl	8004eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c46:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <prvInitialiseTaskLists+0x78>)
 8006c48:	4a05      	ldr	r2, [pc, #20]	@ (8006c60 <prvInitialiseTaskLists+0x64>)
 8006c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c78 <prvInitialiseTaskLists+0x7c>)
 8006c4e:	4a05      	ldr	r2, [pc, #20]	@ (8006c64 <prvInitialiseTaskLists+0x68>)
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	2000100c 	.word	0x2000100c
 8006c60:	2000146c 	.word	0x2000146c
 8006c64:	20001480 	.word	0x20001480
 8006c68:	2000149c 	.word	0x2000149c
 8006c6c:	200014b0 	.word	0x200014b0
 8006c70:	200014c8 	.word	0x200014c8
 8006c74:	20001494 	.word	0x20001494
 8006c78:	20001498 	.word	0x20001498

08006c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c82:	e019      	b.n	8006cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c84:	f000 fee2 	bl	8007a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c88:	4b10      	ldr	r3, [pc, #64]	@ (8006ccc <prvCheckTasksWaitingTermination+0x50>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe f999 	bl	8004fcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <prvCheckTasksWaitingTermination+0x54>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8006cd0 <prvCheckTasksWaitingTermination+0x54>)
 8006ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd4 <prvCheckTasksWaitingTermination+0x58>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd4 <prvCheckTasksWaitingTermination+0x58>)
 8006cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cae:	f000 ff03 	bl	8007ab8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f810 	bl	8006cd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cb8:	4b06      	ldr	r3, [pc, #24]	@ (8006cd4 <prvCheckTasksWaitingTermination+0x58>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e1      	bne.n	8006c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	200014b0 	.word	0x200014b0
 8006cd0:	200014dc 	.word	0x200014dc
 8006cd4:	200014c4 	.word	0x200014c4

08006cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3354      	adds	r3, #84	@ 0x54
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 fa05 	bl	80080f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d108      	bne.n	8006d06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f8a3 	bl	8007e44 <vPortFree>
				vPortFree( pxTCB );
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 f8a0 	bl	8007e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d04:	e01b      	b.n	8006d3e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d103      	bne.n	8006d18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 f897 	bl	8007e44 <vPortFree>
	}
 8006d16:	e012      	b.n	8006d3e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d00d      	beq.n	8006d3e <prvDeleteTCB+0x66>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d26:	b672      	cpsid	i
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	b662      	cpsie	i
 8006d36:	60fb      	str	r3, [r7, #12]
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <prvDeleteTCB+0x62>
	}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d80 <prvResetNextTaskUnblockTime+0x38>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d58:	4b0a      	ldr	r3, [pc, #40]	@ (8006d84 <prvResetNextTaskUnblockTime+0x3c>)
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d60:	e008      	b.n	8006d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d62:	4b07      	ldr	r3, [pc, #28]	@ (8006d80 <prvResetNextTaskUnblockTime+0x38>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <prvResetNextTaskUnblockTime+0x3c>)
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	20001494 	.word	0x20001494
 8006d84:	200014fc 	.word	0x200014fc

08006d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <xTaskGetSchedulerState+0x34>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d96:	2301      	movs	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	e008      	b.n	8006dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9c:	4b08      	ldr	r3, [pc, #32]	@ (8006dc0 <xTaskGetSchedulerState+0x38>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006da4:	2302      	movs	r3, #2
 8006da6:	607b      	str	r3, [r7, #4]
 8006da8:	e001      	b.n	8006dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dae:	687b      	ldr	r3, [r7, #4]
	}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	200014e8 	.word	0x200014e8
 8006dc0:	20001504 	.word	0x20001504

08006dc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d051      	beq.n	8006e7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dde:	4b2a      	ldr	r3, [pc, #168]	@ (8006e88 <xTaskPriorityInherit+0xc4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d241      	bcs.n	8006e6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db06      	blt.n	8006dfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df0:	4b25      	ldr	r3, [pc, #148]	@ (8006e88 <xTaskPriorityInherit+0xc4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6959      	ldr	r1, [r3, #20]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006e8c <xTaskPriorityInherit+0xc8>)
 8006e10:	4413      	add	r3, r2
 8006e12:	4299      	cmp	r1, r3
 8006e14:	d122      	bne.n	8006e5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe f8d6 	bl	8004fcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e20:	4b19      	ldr	r3, [pc, #100]	@ (8006e88 <xTaskPriorityInherit+0xc4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2e:	4b18      	ldr	r3, [pc, #96]	@ (8006e90 <xTaskPriorityInherit+0xcc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d903      	bls.n	8006e3e <xTaskPriorityInherit+0x7a>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	4a15      	ldr	r2, [pc, #84]	@ (8006e90 <xTaskPriorityInherit+0xcc>)
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a10      	ldr	r2, [pc, #64]	@ (8006e8c <xTaskPriorityInherit+0xc8>)
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe f85c 	bl	8004f12 <vListInsertEnd>
 8006e5a:	e004      	b.n	8006e66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e88 <xTaskPriorityInherit+0xc4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e66:	2301      	movs	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	e008      	b.n	8006e7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e70:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <xTaskPriorityInherit+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d201      	bcs.n	8006e7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20001008 	.word	0x20001008
 8006e8c:	2000100c 	.word	0x2000100c
 8006e90:	200014e4 	.word	0x200014e4

08006e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d05c      	beq.n	8006f64 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006eaa:	4b31      	ldr	r3, [pc, #196]	@ (8006f70 <xTaskPriorityDisinherit+0xdc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d00d      	beq.n	8006ed0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	b672      	cpsid	i
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	b662      	cpsie	i
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	e7fd      	b.n	8006ecc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10d      	bne.n	8006ef4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006edc:	b672      	cpsid	i
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	b662      	cpsie	i
 8006eec:	60bb      	str	r3, [r7, #8]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef8:	1e5a      	subs	r2, r3, #1
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d02c      	beq.n	8006f64 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d128      	bne.n	8006f64 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe f858 	bl	8004fcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f34:	4b0f      	ldr	r3, [pc, #60]	@ (8006f74 <xTaskPriorityDisinherit+0xe0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d903      	bls.n	8006f44 <xTaskPriorityDisinherit+0xb0>
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	4a0c      	ldr	r2, [pc, #48]	@ (8006f74 <xTaskPriorityDisinherit+0xe0>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4a09      	ldr	r2, [pc, #36]	@ (8006f78 <xTaskPriorityDisinherit+0xe4>)
 8006f52:	441a      	add	r2, r3
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f7fd ffd9 	bl	8004f12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f64:	697b      	ldr	r3, [r7, #20]
	}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001008 	.word	0x20001008
 8006f74:	200014e4 	.word	0x200014e4
 8006f78:	2000100c 	.word	0x2000100c

08006f7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d070      	beq.n	8007076 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10d      	bne.n	8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	b672      	cpsid	i
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	b662      	cpsie	i
 8006fb0:	60fb      	str	r3, [r7, #12]
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	e7fd      	b.n	8006fb4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d902      	bls.n	8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	e002      	b.n	8006fce <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fcc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d04e      	beq.n	8007076 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d149      	bne.n	8007076 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fe2:	4b27      	ldr	r3, [pc, #156]	@ (8007080 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d10d      	bne.n	8007008 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	60bb      	str	r3, [r7, #8]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	db04      	blt.n	8007026 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	6959      	ldr	r1, [r3, #20]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4a13      	ldr	r2, [pc, #76]	@ (8007084 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007036:	4413      	add	r3, r2
 8007038:	4299      	cmp	r1, r3
 800703a:	d11c      	bne.n	8007076 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	3304      	adds	r3, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f7fd ffc3 	bl	8004fcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d903      	bls.n	800705a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007056:	4a0c      	ldr	r2, [pc, #48]	@ (8007088 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4a07      	ldr	r2, [pc, #28]	@ (8007084 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007068:	441a      	add	r2, r3
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7fd ff4e 	bl	8004f12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007076:	bf00      	nop
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20001008 	.word	0x20001008
 8007084:	2000100c 	.word	0x2000100c
 8007088:	200014e4 	.word	0x200014e4

0800708c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007090:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800709e:	3201      	adds	r2, #1
 80070a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80070a2:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070a4:	681b      	ldr	r3, [r3, #0]
	}
 80070a6:	4618      	mov	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20001008 	.word	0x20001008

080070b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070be:	4b21      	ldr	r3, [pc, #132]	@ (8007144 <prvAddCurrentTaskToDelayedList+0x90>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c4:	4b20      	ldr	r3, [pc, #128]	@ (8007148 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fd ff7e 	bl	8004fcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d10a      	bne.n	80070ee <prvAddCurrentTaskToDelayedList+0x3a>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070de:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <prvAddCurrentTaskToDelayedList+0x94>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4819      	ldr	r0, [pc, #100]	@ (800714c <prvAddCurrentTaskToDelayedList+0x98>)
 80070e8:	f7fd ff13 	bl	8004f12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070ec:	e026      	b.n	800713c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4413      	add	r3, r2
 80070f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070f6:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <prvAddCurrentTaskToDelayedList+0x94>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	429a      	cmp	r2, r3
 8007104:	d209      	bcs.n	800711a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007106:	4b12      	ldr	r3, [pc, #72]	@ (8007150 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	4b0f      	ldr	r3, [pc, #60]	@ (8007148 <prvAddCurrentTaskToDelayedList+0x94>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3304      	adds	r3, #4
 8007110:	4619      	mov	r1, r3
 8007112:	4610      	mov	r0, r2
 8007114:	f7fd ff21 	bl	8004f5a <vListInsert>
}
 8007118:	e010      	b.n	800713c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800711a:	4b0e      	ldr	r3, [pc, #56]	@ (8007154 <prvAddCurrentTaskToDelayedList+0xa0>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <prvAddCurrentTaskToDelayedList+0x94>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7fd ff17 	bl	8004f5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800712c:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <prvAddCurrentTaskToDelayedList+0xa4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	d202      	bcs.n	800713c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007136:	4a08      	ldr	r2, [pc, #32]	@ (8007158 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6013      	str	r3, [r2, #0]
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	200014e0 	.word	0x200014e0
 8007148:	20001008 	.word	0x20001008
 800714c:	200014c8 	.word	0x200014c8
 8007150:	20001498 	.word	0x20001498
 8007154:	20001494 	.word	0x20001494
 8007158:	200014fc 	.word	0x200014fc

0800715c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08a      	sub	sp, #40	@ 0x28
 8007160:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007166:	f000 fb21 	bl	80077ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800716a:	4b1e      	ldr	r3, [pc, #120]	@ (80071e4 <xTimerCreateTimerTask+0x88>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d021      	beq.n	80071b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800717a:	1d3a      	adds	r2, r7, #4
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	f107 030c 	add.w	r3, r7, #12
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd fe7d 	bl	8004e84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	9202      	str	r2, [sp, #8]
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	2302      	movs	r3, #2
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	2300      	movs	r3, #0
 800719a:	460a      	mov	r2, r1
 800719c:	4912      	ldr	r1, [pc, #72]	@ (80071e8 <xTimerCreateTimerTask+0x8c>)
 800719e:	4813      	ldr	r0, [pc, #76]	@ (80071ec <xTimerCreateTimerTask+0x90>)
 80071a0:	f7fe ffb2 	bl	8006108 <xTaskCreateStatic>
 80071a4:	4603      	mov	r3, r0
 80071a6:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <xTimerCreateTimerTask+0x94>)
 80071a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071aa:	4b11      	ldr	r3, [pc, #68]	@ (80071f0 <xTimerCreateTimerTask+0x94>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071b2:	2301      	movs	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10d      	bne.n	80071d8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	b672      	cpsid	i
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	b662      	cpsie	i
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80071d8:	697b      	ldr	r3, [r7, #20]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20001538 	.word	0x20001538
 80071e8:	08008b38 	.word	0x08008b38
 80071ec:	08007335 	.word	0x08007335
 80071f0:	2000153c 	.word	0x2000153c

080071f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	@ 0x28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007202:	2300      	movs	r3, #0
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10d      	bne.n	8007228 <xTimerGenericCommand+0x34>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007210:	b672      	cpsid	i
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	b662      	cpsie	i
 8007220:	623b      	str	r3, [r7, #32]
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	e7fd      	b.n	8007224 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007228:	4b19      	ldr	r3, [pc, #100]	@ (8007290 <xTimerGenericCommand+0x9c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d02a      	beq.n	8007286 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b05      	cmp	r3, #5
 8007240:	dc18      	bgt.n	8007274 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007242:	f7ff fda1 	bl	8006d88 <xTaskGetSchedulerState>
 8007246:	4603      	mov	r3, r0
 8007248:	2b02      	cmp	r3, #2
 800724a:	d109      	bne.n	8007260 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800724c:	4b10      	ldr	r3, [pc, #64]	@ (8007290 <xTimerGenericCommand+0x9c>)
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	f107 0110 	add.w	r1, r7, #16
 8007254:	2300      	movs	r3, #0
 8007256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007258:	f7fe f8b2 	bl	80053c0 <xQueueGenericSend>
 800725c:	6278      	str	r0, [r7, #36]	@ 0x24
 800725e:	e012      	b.n	8007286 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007260:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <xTimerGenericCommand+0x9c>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	f107 0110 	add.w	r1, r7, #16
 8007268:	2300      	movs	r3, #0
 800726a:	2200      	movs	r2, #0
 800726c:	f7fe f8a8 	bl	80053c0 <xQueueGenericSend>
 8007270:	6278      	str	r0, [r7, #36]	@ 0x24
 8007272:	e008      	b.n	8007286 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007274:	4b06      	ldr	r3, [pc, #24]	@ (8007290 <xTimerGenericCommand+0x9c>)
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	f107 0110 	add.w	r1, r7, #16
 800727c:	2300      	movs	r3, #0
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	f7fe f9a8 	bl	80055d4 <xQueueGenericSendFromISR>
 8007284:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007288:	4618      	mov	r0, r3
 800728a:	3728      	adds	r7, #40	@ 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20001538 	.word	0x20001538

08007294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af02      	add	r7, sp, #8
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729e:	4b24      	ldr	r3, [pc, #144]	@ (8007330 <prvProcessExpiredTimer+0x9c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fd fe8d 	bl	8004fcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d025      	beq.n	800730c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	18d1      	adds	r1, r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	6978      	ldr	r0, [r7, #20]
 80072ce:	f000 f8d7 	bl	8007480 <prvInsertTimerInActiveList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d022      	beq.n	800731e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072d8:	2300      	movs	r3, #0
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	2300      	movs	r3, #0
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	2100      	movs	r1, #0
 80072e2:	6978      	ldr	r0, [r7, #20]
 80072e4:	f7ff ff86 	bl	80071f4 <xTimerGenericCommand>
 80072e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d116      	bne.n	800731e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	b672      	cpsid	i
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	b662      	cpsie	i
 8007304:	60fb      	str	r3, [r7, #12]
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	e7fd      	b.n	8007308 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	b2da      	uxtb	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	6978      	ldr	r0, [r7, #20]
 8007324:	4798      	blx	r3
}
 8007326:	bf00      	nop
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20001530 	.word	0x20001530

08007334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800733c:	f107 0308 	add.w	r3, r7, #8
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f859 	bl	80073f8 <prvGetNextExpireTime>
 8007346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4619      	mov	r1, r3
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f805 	bl	800735c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007352:	f000 f8d7 	bl	8007504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007356:	bf00      	nop
 8007358:	e7f0      	b.n	800733c <prvTimerTask+0x8>
	...

0800735c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007366:	f7ff f909 	bl	800657c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736a:	f107 0308 	add.w	r3, r7, #8
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f866 	bl	8007440 <prvSampleTimeNow>
 8007374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d130      	bne.n	80073de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <prvProcessTimerOrBlockTask+0x3c>
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	429a      	cmp	r2, r3
 8007388:	d806      	bhi.n	8007398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800738a:	f7ff f905 	bl	8006598 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff ff7f 	bl	8007294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007396:	e024      	b.n	80073e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d008      	beq.n	80073b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800739e:	4b13      	ldr	r3, [pc, #76]	@ (80073ec <prvProcessTimerOrBlockTask+0x90>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <prvProcessTimerOrBlockTask+0x50>
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <prvProcessTimerOrBlockTask+0x52>
 80073ac:	2300      	movs	r3, #0
 80073ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073b0:	4b0f      	ldr	r3, [pc, #60]	@ (80073f0 <prvProcessTimerOrBlockTask+0x94>)
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	4619      	mov	r1, r3
 80073be:	f7fe fe6f 	bl	80060a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073c2:	f7ff f8e9 	bl	8006598 <xTaskResumeAll>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073cc:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <prvProcessTimerOrBlockTask+0x98>)
 80073ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	f3bf 8f6f 	isb	sy
}
 80073dc:	e001      	b.n	80073e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073de:	f7ff f8db 	bl	8006598 <xTaskResumeAll>
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20001534 	.word	0x20001534
 80073f0:	20001538 	.word	0x20001538
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007400:	4b0e      	ldr	r3, [pc, #56]	@ (800743c <prvGetNextExpireTime+0x44>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <prvGetNextExpireTime+0x16>
 800740a:	2201      	movs	r2, #1
 800740c:	e000      	b.n	8007410 <prvGetNextExpireTime+0x18>
 800740e:	2200      	movs	r2, #0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800741c:	4b07      	ldr	r3, [pc, #28]	@ (800743c <prvGetNextExpireTime+0x44>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e001      	b.n	800742c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800742c:	68fb      	ldr	r3, [r7, #12]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20001530 	.word	0x20001530

08007440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007448:	f7ff f946 	bl	80066d8 <xTaskGetTickCount>
 800744c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800744e:	4b0b      	ldr	r3, [pc, #44]	@ (800747c <prvSampleTimeNow+0x3c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	429a      	cmp	r2, r3
 8007456:	d205      	bcs.n	8007464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007458:	f000 f940 	bl	80076dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e002      	b.n	800746a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800746a:	4a04      	ldr	r2, [pc, #16]	@ (800747c <prvSampleTimeNow+0x3c>)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007470:	68fb      	ldr	r3, [r7, #12]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20001540 	.word	0x20001540

08007480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d812      	bhi.n	80074cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	e01b      	b.n	80074f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074ba:	4b10      	ldr	r3, [pc, #64]	@ (80074fc <prvInsertTimerInActiveList+0x7c>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7fd fd48 	bl	8004f5a <vListInsert>
 80074ca:	e012      	b.n	80074f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d206      	bcs.n	80074e2 <prvInsertTimerInActiveList+0x62>
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d302      	bcc.n	80074e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074dc:	2301      	movs	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	e007      	b.n	80074f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074e2:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <prvInsertTimerInActiveList+0x80>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4619      	mov	r1, r3
 80074ec:	4610      	mov	r0, r2
 80074ee:	f7fd fd34 	bl	8004f5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074f2:	697b      	ldr	r3, [r7, #20]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20001534 	.word	0x20001534
 8007500:	20001530 	.word	0x20001530

08007504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08e      	sub	sp, #56	@ 0x38
 8007508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800750a:	e0d4      	b.n	80076b6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da1b      	bge.n	800754a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007512:	1d3b      	adds	r3, r7, #4
 8007514:	3304      	adds	r3, #4
 8007516:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	b672      	cpsid	i
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	b662      	cpsie	i
 8007532:	61fb      	str	r3, [r7, #28]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007540:	6850      	ldr	r0, [r2, #4]
 8007542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007544:	6892      	ldr	r2, [r2, #8]
 8007546:	4611      	mov	r1, r2
 8007548:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f2c0 80b2 	blt.w	80076b6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7fd fd32 	bl	8004fcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007568:	463b      	mov	r3, r7
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ff68 	bl	8007440 <prvSampleTimeNow>
 8007570:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b09      	cmp	r3, #9
 8007576:	f200 809b 	bhi.w	80076b0 <prvProcessReceivedCommands+0x1ac>
 800757a:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <prvProcessReceivedCommands+0x7c>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	08007623 	.word	0x08007623
 8007590:	08007637 	.word	0x08007637
 8007594:	08007687 	.word	0x08007687
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075a9 	.word	0x080075a9
 80075a0:	08007623 	.word	0x08007623
 80075a4:	08007637 	.word	0x08007637
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	18d1      	adds	r1, r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c8:	f7ff ff5a 	bl	8007480 <prvInsertTimerInActiveList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d070      	beq.n	80076b4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d065      	beq.n	80076b4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	441a      	add	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	2100      	movs	r1, #0
 80075f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075fa:	f7ff fdfb 	bl	80071f4 <xTimerGenericCommand>
 80075fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d156      	bne.n	80076b4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	b672      	cpsid	i
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	b662      	cpsie	i
 800761a:	61bb      	str	r3, [r7, #24]
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	e7fd      	b.n	800761e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	b2da      	uxtb	r2, r3
 800762e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007634:	e03f      	b.n	80076b6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	b2da      	uxtb	r2, r3
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800764e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10d      	bne.n	8007672 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	b672      	cpsid	i
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	b662      	cpsie	i
 800766a:	617b      	str	r3, [r7, #20]
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	e7fd      	b.n	800766e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	18d1      	adds	r1, r2, r3
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007680:	f7ff fefe 	bl	8007480 <prvInsertTimerInActiveList>
					break;
 8007684:	e017      	b.n	80076b6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d103      	bne.n	800769c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007696:	f000 fbd5 	bl	8007e44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800769a:	e00c      	b.n	80076b6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800769c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80076ae:	e002      	b.n	80076b6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <prvProcessReceivedCommands+0x1b2>
					break;
 80076b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076b6:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <prvProcessReceivedCommands+0x1d4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	1d39      	adds	r1, r7, #4
 80076bc:	2200      	movs	r2, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe f8c4 	bl	800584c <xQueueReceive>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f47f af20 	bne.w	800750c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	3730      	adds	r7, #48	@ 0x30
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20001538 	.word	0x20001538

080076dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e2:	e04b      	b.n	800777c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076e4:	4b2f      	ldr	r3, [pc, #188]	@ (80077a4 <prvSwitchTimerLists+0xc8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ee:	4b2d      	ldr	r3, [pc, #180]	@ (80077a4 <prvSwitchTimerLists+0xc8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fd fc65 	bl	8004fcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d031      	beq.n	800777c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4413      	add	r3, r2
 8007720:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	429a      	cmp	r2, r3
 8007728:	d90e      	bls.n	8007748 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007736:	4b1b      	ldr	r3, [pc, #108]	@ (80077a4 <prvSwitchTimerLists+0xc8>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3304      	adds	r3, #4
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7fd fc0a 	bl	8004f5a <vListInsert>
 8007746:	e019      	b.n	800777c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007748:	2300      	movs	r3, #0
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	2300      	movs	r3, #0
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	2100      	movs	r1, #0
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff fd4e 	bl	80071f4 <xTimerGenericCommand>
 8007758:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	b672      	cpsid	i
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	b662      	cpsie	i
 8007774:	603b      	str	r3, [r7, #0]
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	e7fd      	b.n	8007778 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800777c:	4b09      	ldr	r3, [pc, #36]	@ (80077a4 <prvSwitchTimerLists+0xc8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1ae      	bne.n	80076e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007786:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <prvSwitchTimerLists+0xc8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <prvSwitchTimerLists+0xcc>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a04      	ldr	r2, [pc, #16]	@ (80077a4 <prvSwitchTimerLists+0xc8>)
 8007792:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007794:	4a04      	ldr	r2, [pc, #16]	@ (80077a8 <prvSwitchTimerLists+0xcc>)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	6013      	str	r3, [r2, #0]
}
 800779a:	bf00      	nop
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20001530 	.word	0x20001530
 80077a8:	20001534 	.word	0x20001534

080077ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077b2:	f000 f94b 	bl	8007a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077b6:	4b15      	ldr	r3, [pc, #84]	@ (800780c <prvCheckForValidListAndQueue+0x60>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d120      	bne.n	8007800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077be:	4814      	ldr	r0, [pc, #80]	@ (8007810 <prvCheckForValidListAndQueue+0x64>)
 80077c0:	f7fd fb7a 	bl	8004eb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077c4:	4813      	ldr	r0, [pc, #76]	@ (8007814 <prvCheckForValidListAndQueue+0x68>)
 80077c6:	f7fd fb77 	bl	8004eb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ca:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <prvCheckForValidListAndQueue+0x6c>)
 80077cc:	4a10      	ldr	r2, [pc, #64]	@ (8007810 <prvCheckForValidListAndQueue+0x64>)
 80077ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077d0:	4b12      	ldr	r3, [pc, #72]	@ (800781c <prvCheckForValidListAndQueue+0x70>)
 80077d2:	4a10      	ldr	r2, [pc, #64]	@ (8007814 <prvCheckForValidListAndQueue+0x68>)
 80077d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077d6:	2300      	movs	r3, #0
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	4b11      	ldr	r3, [pc, #68]	@ (8007820 <prvCheckForValidListAndQueue+0x74>)
 80077dc:	4a11      	ldr	r2, [pc, #68]	@ (8007824 <prvCheckForValidListAndQueue+0x78>)
 80077de:	2110      	movs	r1, #16
 80077e0:	200a      	movs	r0, #10
 80077e2:	f7fd fc89 	bl	80050f8 <xQueueGenericCreateStatic>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a08      	ldr	r2, [pc, #32]	@ (800780c <prvCheckForValidListAndQueue+0x60>)
 80077ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077ec:	4b07      	ldr	r3, [pc, #28]	@ (800780c <prvCheckForValidListAndQueue+0x60>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077f4:	4b05      	ldr	r3, [pc, #20]	@ (800780c <prvCheckForValidListAndQueue+0x60>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	490b      	ldr	r1, [pc, #44]	@ (8007828 <prvCheckForValidListAndQueue+0x7c>)
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fbfc 	bl	8005ff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007800:	f000 f95a 	bl	8007ab8 <vPortExitCritical>
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20001538 	.word	0x20001538
 8007810:	20001508 	.word	0x20001508
 8007814:	2000151c 	.word	0x2000151c
 8007818:	20001530 	.word	0x20001530
 800781c:	20001534 	.word	0x20001534
 8007820:	200015e4 	.word	0x200015e4
 8007824:	20001544 	.word	0x20001544
 8007828:	08008b40 	.word	0x08008b40

0800782c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3b04      	subs	r3, #4
 800783c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b04      	subs	r3, #4
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800785c:	4a0c      	ldr	r2, [pc, #48]	@ (8007890 <pxPortInitialiseStack+0x64>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b14      	subs	r3, #20
 8007866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3b04      	subs	r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f06f 0202 	mvn.w	r2, #2
 800787a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3b20      	subs	r3, #32
 8007880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007882:	68fb      	ldr	r3, [r7, #12]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	08007895 	.word	0x08007895

08007894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800789e:	4b15      	ldr	r3, [pc, #84]	@ (80078f4 <prvTaskExitError+0x60>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d00d      	beq.n	80078c4 <prvTaskExitError+0x30>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ac:	b672      	cpsid	i
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	b662      	cpsie	i
 80078bc:	60fb      	str	r3, [r7, #12]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <prvTaskExitError+0x2c>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c8:	b672      	cpsid	i
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	b662      	cpsie	i
 80078d8:	60bb      	str	r3, [r7, #8]
}
 80078da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078dc:	bf00      	nop
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0fc      	beq.n	80078de <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	2000000c 	.word	0x2000000c
	...

08007900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007900:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <pxCurrentTCBConst2>)
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	6808      	ldr	r0, [r1, #0]
 8007906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	f380 8809 	msr	PSP, r0
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8811 	msr	BASEPRI, r0
 800791a:	4770      	bx	lr
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst2>:
 8007920:	20001008 	.word	0x20001008
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007928:	4808      	ldr	r0, [pc, #32]	@ (800794c <prvPortStartFirstTask+0x24>)
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	6800      	ldr	r0, [r0, #0]
 800792e:	f380 8808 	msr	MSP, r0
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f380 8814 	msr	CONTROL, r0
 800793a:	b662      	cpsie	i
 800793c:	b661      	cpsie	f
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	df00      	svc	0
 8007948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800794a:	bf00      	nop
 800794c:	e000ed08 	.word	0xe000ed08

08007950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007956:	4b37      	ldr	r3, [pc, #220]	@ (8007a34 <xPortStartScheduler+0xe4>)
 8007958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	22ff      	movs	r2, #255	@ 0xff
 8007966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007978:	b2da      	uxtb	r2, r3
 800797a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a38 <xPortStartScheduler+0xe8>)
 800797c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800797e:	4b2f      	ldr	r3, [pc, #188]	@ (8007a3c <xPortStartScheduler+0xec>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007984:	e009      	b.n	800799a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007986:	4b2d      	ldr	r3, [pc, #180]	@ (8007a3c <xPortStartScheduler+0xec>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a2b      	ldr	r2, [pc, #172]	@ (8007a3c <xPortStartScheduler+0xec>)
 800798e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a2:	2b80      	cmp	r3, #128	@ 0x80
 80079a4:	d0ef      	beq.n	8007986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079a6:	4b25      	ldr	r3, [pc, #148]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1c3 0307 	rsb	r3, r3, #7
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d00d      	beq.n	80079ce <xPortStartScheduler+0x7e>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079ce:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	4a19      	ldr	r2, [pc, #100]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079d8:	4b18      	ldr	r3, [pc, #96]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079e0:	4a16      	ldr	r2, [pc, #88]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079ec:	4b14      	ldr	r3, [pc, #80]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a13      	ldr	r2, [pc, #76]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079f8:	4b11      	ldr	r3, [pc, #68]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a10      	ldr	r2, [pc, #64]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a04:	f000 f8dc 	bl	8007bc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a08:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <xPortStartScheduler+0xf4>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a0e:	f000 f8fb 	bl	8007c08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a12:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <xPortStartScheduler+0xf8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a0c      	ldr	r2, [pc, #48]	@ (8007a48 <xPortStartScheduler+0xf8>)
 8007a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a1e:	f7ff ff83 	bl	8007928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a22:	f7fe ff25 	bl	8006870 <vTaskSwitchContext>
	prvTaskExitError();
 8007a26:	f7ff ff35 	bl	8007894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	e000e400 	.word	0xe000e400
 8007a38:	20001634 	.word	0x20001634
 8007a3c:	20001638 	.word	0x20001638
 8007a40:	e000ed20 	.word	0xe000ed20
 8007a44:	2000000c 	.word	0x2000000c
 8007a48:	e000ef34 	.word	0xe000ef34

08007a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a56:	b672      	cpsid	i
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	b662      	cpsie	i
 8007a66:	607b      	str	r3, [r7, #4]
}
 8007a68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a6a:	4b11      	ldr	r3, [pc, #68]	@ (8007ab0 <vPortEnterCritical+0x64>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	4a0f      	ldr	r2, [pc, #60]	@ (8007ab0 <vPortEnterCritical+0x64>)
 8007a72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a74:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab0 <vPortEnterCritical+0x64>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d112      	bne.n	8007aa2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <vPortEnterCritical+0x68>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <vPortEnterCritical+0x56>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	b672      	cpsid	i
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	b662      	cpsie	i
 8007a9a:	603b      	str	r3, [r7, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <vPortEnterCritical+0x52>
	}
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	2000000c 	.word	0x2000000c
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007abe:	4b13      	ldr	r3, [pc, #76]	@ (8007b0c <vPortExitCritical+0x54>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10d      	bne.n	8007ae2 <vPortExitCritical+0x2a>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	b672      	cpsid	i
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	b662      	cpsie	i
 8007ada:	607b      	str	r3, [r7, #4]
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	e7fd      	b.n	8007ade <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b0c <vPortExitCritical+0x54>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	4a08      	ldr	r2, [pc, #32]	@ (8007b0c <vPortExitCritical+0x54>)
 8007aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <vPortExitCritical+0x54>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <vPortExitCritical+0x48>
 8007af4:	2300      	movs	r3, #0
 8007af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	2000000c 	.word	0x2000000c

08007b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b10:	f3ef 8009 	mrs	r0, PSP
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4b15      	ldr	r3, [pc, #84]	@ (8007b70 <pxCurrentTCBConst>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f01e 0f10 	tst.w	lr, #16
 8007b20:	bf08      	it	eq
 8007b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	6010      	str	r0, [r2, #0]
 8007b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b34:	b672      	cpsid	i
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	b662      	cpsie	i
 8007b44:	f7fe fe94 	bl	8006870 <vTaskSwitchContext>
 8007b48:	f04f 0000 	mov.w	r0, #0
 8007b4c:	f380 8811 	msr	BASEPRI, r0
 8007b50:	bc09      	pop	{r0, r3}
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f01e 0f10 	tst.w	lr, #16
 8007b5e:	bf08      	it	eq
 8007b60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b64:	f380 8809 	msr	PSP, r0
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop

08007b70 <pxCurrentTCBConst>:
 8007b70:	20001008 	.word	0x20001008
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	b672      	cpsid	i
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	b662      	cpsie	i
 8007b92:	607b      	str	r3, [r7, #4]
}
 8007b94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b96:	f7fe fdaf 	bl	80066f8 <xTaskIncrementTick>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ba0:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <SysTick_Handler+0x44>)
 8007ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	f383 8811 	msr	BASEPRI, r3
}
 8007bb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <vPortSetupTimerInterrupt+0x34>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bca:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <vPortSetupTimerInterrupt+0x38>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <vPortSetupTimerInterrupt+0x3c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c00 <vPortSetupTimerInterrupt+0x40>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	099b      	lsrs	r3, r3, #6
 8007bdc:	4a09      	ldr	r2, [pc, #36]	@ (8007c04 <vPortSetupTimerInterrupt+0x44>)
 8007bde:	3b01      	subs	r3, #1
 8007be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007be2:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <vPortSetupTimerInterrupt+0x34>)
 8007be4:	2207      	movs	r2, #7
 8007be6:	601a      	str	r2, [r3, #0]
}
 8007be8:	bf00      	nop
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	e000e010 	.word	0xe000e010
 8007bf8:	e000e018 	.word	0xe000e018
 8007bfc:	20000000 	.word	0x20000000
 8007c00:	10624dd3 	.word	0x10624dd3
 8007c04:	e000e014 	.word	0xe000e014

08007c08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c18 <vPortEnableVFP+0x10>
 8007c0c:	6801      	ldr	r1, [r0, #0]
 8007c0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c12:	6001      	str	r1, [r0, #0]
 8007c14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c16:	bf00      	nop
 8007c18:	e000ed88 	.word	0xe000ed88

08007c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c22:	f3ef 8305 	mrs	r3, IPSR
 8007c26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b0f      	cmp	r3, #15
 8007c2c:	d917      	bls.n	8007c5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c98 <vPortValidateInterruptPriority+0x7c>)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c38:	4b18      	ldr	r3, [pc, #96]	@ (8007c9c <vPortValidateInterruptPriority+0x80>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	7afa      	ldrb	r2, [r7, #11]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d20d      	bcs.n	8007c5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	b672      	cpsid	i
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	b662      	cpsie	i
 8007c56:	607b      	str	r3, [r7, #4]
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	e7fd      	b.n	8007c5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <vPortValidateInterruptPriority+0x84>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca4 <vPortValidateInterruptPriority+0x88>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d90d      	bls.n	8007c8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	b672      	cpsid	i
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	b662      	cpsie	i
 8007c82:	603b      	str	r3, [r7, #0]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <vPortValidateInterruptPriority+0x6a>
	}
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	e000e3f0 	.word	0xe000e3f0
 8007c9c:	20001634 	.word	0x20001634
 8007ca0:	e000ed0c 	.word	0xe000ed0c
 8007ca4:	20001638 	.word	0x20001638

08007ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	@ 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cb4:	f7fe fc62 	bl	800657c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8007e30 <pvPortMalloc+0x188>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cc0:	f000 f920 	bl	8007f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007e34 <pvPortMalloc+0x18c>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8094 	bne.w	8007dfa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d020      	beq.n	8007d1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007cd8:	2208      	movs	r2, #8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d017      	beq.n	8007d1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00d      	beq.n	8007d1a <pvPortMalloc+0x72>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	b672      	cpsid	i
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	b662      	cpsie	i
 8007d12:	617b      	str	r3, [r7, #20]
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	e7fd      	b.n	8007d16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d06c      	beq.n	8007dfa <pvPortMalloc+0x152>
 8007d20:	4b45      	ldr	r3, [pc, #276]	@ (8007e38 <pvPortMalloc+0x190>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d867      	bhi.n	8007dfa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d2a:	4b44      	ldr	r3, [pc, #272]	@ (8007e3c <pvPortMalloc+0x194>)
 8007d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d2e:	4b43      	ldr	r3, [pc, #268]	@ (8007e3c <pvPortMalloc+0x194>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d34:	e004      	b.n	8007d40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d903      	bls.n	8007d52 <pvPortMalloc+0xaa>
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f1      	bne.n	8007d36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d52:	4b37      	ldr	r3, [pc, #220]	@ (8007e30 <pvPortMalloc+0x188>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d04e      	beq.n	8007dfa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2208      	movs	r2, #8
 8007d62:	4413      	add	r3, r2
 8007d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1ad2      	subs	r2, r2, r3
 8007d76:	2308      	movs	r3, #8
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d922      	bls.n	8007dc4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4413      	add	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00d      	beq.n	8007dac <pvPortMalloc+0x104>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	b672      	cpsid	i
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	b662      	cpsie	i
 8007da4:	613b      	str	r3, [r7, #16]
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	e7fd      	b.n	8007da8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dbe:	69b8      	ldr	r0, [r7, #24]
 8007dc0:	f000 f902 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e38 <pvPortMalloc+0x190>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	4a1a      	ldr	r2, [pc, #104]	@ (8007e38 <pvPortMalloc+0x190>)
 8007dd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dd2:	4b19      	ldr	r3, [pc, #100]	@ (8007e38 <pvPortMalloc+0x190>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <pvPortMalloc+0x198>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d203      	bcs.n	8007de6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dde:	4b16      	ldr	r3, [pc, #88]	@ (8007e38 <pvPortMalloc+0x190>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a17      	ldr	r2, [pc, #92]	@ (8007e40 <pvPortMalloc+0x198>)
 8007de4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <pvPortMalloc+0x18c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dfa:	f7fe fbcd 	bl	8006598 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00d      	beq.n	8007e24 <pvPortMalloc+0x17c>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0c:	b672      	cpsid	i
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	b662      	cpsie	i
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <pvPortMalloc+0x178>
	return pvReturn;
 8007e24:	69fb      	ldr	r3, [r7, #28]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3728      	adds	r7, #40	@ 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20005244 	.word	0x20005244
 8007e34:	20005250 	.word	0x20005250
 8007e38:	20005248 	.word	0x20005248
 8007e3c:	2000523c 	.word	0x2000523c
 8007e40:	2000524c 	.word	0x2000524c

08007e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d04e      	beq.n	8007ef4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e56:	2308      	movs	r3, #8
 8007e58:	425b      	negs	r3, r3
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	4b24      	ldr	r3, [pc, #144]	@ (8007efc <vPortFree+0xb8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10d      	bne.n	8007e8e <vPortFree+0x4a>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	b672      	cpsid	i
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	b662      	cpsie	i
 8007e86:	60fb      	str	r3, [r7, #12]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00d      	beq.n	8007eb2 <vPortFree+0x6e>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	b672      	cpsid	i
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	b662      	cpsie	i
 8007eaa:	60bb      	str	r3, [r7, #8]
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	e7fd      	b.n	8007eae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b11      	ldr	r3, [pc, #68]	@ (8007efc <vPortFree+0xb8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d019      	beq.n	8007ef4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d115      	bne.n	8007ef4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8007efc <vPortFree+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed8:	f7fe fb50 	bl	800657c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <vPortFree+0xbc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a06      	ldr	r2, [pc, #24]	@ (8007f00 <vPortFree+0xbc>)
 8007ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f86c 	bl	8007fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ef0:	f7fe fb52 	bl	8006598 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ef4:	bf00      	nop
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20005250 	.word	0x20005250
 8007f00:	20005248 	.word	0x20005248

08007f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f10:	4b27      	ldr	r3, [pc, #156]	@ (8007fb0 <prvHeapInit+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	4a1f      	ldr	r2, [pc, #124]	@ (8007fb0 <prvHeapInit+0xac>)
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb4 <prvHeapInit+0xb0>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb4 <prvHeapInit+0xb0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f50:	2208      	movs	r2, #8
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0307 	bic.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a15      	ldr	r2, [pc, #84]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f66:	4b14      	ldr	r3, [pc, #80]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f84:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	@ (8007fbc <prvHeapInit+0xb8>)
 8007f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4a09      	ldr	r2, [pc, #36]	@ (8007fc0 <prvHeapInit+0xbc>)
 8007f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f9c:	4b09      	ldr	r3, [pc, #36]	@ (8007fc4 <prvHeapInit+0xc0>)
 8007f9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	2000163c 	.word	0x2000163c
 8007fb4:	2000523c 	.word	0x2000523c
 8007fb8:	20005244 	.word	0x20005244
 8007fbc:	2000524c 	.word	0x2000524c
 8007fc0:	20005248 	.word	0x20005248
 8007fc4:	20005250 	.word	0x20005250

08007fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fd0:	4b28      	ldr	r3, [pc, #160]	@ (8008074 <prvInsertBlockIntoFreeList+0xac>)
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e002      	b.n	8007fdc <prvInsertBlockIntoFreeList+0x14>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d8f7      	bhi.n	8007fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d108      	bne.n	800800a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d118      	bne.n	8008050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b15      	ldr	r3, [pc, #84]	@ (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d00d      	beq.n	8008046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e008      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008046:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e003      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	2000523c 	.word	0x2000523c
 8008078:	20005244 	.word	0x20005244

0800807c <sniprintf>:
 800807c:	b40c      	push	{r2, r3}
 800807e:	b530      	push	{r4, r5, lr}
 8008080:	4b17      	ldr	r3, [pc, #92]	@ (80080e0 <sniprintf+0x64>)
 8008082:	1e0c      	subs	r4, r1, #0
 8008084:	681d      	ldr	r5, [r3, #0]
 8008086:	b09d      	sub	sp, #116	@ 0x74
 8008088:	da08      	bge.n	800809c <sniprintf+0x20>
 800808a:	238b      	movs	r3, #139	@ 0x8b
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	f04f 30ff 	mov.w	r0, #4294967295
 8008092:	b01d      	add	sp, #116	@ 0x74
 8008094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008098:	b002      	add	sp, #8
 800809a:	4770      	bx	lr
 800809c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80080a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080a4:	bf14      	ite	ne
 80080a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080aa:	4623      	moveq	r3, r4
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	9307      	str	r3, [sp, #28]
 80080b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080b4:	9002      	str	r0, [sp, #8]
 80080b6:	9006      	str	r0, [sp, #24]
 80080b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080be:	ab21      	add	r3, sp, #132	@ 0x84
 80080c0:	a902      	add	r1, sp, #8
 80080c2:	4628      	mov	r0, r5
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	f000 f9f9 	bl	80084bc <_svfiprintf_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	bfbc      	itt	lt
 80080ce:	238b      	movlt	r3, #139	@ 0x8b
 80080d0:	602b      	strlt	r3, [r5, #0]
 80080d2:	2c00      	cmp	r4, #0
 80080d4:	d0dd      	beq.n	8008092 <sniprintf+0x16>
 80080d6:	9b02      	ldr	r3, [sp, #8]
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e7d9      	b.n	8008092 <sniprintf+0x16>
 80080de:	bf00      	nop
 80080e0:	20000010 	.word	0x20000010

080080e4 <memset>:
 80080e4:	4402      	add	r2, r0
 80080e6:	4603      	mov	r3, r0
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d100      	bne.n	80080ee <memset+0xa>
 80080ec:	4770      	bx	lr
 80080ee:	f803 1b01 	strb.w	r1, [r3], #1
 80080f2:	e7f9      	b.n	80080e8 <memset+0x4>

080080f4 <_reclaim_reent>:
 80080f4:	4b29      	ldr	r3, [pc, #164]	@ (800819c <_reclaim_reent+0xa8>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4283      	cmp	r3, r0
 80080fa:	b570      	push	{r4, r5, r6, lr}
 80080fc:	4604      	mov	r4, r0
 80080fe:	d04b      	beq.n	8008198 <_reclaim_reent+0xa4>
 8008100:	69c3      	ldr	r3, [r0, #28]
 8008102:	b1ab      	cbz	r3, 8008130 <_reclaim_reent+0x3c>
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	b16b      	cbz	r3, 8008124 <_reclaim_reent+0x30>
 8008108:	2500      	movs	r5, #0
 800810a:	69e3      	ldr	r3, [r4, #28]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	5959      	ldr	r1, [r3, r5]
 8008110:	2900      	cmp	r1, #0
 8008112:	d13b      	bne.n	800818c <_reclaim_reent+0x98>
 8008114:	3504      	adds	r5, #4
 8008116:	2d80      	cmp	r5, #128	@ 0x80
 8008118:	d1f7      	bne.n	800810a <_reclaim_reent+0x16>
 800811a:	69e3      	ldr	r3, [r4, #28]
 800811c:	4620      	mov	r0, r4
 800811e:	68d9      	ldr	r1, [r3, #12]
 8008120:	f000 f878 	bl	8008214 <_free_r>
 8008124:	69e3      	ldr	r3, [r4, #28]
 8008126:	6819      	ldr	r1, [r3, #0]
 8008128:	b111      	cbz	r1, 8008130 <_reclaim_reent+0x3c>
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f872 	bl	8008214 <_free_r>
 8008130:	6961      	ldr	r1, [r4, #20]
 8008132:	b111      	cbz	r1, 800813a <_reclaim_reent+0x46>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f86d 	bl	8008214 <_free_r>
 800813a:	69e1      	ldr	r1, [r4, #28]
 800813c:	b111      	cbz	r1, 8008144 <_reclaim_reent+0x50>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 f868 	bl	8008214 <_free_r>
 8008144:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008146:	b111      	cbz	r1, 800814e <_reclaim_reent+0x5a>
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f863 	bl	8008214 <_free_r>
 800814e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008150:	b111      	cbz	r1, 8008158 <_reclaim_reent+0x64>
 8008152:	4620      	mov	r0, r4
 8008154:	f000 f85e 	bl	8008214 <_free_r>
 8008158:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800815a:	b111      	cbz	r1, 8008162 <_reclaim_reent+0x6e>
 800815c:	4620      	mov	r0, r4
 800815e:	f000 f859 	bl	8008214 <_free_r>
 8008162:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008164:	b111      	cbz	r1, 800816c <_reclaim_reent+0x78>
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f854 	bl	8008214 <_free_r>
 800816c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800816e:	b111      	cbz	r1, 8008176 <_reclaim_reent+0x82>
 8008170:	4620      	mov	r0, r4
 8008172:	f000 f84f 	bl	8008214 <_free_r>
 8008176:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008178:	b111      	cbz	r1, 8008180 <_reclaim_reent+0x8c>
 800817a:	4620      	mov	r0, r4
 800817c:	f000 f84a 	bl	8008214 <_free_r>
 8008180:	6a23      	ldr	r3, [r4, #32]
 8008182:	b14b      	cbz	r3, 8008198 <_reclaim_reent+0xa4>
 8008184:	4620      	mov	r0, r4
 8008186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800818a:	4718      	bx	r3
 800818c:	680e      	ldr	r6, [r1, #0]
 800818e:	4620      	mov	r0, r4
 8008190:	f000 f840 	bl	8008214 <_free_r>
 8008194:	4631      	mov	r1, r6
 8008196:	e7bb      	b.n	8008110 <_reclaim_reent+0x1c>
 8008198:	bd70      	pop	{r4, r5, r6, pc}
 800819a:	bf00      	nop
 800819c:	20000010 	.word	0x20000010

080081a0 <__errno>:
 80081a0:	4b01      	ldr	r3, [pc, #4]	@ (80081a8 <__errno+0x8>)
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000010 	.word	0x20000010

080081ac <__libc_init_array>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4d0d      	ldr	r5, [pc, #52]	@ (80081e4 <__libc_init_array+0x38>)
 80081b0:	4c0d      	ldr	r4, [pc, #52]	@ (80081e8 <__libc_init_array+0x3c>)
 80081b2:	1b64      	subs	r4, r4, r5
 80081b4:	10a4      	asrs	r4, r4, #2
 80081b6:	2600      	movs	r6, #0
 80081b8:	42a6      	cmp	r6, r4
 80081ba:	d109      	bne.n	80081d0 <__libc_init_array+0x24>
 80081bc:	4d0b      	ldr	r5, [pc, #44]	@ (80081ec <__libc_init_array+0x40>)
 80081be:	4c0c      	ldr	r4, [pc, #48]	@ (80081f0 <__libc_init_array+0x44>)
 80081c0:	f000 fc66 	bl	8008a90 <_init>
 80081c4:	1b64      	subs	r4, r4, r5
 80081c6:	10a4      	asrs	r4, r4, #2
 80081c8:	2600      	movs	r6, #0
 80081ca:	42a6      	cmp	r6, r4
 80081cc:	d105      	bne.n	80081da <__libc_init_array+0x2e>
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d4:	4798      	blx	r3
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7ee      	b.n	80081b8 <__libc_init_array+0xc>
 80081da:	f855 3b04 	ldr.w	r3, [r5], #4
 80081de:	4798      	blx	r3
 80081e0:	3601      	adds	r6, #1
 80081e2:	e7f2      	b.n	80081ca <__libc_init_array+0x1e>
 80081e4:	08008bf4 	.word	0x08008bf4
 80081e8:	08008bf4 	.word	0x08008bf4
 80081ec:	08008bf4 	.word	0x08008bf4
 80081f0:	08008bf8 	.word	0x08008bf8

080081f4 <__retarget_lock_acquire_recursive>:
 80081f4:	4770      	bx	lr

080081f6 <__retarget_lock_release_recursive>:
 80081f6:	4770      	bx	lr

080081f8 <memcpy>:
 80081f8:	440a      	add	r2, r1
 80081fa:	4291      	cmp	r1, r2
 80081fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008200:	d100      	bne.n	8008204 <memcpy+0xc>
 8008202:	4770      	bx	lr
 8008204:	b510      	push	{r4, lr}
 8008206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800820a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800820e:	4291      	cmp	r1, r2
 8008210:	d1f9      	bne.n	8008206 <memcpy+0xe>
 8008212:	bd10      	pop	{r4, pc}

08008214 <_free_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4605      	mov	r5, r0
 8008218:	2900      	cmp	r1, #0
 800821a:	d041      	beq.n	80082a0 <_free_r+0x8c>
 800821c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008220:	1f0c      	subs	r4, r1, #4
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfb8      	it	lt
 8008226:	18e4      	addlt	r4, r4, r3
 8008228:	f000 f8e0 	bl	80083ec <__malloc_lock>
 800822c:	4a1d      	ldr	r2, [pc, #116]	@ (80082a4 <_free_r+0x90>)
 800822e:	6813      	ldr	r3, [r2, #0]
 8008230:	b933      	cbnz	r3, 8008240 <_free_r+0x2c>
 8008232:	6063      	str	r3, [r4, #4]
 8008234:	6014      	str	r4, [r2, #0]
 8008236:	4628      	mov	r0, r5
 8008238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800823c:	f000 b8dc 	b.w	80083f8 <__malloc_unlock>
 8008240:	42a3      	cmp	r3, r4
 8008242:	d908      	bls.n	8008256 <_free_r+0x42>
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	1821      	adds	r1, r4, r0
 8008248:	428b      	cmp	r3, r1
 800824a:	bf01      	itttt	eq
 800824c:	6819      	ldreq	r1, [r3, #0]
 800824e:	685b      	ldreq	r3, [r3, #4]
 8008250:	1809      	addeq	r1, r1, r0
 8008252:	6021      	streq	r1, [r4, #0]
 8008254:	e7ed      	b.n	8008232 <_free_r+0x1e>
 8008256:	461a      	mov	r2, r3
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	b10b      	cbz	r3, 8008260 <_free_r+0x4c>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d9fa      	bls.n	8008256 <_free_r+0x42>
 8008260:	6811      	ldr	r1, [r2, #0]
 8008262:	1850      	adds	r0, r2, r1
 8008264:	42a0      	cmp	r0, r4
 8008266:	d10b      	bne.n	8008280 <_free_r+0x6c>
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	4401      	add	r1, r0
 800826c:	1850      	adds	r0, r2, r1
 800826e:	4283      	cmp	r3, r0
 8008270:	6011      	str	r1, [r2, #0]
 8008272:	d1e0      	bne.n	8008236 <_free_r+0x22>
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	6053      	str	r3, [r2, #4]
 800827a:	4408      	add	r0, r1
 800827c:	6010      	str	r0, [r2, #0]
 800827e:	e7da      	b.n	8008236 <_free_r+0x22>
 8008280:	d902      	bls.n	8008288 <_free_r+0x74>
 8008282:	230c      	movs	r3, #12
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	e7d6      	b.n	8008236 <_free_r+0x22>
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	1821      	adds	r1, r4, r0
 800828c:	428b      	cmp	r3, r1
 800828e:	bf04      	itt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	bf04      	itt	eq
 8008298:	1809      	addeq	r1, r1, r0
 800829a:	6021      	streq	r1, [r4, #0]
 800829c:	6054      	str	r4, [r2, #4]
 800829e:	e7ca      	b.n	8008236 <_free_r+0x22>
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	20005398 	.word	0x20005398

080082a8 <sbrk_aligned>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	4e0f      	ldr	r6, [pc, #60]	@ (80082e8 <sbrk_aligned+0x40>)
 80082ac:	460c      	mov	r4, r1
 80082ae:	6831      	ldr	r1, [r6, #0]
 80082b0:	4605      	mov	r5, r0
 80082b2:	b911      	cbnz	r1, 80082ba <sbrk_aligned+0x12>
 80082b4:	f000 fba6 	bl	8008a04 <_sbrk_r>
 80082b8:	6030      	str	r0, [r6, #0]
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 fba1 	bl	8008a04 <_sbrk_r>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	d103      	bne.n	80082ce <sbrk_aligned+0x26>
 80082c6:	f04f 34ff 	mov.w	r4, #4294967295
 80082ca:	4620      	mov	r0, r4
 80082cc:	bd70      	pop	{r4, r5, r6, pc}
 80082ce:	1cc4      	adds	r4, r0, #3
 80082d0:	f024 0403 	bic.w	r4, r4, #3
 80082d4:	42a0      	cmp	r0, r4
 80082d6:	d0f8      	beq.n	80082ca <sbrk_aligned+0x22>
 80082d8:	1a21      	subs	r1, r4, r0
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fb92 	bl	8008a04 <_sbrk_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d1f2      	bne.n	80082ca <sbrk_aligned+0x22>
 80082e4:	e7ef      	b.n	80082c6 <sbrk_aligned+0x1e>
 80082e6:	bf00      	nop
 80082e8:	20005394 	.word	0x20005394

080082ec <_malloc_r>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	1ccd      	adds	r5, r1, #3
 80082f2:	f025 0503 	bic.w	r5, r5, #3
 80082f6:	3508      	adds	r5, #8
 80082f8:	2d0c      	cmp	r5, #12
 80082fa:	bf38      	it	cc
 80082fc:	250c      	movcc	r5, #12
 80082fe:	2d00      	cmp	r5, #0
 8008300:	4606      	mov	r6, r0
 8008302:	db01      	blt.n	8008308 <_malloc_r+0x1c>
 8008304:	42a9      	cmp	r1, r5
 8008306:	d904      	bls.n	8008312 <_malloc_r+0x26>
 8008308:	230c      	movs	r3, #12
 800830a:	6033      	str	r3, [r6, #0]
 800830c:	2000      	movs	r0, #0
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083e8 <_malloc_r+0xfc>
 8008316:	f000 f869 	bl	80083ec <__malloc_lock>
 800831a:	f8d8 3000 	ldr.w	r3, [r8]
 800831e:	461c      	mov	r4, r3
 8008320:	bb44      	cbnz	r4, 8008374 <_malloc_r+0x88>
 8008322:	4629      	mov	r1, r5
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff ffbf 	bl	80082a8 <sbrk_aligned>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	4604      	mov	r4, r0
 800832e:	d158      	bne.n	80083e2 <_malloc_r+0xf6>
 8008330:	f8d8 4000 	ldr.w	r4, [r8]
 8008334:	4627      	mov	r7, r4
 8008336:	2f00      	cmp	r7, #0
 8008338:	d143      	bne.n	80083c2 <_malloc_r+0xd6>
 800833a:	2c00      	cmp	r4, #0
 800833c:	d04b      	beq.n	80083d6 <_malloc_r+0xea>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	4639      	mov	r1, r7
 8008342:	4630      	mov	r0, r6
 8008344:	eb04 0903 	add.w	r9, r4, r3
 8008348:	f000 fb5c 	bl	8008a04 <_sbrk_r>
 800834c:	4581      	cmp	r9, r0
 800834e:	d142      	bne.n	80083d6 <_malloc_r+0xea>
 8008350:	6821      	ldr	r1, [r4, #0]
 8008352:	1a6d      	subs	r5, r5, r1
 8008354:	4629      	mov	r1, r5
 8008356:	4630      	mov	r0, r6
 8008358:	f7ff ffa6 	bl	80082a8 <sbrk_aligned>
 800835c:	3001      	adds	r0, #1
 800835e:	d03a      	beq.n	80083d6 <_malloc_r+0xea>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	442b      	add	r3, r5
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	f8d8 3000 	ldr.w	r3, [r8]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	bb62      	cbnz	r2, 80083c8 <_malloc_r+0xdc>
 800836e:	f8c8 7000 	str.w	r7, [r8]
 8008372:	e00f      	b.n	8008394 <_malloc_r+0xa8>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	1b52      	subs	r2, r2, r5
 8008378:	d420      	bmi.n	80083bc <_malloc_r+0xd0>
 800837a:	2a0b      	cmp	r2, #11
 800837c:	d917      	bls.n	80083ae <_malloc_r+0xc2>
 800837e:	1961      	adds	r1, r4, r5
 8008380:	42a3      	cmp	r3, r4
 8008382:	6025      	str	r5, [r4, #0]
 8008384:	bf18      	it	ne
 8008386:	6059      	strne	r1, [r3, #4]
 8008388:	6863      	ldr	r3, [r4, #4]
 800838a:	bf08      	it	eq
 800838c:	f8c8 1000 	streq.w	r1, [r8]
 8008390:	5162      	str	r2, [r4, r5]
 8008392:	604b      	str	r3, [r1, #4]
 8008394:	4630      	mov	r0, r6
 8008396:	f000 f82f 	bl	80083f8 <__malloc_unlock>
 800839a:	f104 000b 	add.w	r0, r4, #11
 800839e:	1d23      	adds	r3, r4, #4
 80083a0:	f020 0007 	bic.w	r0, r0, #7
 80083a4:	1ac2      	subs	r2, r0, r3
 80083a6:	bf1c      	itt	ne
 80083a8:	1a1b      	subne	r3, r3, r0
 80083aa:	50a3      	strne	r3, [r4, r2]
 80083ac:	e7af      	b.n	800830e <_malloc_r+0x22>
 80083ae:	6862      	ldr	r2, [r4, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	bf0c      	ite	eq
 80083b4:	f8c8 2000 	streq.w	r2, [r8]
 80083b8:	605a      	strne	r2, [r3, #4]
 80083ba:	e7eb      	b.n	8008394 <_malloc_r+0xa8>
 80083bc:	4623      	mov	r3, r4
 80083be:	6864      	ldr	r4, [r4, #4]
 80083c0:	e7ae      	b.n	8008320 <_malloc_r+0x34>
 80083c2:	463c      	mov	r4, r7
 80083c4:	687f      	ldr	r7, [r7, #4]
 80083c6:	e7b6      	b.n	8008336 <_malloc_r+0x4a>
 80083c8:	461a      	mov	r2, r3
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d1fb      	bne.n	80083c8 <_malloc_r+0xdc>
 80083d0:	2300      	movs	r3, #0
 80083d2:	6053      	str	r3, [r2, #4]
 80083d4:	e7de      	b.n	8008394 <_malloc_r+0xa8>
 80083d6:	230c      	movs	r3, #12
 80083d8:	6033      	str	r3, [r6, #0]
 80083da:	4630      	mov	r0, r6
 80083dc:	f000 f80c 	bl	80083f8 <__malloc_unlock>
 80083e0:	e794      	b.n	800830c <_malloc_r+0x20>
 80083e2:	6005      	str	r5, [r0, #0]
 80083e4:	e7d6      	b.n	8008394 <_malloc_r+0xa8>
 80083e6:	bf00      	nop
 80083e8:	20005398 	.word	0x20005398

080083ec <__malloc_lock>:
 80083ec:	4801      	ldr	r0, [pc, #4]	@ (80083f4 <__malloc_lock+0x8>)
 80083ee:	f7ff bf01 	b.w	80081f4 <__retarget_lock_acquire_recursive>
 80083f2:	bf00      	nop
 80083f4:	20005390 	.word	0x20005390

080083f8 <__malloc_unlock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	@ (8008400 <__malloc_unlock+0x8>)
 80083fa:	f7ff befc 	b.w	80081f6 <__retarget_lock_release_recursive>
 80083fe:	bf00      	nop
 8008400:	20005390 	.word	0x20005390

08008404 <__ssputs_r>:
 8008404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008408:	688e      	ldr	r6, [r1, #8]
 800840a:	461f      	mov	r7, r3
 800840c:	42be      	cmp	r6, r7
 800840e:	680b      	ldr	r3, [r1, #0]
 8008410:	4682      	mov	sl, r0
 8008412:	460c      	mov	r4, r1
 8008414:	4690      	mov	r8, r2
 8008416:	d82d      	bhi.n	8008474 <__ssputs_r+0x70>
 8008418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800841c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008420:	d026      	beq.n	8008470 <__ssputs_r+0x6c>
 8008422:	6965      	ldr	r5, [r4, #20]
 8008424:	6909      	ldr	r1, [r1, #16]
 8008426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800842a:	eba3 0901 	sub.w	r9, r3, r1
 800842e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008432:	1c7b      	adds	r3, r7, #1
 8008434:	444b      	add	r3, r9
 8008436:	106d      	asrs	r5, r5, #1
 8008438:	429d      	cmp	r5, r3
 800843a:	bf38      	it	cc
 800843c:	461d      	movcc	r5, r3
 800843e:	0553      	lsls	r3, r2, #21
 8008440:	d527      	bpl.n	8008492 <__ssputs_r+0x8e>
 8008442:	4629      	mov	r1, r5
 8008444:	f7ff ff52 	bl	80082ec <_malloc_r>
 8008448:	4606      	mov	r6, r0
 800844a:	b360      	cbz	r0, 80084a6 <__ssputs_r+0xa2>
 800844c:	6921      	ldr	r1, [r4, #16]
 800844e:	464a      	mov	r2, r9
 8008450:	f7ff fed2 	bl	80081f8 <memcpy>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800845a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	6126      	str	r6, [r4, #16]
 8008462:	6165      	str	r5, [r4, #20]
 8008464:	444e      	add	r6, r9
 8008466:	eba5 0509 	sub.w	r5, r5, r9
 800846a:	6026      	str	r6, [r4, #0]
 800846c:	60a5      	str	r5, [r4, #8]
 800846e:	463e      	mov	r6, r7
 8008470:	42be      	cmp	r6, r7
 8008472:	d900      	bls.n	8008476 <__ssputs_r+0x72>
 8008474:	463e      	mov	r6, r7
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	4632      	mov	r2, r6
 800847a:	4641      	mov	r1, r8
 800847c:	f000 faa8 	bl	80089d0 <memmove>
 8008480:	68a3      	ldr	r3, [r4, #8]
 8008482:	1b9b      	subs	r3, r3, r6
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	4433      	add	r3, r6
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	2000      	movs	r0, #0
 800848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008492:	462a      	mov	r2, r5
 8008494:	f000 fac6 	bl	8008a24 <_realloc_r>
 8008498:	4606      	mov	r6, r0
 800849a:	2800      	cmp	r0, #0
 800849c:	d1e0      	bne.n	8008460 <__ssputs_r+0x5c>
 800849e:	6921      	ldr	r1, [r4, #16]
 80084a0:	4650      	mov	r0, sl
 80084a2:	f7ff feb7 	bl	8008214 <_free_r>
 80084a6:	230c      	movs	r3, #12
 80084a8:	f8ca 3000 	str.w	r3, [sl]
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295
 80084b8:	e7e9      	b.n	800848e <__ssputs_r+0x8a>
	...

080084bc <_svfiprintf_r>:
 80084bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	4698      	mov	r8, r3
 80084c2:	898b      	ldrh	r3, [r1, #12]
 80084c4:	061b      	lsls	r3, r3, #24
 80084c6:	b09d      	sub	sp, #116	@ 0x74
 80084c8:	4607      	mov	r7, r0
 80084ca:	460d      	mov	r5, r1
 80084cc:	4614      	mov	r4, r2
 80084ce:	d510      	bpl.n	80084f2 <_svfiprintf_r+0x36>
 80084d0:	690b      	ldr	r3, [r1, #16]
 80084d2:	b973      	cbnz	r3, 80084f2 <_svfiprintf_r+0x36>
 80084d4:	2140      	movs	r1, #64	@ 0x40
 80084d6:	f7ff ff09 	bl	80082ec <_malloc_r>
 80084da:	6028      	str	r0, [r5, #0]
 80084dc:	6128      	str	r0, [r5, #16]
 80084de:	b930      	cbnz	r0, 80084ee <_svfiprintf_r+0x32>
 80084e0:	230c      	movs	r3, #12
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	b01d      	add	sp, #116	@ 0x74
 80084ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ee:	2340      	movs	r3, #64	@ 0x40
 80084f0:	616b      	str	r3, [r5, #20]
 80084f2:	2300      	movs	r3, #0
 80084f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f6:	2320      	movs	r3, #32
 80084f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008500:	2330      	movs	r3, #48	@ 0x30
 8008502:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086a0 <_svfiprintf_r+0x1e4>
 8008506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800850a:	f04f 0901 	mov.w	r9, #1
 800850e:	4623      	mov	r3, r4
 8008510:	469a      	mov	sl, r3
 8008512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008516:	b10a      	cbz	r2, 800851c <_svfiprintf_r+0x60>
 8008518:	2a25      	cmp	r2, #37	@ 0x25
 800851a:	d1f9      	bne.n	8008510 <_svfiprintf_r+0x54>
 800851c:	ebba 0b04 	subs.w	fp, sl, r4
 8008520:	d00b      	beq.n	800853a <_svfiprintf_r+0x7e>
 8008522:	465b      	mov	r3, fp
 8008524:	4622      	mov	r2, r4
 8008526:	4629      	mov	r1, r5
 8008528:	4638      	mov	r0, r7
 800852a:	f7ff ff6b 	bl	8008404 <__ssputs_r>
 800852e:	3001      	adds	r0, #1
 8008530:	f000 80a7 	beq.w	8008682 <_svfiprintf_r+0x1c6>
 8008534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008536:	445a      	add	r2, fp
 8008538:	9209      	str	r2, [sp, #36]	@ 0x24
 800853a:	f89a 3000 	ldrb.w	r3, [sl]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 809f 	beq.w	8008682 <_svfiprintf_r+0x1c6>
 8008544:	2300      	movs	r3, #0
 8008546:	f04f 32ff 	mov.w	r2, #4294967295
 800854a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800854e:	f10a 0a01 	add.w	sl, sl, #1
 8008552:	9304      	str	r3, [sp, #16]
 8008554:	9307      	str	r3, [sp, #28]
 8008556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800855a:	931a      	str	r3, [sp, #104]	@ 0x68
 800855c:	4654      	mov	r4, sl
 800855e:	2205      	movs	r2, #5
 8008560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008564:	484e      	ldr	r0, [pc, #312]	@ (80086a0 <_svfiprintf_r+0x1e4>)
 8008566:	f7f7 fe73 	bl	8000250 <memchr>
 800856a:	9a04      	ldr	r2, [sp, #16]
 800856c:	b9d8      	cbnz	r0, 80085a6 <_svfiprintf_r+0xea>
 800856e:	06d0      	lsls	r0, r2, #27
 8008570:	bf44      	itt	mi
 8008572:	2320      	movmi	r3, #32
 8008574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008578:	0711      	lsls	r1, r2, #28
 800857a:	bf44      	itt	mi
 800857c:	232b      	movmi	r3, #43	@ 0x2b
 800857e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008582:	f89a 3000 	ldrb.w	r3, [sl]
 8008586:	2b2a      	cmp	r3, #42	@ 0x2a
 8008588:	d015      	beq.n	80085b6 <_svfiprintf_r+0xfa>
 800858a:	9a07      	ldr	r2, [sp, #28]
 800858c:	4654      	mov	r4, sl
 800858e:	2000      	movs	r0, #0
 8008590:	f04f 0c0a 	mov.w	ip, #10
 8008594:	4621      	mov	r1, r4
 8008596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800859a:	3b30      	subs	r3, #48	@ 0x30
 800859c:	2b09      	cmp	r3, #9
 800859e:	d94b      	bls.n	8008638 <_svfiprintf_r+0x17c>
 80085a0:	b1b0      	cbz	r0, 80085d0 <_svfiprintf_r+0x114>
 80085a2:	9207      	str	r2, [sp, #28]
 80085a4:	e014      	b.n	80085d0 <_svfiprintf_r+0x114>
 80085a6:	eba0 0308 	sub.w	r3, r0, r8
 80085aa:	fa09 f303 	lsl.w	r3, r9, r3
 80085ae:	4313      	orrs	r3, r2
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	46a2      	mov	sl, r4
 80085b4:	e7d2      	b.n	800855c <_svfiprintf_r+0xa0>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	1d19      	adds	r1, r3, #4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	9103      	str	r1, [sp, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bfbb      	ittet	lt
 80085c2:	425b      	neglt	r3, r3
 80085c4:	f042 0202 	orrlt.w	r2, r2, #2
 80085c8:	9307      	strge	r3, [sp, #28]
 80085ca:	9307      	strlt	r3, [sp, #28]
 80085cc:	bfb8      	it	lt
 80085ce:	9204      	strlt	r2, [sp, #16]
 80085d0:	7823      	ldrb	r3, [r4, #0]
 80085d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085d4:	d10a      	bne.n	80085ec <_svfiprintf_r+0x130>
 80085d6:	7863      	ldrb	r3, [r4, #1]
 80085d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085da:	d132      	bne.n	8008642 <_svfiprintf_r+0x186>
 80085dc:	9b03      	ldr	r3, [sp, #12]
 80085de:	1d1a      	adds	r2, r3, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	9203      	str	r2, [sp, #12]
 80085e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085e8:	3402      	adds	r4, #2
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086b0 <_svfiprintf_r+0x1f4>
 80085f0:	7821      	ldrb	r1, [r4, #0]
 80085f2:	2203      	movs	r2, #3
 80085f4:	4650      	mov	r0, sl
 80085f6:	f7f7 fe2b 	bl	8000250 <memchr>
 80085fa:	b138      	cbz	r0, 800860c <_svfiprintf_r+0x150>
 80085fc:	9b04      	ldr	r3, [sp, #16]
 80085fe:	eba0 000a 	sub.w	r0, r0, sl
 8008602:	2240      	movs	r2, #64	@ 0x40
 8008604:	4082      	lsls	r2, r0
 8008606:	4313      	orrs	r3, r2
 8008608:	3401      	adds	r4, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008610:	4824      	ldr	r0, [pc, #144]	@ (80086a4 <_svfiprintf_r+0x1e8>)
 8008612:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008616:	2206      	movs	r2, #6
 8008618:	f7f7 fe1a 	bl	8000250 <memchr>
 800861c:	2800      	cmp	r0, #0
 800861e:	d036      	beq.n	800868e <_svfiprintf_r+0x1d2>
 8008620:	4b21      	ldr	r3, [pc, #132]	@ (80086a8 <_svfiprintf_r+0x1ec>)
 8008622:	bb1b      	cbnz	r3, 800866c <_svfiprintf_r+0x1b0>
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	3307      	adds	r3, #7
 8008628:	f023 0307 	bic.w	r3, r3, #7
 800862c:	3308      	adds	r3, #8
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008632:	4433      	add	r3, r6
 8008634:	9309      	str	r3, [sp, #36]	@ 0x24
 8008636:	e76a      	b.n	800850e <_svfiprintf_r+0x52>
 8008638:	fb0c 3202 	mla	r2, ip, r2, r3
 800863c:	460c      	mov	r4, r1
 800863e:	2001      	movs	r0, #1
 8008640:	e7a8      	b.n	8008594 <_svfiprintf_r+0xd8>
 8008642:	2300      	movs	r3, #0
 8008644:	3401      	adds	r4, #1
 8008646:	9305      	str	r3, [sp, #20]
 8008648:	4619      	mov	r1, r3
 800864a:	f04f 0c0a 	mov.w	ip, #10
 800864e:	4620      	mov	r0, r4
 8008650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008654:	3a30      	subs	r2, #48	@ 0x30
 8008656:	2a09      	cmp	r2, #9
 8008658:	d903      	bls.n	8008662 <_svfiprintf_r+0x1a6>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0c6      	beq.n	80085ec <_svfiprintf_r+0x130>
 800865e:	9105      	str	r1, [sp, #20]
 8008660:	e7c4      	b.n	80085ec <_svfiprintf_r+0x130>
 8008662:	fb0c 2101 	mla	r1, ip, r1, r2
 8008666:	4604      	mov	r4, r0
 8008668:	2301      	movs	r3, #1
 800866a:	e7f0      	b.n	800864e <_svfiprintf_r+0x192>
 800866c:	ab03      	add	r3, sp, #12
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	462a      	mov	r2, r5
 8008672:	4b0e      	ldr	r3, [pc, #56]	@ (80086ac <_svfiprintf_r+0x1f0>)
 8008674:	a904      	add	r1, sp, #16
 8008676:	4638      	mov	r0, r7
 8008678:	f3af 8000 	nop.w
 800867c:	1c42      	adds	r2, r0, #1
 800867e:	4606      	mov	r6, r0
 8008680:	d1d6      	bne.n	8008630 <_svfiprintf_r+0x174>
 8008682:	89ab      	ldrh	r3, [r5, #12]
 8008684:	065b      	lsls	r3, r3, #25
 8008686:	f53f af2d 	bmi.w	80084e4 <_svfiprintf_r+0x28>
 800868a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800868c:	e72c      	b.n	80084e8 <_svfiprintf_r+0x2c>
 800868e:	ab03      	add	r3, sp, #12
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	462a      	mov	r2, r5
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <_svfiprintf_r+0x1f0>)
 8008696:	a904      	add	r1, sp, #16
 8008698:	4638      	mov	r0, r7
 800869a:	f000 f879 	bl	8008790 <_printf_i>
 800869e:	e7ed      	b.n	800867c <_svfiprintf_r+0x1c0>
 80086a0:	08008bb8 	.word	0x08008bb8
 80086a4:	08008bc2 	.word	0x08008bc2
 80086a8:	00000000 	.word	0x00000000
 80086ac:	08008405 	.word	0x08008405
 80086b0:	08008bbe 	.word	0x08008bbe

080086b4 <_printf_common>:
 80086b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b8:	4616      	mov	r6, r2
 80086ba:	4698      	mov	r8, r3
 80086bc:	688a      	ldr	r2, [r1, #8]
 80086be:	690b      	ldr	r3, [r1, #16]
 80086c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086c4:	4293      	cmp	r3, r2
 80086c6:	bfb8      	it	lt
 80086c8:	4613      	movlt	r3, r2
 80086ca:	6033      	str	r3, [r6, #0]
 80086cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086d0:	4607      	mov	r7, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	b10a      	cbz	r2, 80086da <_printf_common+0x26>
 80086d6:	3301      	adds	r3, #1
 80086d8:	6033      	str	r3, [r6, #0]
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	0699      	lsls	r1, r3, #26
 80086de:	bf42      	ittt	mi
 80086e0:	6833      	ldrmi	r3, [r6, #0]
 80086e2:	3302      	addmi	r3, #2
 80086e4:	6033      	strmi	r3, [r6, #0]
 80086e6:	6825      	ldr	r5, [r4, #0]
 80086e8:	f015 0506 	ands.w	r5, r5, #6
 80086ec:	d106      	bne.n	80086fc <_printf_common+0x48>
 80086ee:	f104 0a19 	add.w	sl, r4, #25
 80086f2:	68e3      	ldr	r3, [r4, #12]
 80086f4:	6832      	ldr	r2, [r6, #0]
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	dc26      	bgt.n	800874a <_printf_common+0x96>
 80086fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008700:	6822      	ldr	r2, [r4, #0]
 8008702:	3b00      	subs	r3, #0
 8008704:	bf18      	it	ne
 8008706:	2301      	movne	r3, #1
 8008708:	0692      	lsls	r2, r2, #26
 800870a:	d42b      	bmi.n	8008764 <_printf_common+0xb0>
 800870c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008710:	4641      	mov	r1, r8
 8008712:	4638      	mov	r0, r7
 8008714:	47c8      	blx	r9
 8008716:	3001      	adds	r0, #1
 8008718:	d01e      	beq.n	8008758 <_printf_common+0xa4>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	6922      	ldr	r2, [r4, #16]
 800871e:	f003 0306 	and.w	r3, r3, #6
 8008722:	2b04      	cmp	r3, #4
 8008724:	bf02      	ittt	eq
 8008726:	68e5      	ldreq	r5, [r4, #12]
 8008728:	6833      	ldreq	r3, [r6, #0]
 800872a:	1aed      	subeq	r5, r5, r3
 800872c:	68a3      	ldr	r3, [r4, #8]
 800872e:	bf0c      	ite	eq
 8008730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008734:	2500      	movne	r5, #0
 8008736:	4293      	cmp	r3, r2
 8008738:	bfc4      	itt	gt
 800873a:	1a9b      	subgt	r3, r3, r2
 800873c:	18ed      	addgt	r5, r5, r3
 800873e:	2600      	movs	r6, #0
 8008740:	341a      	adds	r4, #26
 8008742:	42b5      	cmp	r5, r6
 8008744:	d11a      	bne.n	800877c <_printf_common+0xc8>
 8008746:	2000      	movs	r0, #0
 8008748:	e008      	b.n	800875c <_printf_common+0xa8>
 800874a:	2301      	movs	r3, #1
 800874c:	4652      	mov	r2, sl
 800874e:	4641      	mov	r1, r8
 8008750:	4638      	mov	r0, r7
 8008752:	47c8      	blx	r9
 8008754:	3001      	adds	r0, #1
 8008756:	d103      	bne.n	8008760 <_printf_common+0xac>
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008760:	3501      	adds	r5, #1
 8008762:	e7c6      	b.n	80086f2 <_printf_common+0x3e>
 8008764:	18e1      	adds	r1, r4, r3
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	2030      	movs	r0, #48	@ 0x30
 800876a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800876e:	4422      	add	r2, r4
 8008770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008778:	3302      	adds	r3, #2
 800877a:	e7c7      	b.n	800870c <_printf_common+0x58>
 800877c:	2301      	movs	r3, #1
 800877e:	4622      	mov	r2, r4
 8008780:	4641      	mov	r1, r8
 8008782:	4638      	mov	r0, r7
 8008784:	47c8      	blx	r9
 8008786:	3001      	adds	r0, #1
 8008788:	d0e6      	beq.n	8008758 <_printf_common+0xa4>
 800878a:	3601      	adds	r6, #1
 800878c:	e7d9      	b.n	8008742 <_printf_common+0x8e>
	...

08008790 <_printf_i>:
 8008790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	7e0f      	ldrb	r7, [r1, #24]
 8008796:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008798:	2f78      	cmp	r7, #120	@ 0x78
 800879a:	4691      	mov	r9, r2
 800879c:	4680      	mov	r8, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	469a      	mov	sl, r3
 80087a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087a6:	d807      	bhi.n	80087b8 <_printf_i+0x28>
 80087a8:	2f62      	cmp	r7, #98	@ 0x62
 80087aa:	d80a      	bhi.n	80087c2 <_printf_i+0x32>
 80087ac:	2f00      	cmp	r7, #0
 80087ae:	f000 80d2 	beq.w	8008956 <_printf_i+0x1c6>
 80087b2:	2f58      	cmp	r7, #88	@ 0x58
 80087b4:	f000 80b9 	beq.w	800892a <_printf_i+0x19a>
 80087b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087c0:	e03a      	b.n	8008838 <_printf_i+0xa8>
 80087c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087c6:	2b15      	cmp	r3, #21
 80087c8:	d8f6      	bhi.n	80087b8 <_printf_i+0x28>
 80087ca:	a101      	add	r1, pc, #4	@ (adr r1, 80087d0 <_printf_i+0x40>)
 80087cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087d0:	08008829 	.word	0x08008829
 80087d4:	0800883d 	.word	0x0800883d
 80087d8:	080087b9 	.word	0x080087b9
 80087dc:	080087b9 	.word	0x080087b9
 80087e0:	080087b9 	.word	0x080087b9
 80087e4:	080087b9 	.word	0x080087b9
 80087e8:	0800883d 	.word	0x0800883d
 80087ec:	080087b9 	.word	0x080087b9
 80087f0:	080087b9 	.word	0x080087b9
 80087f4:	080087b9 	.word	0x080087b9
 80087f8:	080087b9 	.word	0x080087b9
 80087fc:	0800893d 	.word	0x0800893d
 8008800:	08008867 	.word	0x08008867
 8008804:	080088f7 	.word	0x080088f7
 8008808:	080087b9 	.word	0x080087b9
 800880c:	080087b9 	.word	0x080087b9
 8008810:	0800895f 	.word	0x0800895f
 8008814:	080087b9 	.word	0x080087b9
 8008818:	08008867 	.word	0x08008867
 800881c:	080087b9 	.word	0x080087b9
 8008820:	080087b9 	.word	0x080087b9
 8008824:	080088ff 	.word	0x080088ff
 8008828:	6833      	ldr	r3, [r6, #0]
 800882a:	1d1a      	adds	r2, r3, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6032      	str	r2, [r6, #0]
 8008830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008838:	2301      	movs	r3, #1
 800883a:	e09d      	b.n	8008978 <_printf_i+0x1e8>
 800883c:	6833      	ldr	r3, [r6, #0]
 800883e:	6820      	ldr	r0, [r4, #0]
 8008840:	1d19      	adds	r1, r3, #4
 8008842:	6031      	str	r1, [r6, #0]
 8008844:	0606      	lsls	r6, r0, #24
 8008846:	d501      	bpl.n	800884c <_printf_i+0xbc>
 8008848:	681d      	ldr	r5, [r3, #0]
 800884a:	e003      	b.n	8008854 <_printf_i+0xc4>
 800884c:	0645      	lsls	r5, r0, #25
 800884e:	d5fb      	bpl.n	8008848 <_printf_i+0xb8>
 8008850:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008854:	2d00      	cmp	r5, #0
 8008856:	da03      	bge.n	8008860 <_printf_i+0xd0>
 8008858:	232d      	movs	r3, #45	@ 0x2d
 800885a:	426d      	negs	r5, r5
 800885c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008860:	4859      	ldr	r0, [pc, #356]	@ (80089c8 <_printf_i+0x238>)
 8008862:	230a      	movs	r3, #10
 8008864:	e011      	b.n	800888a <_printf_i+0xfa>
 8008866:	6821      	ldr	r1, [r4, #0]
 8008868:	6833      	ldr	r3, [r6, #0]
 800886a:	0608      	lsls	r0, r1, #24
 800886c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008870:	d402      	bmi.n	8008878 <_printf_i+0xe8>
 8008872:	0649      	lsls	r1, r1, #25
 8008874:	bf48      	it	mi
 8008876:	b2ad      	uxthmi	r5, r5
 8008878:	2f6f      	cmp	r7, #111	@ 0x6f
 800887a:	4853      	ldr	r0, [pc, #332]	@ (80089c8 <_printf_i+0x238>)
 800887c:	6033      	str	r3, [r6, #0]
 800887e:	bf14      	ite	ne
 8008880:	230a      	movne	r3, #10
 8008882:	2308      	moveq	r3, #8
 8008884:	2100      	movs	r1, #0
 8008886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800888a:	6866      	ldr	r6, [r4, #4]
 800888c:	60a6      	str	r6, [r4, #8]
 800888e:	2e00      	cmp	r6, #0
 8008890:	bfa2      	ittt	ge
 8008892:	6821      	ldrge	r1, [r4, #0]
 8008894:	f021 0104 	bicge.w	r1, r1, #4
 8008898:	6021      	strge	r1, [r4, #0]
 800889a:	b90d      	cbnz	r5, 80088a0 <_printf_i+0x110>
 800889c:	2e00      	cmp	r6, #0
 800889e:	d04b      	beq.n	8008938 <_printf_i+0x1a8>
 80088a0:	4616      	mov	r6, r2
 80088a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80088a6:	fb03 5711 	mls	r7, r3, r1, r5
 80088aa:	5dc7      	ldrb	r7, [r0, r7]
 80088ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088b0:	462f      	mov	r7, r5
 80088b2:	42bb      	cmp	r3, r7
 80088b4:	460d      	mov	r5, r1
 80088b6:	d9f4      	bls.n	80088a2 <_printf_i+0x112>
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d10b      	bne.n	80088d4 <_printf_i+0x144>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	07df      	lsls	r7, r3, #31
 80088c0:	d508      	bpl.n	80088d4 <_printf_i+0x144>
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	4299      	cmp	r1, r3
 80088c8:	bfde      	ittt	le
 80088ca:	2330      	movle	r3, #48	@ 0x30
 80088cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088d4:	1b92      	subs	r2, r2, r6
 80088d6:	6122      	str	r2, [r4, #16]
 80088d8:	f8cd a000 	str.w	sl, [sp]
 80088dc:	464b      	mov	r3, r9
 80088de:	aa03      	add	r2, sp, #12
 80088e0:	4621      	mov	r1, r4
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7ff fee6 	bl	80086b4 <_printf_common>
 80088e8:	3001      	adds	r0, #1
 80088ea:	d14a      	bne.n	8008982 <_printf_i+0x1f2>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	b004      	add	sp, #16
 80088f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	f043 0320 	orr.w	r3, r3, #32
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	4833      	ldr	r0, [pc, #204]	@ (80089cc <_printf_i+0x23c>)
 8008900:	2778      	movs	r7, #120	@ 0x78
 8008902:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	6831      	ldr	r1, [r6, #0]
 800890a:	061f      	lsls	r7, r3, #24
 800890c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008910:	d402      	bmi.n	8008918 <_printf_i+0x188>
 8008912:	065f      	lsls	r7, r3, #25
 8008914:	bf48      	it	mi
 8008916:	b2ad      	uxthmi	r5, r5
 8008918:	6031      	str	r1, [r6, #0]
 800891a:	07d9      	lsls	r1, r3, #31
 800891c:	bf44      	itt	mi
 800891e:	f043 0320 	orrmi.w	r3, r3, #32
 8008922:	6023      	strmi	r3, [r4, #0]
 8008924:	b11d      	cbz	r5, 800892e <_printf_i+0x19e>
 8008926:	2310      	movs	r3, #16
 8008928:	e7ac      	b.n	8008884 <_printf_i+0xf4>
 800892a:	4827      	ldr	r0, [pc, #156]	@ (80089c8 <_printf_i+0x238>)
 800892c:	e7e9      	b.n	8008902 <_printf_i+0x172>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	f023 0320 	bic.w	r3, r3, #32
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	e7f6      	b.n	8008926 <_printf_i+0x196>
 8008938:	4616      	mov	r6, r2
 800893a:	e7bd      	b.n	80088b8 <_printf_i+0x128>
 800893c:	6833      	ldr	r3, [r6, #0]
 800893e:	6825      	ldr	r5, [r4, #0]
 8008940:	6961      	ldr	r1, [r4, #20]
 8008942:	1d18      	adds	r0, r3, #4
 8008944:	6030      	str	r0, [r6, #0]
 8008946:	062e      	lsls	r6, r5, #24
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	d501      	bpl.n	8008950 <_printf_i+0x1c0>
 800894c:	6019      	str	r1, [r3, #0]
 800894e:	e002      	b.n	8008956 <_printf_i+0x1c6>
 8008950:	0668      	lsls	r0, r5, #25
 8008952:	d5fb      	bpl.n	800894c <_printf_i+0x1bc>
 8008954:	8019      	strh	r1, [r3, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	4616      	mov	r6, r2
 800895c:	e7bc      	b.n	80088d8 <_printf_i+0x148>
 800895e:	6833      	ldr	r3, [r6, #0]
 8008960:	1d1a      	adds	r2, r3, #4
 8008962:	6032      	str	r2, [r6, #0]
 8008964:	681e      	ldr	r6, [r3, #0]
 8008966:	6862      	ldr	r2, [r4, #4]
 8008968:	2100      	movs	r1, #0
 800896a:	4630      	mov	r0, r6
 800896c:	f7f7 fc70 	bl	8000250 <memchr>
 8008970:	b108      	cbz	r0, 8008976 <_printf_i+0x1e6>
 8008972:	1b80      	subs	r0, r0, r6
 8008974:	6060      	str	r0, [r4, #4]
 8008976:	6863      	ldr	r3, [r4, #4]
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	2300      	movs	r3, #0
 800897c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008980:	e7aa      	b.n	80088d8 <_printf_i+0x148>
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	4632      	mov	r2, r6
 8008986:	4649      	mov	r1, r9
 8008988:	4640      	mov	r0, r8
 800898a:	47d0      	blx	sl
 800898c:	3001      	adds	r0, #1
 800898e:	d0ad      	beq.n	80088ec <_printf_i+0x15c>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	079b      	lsls	r3, r3, #30
 8008994:	d413      	bmi.n	80089be <_printf_i+0x22e>
 8008996:	68e0      	ldr	r0, [r4, #12]
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	4298      	cmp	r0, r3
 800899c:	bfb8      	it	lt
 800899e:	4618      	movlt	r0, r3
 80089a0:	e7a6      	b.n	80088f0 <_printf_i+0x160>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4632      	mov	r2, r6
 80089a6:	4649      	mov	r1, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	47d0      	blx	sl
 80089ac:	3001      	adds	r0, #1
 80089ae:	d09d      	beq.n	80088ec <_printf_i+0x15c>
 80089b0:	3501      	adds	r5, #1
 80089b2:	68e3      	ldr	r3, [r4, #12]
 80089b4:	9903      	ldr	r1, [sp, #12]
 80089b6:	1a5b      	subs	r3, r3, r1
 80089b8:	42ab      	cmp	r3, r5
 80089ba:	dcf2      	bgt.n	80089a2 <_printf_i+0x212>
 80089bc:	e7eb      	b.n	8008996 <_printf_i+0x206>
 80089be:	2500      	movs	r5, #0
 80089c0:	f104 0619 	add.w	r6, r4, #25
 80089c4:	e7f5      	b.n	80089b2 <_printf_i+0x222>
 80089c6:	bf00      	nop
 80089c8:	08008bc9 	.word	0x08008bc9
 80089cc:	08008bda 	.word	0x08008bda

080089d0 <memmove>:
 80089d0:	4288      	cmp	r0, r1
 80089d2:	b510      	push	{r4, lr}
 80089d4:	eb01 0402 	add.w	r4, r1, r2
 80089d8:	d902      	bls.n	80089e0 <memmove+0x10>
 80089da:	4284      	cmp	r4, r0
 80089dc:	4623      	mov	r3, r4
 80089de:	d807      	bhi.n	80089f0 <memmove+0x20>
 80089e0:	1e43      	subs	r3, r0, #1
 80089e2:	42a1      	cmp	r1, r4
 80089e4:	d008      	beq.n	80089f8 <memmove+0x28>
 80089e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ee:	e7f8      	b.n	80089e2 <memmove+0x12>
 80089f0:	4402      	add	r2, r0
 80089f2:	4601      	mov	r1, r0
 80089f4:	428a      	cmp	r2, r1
 80089f6:	d100      	bne.n	80089fa <memmove+0x2a>
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a02:	e7f7      	b.n	80089f4 <memmove+0x24>

08008a04 <_sbrk_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d06      	ldr	r5, [pc, #24]	@ (8008a20 <_sbrk_r+0x1c>)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	602b      	str	r3, [r5, #0]
 8008a10:	f7f8 faf8 	bl	8001004 <_sbrk>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d102      	bne.n	8008a1e <_sbrk_r+0x1a>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	b103      	cbz	r3, 8008a1e <_sbrk_r+0x1a>
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	2000538c 	.word	0x2000538c

08008a24 <_realloc_r>:
 8008a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4615      	mov	r5, r2
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	b921      	cbnz	r1, 8008a3a <_realloc_r+0x16>
 8008a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a34:	4611      	mov	r1, r2
 8008a36:	f7ff bc59 	b.w	80082ec <_malloc_r>
 8008a3a:	b92a      	cbnz	r2, 8008a48 <_realloc_r+0x24>
 8008a3c:	f7ff fbea 	bl	8008214 <_free_r>
 8008a40:	2400      	movs	r4, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a48:	f000 f81a 	bl	8008a80 <_malloc_usable_size_r>
 8008a4c:	4285      	cmp	r5, r0
 8008a4e:	4606      	mov	r6, r0
 8008a50:	d802      	bhi.n	8008a58 <_realloc_r+0x34>
 8008a52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a56:	d8f4      	bhi.n	8008a42 <_realloc_r+0x1e>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f7ff fc46 	bl	80082ec <_malloc_r>
 8008a60:	4607      	mov	r7, r0
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d0ec      	beq.n	8008a40 <_realloc_r+0x1c>
 8008a66:	42b5      	cmp	r5, r6
 8008a68:	462a      	mov	r2, r5
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	bf28      	it	cs
 8008a6e:	4632      	movcs	r2, r6
 8008a70:	f7ff fbc2 	bl	80081f8 <memcpy>
 8008a74:	4621      	mov	r1, r4
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7ff fbcc 	bl	8008214 <_free_r>
 8008a7c:	463c      	mov	r4, r7
 8008a7e:	e7e0      	b.n	8008a42 <_realloc_r+0x1e>

08008a80 <_malloc_usable_size_r>:
 8008a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a84:	1f18      	subs	r0, r3, #4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfbc      	itt	lt
 8008a8a:	580b      	ldrlt	r3, [r1, r0]
 8008a8c:	18c0      	addlt	r0, r0, r3
 8008a8e:	4770      	bx	lr

08008a90 <_init>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr

08008a9c <_fini>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr
