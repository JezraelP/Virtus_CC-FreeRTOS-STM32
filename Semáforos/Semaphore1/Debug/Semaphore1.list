
Semaphore1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08008da8  08008da8  00009da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fac  08008fac  0000a1a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008fac  08008fac  00009fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fb4  08008fb4  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fb4  08008fb4  00009fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fb8  08008fb8  00009fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008fbc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  0800901c  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  080090bc  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005200  200001a0  0800915c  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200053a0  0800915c  0000a3a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000223c5  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042aa  00000000  00000000  0002c593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a58  00000000  00000000  00030840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001488  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000046a9  00000000  00000000  00033720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f6a6  00000000  00000000  00037dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dd31  00000000  00000000  0005746f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001651a0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007530  00000000  00000000  001651e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  0016c714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008d90 	.word	0x08008d90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008d90 	.word	0x08008d90

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fe3b 	bl	800125e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f844 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f960 	bl	80008b0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f8b2 	bl	8000758 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f8fe 	bl	80007f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f92c 	bl	8000854 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f004 fa62 	bl	8004ac4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CountingSem01 */
  CountingSem01Handle = osSemaphoreNew(2, 2, &CountingSem01_attributes);
 8000600:	4a11      	ldr	r2, [pc, #68]	@ (8000648 <main+0x68>)
 8000602:	2102      	movs	r1, #2
 8000604:	2002      	movs	r0, #2
 8000606:	f004 fb9b 	bl	8004d40 <osSemaphoreNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <main+0x6c>)
 800060e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartDefaultTask, NULL, &Task01_attributes);
 8000610:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <main+0x70>)
 8000612:	2100      	movs	r1, #0
 8000614:	480f      	ldr	r0, [pc, #60]	@ (8000654 <main+0x74>)
 8000616:	f004 fabf 	bl	8004b98 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <main+0x78>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000620:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <main+0x7c>)
 8000622:	2100      	movs	r1, #0
 8000624:	480e      	ldr	r0, [pc, #56]	@ (8000660 <main+0x80>)
 8000626:	f004 fab7 	bl	8004b98 <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <main+0x84>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <main+0x88>)
 8000632:	2100      	movs	r1, #0
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <main+0x8c>)
 8000636:	f004 faaf 	bl	8004b98 <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <main+0x90>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f004 fa74 	bl	8004b2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <main+0x64>
 8000648:	08008f50 	.word	0x08008f50
 800064c:	20000818 	.word	0x20000818
 8000650:	08008ee4 	.word	0x08008ee4
 8000654:	080009f5 	.word	0x080009f5
 8000658:	2000080c 	.word	0x2000080c
 800065c:	08008f08 	.word	0x08008f08
 8000660:	08000ad9 	.word	0x08000ad9
 8000664:	20000810 	.word	0x20000810
 8000668:	08008f2c 	.word	0x08008f2c
 800066c:	08000bbd 	.word	0x08000bbd
 8000670:	20000814 	.word	0x20000814

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2234      	movs	r2, #52	@ 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f007 feae 	bl	80083e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f001 fd62 	bl	8002160 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <SystemClock_Config+0xdc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemClock_Config+0xdc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <SystemClock_Config+0xdc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <SystemClock_Config+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006bc:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <SystemClock_Config+0xe0>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e8:	2360      	movs	r3, #96	@ 0x60
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fd8f 	bl	8002220 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000708:	f000 fad8 	bl	8000cbc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800070c:	f001 fd38 	bl	8002180 <HAL_PWREx_EnableOverDrive>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000716:	f000 fad1 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f820 	bl	800277c <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000742:	f000 fabb 	bl	8000cbc <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_ETH_Init+0x84>)
 800075e:	4a20      	ldr	r2, [pc, #128]	@ (80007e0 <MX_ETH_Init+0x88>)
 8000760:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000762:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <MX_ETH_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000768:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <MX_ETH_Init+0x8c>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_ETH_Init+0x8c>)
 8000770:	22e1      	movs	r2, #225	@ 0xe1
 8000772:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_ETH_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_ETH_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_ETH_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_ETH_Init+0x84>)
 8000788:	4a16      	ldr	r2, [pc, #88]	@ (80007e4 <MX_ETH_Init+0x8c>)
 800078a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_ETH_Init+0x84>)
 800078e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000792:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_ETH_Init+0x84>)
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <MX_ETH_Init+0x90>)
 8000798:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_ETH_Init+0x84>)
 800079c:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <MX_ETH_Init+0x94>)
 800079e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_ETH_Init+0x84>)
 80007a2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_ETH_Init+0x84>)
 80007aa:	f000 fe8b 	bl	80014c4 <HAL_ETH_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 fa82 	bl	8000cbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007b8:	2238      	movs	r2, #56	@ 0x38
 80007ba:	2100      	movs	r1, #0
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <MX_ETH_Init+0x98>)
 80007be:	f007 fe11 	bl	80083e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_ETH_Init+0x98>)
 80007c4:	2221      	movs	r2, #33	@ 0x21
 80007c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_ETH_Init+0x98>)
 80007ca:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_ETH_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001f4 	.word	0x200001f4
 80007e0:	40028000 	.word	0x40028000
 80007e4:	2000081c 	.word	0x2000081c
 80007e8:	20000100 	.word	0x20000100
 80007ec:	20000060 	.word	0x20000060
 80007f0:	200001bc 	.word	0x200001bc

080007f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART3_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <MX_USART3_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000838:	f003 f8ee 	bl	8003a18 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 fa3b 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002a4 	.word	0x200002a4
 8000850:	40004800 	.word	0x40004800

08000854 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800085e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2206      	movs	r2, #6
 8000864:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2202      	movs	r2, #2
 800086a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2202      	movs	r2, #2
 8000876:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2201      	movs	r2, #1
 800087c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2201      	movs	r2, #1
 800088e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	f001 fb27 	bl	8001eea <HAL_PCD_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 fa0b 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000032c 	.word	0x2000032c

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b47      	ldr	r3, [pc, #284]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a46      	ldr	r2, [pc, #280]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b44      	ldr	r3, [pc, #272]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b41      	ldr	r3, [pc, #260]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a40      	ldr	r2, [pc, #256]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a3a      	ldr	r2, [pc, #232]	@ (80009e4 <MX_GPIO_Init+0x134>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b38      	ldr	r3, [pc, #224]	@ (80009e4 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a34      	ldr	r2, [pc, #208]	@ (80009e4 <MX_GPIO_Init+0x134>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b32      	ldr	r3, [pc, #200]	@ (80009e4 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a2e      	ldr	r2, [pc, #184]	@ (80009e4 <MX_GPIO_Init+0x134>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a28      	ldr	r2, [pc, #160]	@ (80009e4 <MX_GPIO_Init+0x134>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f244 0181 	movw	r1, #16513	@ 0x4081
 800095c:	4822      	ldr	r0, [pc, #136]	@ (80009e8 <MX_GPIO_Init+0x138>)
 800095e:	f001 faab 	bl	8001eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	4821      	ldr	r0, [pc, #132]	@ (80009ec <MX_GPIO_Init+0x13c>)
 8000968:	f001 faa6 	bl	8001eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	481b      	ldr	r0, [pc, #108]	@ (80009f0 <MX_GPIO_Init+0x140>)
 8000984:	f001 f8ec 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000988:	f244 0381 	movw	r3, #16513	@ 0x4081
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80009a2:	f001 f8dd 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a6:	2340      	movs	r3, #64	@ 0x40
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	@ (80009ec <MX_GPIO_Init+0x13c>)
 80009be:	f001 f8cf 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_GPIO_Init+0x13c>)
 80009d6:	f001 f8c3 	bl	8001b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	@ 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40020800 	.word	0x40020800

080009f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b092      	sub	sp, #72	@ 0x48
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char buf[64];
  /* Infinite loop */
  for(;;)
  {
    snprintf(buf, sizeof(buf), "T1: Tentando adquirir... count=%lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 80009fc:	4b31      	ldr	r3, [pc, #196]	@ (8000ac4 <StartDefaultTask+0xd0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 faf7 	bl	8004ff4 <osSemaphoreGetCount>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f107 0008 	add.w	r0, r7, #8
 8000a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac8 <StartDefaultTask+0xd4>)
 8000a0e:	2140      	movs	r1, #64	@ 0x40
 8000a10:	f007 fcb4 	bl	800837c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fc11 	bl	8000240 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f107 0108 	add.w	r1, r7, #8
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	4828      	ldr	r0, [pc, #160]	@ (8000acc <StartDefaultTask+0xd8>)
 8000a2c:	f003 f842 	bl	8003ab4 <HAL_UART_Transmit>
    osSemaphoreAcquire(CountingSem01Handle, osWaitForever);
 8000a30:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <StartDefaultTask+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f04f 31ff 	mov.w	r1, #4294967295
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 fa1d 	bl	8004e78 <osSemaphoreAcquire>

    snprintf(buf, sizeof(buf), "T1: Adquirido: %lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <StartDefaultTask+0xd0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 fad6 	bl	8004ff4 <osSemaphoreGetCount>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f107 0008 	add.w	r0, r7, #8
 8000a4e:	4a20      	ldr	r2, [pc, #128]	@ (8000ad0 <StartDefaultTask+0xdc>)
 8000a50:	2140      	movs	r1, #64	@ 0x40
 8000a52:	f007 fc93 	bl	800837c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fbf0 	bl	8000240 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	f107 0108 	add.w	r1, r7, #8
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	4817      	ldr	r0, [pc, #92]	@ (8000acc <StartDefaultTask+0xd8>)
 8000a6e:	f003 f821 	bl	8003ab4 <HAL_UART_Transmit>
    osDelay(500);
 8000a72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a76:	f004 f935 	bl	8004ce4 <osDelay>
    osSemaphoreRelease(CountingSem01Handle);
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <StartDefaultTask+0xd0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 fa60 	bl	8004f44 <osSemaphoreRelease>

    snprintf(buf, sizeof(buf), "T1: Liberado: %lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <StartDefaultTask+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 fab3 	bl	8004ff4 <osSemaphoreGetCount>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f107 0008 	add.w	r0, r7, #8
 8000a94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <StartDefaultTask+0xe0>)
 8000a96:	2140      	movs	r1, #64	@ 0x40
 8000a98:	f007 fc70 	bl	800837c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fbcd 	bl	8000240 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	f107 0108 	add.w	r1, r7, #8
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	4806      	ldr	r0, [pc, #24]	@ (8000acc <StartDefaultTask+0xd8>)
 8000ab4:	f002 fffe 	bl	8003ab4 <HAL_UART_Transmit>
    osDelay(500);
 8000ab8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000abc:	f004 f912 	bl	8004ce4 <osDelay>
  {
 8000ac0:	bf00      	nop
 8000ac2:	e79b      	b.n	80009fc <StartDefaultTask+0x8>
 8000ac4:	20000818 	.word	0x20000818
 8000ac8:	08008dd0 	.word	0x08008dd0
 8000acc:	200002a4 	.word	0x200002a4
 8000ad0:	08008df8 	.word	0x08008df8
 8000ad4:	08008e10 	.word	0x08008e10

08000ad8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b092      	sub	sp, #72	@ 0x48
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	char buf2[64];
  /* Infinite loop */
  for(;;)
  {
	  snprintf(buf2, sizeof(buf2), "T2: Tentando adquirir... count=%lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000ae0:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <StartTask02+0xd0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fa85 	bl	8004ff4 <osSemaphoreGetCount>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f107 0008 	add.w	r0, r7, #8
 8000af0:	4a2e      	ldr	r2, [pc, #184]	@ (8000bac <StartTask02+0xd4>)
 8000af2:	2140      	movs	r1, #64	@ 0x40
 8000af4:	f007 fc42 	bl	800837c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY);
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fb9f 	bl	8000240 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	f107 0108 	add.w	r1, r7, #8
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	4828      	ldr	r0, [pc, #160]	@ (8000bb0 <StartTask02+0xd8>)
 8000b10:	f002 ffd0 	bl	8003ab4 <HAL_UART_Transmit>
	  osSemaphoreAcquire(CountingSem01Handle, osWaitForever);
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <StartTask02+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 f9ab 	bl	8004e78 <osSemaphoreAcquire>

	  snprintf(buf2, sizeof(buf2), "T2: Adquirido: %lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <StartTask02+0xd0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 fa64 	bl	8004ff4 <osSemaphoreGetCount>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f107 0008 	add.w	r0, r7, #8
 8000b32:	4a20      	ldr	r2, [pc, #128]	@ (8000bb4 <StartTask02+0xdc>)
 8000b34:	2140      	movs	r1, #64	@ 0x40
 8000b36:	f007 fc21 	bl	800837c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY);
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fb7e 	bl	8000240 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	f107 0108 	add.w	r1, r7, #8
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	4817      	ldr	r0, [pc, #92]	@ (8000bb0 <StartTask02+0xd8>)
 8000b52:	f002 ffaf 	bl	8003ab4 <HAL_UART_Transmit>
	  osDelay(500);
 8000b56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b5a:	f004 f8c3 	bl	8004ce4 <osDelay>
	  osSemaphoreRelease(CountingSem01Handle);
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <StartTask02+0xd0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 f9ee 	bl	8004f44 <osSemaphoreRelease>

	  snprintf(buf2, sizeof(buf2), "T2: Liberado: %lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <StartTask02+0xd0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fa41 	bl	8004ff4 <osSemaphoreGetCount>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f107 0008 	add.w	r0, r7, #8
 8000b78:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <StartTask02+0xe0>)
 8000b7a:	2140      	movs	r1, #64	@ 0x40
 8000b7c:	f007 fbfe 	bl	800837c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY);
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fb5b 	bl	8000240 <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	f107 0108 	add.w	r1, r7, #8
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <StartTask02+0xd8>)
 8000b98:	f002 ff8c 	bl	8003ab4 <HAL_UART_Transmit>
	  osDelay(500);
 8000b9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ba0:	f004 f8a0 	bl	8004ce4 <osDelay>
  {
 8000ba4:	bf00      	nop
 8000ba6:	e79b      	b.n	8000ae0 <StartTask02+0x8>
 8000ba8:	20000818 	.word	0x20000818
 8000bac:	08008e24 	.word	0x08008e24
 8000bb0:	200002a4 	.word	0x200002a4
 8000bb4:	08008e4c 	.word	0x08008e4c
 8000bb8:	08008e64 	.word	0x08008e64

08000bbc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b092      	sub	sp, #72	@ 0x48
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	char buf3[64];
  /* Infinite loop */
  for(;;)
  {
	  snprintf(buf3, sizeof(buf3), "T3: Tentando adquirir... count=%lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <StartTask03+0xc8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fa13 	bl	8004ff4 <osSemaphoreGetCount>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f107 0008 	add.w	r0, r7, #8
 8000bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c88 <StartTask03+0xcc>)
 8000bd6:	2140      	movs	r1, #64	@ 0x40
 8000bd8:	f007 fbd0 	bl	800837c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf3, strlen(buf3), HAL_MAX_DELAY);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fb2d 	bl	8000240 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	f107 0108 	add.w	r1, r7, #8
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	4826      	ldr	r0, [pc, #152]	@ (8000c8c <StartTask03+0xd0>)
 8000bf4:	f002 ff5e 	bl	8003ab4 <HAL_UART_Transmit>
	  osSemaphoreAcquire(CountingSem01Handle, osWaitForever);
 8000bf8:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <StartTask03+0xc8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 f939 	bl	8004e78 <osSemaphoreAcquire>

	  snprintf(buf3, sizeof(buf3), "T3: Adquirido: %lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <StartTask03+0xc8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 f9f2 	bl	8004ff4 <osSemaphoreGetCount>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f107 0008 	add.w	r0, r7, #8
 8000c16:	4a1e      	ldr	r2, [pc, #120]	@ (8000c90 <StartTask03+0xd4>)
 8000c18:	2140      	movs	r1, #64	@ 0x40
 8000c1a:	f007 fbaf 	bl	800837c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf3, strlen(buf3), HAL_MAX_DELAY);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fb0c 	bl	8000240 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	f107 0108 	add.w	r1, r7, #8
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	4815      	ldr	r0, [pc, #84]	@ (8000c8c <StartTask03+0xd0>)
 8000c36:	f002 ff3d 	bl	8003ab4 <HAL_UART_Transmit>

	  osSemaphoreRelease(CountingSem01Handle);
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <StartTask03+0xc8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 f980 	bl	8004f44 <osSemaphoreRelease>

	  snprintf(buf3, sizeof(buf3), "T3: Liberado: %lu\r\n", osSemaphoreGetCount(CountingSem01Handle));
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <StartTask03+0xc8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 f9d3 	bl	8004ff4 <osSemaphoreGetCount>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f107 0008 	add.w	r0, r7, #8
 8000c54:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <StartTask03+0xd8>)
 8000c56:	2140      	movs	r1, #64	@ 0x40
 8000c58:	f007 fb90 	bl	800837c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buf3, strlen(buf3), HAL_MAX_DELAY);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff faed 	bl	8000240 <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	f107 0108 	add.w	r1, r7, #8
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <StartTask03+0xd0>)
 8000c74:	f002 ff1e 	bl	8003ab4 <HAL_UART_Transmit>
	  osDelay(500);
 8000c78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c7c:	f004 f832 	bl	8004ce4 <osDelay>
  {
 8000c80:	bf00      	nop
 8000c82:	e79f      	b.n	8000bc4 <StartTask03+0x8>
 8000c84:	20000818 	.word	0x20000818
 8000c88:	08008e78 	.word	0x08008e78
 8000c8c:	200002a4 	.word	0x200002a4
 8000c90:	08008ea0 	.word	0x08008ea0
 8000c94:	08008eb8 	.word	0x08008eb8

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 fae5 	bl	8001278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40001000 	.word	0x40001000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a10      	ldr	r2, [pc, #64]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	210f      	movs	r1, #15
 8000d02:	f06f 0001 	mvn.w	r0, #1
 8000d06:	f000 fbb3 	bl	8001470 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	@ 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a4e      	ldr	r2, [pc, #312]	@ (8000e70 <HAL_ETH_MspInit+0x158>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	f040 8096 	bne.w	8000e68 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a4c      	ldr	r2, [pc, #304]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b4a      	ldr	r3, [pc, #296]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d50:	623b      	str	r3, [r7, #32]
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	4b47      	ldr	r3, [pc, #284]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	4a46      	ldr	r2, [pc, #280]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d60:	4b44      	ldr	r3, [pc, #272]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a40      	ldr	r2, [pc, #256]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d78:	4b3e      	ldr	r3, [pc, #248]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	4a3a      	ldr	r2, [pc, #232]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d90:	4b38      	ldr	r3, [pc, #224]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	4a34      	ldr	r2, [pc, #208]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da8:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db8:	4a2e      	ldr	r2, [pc, #184]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	4a28      	ldr	r2, [pc, #160]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd8:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <HAL_ETH_MspInit+0x15c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000de4:	2332      	movs	r3, #50	@ 0x32
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df4:	230b      	movs	r3, #11
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481e      	ldr	r0, [pc, #120]	@ (8000e78 <HAL_ETH_MspInit+0x160>)
 8000e00:	f000 feae 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e04:	2386      	movs	r3, #134	@ 0x86
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e14:	230b      	movs	r3, #11
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4817      	ldr	r0, [pc, #92]	@ (8000e7c <HAL_ETH_MspInit+0x164>)
 8000e20:	f000 fe9e 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e36:	230b      	movs	r3, #11
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <HAL_ETH_MspInit+0x168>)
 8000e42:	f000 fe8d 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e46:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e58:	230b      	movs	r3, #11
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4808      	ldr	r0, [pc, #32]	@ (8000e84 <HAL_ETH_MspInit+0x16c>)
 8000e64:	f000 fe7c 	bl	8001b60 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	@ 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40028000 	.word	0x40028000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40021800 	.word	0x40021800

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2290      	movs	r2, #144	@ 0x90
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f007 fa9b 	bl	80083e4 <memset>
  if(huart->Instance==USART3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <HAL_UART_MspInit+0xb4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d13c      	bne.n	8000f32 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ebc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 feb0 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed2:	f7ff fef3 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	4a19      	ldr	r2, [pc, #100]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f20:	2307      	movs	r3, #7
 8000f22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000f2e:	f000 fe17 	bl	8001b60 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f32:	bf00      	nop
 8000f34:	37b8      	adds	r7, #184	@ 0xb8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40004800 	.word	0x40004800
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020c00 	.word	0x40020c00

08000f48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ae      	sub	sp, #184	@ 0xb8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2290      	movs	r2, #144	@ 0x90
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f007 fa3b 	bl	80083e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f76:	d159      	bne.n	800102c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fe4f 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f7ff fe92 	bl	8000cbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8000fd8:	f000 fdc2 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4810      	ldr	r0, [pc, #64]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8000ff8:	f000 fdb2 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8001002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001006:	6353      	str	r3, [r2, #52]	@ 0x34
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 800100a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001018:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8001022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	37b8      	adds	r7, #184	@ 0xb8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800104c:	4b33      	ldr	r3, [pc, #204]	@ (800111c <HAL_InitTick+0xe0>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	4a32      	ldr	r2, [pc, #200]	@ (800111c <HAL_InitTick+0xe0>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6413      	str	r3, [r2, #64]	@ 0x40
 8001058:	4b30      	ldr	r3, [pc, #192]	@ (800111c <HAL_InitTick+0xe0>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001064:	f107 0210 	add.w	r2, r7, #16
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fdaa 	bl	8002bc8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800107e:	f001 fd7b 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8001082:	6378      	str	r0, [r7, #52]	@ 0x34
 8001084:	e004      	b.n	8001090 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001086:	f001 fd77 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 800108a:	4603      	mov	r3, r0
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001092:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <HAL_InitTick+0xe4>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	0c9b      	lsrs	r3, r3, #18
 800109a:	3b01      	subs	r3, #1
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <HAL_InitTick+0xe8>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <HAL_InitTick+0xec>)
 80010a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_InitTick+0xe8>)
 80010a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <HAL_InitTick+0xe8>)
 80010ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <HAL_InitTick+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <HAL_InitTick+0xe8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_InitTick+0xe8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010c4:	4817      	ldr	r0, [pc, #92]	@ (8001124 <HAL_InitTick+0xe8>)
 80010c6:	f002 f9d9 	bl	800347c <HAL_TIM_Base_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d11b      	bne.n	8001110 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <HAL_InitTick+0xe8>)
 80010da:	f002 fa31 	bl	8003540 <HAL_TIM_Base_Start_IT>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d111      	bne.n	8001110 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ec:	2036      	movs	r0, #54	@ 0x36
 80010ee:	f000 f9db 	bl	80014a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d808      	bhi.n	800110a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	2036      	movs	r0, #54	@ 0x36
 80010fe:	f000 f9b7 	bl	8001470 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_InitTick+0xf0>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e002      	b.n	8001110 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001110:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001114:	4618      	mov	r0, r3
 8001116:	3738      	adds	r7, #56	@ 0x38
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	431bde83 	.word	0x431bde83
 8001124:	20000824 	.word	0x20000824
 8001128:	40001000 	.word	0x40001000
 800112c:	20000004 	.word	0x20000004

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <NMI_Handler+0x4>

08001138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <MemManage_Handler+0x4>

08001148 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <UsageFault_Handler+0x4>

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <TIM6_DAC_IRQHandler+0x10>)
 800116e:	f002 fa5f 	bl	8003630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000824 	.word	0x20000824

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f007 f978 	bl	80084a0 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20080000 	.word	0x20080000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	20000870 	.word	0x20000870
 80011e4:	200053a0 	.word	0x200053a0

080011e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001210:	f7ff ffea 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800123a:	f007 f937 	bl	80084ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff f9cf 	bl	80005e0 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001250:	08008fbc 	.word	0x08008fbc
  ldr r2, =_sbss
 8001254:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001258:	200053a0 	.word	0x200053a0

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>

0800125e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f8f9 	bl	800145a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001268:	200f      	movs	r0, #15
 800126a:	f7ff fee7 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126e:	f7ff fd2b 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20000874 	.word	0x20000874

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000874 	.word	0x20000874

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	4313      	orrs	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	05fa0000 	.word	0x05fa0000

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	@ (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff4c 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001482:	f7ff ff61 	bl	8001348 <__NVIC_GetPriorityGrouping>
 8001486:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff ffb1 	bl	80013f4 <NVIC_EncodePriority>
 8001492:	4602      	mov	r2, r0
 8001494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff80 	bl	80013a0 <__NVIC_SetPriority>
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff54 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e086      	b.n	80015e4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d106      	bne.n	80014ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fc15 	bl	8000d18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <HAL_ETH_Init+0x128>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a3e      	ldr	r2, [pc, #248]	@ (80015ec <HAL_ETH_Init+0x128>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <HAL_ETH_Init+0x128>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001506:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_ETH_Init+0x12c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a39      	ldr	r2, [pc, #228]	@ (80015f0 <HAL_ETH_Init+0x12c>)
 800150c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001510:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001512:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <HAL_ETH_Init+0x12c>)
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4935      	ldr	r1, [pc, #212]	@ (80015f0 <HAL_ETH_Init+0x12c>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001520:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <HAL_ETH_Init+0x12c>)
 8001522:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800153a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153c:	f7ff feb0 	bl	80012a0 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001542:	e011      	b.n	8001568 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001544:	f7ff feac 	bl	80012a0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001552:	d909      	bls.n	8001568 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2204      	movs	r2, #4
 8001558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	22e0      	movs	r2, #224	@ 0xe0
 8001560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e03d      	b.n	80015e4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1e4      	bne.n	8001544 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f97a 	bl	8001874 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fa25 	bl	80019d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fa7b 	bl	8001a82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	461a      	mov	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f9e3 	bl	8001960 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_ETH_Init+0x130>)
 80015b8:	430b      	orrs	r3, r1
 80015ba:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80015ce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2210      	movs	r2, #16
 80015de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40013800 	.word	0x40013800
 80015f4:	00020060 	.word	0x00020060

080015f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <ETH_SetMACConfig+0x164>)
 800160e:	4013      	ands	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	7b9b      	ldrb	r3, [r3, #14]
 8001616:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	7c12      	ldrb	r2, [r2, #16]
 800161c:	2a00      	cmp	r2, #0
 800161e:	d102      	bne.n	8001626 <ETH_SetMACConfig+0x2e>
 8001620:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001624:	e000      	b.n	8001628 <ETH_SetMACConfig+0x30>
 8001626:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001628:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	7c52      	ldrb	r2, [r2, #17]
 800162e:	2a00      	cmp	r2, #0
 8001630:	d102      	bne.n	8001638 <ETH_SetMACConfig+0x40>
 8001632:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001636:	e000      	b.n	800163a <ETH_SetMACConfig+0x42>
 8001638:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800163a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001640:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	7fdb      	ldrb	r3, [r3, #31]
 8001646:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001648:	431a      	orrs	r2, r3
                        macconf->Speed |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800164e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	7f92      	ldrb	r2, [r2, #30]
 8001654:	2a00      	cmp	r2, #0
 8001656:	d102      	bne.n	800165e <ETH_SetMACConfig+0x66>
 8001658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800165c:	e000      	b.n	8001660 <ETH_SetMACConfig+0x68>
 800165e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001660:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	7f1b      	ldrb	r3, [r3, #28]
 8001666:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001668:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800166e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	791b      	ldrb	r3, [r3, #4]
 8001674:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001676:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800167e:	2a00      	cmp	r2, #0
 8001680:	d102      	bne.n	8001688 <ETH_SetMACConfig+0x90>
 8001682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001686:	e000      	b.n	800168a <ETH_SetMACConfig+0x92>
 8001688:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800168a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	7bdb      	ldrb	r3, [r3, #15]
 8001690:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001692:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001698:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80016a2:	4313      	orrs	r3, r2
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fdfc 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d101      	bne.n	80016ee <ETH_SetMACConfig+0xf6>
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	e000      	b.n	80016f0 <ETH_SetMACConfig+0xf8>
 80016ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80016fe:	2a01      	cmp	r2, #1
 8001700:	d101      	bne.n	8001706 <ETH_SetMACConfig+0x10e>
 8001702:	2208      	movs	r2, #8
 8001704:	e000      	b.n	8001708 <ETH_SetMACConfig+0x110>
 8001706:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001708:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001710:	2a01      	cmp	r2, #1
 8001712:	d101      	bne.n	8001718 <ETH_SetMACConfig+0x120>
 8001714:	2204      	movs	r2, #4
 8001716:	e000      	b.n	800171a <ETH_SetMACConfig+0x122>
 8001718:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800171a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001722:	2a01      	cmp	r2, #1
 8001724:	d101      	bne.n	800172a <ETH_SetMACConfig+0x132>
 8001726:	2202      	movs	r2, #2
 8001728:	e000      	b.n	800172c <ETH_SetMACConfig+0x134>
 800172a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800172c:	4313      	orrs	r3, r2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fdb7 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	fd20810f 	.word	0xfd20810f

08001760 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <ETH_SetDMAConfig+0x110>)
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	7b1b      	ldrb	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <ETH_SetDMAConfig+0x2c>
 8001786:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800178a:	e000      	b.n	800178e <ETH_SetDMAConfig+0x2e>
 800178c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7b5b      	ldrb	r3, [r3, #13]
 8001792:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001794:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	7f52      	ldrb	r2, [r2, #29]
 800179a:	2a00      	cmp	r2, #0
 800179c:	d102      	bne.n	80017a4 <ETH_SetDMAConfig+0x44>
 800179e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80017a2:	e000      	b.n	80017a6 <ETH_SetDMAConfig+0x46>
 80017a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	7b9b      	ldrb	r3, [r3, #14]
 80017ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7f1b      	ldrb	r3, [r3, #28]
 80017ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80017bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	7f9b      	ldrb	r3, [r3, #30]
 80017c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017d4:	4313      	orrs	r3, r2
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017e4:	461a      	mov	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff fd5e 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001804:	461a      	mov	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	791b      	ldrb	r3, [r3, #4]
 800180e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001814:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800181a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001820:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001828:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800182a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001832:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001838:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001842:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001846:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff fd2f 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	f8de3f23 	.word	0xf8de3f23

08001874 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0a6      	sub	sp, #152	@ 0x98
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001882:	2301      	movs	r3, #1
 8001884:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001888:	2300      	movs	r3, #0
 800188a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018b6:	2300      	movs	r3, #0
 80018b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018f2:	4619      	mov	r1, r3
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fe7f 	bl	80015f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018fe:	2301      	movs	r3, #1
 8001900:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001908:	2301      	movs	r3, #1
 800190a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001920:	2301      	movs	r3, #1
 8001922:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001926:	2301      	movs	r3, #1
 8001928:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800192a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800192e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001930:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001934:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff05 	bl	8001760 <ETH_SetDMAConfig>
}
 8001956:	bf00      	nop
 8001958:	3798      	adds	r7, #152	@ 0x98
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3305      	adds	r3, #5
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	3204      	adds	r2, #4
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <ETH_MACAddressConfig+0x68>)
 8001982:	4413      	add	r3, r2
 8001984:	461a      	mov	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3303      	adds	r3, #3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	061a      	lsls	r2, r3, #24
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3302      	adds	r3, #2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	041b      	lsls	r3, r3, #16
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	4313      	orrs	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <ETH_MACAddressConfig+0x6c>)
 80019b2:	4413      	add	r3, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	6013      	str	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40028040 	.word	0x40028040
 80019cc:	40028044 	.word	0x40028044

080019d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e03e      	b.n	8001a5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68d9      	ldr	r1, [r3, #12]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	3206      	adds	r2, #6
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d80c      	bhi.n	8001a40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68d9      	ldr	r1, [r3, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	e004      	b.n	8001a4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d9bd      	bls.n	80019de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a74:	611a      	str	r2, [r3, #16]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e048      	b.n	8001b22 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6919      	ldr	r1, [r3, #16]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001acc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	3212      	adds	r2, #18
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d80c      	bhi.n	8001b12 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6919      	ldr	r1, [r3, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	e004      	b.n	8001b1c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d9b3      	bls.n	8001a90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b52:	60da      	str	r2, [r3, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e175      	b.n	8001e6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8164 	bne.w	8001e66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x56>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80be 	beq.w	8001e66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4b66      	ldr	r3, [pc, #408]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a65      	ldr	r2, [pc, #404]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b63      	ldr	r3, [pc, #396]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d02:	4a61      	ldr	r2, [pc, #388]	@ (8001e88 <HAL_GPIO_Init+0x328>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a58      	ldr	r2, [pc, #352]	@ (8001e8c <HAL_GPIO_Init+0x32c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d037      	beq.n	8001d9e <HAL_GPIO_Init+0x23e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a57      	ldr	r2, [pc, #348]	@ (8001e90 <HAL_GPIO_Init+0x330>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_GPIO_Init+0x23a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a56      	ldr	r2, [pc, #344]	@ (8001e94 <HAL_GPIO_Init+0x334>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02b      	beq.n	8001d96 <HAL_GPIO_Init+0x236>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a55      	ldr	r2, [pc, #340]	@ (8001e98 <HAL_GPIO_Init+0x338>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_Init+0x232>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a54      	ldr	r2, [pc, #336]	@ (8001e9c <HAL_GPIO_Init+0x33c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x22e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a53      	ldr	r2, [pc, #332]	@ (8001ea0 <HAL_GPIO_Init+0x340>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0x22a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a52      	ldr	r2, [pc, #328]	@ (8001ea4 <HAL_GPIO_Init+0x344>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x226>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a51      	ldr	r2, [pc, #324]	@ (8001ea8 <HAL_GPIO_Init+0x348>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a50      	ldr	r2, [pc, #320]	@ (8001eac <HAL_GPIO_Init+0x34c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x21e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x21a>
 8001d76:	2309      	movs	r3, #9
 8001d78:	e012      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	e010      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e00e      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x240>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001db0:	4935      	ldr	r1, [pc, #212]	@ (8001e88 <HAL_GPIO_Init+0x328>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a34      	ldr	r2, [pc, #208]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b32      	ldr	r3, [pc, #200]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a29      	ldr	r2, [pc, #164]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e12:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e36:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <HAL_GPIO_Init+0x354>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	f67f ae86 	bls.w	8001b80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40021400 	.word	0x40021400
 8001ea4:	40021800 	.word	0x40021800
 8001ea8:	40021c00 	.word	0x40021c00
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	40022400 	.word	0x40022400
 8001eb4:	40013c00 	.word	0x40013c00

08001eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec8:	787b      	ldrb	r3, [r7, #1]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ece:	887a      	ldrh	r2, [r7, #2]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ed4:	e003      	b.n	8001ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	041a      	lsls	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	619a      	str	r2, [r3, #24]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af02      	add	r7, sp, #8
 8001ef0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e108      	b.n	800210e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f816 	bl	8000f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fb20 	bl	800457c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7c1a      	ldrb	r2, [r3, #16]
 8001f44:	f88d 2000 	strb.w	r2, [sp]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4c:	f002 fabc 	bl	80044c8 <USB_CoreInit>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0d5      	b.n	800210e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fb18 	bl	800459e <USB_SetCurrentMode>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0c6      	b.n	800210e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e04a      	b.n	800201c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3315      	adds	r3, #21
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3314      	adds	r3, #20
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	332e      	adds	r3, #46	@ 0x2e
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3318      	adds	r3, #24
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	331c      	adds	r3, #28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3320      	adds	r3, #32
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3324      	adds	r3, #36	@ 0x24
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	791b      	ldrb	r3, [r3, #4]
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3af      	bcc.n	8001f86 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e044      	b.n	80020b6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	791b      	ldrb	r3, [r3, #4]
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3b5      	bcc.n	800202c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7c1a      	ldrb	r2, [r3, #16]
 80020c8:	f88d 2000 	strb.w	r2, [sp]
 80020cc:	3304      	adds	r3, #4
 80020ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d0:	f002 fab2 	bl	8004638 <USB_DevInit>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e013      	b.n	800210e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7b1b      	ldrb	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d102      	bne.n	8002102 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f80b 	bl	8002118 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fc6d 	bl	80049e6 <USB_DevDisconnect>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002146:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_PCDEx_ActivateLPM+0x44>)
 8002148:	4313      	orrs	r3, r2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	10000003 	.word	0x10000003

08002160 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a04      	ldr	r2, [pc, #16]	@ (800217c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40007000 	.word	0x40007000

08002180 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <HAL_PWREx_EnableOverDrive+0x98>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a22      	ldr	r2, [pc, #136]	@ (8002218 <HAL_PWREx_EnableOverDrive+0x98>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_PWREx_EnableOverDrive+0x98>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ae:	f7ff f877 	bl	80012a0 <HAL_GetTick>
 80021b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021b4:	e009      	b.n	80021ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021b6:	f7ff f873 	bl	80012a0 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021c4:	d901      	bls.n	80021ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e022      	b.n	8002210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ca:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d6:	d1ee      	bne.n	80021b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0f      	ldr	r2, [pc, #60]	@ (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e4:	f7ff f85c 	bl	80012a0 <HAL_GetTick>
 80021e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021ea:	e009      	b.n	8002200 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021ec:	f7ff f858 	bl	80012a0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021fa:	d901      	bls.n	8002200 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e007      	b.n	8002210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800220c:	d1ee      	bne.n	80021ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e29b      	b.n	800276e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8087 	beq.w	8002352 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002244:	4b96      	ldr	r3, [pc, #600]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002250:	4b93      	ldr	r3, [pc, #588]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d112      	bne.n	8002282 <HAL_RCC_OscConfig+0x62>
 800225c:	4b90      	ldr	r3, [pc, #576]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002268:	d10b      	bne.n	8002282 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226a:	4b8d      	ldr	r3, [pc, #564]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06c      	beq.n	8002350 <HAL_RCC_OscConfig+0x130>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d168      	bne.n	8002350 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e275      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x7a>
 800228c:	4b84      	ldr	r3, [pc, #528]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a83      	ldr	r2, [pc, #524]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e02e      	b.n	80022f8 <HAL_RCC_OscConfig+0xd8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x9c>
 80022a2:	4b7f      	ldr	r3, [pc, #508]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7e      	ldr	r2, [pc, #504]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b7c      	ldr	r3, [pc, #496]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7b      	ldr	r2, [pc, #492]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xd8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022c6:	4b76      	ldr	r3, [pc, #472]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a75      	ldr	r2, [pc, #468]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b73      	ldr	r3, [pc, #460]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a72      	ldr	r2, [pc, #456]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xd8>
 80022e0:	4b6f      	ldr	r3, [pc, #444]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6e      	ldr	r2, [pc, #440]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b6c      	ldr	r3, [pc, #432]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6b      	ldr	r2, [pc, #428]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe ffce 	bl	80012a0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe ffca 	bl	80012a0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	@ 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e229      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b61      	ldr	r3, [pc, #388]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe ffba 	bl	80012a0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe ffb6 	bl	80012a0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	@ 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e215      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b57      	ldr	r3, [pc, #348]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x110>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d069      	beq.n	8002432 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235e:	4b50      	ldr	r3, [pc, #320]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b4d      	ldr	r3, [pc, #308]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x190>
 8002376:	4b4a      	ldr	r3, [pc, #296]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x17a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1e9      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b41      	ldr	r3, [pc, #260]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	493d      	ldr	r1, [pc, #244]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e040      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d023      	beq.n	8002400 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a38      	ldr	r2, [pc, #224]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe ff6c 	bl	80012a0 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023cc:	f7fe ff68 	bl	80012a0 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1c7      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	4b30      	ldr	r3, [pc, #192]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4929      	ldr	r1, [pc, #164]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
 80023fe:	e018      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002400:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a26      	ldr	r2, [pc, #152]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe ff48 	bl	80012a0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe ff44 	bl	80012a0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1a3      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d038      	beq.n	80024b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d019      	beq.n	800247a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800244a:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7fe ff25 	bl	80012a0 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe ff21 	bl	80012a0 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e180      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x23a>
 8002478:	e01a      	b.n	80024b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247e:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_RCC_OscConfig+0x280>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002486:	f7fe ff0b 	bl	80012a0 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248e:	f7fe ff07 	bl	80012a0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d903      	bls.n	80024a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e166      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
 80024a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a4 	beq.w	8002606 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b8c      	ldr	r3, [pc, #560]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b89      	ldr	r3, [pc, #548]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	4a88      	ldr	r2, [pc, #544]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d6:	4b86      	ldr	r3, [pc, #536]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e6:	4b83      	ldr	r3, [pc, #524]	@ (80026f4 <HAL_RCC_OscConfig+0x4d4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024f2:	4b80      	ldr	r3, [pc, #512]	@ (80026f4 <HAL_RCC_OscConfig+0x4d4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7f      	ldr	r2, [pc, #508]	@ (80026f4 <HAL_RCC_OscConfig+0x4d4>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7fe fecf 	bl	80012a0 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7fe fecb 	bl	80012a0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	@ 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e12a      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002518:	4b76      	ldr	r3, [pc, #472]	@ (80026f4 <HAL_RCC_OscConfig+0x4d4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x31a>
 800252c:	4b70      	ldr	r3, [pc, #448]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	4a6f      	ldr	r2, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	@ 0x70
 8002538:	e02d      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x33c>
 8002542:	4b6b      	ldr	r3, [pc, #428]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	4a6a      	ldr	r2, [pc, #424]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	@ 0x70
 800254e:	4b68      	ldr	r3, [pc, #416]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002552:	4a67      	ldr	r2, [pc, #412]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	@ 0x70
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x35e>
 8002564:	4b62      	ldr	r3, [pc, #392]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	4a61      	ldr	r2, [pc, #388]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002570:	4b5f      	ldr	r3, [pc, #380]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	4a5e      	ldr	r2, [pc, #376]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	@ 0x70
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
 800257e:	4b5c      	ldr	r3, [pc, #368]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002582:	4a5b      	ldr	r2, [pc, #364]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6713      	str	r3, [r2, #112]	@ 0x70
 800258a:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7fe fe7f 	bl	80012a0 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7fe fe7b 	bl	80012a0 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0d8      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x386>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fe69 	bl	80012a0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fe65 	bl	80012a0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0c2      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a3c      	ldr	r2, [pc, #240]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80ae 	beq.w	800276c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d06d      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d14b      	bne.n	80026bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fe36 	bl	80012a0 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fe32 	bl	80012a0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e091      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	071b      	lsls	r3, r3, #28
 8002682:	491b      	ldr	r1, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a18      	ldr	r2, [pc, #96]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 800268e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fe04 	bl	80012a0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fe00 	bl	80012a0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e05f      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x47c>
 80026ba:	e057      	b.n	800276c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80026c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fdea 	bl	80012a0 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fde6 	bl	80012a0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e045      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <HAL_RCC_OscConfig+0x4d0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4b0>
 80026ee:	e03d      	b.n	800276c <HAL_RCC_OscConfig+0x54c>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <HAL_RCC_OscConfig+0x558>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d030      	beq.n	8002768 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d129      	bne.n	8002768 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d122      	bne.n	8002768 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800272e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002730:	4293      	cmp	r3, r2
 8002732:	d119      	bne.n	8002768 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	3b01      	subs	r3, #1
 8002742:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d10f      	bne.n	8002768 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800

0800277c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0d0      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b6a      	ldr	r3, [pc, #424]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d910      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b67      	ldr	r3, [pc, #412]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 020f 	bic.w	r2, r3, #15
 80027aa:	4965      	ldr	r1, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 80027fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d040      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d115      	bne.n	800285e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e073      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06b      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4936      	ldr	r1, [pc, #216]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fd16 	bl	80012a0 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fd12 	bl	80012a0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e053      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d210      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 020f 	bic.w	r2, r3, #15
 80028b6:	4922      	ldr	r1, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f821 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1cc>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1d0>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1d4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fb84 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	40023800 	.word	0x40023800
 8002948:	08008f60 	.word	0x08008f60
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b094      	sub	sp, #80	@ 0x50
 800295a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002960:	2300      	movs	r3, #0
 8002962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002964:	2300      	movs	r3, #0
 8002966:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296c:	4b79      	ldr	r3, [pc, #484]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d00d      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x40>
 8002978:	2b08      	cmp	r3, #8
 800297a:	f200 80e1 	bhi.w	8002b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 8002982:	2b04      	cmp	r3, #4
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x3a>
 8002986:	e0db      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b73      	ldr	r3, [pc, #460]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800298c:	e0db      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002992:	e0d8      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4b6f      	ldr	r3, [pc, #444]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800299e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	099b      	lsrs	r3, r3, #6
 80029b0:	2200      	movs	r2, #0
 80029b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029be:	2300      	movs	r3, #0
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029c6:	4622      	mov	r2, r4
 80029c8:	462b      	mov	r3, r5
 80029ca:	f04f 0000 	mov.w	r0, #0
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	0159      	lsls	r1, r3, #5
 80029d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d8:	0150      	lsls	r0, r2, #5
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4621      	mov	r1, r4
 80029e0:	1a51      	subs	r1, r2, r1
 80029e2:	6139      	str	r1, [r7, #16]
 80029e4:	4629      	mov	r1, r5
 80029e6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f8:	4659      	mov	r1, fp
 80029fa:	018b      	lsls	r3, r1, #6
 80029fc:	4651      	mov	r1, sl
 80029fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a02:	4651      	mov	r1, sl
 8002a04:	018a      	lsls	r2, r1, #6
 8002a06:	4651      	mov	r1, sl
 8002a08:	ebb2 0801 	subs.w	r8, r2, r1
 8002a0c:	4659      	mov	r1, fp
 8002a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a26:	4690      	mov	r8, r2
 8002a28:	4699      	mov	r9, r3
 8002a2a:	4623      	mov	r3, r4
 8002a2c:	eb18 0303 	adds.w	r3, r8, r3
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	462b      	mov	r3, r5
 8002a34:	eb49 0303 	adc.w	r3, r9, r3
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a46:	4629      	mov	r1, r5
 8002a48:	024b      	lsls	r3, r1, #9
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a50:	4621      	mov	r1, r4
 8002a52:	024a      	lsls	r2, r1, #9
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a64:	f7fd fc44 	bl	80002f0 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a70:	e058      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a72:	4b38      	ldr	r3, [pc, #224]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	f04f 0000 	mov.w	r0, #0
 8002a94:	f04f 0100 	mov.w	r1, #0
 8002a98:	0159      	lsls	r1, r3, #5
 8002a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9e:	0150      	lsls	r0, r2, #5
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aaa:	4649      	mov	r1, r9
 8002aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	00eb      	lsls	r3, r5, #3
 8002ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ada:	00e2      	lsls	r2, r4, #3
 8002adc:	4614      	mov	r4, r2
 8002ade:	461d      	mov	r5, r3
 8002ae0:	4643      	mov	r3, r8
 8002ae2:	18e3      	adds	r3, r4, r3
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	eb45 0303 	adc.w	r3, r5, r3
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002afa:	4629      	mov	r1, r5
 8002afc:	028b      	lsls	r3, r1, #10
 8002afe:	4621      	mov	r1, r4
 8002b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b04:	4621      	mov	r1, r4
 8002b06:	028a      	lsls	r2, r1, #10
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	61fa      	str	r2, [r7, #28]
 8002b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b18:	f7fd fbea 	bl	80002f0 <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4613      	mov	r3, r2
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3750      	adds	r7, #80	@ 0x50
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	007a1200 	.word	0x007a1200

08002b60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff0 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0a9b      	lsrs	r3, r3, #10
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08008f70 	.word	0x08008f70

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffdc 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0b5b      	lsrs	r3, r3, #13
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	@ (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08008f70 	.word	0x08008f70

08002bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_RCC_GetClockConfig+0x5c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0203 	and.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <HAL_RCC_GetClockConfig+0x5c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <HAL_RCC_GetClockConfig+0x60>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40023c00 	.word	0x40023c00

08002c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c54:	4b69      	ldr	r3, [pc, #420]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a68      	ldr	r2, [pc, #416]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c5e:	6093      	str	r3, [r2, #8]
 8002c60:	4b66      	ldr	r3, [pc, #408]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c68:	4964      	ldr	r1, [pc, #400]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c86:	4b5d      	ldr	r3, [pc, #372]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c94:	4959      	ldr	r1, [pc, #356]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	494a      	ldr	r1, [pc, #296]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 808b 	beq.w	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	4a39      	ldr	r2, [pc, #228]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1c:	4b37      	ldr	r3, [pc, #220]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d28:	4b35      	ldr	r3, [pc, #212]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a34      	ldr	r2, [pc, #208]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d34:	f7fe fab4 	bl	80012a0 <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3c:	f7fe fab0 	bl	80012a0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	@ 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e38f      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5a:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d035      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d02e      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d78:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d82:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d9a:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002da0:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d114      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fa78 	bl	80012a0 <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fa74 	bl	80012a0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e351      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ee      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002de2:	d111      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002df2:	400b      	ands	r3, r1
 8002df4:	4901      	ldr	r1, [pc, #4]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000
 8002e04:	0ffffcff 	.word	0x0ffffcff
 8002e08:	4bac      	ldr	r3, [pc, #688]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4aab      	ldr	r2, [pc, #684]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e12:	6093      	str	r3, [r2, #8]
 8002e14:	4ba9      	ldr	r3, [pc, #676]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	49a6      	ldr	r1, [pc, #664]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e32:	4ba2      	ldr	r3, [pc, #648]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e38:	4aa0      	ldr	r2, [pc, #640]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e42:	4b9e      	ldr	r3, [pc, #632]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	499b      	ldr	r1, [pc, #620]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e60:	4b96      	ldr	r3, [pc, #600]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e6e:	4993      	ldr	r1, [pc, #588]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e82:	4b8e      	ldr	r3, [pc, #568]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e90:	498a      	ldr	r1, [pc, #552]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea4:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb2:	4982      	ldr	r1, [pc, #520]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ec6:	4b7d      	ldr	r3, [pc, #500]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	4979      	ldr	r1, [pc, #484]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee8:	4b74      	ldr	r3, [pc, #464]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	f023 0203 	bic.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	4971      	ldr	r1, [pc, #452]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f0a:	4b6c      	ldr	r3, [pc, #432]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	f023 020c 	bic.w	r2, r3, #12
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f18:	4968      	ldr	r1, [pc, #416]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f2c:	4b63      	ldr	r3, [pc, #396]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3a:	4960      	ldr	r1, [pc, #384]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5c:	4957      	ldr	r1, [pc, #348]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f70:	4b52      	ldr	r3, [pc, #328]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	494f      	ldr	r1, [pc, #316]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	4946      	ldr	r1, [pc, #280]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fb4:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	493e      	ldr	r1, [pc, #248]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fd6:	4b39      	ldr	r3, [pc, #228]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe4:	4935      	ldr	r1, [pc, #212]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ff8:	4b30      	ldr	r3, [pc, #192]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003006:	492d      	ldr	r1, [pc, #180]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d011      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800301a:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003020:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003028:	4924      	ldr	r1, [pc, #144]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003038:	d101      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800303a:	2301      	movs	r3, #1
 800303c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800304a:	2301      	movs	r3, #1
 800304c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003068:	4914      	ldr	r1, [pc, #80]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800307c:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003082:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800308c:	490b      	ldr	r1, [pc, #44]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00f      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b0:	4902      	ldr	r1, [pc, #8]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030b8:	e002      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030cc:	4b8a      	ldr	r3, [pc, #552]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	4986      	ldr	r1, [pc, #536]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030f0:	4b81      	ldr	r3, [pc, #516]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003100:	497d      	ldr	r1, [pc, #500]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d006      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80d6 	beq.w	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800311c:	4b76      	ldr	r3, [pc, #472]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a75      	ldr	r2, [pc, #468]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003128:	f7fe f8ba 	bl	80012a0 <HAL_GetTick>
 800312c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003130:	f7fe f8b6 	bl	80012a0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e195      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003142:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d021      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11d      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003162:	4b65      	ldr	r3, [pc, #404]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003170:	4b61      	ldr	r3, [pc, #388]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003176:	0e1b      	lsrs	r3, r3, #24
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	019a      	lsls	r2, r3, #6
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	4958      	ldr	r1, [pc, #352]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d02e      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c8:	d129      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031ca:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031d8:	4b47      	ldr	r3, [pc, #284]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031de:	0f1b      	lsrs	r3, r3, #28
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	019a      	lsls	r2, r3, #6
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	071b      	lsls	r3, r3, #28
 80031fe:	493e      	ldr	r1, [pc, #248]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003206:	4b3c      	ldr	r3, [pc, #240]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800320c:	f023 021f 	bic.w	r2, r3, #31
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	3b01      	subs	r3, #1
 8003216:	4938      	ldr	r1, [pc, #224]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01d      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800322a:	4b33      	ldr	r3, [pc, #204]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003238:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800323e:	0f1b      	lsrs	r3, r3, #28
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	019a      	lsls	r2, r3, #6
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	431a      	orrs	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	071b      	lsls	r3, r3, #28
 800325e:	4926      	ldr	r1, [pc, #152]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d011      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	019a      	lsls	r2, r3, #6
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	491a      	ldr	r1, [pc, #104]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003296:	4b18      	ldr	r3, [pc, #96]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a2:	f7fd fffd 	bl	80012a0 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032aa:	f7fd fff9 	bl	80012a0 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	@ 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0d8      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032bc:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	f040 80ce 	bne.w	800346c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a08      	ldr	r2, [pc, #32]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fd ffe0 	bl	80012a0 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032e2:	e00b      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032e4:	f7fd ffdc 	bl	80012a0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	@ 0x64
 80032f0:	d904      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0bb      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003308:	d0ec      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003326:	2b00      	cmp	r3, #0
 8003328:	d02e      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d12a      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003332:	4b51      	ldr	r3, [pc, #324]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003340:	4b4d      	ldr	r3, [pc, #308]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	0f1b      	lsrs	r3, r3, #28
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	071b      	lsls	r3, r3, #28
 8003366:	4944      	ldr	r1, [pc, #272]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800336e:	4b42      	ldr	r3, [pc, #264]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003374:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	493d      	ldr	r1, [pc, #244]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d022      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800339c:	d11d      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800339e:	4b36      	ldr	r3, [pc, #216]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	0e1b      	lsrs	r3, r3, #24
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	0f1b      	lsrs	r3, r3, #28
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	019a      	lsls	r2, r3, #6
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	431a      	orrs	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	061b      	lsls	r3, r3, #24
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	071b      	lsls	r3, r3, #28
 80033d2:	4929      	ldr	r1, [pc, #164]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d028      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033e6:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ec:	0e1b      	lsrs	r3, r3, #24
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033f4:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	019a      	lsls	r2, r3, #6
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	071b      	lsls	r3, r3, #28
 800341a:	4917      	ldr	r1, [pc, #92]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003422:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	4911      	ldr	r1, [pc, #68]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003438:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0e      	ldr	r2, [pc, #56]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fd ff2c 	bl	80012a0 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800344c:	f7fd ff28 	bl	80012a0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e007      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800346a:	d1ef      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800

0800347c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e049      	b.n	8003522 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f841 	bl	800352a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f000 f9e8 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e054      	b.n	8003602 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a26      	ldr	r2, [pc, #152]	@ (8003610 <HAL_TIM_Base_Start_IT+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003582:	d01d      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	@ (8003614 <HAL_TIM_Base_Start_IT+0xd4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	@ (8003618 <HAL_TIM_Base_Start_IT+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_TIM_Base_Start_IT+0xdc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_TIM_Base_Start_IT+0xe0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003624 <HAL_TIM_Base_Start_IT+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003628 <HAL_TIM_Base_Start_IT+0xe8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d115      	bne.n	80035ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b19      	ldr	r3, [pc, #100]	@ (800362c <HAL_TIM_Base_Start_IT+0xec>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d015      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d011      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e008      	b.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e000      	b.n	8003600 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40014000 	.word	0x40014000
 8003628:	40001800 	.word	0x40001800
 800362c:	00010007 	.word	0x00010007

08003630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0202 	mvn.w	r2, #2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8e9 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8db 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8ec 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0204 	mvn.w	r2, #4
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8c3 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8b5 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f8c6 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0208 	mvn.w	r2, #8
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2204      	movs	r2, #4
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f89d 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f88f 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8a0 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0210 	mvn.w	r2, #16
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2208      	movs	r2, #8
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f877 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f869 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f87a 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0201 	mvn.w	r2, #1
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fa7e 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80037c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f913 	bl	80039f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f90b 	bl	8003a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00c      	beq.n	8003812 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f834 	bl	800387a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f06f 0220 	mvn.w	r2, #32
 800382e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8d3 	bl	80039dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a43      	ldr	r2, [pc, #268]	@ (80039b0 <TIM_Base_SetConfig+0x120>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ae:	d00f      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a40      	ldr	r2, [pc, #256]	@ (80039b4 <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3f      	ldr	r2, [pc, #252]	@ (80039b8 <TIM_Base_SetConfig+0x128>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3e      	ldr	r2, [pc, #248]	@ (80039bc <TIM_Base_SetConfig+0x12c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3d      	ldr	r2, [pc, #244]	@ (80039c0 <TIM_Base_SetConfig+0x130>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a32      	ldr	r2, [pc, #200]	@ (80039b0 <TIM_Base_SetConfig+0x120>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f0:	d027      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <TIM_Base_SetConfig+0x124>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d023      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2e      	ldr	r2, [pc, #184]	@ (80039b8 <TIM_Base_SetConfig+0x128>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01f      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2d      	ldr	r2, [pc, #180]	@ (80039bc <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2c      	ldr	r2, [pc, #176]	@ (80039c0 <TIM_Base_SetConfig+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d017      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <TIM_Base_SetConfig+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2a      	ldr	r2, [pc, #168]	@ (80039c8 <TIM_Base_SetConfig+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00f      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a29      	ldr	r2, [pc, #164]	@ (80039cc <TIM_Base_SetConfig+0x13c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a28      	ldr	r2, [pc, #160]	@ (80039d0 <TIM_Base_SetConfig+0x140>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a27      	ldr	r2, [pc, #156]	@ (80039d4 <TIM_Base_SetConfig+0x144>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a26      	ldr	r2, [pc, #152]	@ (80039d8 <TIM_Base_SetConfig+0x148>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a0e      	ldr	r2, [pc, #56]	@ (80039b0 <TIM_Base_SetConfig+0x120>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0xf2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a10      	ldr	r2, [pc, #64]	@ (80039c0 <TIM_Base_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d103      	bne.n	800398a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800
 80039d0:	40001800 	.word	0x40001800
 80039d4:	40001c00 	.word	0x40001c00
 80039d8:	40002000 	.word	0x40002000

080039dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e040      	b.n	8003aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd fa24 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	@ 0x24
 8003a44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fb16 	bl	8004090 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8af 	bl	8003bc8 <UART_SetConfig>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e01b      	b.n	8003aac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fb95 	bl	80041d4 <UART_CheckIdleState>
 8003aaa:	4603      	mov	r3, r0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	@ 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d177      	bne.n	8003bbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_UART_Transmit+0x24>
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e070      	b.n	8003bbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	@ 0x21
 8003ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aea:	f7fd fbd9 	bl	80012a0 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b08:	d108      	bne.n	8003b1c <HAL_UART_Transmit+0x68>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d104      	bne.n	8003b1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e003      	b.n	8003b24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b24:	e02f      	b.n	8003b86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2180      	movs	r1, #128	@ 0x80
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fbf7 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e03b      	b.n	8003bbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	3302      	adds	r3, #2
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e007      	b.n	8003b74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1c9      	bne.n	8003b26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2140      	movs	r1, #64	@ 0x40
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fbc1 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d004      	beq.n	8003bb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e005      	b.n	8003bbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4ba6      	ldr	r3, [pc, #664]	@ (8003e8c <UART_SetConfig+0x2c4>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a94      	ldr	r2, [pc, #592]	@ (8003e90 <UART_SetConfig+0x2c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d120      	bne.n	8003c86 <UART_SetConfig+0xbe>
 8003c44:	4b93      	ldr	r3, [pc, #588]	@ (8003e94 <UART_SetConfig+0x2cc>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d816      	bhi.n	8003c80 <UART_SetConfig+0xb8>
 8003c52:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <UART_SetConfig+0x90>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003c6f 	.word	0x08003c6f
 8003c64:	08003c7b 	.word	0x08003c7b
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e150      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e14d      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c74:	2304      	movs	r3, #4
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e14a      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e147      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e144      	b.n	8003f10 <UART_SetConfig+0x348>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a83      	ldr	r2, [pc, #524]	@ (8003e98 <UART_SetConfig+0x2d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d132      	bne.n	8003cf6 <UART_SetConfig+0x12e>
 8003c90:	4b80      	ldr	r3, [pc, #512]	@ (8003e94 <UART_SetConfig+0x2cc>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d828      	bhi.n	8003cf0 <UART_SetConfig+0x128>
 8003c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca4 <UART_SetConfig+0xdc>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cd9 	.word	0x08003cd9
 8003ca8:	08003cf1 	.word	0x08003cf1
 8003cac:	08003cf1 	.word	0x08003cf1
 8003cb0:	08003cf1 	.word	0x08003cf1
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003cf1 	.word	0x08003cf1
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003cf1 	.word	0x08003cf1
 8003cc4:	08003cdf 	.word	0x08003cdf
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003cf1 	.word	0x08003cf1
 8003cd4:	08003ceb 	.word	0x08003ceb
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e118      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e115      	b.n	8003f10 <UART_SetConfig+0x348>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e112      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cea:	2308      	movs	r3, #8
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e10f      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e10c      	b.n	8003f10 <UART_SetConfig+0x348>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a68      	ldr	r2, [pc, #416]	@ (8003e9c <UART_SetConfig+0x2d4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d120      	bne.n	8003d42 <UART_SetConfig+0x17a>
 8003d00:	4b64      	ldr	r3, [pc, #400]	@ (8003e94 <UART_SetConfig+0x2cc>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d0a:	2b30      	cmp	r3, #48	@ 0x30
 8003d0c:	d013      	beq.n	8003d36 <UART_SetConfig+0x16e>
 8003d0e:	2b30      	cmp	r3, #48	@ 0x30
 8003d10:	d814      	bhi.n	8003d3c <UART_SetConfig+0x174>
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d009      	beq.n	8003d2a <UART_SetConfig+0x162>
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d810      	bhi.n	8003d3c <UART_SetConfig+0x174>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <UART_SetConfig+0x15c>
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x168>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x174>
 8003d24:	2300      	movs	r3, #0
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e0f2      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e0ef      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d30:	2304      	movs	r3, #4
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e0ec      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d36:	2308      	movs	r3, #8
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e0e9      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e0e6      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a56      	ldr	r2, [pc, #344]	@ (8003ea0 <UART_SetConfig+0x2d8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d120      	bne.n	8003d8e <UART_SetConfig+0x1c6>
 8003d4c:	4b51      	ldr	r3, [pc, #324]	@ (8003e94 <UART_SetConfig+0x2cc>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d58:	d013      	beq.n	8003d82 <UART_SetConfig+0x1ba>
 8003d5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d5c:	d814      	bhi.n	8003d88 <UART_SetConfig+0x1c0>
 8003d5e:	2b80      	cmp	r3, #128	@ 0x80
 8003d60:	d009      	beq.n	8003d76 <UART_SetConfig+0x1ae>
 8003d62:	2b80      	cmp	r3, #128	@ 0x80
 8003d64:	d810      	bhi.n	8003d88 <UART_SetConfig+0x1c0>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <UART_SetConfig+0x1a8>
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d006      	beq.n	8003d7c <UART_SetConfig+0x1b4>
 8003d6e:	e00b      	b.n	8003d88 <UART_SetConfig+0x1c0>
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e0cc      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e0c9      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e0c6      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d82:	2308      	movs	r3, #8
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e0c3      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e0c0      	b.n	8003f10 <UART_SetConfig+0x348>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a44      	ldr	r2, [pc, #272]	@ (8003ea4 <UART_SetConfig+0x2dc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d125      	bne.n	8003de4 <UART_SetConfig+0x21c>
 8003d98:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <UART_SetConfig+0x2cc>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da6:	d017      	beq.n	8003dd8 <UART_SetConfig+0x210>
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dac:	d817      	bhi.n	8003dde <UART_SetConfig+0x216>
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db2:	d00b      	beq.n	8003dcc <UART_SetConfig+0x204>
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db8:	d811      	bhi.n	8003dde <UART_SetConfig+0x216>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <UART_SetConfig+0x1fe>
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc2:	d006      	beq.n	8003dd2 <UART_SetConfig+0x20a>
 8003dc4:	e00b      	b.n	8003dde <UART_SetConfig+0x216>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e0a1      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e09e      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e09b      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dd8:	2308      	movs	r3, #8
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e098      	b.n	8003f10 <UART_SetConfig+0x348>
 8003dde:	2310      	movs	r3, #16
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e095      	b.n	8003f10 <UART_SetConfig+0x348>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea8 <UART_SetConfig+0x2e0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d125      	bne.n	8003e3a <UART_SetConfig+0x272>
 8003dee:	4b29      	ldr	r3, [pc, #164]	@ (8003e94 <UART_SetConfig+0x2cc>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dfc:	d017      	beq.n	8003e2e <UART_SetConfig+0x266>
 8003dfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e02:	d817      	bhi.n	8003e34 <UART_SetConfig+0x26c>
 8003e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e08:	d00b      	beq.n	8003e22 <UART_SetConfig+0x25a>
 8003e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e0e:	d811      	bhi.n	8003e34 <UART_SetConfig+0x26c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <UART_SetConfig+0x254>
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e18:	d006      	beq.n	8003e28 <UART_SetConfig+0x260>
 8003e1a:	e00b      	b.n	8003e34 <UART_SetConfig+0x26c>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e076      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e22:	2302      	movs	r3, #2
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e073      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e070      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e06d      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e34:	2310      	movs	r3, #16
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e06a      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003eac <UART_SetConfig+0x2e4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d138      	bne.n	8003eb6 <UART_SetConfig+0x2ee>
 8003e44:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <UART_SetConfig+0x2cc>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e52:	d017      	beq.n	8003e84 <UART_SetConfig+0x2bc>
 8003e54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e58:	d82a      	bhi.n	8003eb0 <UART_SetConfig+0x2e8>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e5e:	d00b      	beq.n	8003e78 <UART_SetConfig+0x2b0>
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e64:	d824      	bhi.n	8003eb0 <UART_SetConfig+0x2e8>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <UART_SetConfig+0x2aa>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6e:	d006      	beq.n	8003e7e <UART_SetConfig+0x2b6>
 8003e70:	e01e      	b.n	8003eb0 <UART_SetConfig+0x2e8>
 8003e72:	2300      	movs	r3, #0
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e04b      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e048      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e045      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e84:	2308      	movs	r3, #8
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e042      	b.n	8003f10 <UART_SetConfig+0x348>
 8003e8a:	bf00      	nop
 8003e8c:	efff69f3 	.word	0xefff69f3
 8003e90:	40011000 	.word	0x40011000
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40004400 	.word	0x40004400
 8003e9c:	40004800 	.word	0x40004800
 8003ea0:	40004c00 	.word	0x40004c00
 8003ea4:	40005000 	.word	0x40005000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	40007800 	.word	0x40007800
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e02c      	b.n	8003f10 <UART_SetConfig+0x348>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a72      	ldr	r2, [pc, #456]	@ (8004084 <UART_SetConfig+0x4bc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d125      	bne.n	8003f0c <UART_SetConfig+0x344>
 8003ec0:	4b71      	ldr	r3, [pc, #452]	@ (8004088 <UART_SetConfig+0x4c0>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003eca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ece:	d017      	beq.n	8003f00 <UART_SetConfig+0x338>
 8003ed0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ed4:	d817      	bhi.n	8003f06 <UART_SetConfig+0x33e>
 8003ed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eda:	d00b      	beq.n	8003ef4 <UART_SetConfig+0x32c>
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee0:	d811      	bhi.n	8003f06 <UART_SetConfig+0x33e>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <UART_SetConfig+0x326>
 8003ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eea:	d006      	beq.n	8003efa <UART_SetConfig+0x332>
 8003eec:	e00b      	b.n	8003f06 <UART_SetConfig+0x33e>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e00d      	b.n	8003f10 <UART_SetConfig+0x348>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e00a      	b.n	8003f10 <UART_SetConfig+0x348>
 8003efa:	2304      	movs	r3, #4
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e007      	b.n	8003f10 <UART_SetConfig+0x348>
 8003f00:	2308      	movs	r3, #8
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e004      	b.n	8003f10 <UART_SetConfig+0x348>
 8003f06:	2310      	movs	r3, #16
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e001      	b.n	8003f10 <UART_SetConfig+0x348>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f18:	d15b      	bne.n	8003fd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d828      	bhi.n	8003f72 <UART_SetConfig+0x3aa>
 8003f20:	a201      	add	r2, pc, #4	@ (adr r2, 8003f28 <UART_SetConfig+0x360>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	08003f73 	.word	0x08003f73
 8003f38:	08003f63 	.word	0x08003f63
 8003f3c:	08003f73 	.word	0x08003f73
 8003f40:	08003f73 	.word	0x08003f73
 8003f44:	08003f73 	.word	0x08003f73
 8003f48:	08003f6b 	.word	0x08003f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f7fe fe14 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003f50:	61b8      	str	r0, [r7, #24]
        break;
 8003f52:	e013      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7fe fe24 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8003f58:	61b8      	str	r0, [r7, #24]
        break;
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800408c <UART_SetConfig+0x4c4>)
 8003f5e:	61bb      	str	r3, [r7, #24]
        break;
 8003f60:	e00c      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7fe fcf7 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8003f66:	61b8      	str	r0, [r7, #24]
        break;
 8003f68:	e008      	b.n	8003f7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e004      	b.n	8003f7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	77bb      	strb	r3, [r7, #30]
        break;
 8003f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d074      	beq.n	800406c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	005a      	lsls	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b0f      	cmp	r3, #15
 8003f9c:	d916      	bls.n	8003fcc <UART_SetConfig+0x404>
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa4:	d212      	bcs.n	8003fcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f023 030f 	bic.w	r3, r3, #15
 8003fae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	89fa      	ldrh	r2, [r7, #14]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	e04f      	b.n	800406c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	77bb      	strb	r3, [r7, #30]
 8003fd0:	e04c      	b.n	800406c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd2:	7ffb      	ldrb	r3, [r7, #31]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d828      	bhi.n	800402a <UART_SetConfig+0x462>
 8003fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <UART_SetConfig+0x418>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe fdb8 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8004008:	61b8      	str	r0, [r7, #24]
        break;
 800400a:	e013      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fdc8 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004010:	61b8      	str	r0, [r7, #24]
        break;
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b1d      	ldr	r3, [pc, #116]	@ (800408c <UART_SetConfig+0x4c4>)
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e00c      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe fc9b 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800401e:	61b8      	str	r0, [r7, #24]
        break;
 8004020:	e008      	b.n	8004034 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004026:	61bb      	str	r3, [r7, #24]
        break;
 8004028:	e004      	b.n	8004034 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	77bb      	strb	r3, [r7, #30]
        break;
 8004032:	bf00      	nop
    }

    if (pclk != 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	085a      	lsrs	r2, r3, #1
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b0f      	cmp	r3, #15
 8004052:	d909      	bls.n	8004068 <UART_SetConfig+0x4a0>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405a:	d205      	bcs.n	8004068 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	e001      	b.n	800406c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004078:	7fbb      	ldrb	r3, [r7, #30]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40007c00 	.word	0x40007c00
 8004088:	40023800 	.word	0x40023800
 800408c:	00f42400 	.word	0x00f42400

08004090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800418e:	d10a      	bne.n	80041a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b098      	sub	sp, #96	@ 0x60
 80041d8:	af02      	add	r7, sp, #8
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e4:	f7fd f85c 	bl	80012a0 <HAL_GetTick>
 80041e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d12e      	bne.n	8004256 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f88c 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d021      	beq.n	8004256 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004226:	653b      	str	r3, [r7, #80]	@ 0x50
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004230:	647b      	str	r3, [r7, #68]	@ 0x44
 8004232:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800423e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e062      	b.n	800431c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b04      	cmp	r3, #4
 8004262:	d149      	bne.n	80042f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	2200      	movs	r2, #0
 800426e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f856 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d03c      	beq.n	80042f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	623b      	str	r3, [r7, #32]
   return(result);
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800429c:	633b      	str	r3, [r7, #48]	@ 0x30
 800429e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e6      	bne.n	800427e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d0:	61fa      	str	r2, [r7, #28]
 80042d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	69b9      	ldr	r1, [r7, #24]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	617b      	str	r3, [r7, #20]
   return(result);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e011      	b.n	800431c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3758      	adds	r7, #88	@ 0x58
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004334:	e04f      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d04b      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433e:	f7fc ffaf 	bl	80012a0 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	d302      	bcc.n	8004354 <UART_WaitOnFlagUntilTimeout+0x30>
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e04e      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d037      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b80      	cmp	r3, #128	@ 0x80
 800436a:	d034      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b40      	cmp	r3, #64	@ 0x40
 8004370:	d031      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d110      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2208      	movs	r2, #8
 8004386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f838 	bl	80043fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2208      	movs	r2, #8
 8004392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e029      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b0:	d111      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f81e 	bl	80043fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e00f      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d0a0      	beq.n	8004336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043fe:	b480      	push	{r7}
 8004400:	b095      	sub	sp, #84	@ 0x54
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800441a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004424:	643b      	str	r3, [r7, #64]	@ 0x40
 8004426:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800442a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	61fb      	str	r3, [r7, #28]
   return(result);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004458:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800445a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800445e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	2b01      	cmp	r3, #1
 8004472:	d118      	bne.n	80044a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	60bb      	str	r3, [r7, #8]
   return(result);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f023 0310 	bic.w	r3, r3, #16
 8004488:	647b      	str	r3, [r7, #68]	@ 0x44
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	613b      	str	r3, [r7, #16]
   return(result);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e6      	bne.n	8004474 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044ba:	bf00      	nop
 80044bc:	3754      	adds	r7, #84	@ 0x54
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044c8:	b084      	sub	sp, #16
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	f107 001c 	add.w	r0, r7, #28
 80044d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d121      	bne.n	8004526 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <USB_CoreInit+0xb0>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004506:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800450a:	2b01      	cmp	r3, #1
 800450c:	d105      	bne.n	800451a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa92 	bl	8004a44 <USB_CoreReset>
 8004520:	4603      	mov	r3, r0
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	e010      	b.n	8004548 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa86 	bl	8004a44 <USB_CoreReset>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004548:	7fbb      	ldrb	r3, [r7, #30]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10b      	bne.n	8004566 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f043 0206 	orr.w	r2, r3, #6
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004572:	b004      	add	sp, #16
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	ffbdffbf 	.word	0xffbdffbf

0800457c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 0201 	bic.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d115      	bne.n	80045ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045cc:	200a      	movs	r0, #10
 80045ce:	f7fc fe73 	bl	80012b8 <HAL_Delay>
      ms += 10U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	330a      	adds	r3, #10
 80045d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa25 	bl	8004a28 <USB_GetMode>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d01e      	beq.n	8004622 <USB_SetCurrentMode+0x84>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80045e8:	d9f0      	bls.n	80045cc <USB_SetCurrentMode+0x2e>
 80045ea:	e01a      	b.n	8004622 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045fe:	200a      	movs	r0, #10
 8004600:	f7fc fe5a 	bl	80012b8 <HAL_Delay>
      ms += 10U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	330a      	adds	r3, #10
 8004608:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa0c 	bl	8004a28 <USB_GetMode>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <USB_SetCurrentMode+0x84>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2bc7      	cmp	r3, #199	@ 0xc7
 800461a:	d9f0      	bls.n	80045fe <USB_SetCurrentMode+0x60>
 800461c:	e001      	b.n	8004622 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e005      	b.n	800462e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2bc8      	cmp	r3, #200	@ 0xc8
 8004626:	d101      	bne.n	800462c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004638:	b084      	sub	sp, #16
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e009      	b.n	800466c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3340      	adds	r3, #64	@ 0x40
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	2200      	movs	r2, #0
 8004664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3301      	adds	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b0e      	cmp	r3, #14
 8004670:	d9f2      	bls.n	8004658 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004672:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11c      	bne.n	80046b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004692:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e005      	b.n	80046c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046c6:	461a      	mov	r2, r3
 80046c8:	2300      	movs	r3, #0
 80046ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10d      	bne.n	80046f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d104      	bne.n	80046e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046dc:	2100      	movs	r1, #0
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f968 	bl	80049b4 <USB_SetDevSpeed>
 80046e4:	e008      	b.n	80046f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046e6:	2101      	movs	r1, #1
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f963 	bl	80049b4 <USB_SetDevSpeed>
 80046ee:	e003      	b.n	80046f8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046f0:	2103      	movs	r1, #3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f95e 	bl	80049b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046f8:	2110      	movs	r1, #16
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8fa 	bl	80048f4 <USB_FlushTxFifo>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f924 	bl	8004958 <USB_FlushRxFifo>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004738:	461a      	mov	r2, r3
 800473a:	2300      	movs	r3, #0
 800473c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e043      	b.n	80047cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800475a:	d118      	bne.n	800478e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476e:	461a      	mov	r2, r3
 8004770:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e013      	b.n	80047a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e008      	b.n	80047a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3301      	adds	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047d0:	461a      	mov	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d3b5      	bcc.n	8004744 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	e043      	b.n	8004866 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047f4:	d118      	bne.n	8004828 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e013      	b.n	800483a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e008      	b.n	800483a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004846:	461a      	mov	r2, r3
 8004848:	2300      	movs	r3, #0
 800484a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004858:	461a      	mov	r2, r3
 800485a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800485e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	3301      	adds	r3, #1
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800486a:	461a      	mov	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4293      	cmp	r3, r2
 8004870:	d3b5      	bcc.n	80047de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004884:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004892:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004894:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f043 0210 	orr.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <USB_DevInit+0x2b4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f043 0208 	orr.w	r2, r3, #8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <USB_DevInit+0x2b8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e8:	b004      	add	sp, #16
 80048ea:	4770      	bx	lr
 80048ec:	803c3800 	.word	0x803c3800
 80048f0:	40000004 	.word	0x40000004

080048f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800490e:	d901      	bls.n	8004914 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e01b      	b.n	800494c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	daf2      	bge.n	8004902 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	019b      	lsls	r3, r3, #6
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004938:	d901      	bls.n	800493e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e006      	b.n	800494c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	d0f0      	beq.n	800492c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004970:	d901      	bls.n	8004976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e018      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	daf2      	bge.n	8004964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2210      	movs	r2, #16
 8004986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e006      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d0f0      	beq.n	8004988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0301 	and.w	r3, r3, #1
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a5c:	d901      	bls.n	8004a62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e022      	b.n	8004aa8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	daf2      	bge.n	8004a50 <USB_CoreReset+0xc>

  count = 10U;
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004a6e:	e002      	b.n	8004a76 <USB_CoreReset+0x32>
  {
    count--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f9      	bne.n	8004a70 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f043 0201 	orr.w	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a94:	d901      	bls.n	8004a9a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e006      	b.n	8004aa8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d0f0      	beq.n	8004a88 <USB_CoreReset+0x44>

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aca:	f3ef 8305 	mrs	r3, IPSR
 8004ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ada:	607b      	str	r3, [r7, #4]
  return(result);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d105      	bne.n	8004aee <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <osKernelInitialize+0x3a>
 8004aee:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <osKernelInitialize+0x64>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d103      	bne.n	8004afe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004af6:	f06f 0305 	mvn.w	r3, #5
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e00c      	b.n	8004b18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <osKernelInitialize+0x64>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d105      	bne.n	8004b12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <osKernelInitialize+0x64>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e002      	b.n	8004b18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b18:	68fb      	ldr	r3, [r7, #12]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000878 	.word	0x20000878

08004b2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b32:	f3ef 8305 	mrs	r3, IPSR
 8004b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b42:	607b      	str	r3, [r7, #4]
  return(result);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d105      	bne.n	8004b56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <osKernelStart+0x3a>
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <osKernelStart+0x68>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d103      	bne.n	8004b66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b5e:	f06f 0305 	mvn.w	r3, #5
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e010      	b.n	8004b88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <osKernelStart+0x68>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d109      	bne.n	8004b82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b6e:	f7ff ffa1 	bl	8004ab4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b72:	4b08      	ldr	r3, [pc, #32]	@ (8004b94 <osKernelStart+0x68>)
 8004b74:	2202      	movs	r2, #2
 8004b76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b78:	f001 fe0a 	bl	8006790 <vTaskStartScheduler>
      stat = osOK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e002      	b.n	8004b88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b88:	68fb      	ldr	r3, [r7, #12]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000878 	.word	0x20000878

08004b98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b090      	sub	sp, #64	@ 0x40
 8004b9c:	af04      	add	r7, sp, #16
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba8:	f3ef 8305 	mrs	r3, IPSR
 8004bac:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 808f 	bne.w	8004cd4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bba:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004bc6:	617b      	str	r3, [r7, #20]
  return(result);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <osThreadNew+0x3e>
 8004bce:	4b44      	ldr	r3, [pc, #272]	@ (8004ce0 <osThreadNew+0x148>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d07e      	beq.n	8004cd4 <osThreadNew+0x13c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d07b      	beq.n	8004cd4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004bdc:	2380      	movs	r3, #128	@ 0x80
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004be0:	2318      	movs	r3, #24
 8004be2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d045      	beq.n	8004c80 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <osThreadNew+0x6a>
        name = attr->name;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <osThreadNew+0x90>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	2b38      	cmp	r3, #56	@ 0x38
 8004c1a:	d805      	bhi.n	8004c28 <osThreadNew+0x90>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <osThreadNew+0x94>
        return (NULL);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e054      	b.n	8004cd6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <osThreadNew+0xca>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2ba7      	cmp	r3, #167	@ 0xa7
 8004c4a:	d90a      	bls.n	8004c62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d006      	beq.n	8004c62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <osThreadNew+0xca>
        mem = 1;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	e010      	b.n	8004c84 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10c      	bne.n	8004c84 <osThreadNew+0xec>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <osThreadNew+0xec>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <osThreadNew+0xec>
          mem = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	e001      	b.n	8004c84 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d110      	bne.n	8004cac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c92:	9202      	str	r2, [sp, #8]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f001 fb77 	bl	8006394 <xTaskCreateStatic>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	e013      	b.n	8004cd4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d110      	bne.n	8004cd4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	f107 0310 	add.w	r3, r7, #16
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f001 fbcb 	bl	8006460 <xTaskCreate>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <osThreadNew+0x13c>
          hTask = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cd4:	693b      	ldr	r3, [r7, #16]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3730      	adds	r7, #48	@ 0x30
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000878 	.word	0x20000878

08004ce4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cec:	f3ef 8305 	mrs	r3, IPSR
 8004cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8004cf2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10f      	bne.n	8004d18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d04:	f3ef 8311 	mrs	r3, BASEPRI
 8004d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <osDelay+0x3c>
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <osDelay+0x58>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d103      	bne.n	8004d20 <osDelay+0x3c>
    stat = osErrorISR;
 8004d18:	f06f 0305 	mvn.w	r3, #5
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e007      	b.n	8004d30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 fcf8 	bl	8006720 <vTaskDelay>
    }
  }

  return (stat);
 8004d30:	697b      	ldr	r3, [r7, #20]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000878 	.word	0x20000878

08004d40 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	@ 0x30
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d50:	f3ef 8305 	mrs	r3, IPSR
 8004d54:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d56:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f040 8086 	bne.w	8004e6a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d62:	617b      	str	r3, [r7, #20]
  return(result);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6e:	613b      	str	r3, [r7, #16]
  return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <osSemaphoreNew+0x3e>
 8004d76:	4b3f      	ldr	r3, [pc, #252]	@ (8004e74 <osSemaphoreNew+0x134>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d075      	beq.n	8004e6a <osSemaphoreNew+0x12a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d072      	beq.n	8004e6a <osSemaphoreNew+0x12a>
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d86e      	bhi.n	8004e6a <osSemaphoreNew+0x12a>
    mem = -1;
 8004d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d015      	beq.n	8004dc4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <osSemaphoreNew+0x6e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b4f      	cmp	r3, #79	@ 0x4f
 8004da6:	d902      	bls.n	8004dae <osSemaphoreNew+0x6e>
        mem = 1;
 8004da8:	2301      	movs	r3, #1
 8004daa:	623b      	str	r3, [r7, #32]
 8004dac:	e00c      	b.n	8004dc8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d108      	bne.n	8004dc8 <osSemaphoreNew+0x88>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <osSemaphoreNew+0x88>
          mem = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	e001      	b.n	8004dc8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d04c      	beq.n	8004e6a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d128      	bne.n	8004e28 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10a      	bne.n	8004df2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2203      	movs	r2, #3
 8004de2:	9200      	str	r2, [sp, #0]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	2001      	movs	r0, #1
 8004dea:	f000 fa89 	bl	8005300 <xQueueGenericCreateStatic>
 8004dee:	6278      	str	r0, [r7, #36]	@ 0x24
 8004df0:	e005      	b.n	8004dfe <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004df2:	2203      	movs	r2, #3
 8004df4:	2100      	movs	r1, #0
 8004df6:	2001      	movs	r0, #1
 8004df8:	f000 fb09 	bl	800540e <xQueueGenericCreate>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d022      	beq.n	8004e4a <osSemaphoreNew+0x10a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01f      	beq.n	8004e4a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2100      	movs	r1, #0
 8004e10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e12:	f000 fbd9 	bl	80055c8 <xQueueGenericSend>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d016      	beq.n	8004e4a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004e1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e1e:	f001 f8e3 	bl	8005fe8 <vQueueDelete>
            hSemaphore = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e26:	e010      	b.n	8004e4a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d108      	bne.n	8004e40 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	461a      	mov	r2, r3
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fb4f 	bl	80054da <xQueueCreateCountingSemaphoreStatic>
 8004e3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e3e:	e004      	b.n	8004e4a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fb86 	bl	8005554 <xQueueCreateCountingSemaphore>
 8004e48:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <osSemaphoreNew+0x11e>
          name = attr->name;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e001      	b.n	8004e62 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004e62:	69f9      	ldr	r1, [r7, #28]
 8004e64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e66:	f001 fa0d 	bl	8006284 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3728      	adds	r7, #40	@ 0x28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000878 	.word	0x20000878

08004e78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004e90:	f06f 0303 	mvn.w	r3, #3
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e04b      	b.n	8004f30 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e98:	f3ef 8305 	mrs	r3, IPSR
 8004e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e9e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10f      	bne.n	8004ec4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d026      	beq.n	8004f0a <osSemaphoreAcquire+0x92>
 8004ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <osSemaphoreAcquire+0xc4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d122      	bne.n	8004f0a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004eca:	f06f 0303 	mvn.w	r3, #3
 8004ece:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004ed0:	e02d      	b.n	8004f2e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004ed6:	f107 0308 	add.w	r3, r7, #8
 8004eda:	461a      	mov	r2, r3
 8004edc:	2100      	movs	r1, #0
 8004ede:	69b8      	ldr	r0, [r7, #24]
 8004ee0:	f000 ffb8 	bl	8005e54 <xQueueReceiveFromISR>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d003      	beq.n	8004ef2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004eea:	f06f 0302 	mvn.w	r3, #2
 8004eee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004ef0:	e01d      	b.n	8004f2e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01a      	beq.n	8004f2e <osSemaphoreAcquire+0xb6>
 8004ef8:	4b11      	ldr	r3, [pc, #68]	@ (8004f40 <osSemaphoreAcquire+0xc8>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004f08:	e011      	b.n	8004f2e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	69b8      	ldr	r0, [r7, #24]
 8004f0e:	f000 fe89 	bl	8005c24 <xQueueSemaphoreTake>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d00b      	beq.n	8004f30 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004f1e:	f06f 0301 	mvn.w	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e004      	b.n	8004f30 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004f26:	f06f 0302 	mvn.w	r3, #2
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e000      	b.n	8004f30 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004f2e:	bf00      	nop
      }
    }
  }

  return (stat);
 8004f30:	69fb      	ldr	r3, [r7, #28]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000878 	.word	0x20000878
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004f5a:	f06f 0303 	mvn.w	r3, #3
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	e03e      	b.n	8004fe0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f62:	f3ef 8305 	mrs	r3, IPSR
 8004f66:	617b      	str	r3, [r7, #20]
  return(result);
 8004f68:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10f      	bne.n	8004f8e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f72:	613b      	str	r3, [r7, #16]
  return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d105      	bne.n	8004f86 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01e      	beq.n	8004fc4 <osSemaphoreRelease+0x80>
 8004f86:	4b19      	ldr	r3, [pc, #100]	@ (8004fec <osSemaphoreRelease+0xa8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d11a      	bne.n	8004fc4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	4619      	mov	r1, r3
 8004f98:	69b8      	ldr	r0, [r7, #24]
 8004f9a:	f000 fcc2 	bl	8005922 <xQueueGiveFromISR>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d003      	beq.n	8004fac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004fa4:	f06f 0302 	mvn.w	r3, #2
 8004fa8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004faa:	e018      	b.n	8004fde <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d015      	beq.n	8004fde <osSemaphoreRelease+0x9a>
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <osSemaphoreRelease+0xac>)
 8004fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004fc2:	e00c      	b.n	8004fde <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	69b8      	ldr	r0, [r7, #24]
 8004fcc:	f000 fafc 	bl	80055c8 <xQueueGenericSend>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d004      	beq.n	8004fe0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004fd6:	f06f 0302 	mvn.w	r3, #2
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e000      	b.n	8004fe0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004fde:	bf00      	nop
    }
  }

  return (stat);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000878 	.word	0x20000878
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <osSemaphoreGetCount+0x18>
    count = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e01e      	b.n	800504a <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800500c:	f3ef 8305 	mrs	r3, IPSR
 8005010:	617b      	str	r3, [r7, #20]
  return(result);
 8005012:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10f      	bne.n	8005038 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005018:	f3ef 8310 	mrs	r3, PRIMASK
 800501c:	613b      	str	r3, [r7, #16]
  return(result);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <osSemaphoreGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005024:	f3ef 8311 	mrs	r3, BASEPRI
 8005028:	60fb      	str	r3, [r7, #12]
  return(result);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <osSemaphoreGetCount+0x4e>
 8005030:	4b08      	ldr	r3, [pc, #32]	@ (8005054 <osSemaphoreGetCount+0x60>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d104      	bne.n	8005042 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8005038:	69b8      	ldr	r0, [r7, #24]
 800503a:	f000 ffb4 	bl	8005fa6 <uxQueueMessagesWaitingFromISR>
 800503e:	61f8      	str	r0, [r7, #28]
 8005040:	e003      	b.n	800504a <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8005042:	69b8      	ldr	r0, [r7, #24]
 8005044:	f000 ff8e 	bl	8005f64 <uxQueueMessagesWaiting>
 8005048:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000878 	.word	0x20000878

08005058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a07      	ldr	r2, [pc, #28]	@ (8005084 <vApplicationGetIdleTaskMemory+0x2c>)
 8005068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4a06      	ldr	r2, [pc, #24]	@ (8005088 <vApplicationGetIdleTaskMemory+0x30>)
 800506e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2280      	movs	r2, #128	@ 0x80
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000087c 	.word	0x2000087c
 8005088:	20000924 	.word	0x20000924

0800508c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a07      	ldr	r2, [pc, #28]	@ (80050b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800509c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4a06      	ldr	r2, [pc, #24]	@ (80050bc <vApplicationGetTimerTaskMemory+0x30>)
 80050a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050aa:	601a      	str	r2, [r3, #0]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	20000b24 	.word	0x20000b24
 80050bc:	20000bcc 	.word	0x20000bcc

080050c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f103 0208 	add.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f04f 32ff 	mov.w	r2, #4294967295
 80050d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f103 0208 	add.w	r2, r3, #8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f103 0208 	add.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d103      	bne.n	8005182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e00c      	b.n	800519c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3308      	adds	r3, #8
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e002      	b.n	8005190 <vListInsert+0x2e>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	429a      	cmp	r2, r3
 800519a:	d2f6      	bcs.n	800518a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6892      	ldr	r2, [r2, #8]
 80051ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6852      	ldr	r2, [r2, #4]
 80051f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d103      	bne.n	8005208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	1e5a      	subs	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10d      	bne.n	8005258 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	b672      	cpsid	i
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	b662      	cpsie	i
 8005250:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005258:	f002 fd78 	bl	8007d4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	441a      	add	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	3b01      	subs	r3, #1
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	441a      	add	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	22ff      	movs	r2, #255	@ 0xff
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	22ff      	movs	r2, #255	@ 0xff
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d114      	bne.n	80052d8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01a      	beq.n	80052ec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3310      	adds	r3, #16
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fd14 	bl	8006ce8 <xTaskRemoveFromEventList>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d012      	beq.n	80052ec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <xQueueGenericReset+0xd4>)
 80052c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	e009      	b.n	80052ec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3310      	adds	r3, #16
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff feef 	bl	80050c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3324      	adds	r3, #36	@ 0x24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff feea 	bl	80050c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052ec:	f002 fd64 	bl	8007db8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052f0:	2301      	movs	r3, #1
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08e      	sub	sp, #56	@ 0x38
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	b672      	cpsid	i
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	b662      	cpsie	i
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10d      	bne.n	8005352 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	b672      	cpsid	i
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	b662      	cpsie	i
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <xQueueGenericCreateStatic+0x5e>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <xQueueGenericCreateStatic+0x62>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <xQueueGenericCreateStatic+0x64>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536c:	b672      	cpsid	i
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	b662      	cpsie	i
 800537c:	623b      	str	r3, [r7, #32]
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <xQueueGenericCreateStatic+0x90>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <xQueueGenericCreateStatic+0x94>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <xQueueGenericCreateStatic+0x96>
 8005394:	2300      	movs	r3, #0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10d      	bne.n	80053b6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	b672      	cpsid	i
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	b662      	cpsie	i
 80053ae:	61fb      	str	r3, [r7, #28]
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	e7fd      	b.n	80053b2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053b6:	2350      	movs	r3, #80	@ 0x50
 80053b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b50      	cmp	r3, #80	@ 0x50
 80053be:	d00d      	beq.n	80053dc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	b672      	cpsid	i
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	b662      	cpsie	i
 80053d4:	61bb      	str	r3, [r7, #24]
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80053e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80053f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f848 	bl	8005494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005406:	4618      	mov	r0, r3
 8005408:	3730      	adds	r7, #48	@ 0x30
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800540e:	b580      	push	{r7, lr}
 8005410:	b08a      	sub	sp, #40	@ 0x28
 8005412:	af02      	add	r7, sp, #8
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10d      	bne.n	800543e <xQueueGenericCreate+0x30>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	b672      	cpsid	i
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	b662      	cpsie	i
 8005436:	613b      	str	r3, [r7, #16]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e004      	b.n	8005454 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3350      	adds	r3, #80	@ 0x50
 8005458:	4618      	mov	r0, r3
 800545a:	f002 fda5 	bl	8007fa8 <pvPortMalloc>
 800545e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d011      	beq.n	800548a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	3350      	adds	r3, #80	@ 0x50
 800546e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005478:	79fa      	ldrb	r2, [r7, #7]
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	4613      	mov	r3, r2
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f805 	bl	8005494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800548a:	69bb      	ldr	r3, [r7, #24]
	}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d103      	bne.n	80054b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e002      	b.n	80054b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054c2:	2101      	movs	r1, #1
 80054c4:	69b8      	ldr	r0, [r7, #24]
 80054c6:	f7ff feaf 	bl	8005228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08a      	sub	sp, #40	@ 0x28
 80054de:	af02      	add	r7, sp, #8
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10d      	bne.n	8005508 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	b672      	cpsid	i
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	b662      	cpsie	i
 8005500:	61bb      	str	r3, [r7, #24]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	429a      	cmp	r2, r3
 800550e:	d90d      	bls.n	800552c <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	b672      	cpsid	i
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	b662      	cpsie	i
 8005524:	617b      	str	r3, [r7, #20]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800552c:	2302      	movs	r3, #2
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	2100      	movs	r1, #0
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fee2 	bl	8005300 <xQueueGenericCreateStatic>
 800553c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800554a:	69fb      	ldr	r3, [r7, #28]
	}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	b672      	cpsid	i
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	b662      	cpsie	i
 8005578:	613b      	str	r3, [r7, #16]
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	e7fd      	b.n	800557c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d90d      	bls.n	80055a4 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	b672      	cpsid	i
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	b662      	cpsie	i
 800559c:	60fb      	str	r3, [r7, #12]
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055a4:	2202      	movs	r2, #2
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff30 	bl	800540e <xQueueGenericCreate>
 80055ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80055bc:	697b      	ldr	r3, [r7, #20]
	}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	@ 0x38
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055d6:	2300      	movs	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <xQueueGenericSend+0x38>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	b672      	cpsid	i
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	b662      	cpsie	i
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <xQueueGenericSend+0x46>
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <xQueueGenericSend+0x4a>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <xQueueGenericSend+0x4c>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10d      	bne.n	8005634 <xQueueGenericSend+0x6c>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	b672      	cpsid	i
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	b662      	cpsie	i
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d103      	bne.n	8005642 <xQueueGenericSend+0x7a>
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <xQueueGenericSend+0x7e>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <xQueueGenericSend+0x80>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10d      	bne.n	8005668 <xQueueGenericSend+0xa0>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	b672      	cpsid	i
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	b662      	cpsie	i
 8005660:	623b      	str	r3, [r7, #32]
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005668:	f001 fd0c 	bl	8007084 <xTaskGetSchedulerState>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <xQueueGenericSend+0xb0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <xQueueGenericSend+0xb4>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <xQueueGenericSend+0xb6>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10d      	bne.n	800569e <xQueueGenericSend+0xd6>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005686:	b672      	cpsid	i
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	b662      	cpsie	i
 8005696:	61fb      	str	r3, [r7, #28]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800569e:	f002 fb55 	bl	8007d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <xQueueGenericSend+0xec>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d129      	bne.n	8005708 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ba:	f000 fcd3 	bl	8006064 <prvCopyDataToQueue>
 80056be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	3324      	adds	r3, #36	@ 0x24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fb0b 	bl	8006ce8 <xTaskRemoveFromEventList>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056d8:	4b3f      	ldr	r3, [pc, #252]	@ (80057d8 <xQueueGenericSend+0x210>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	e00a      	b.n	8005700 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056f0:	4b39      	ldr	r3, [pc, #228]	@ (80057d8 <xQueueGenericSend+0x210>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005700:	f002 fb5a 	bl	8007db8 <vPortExitCritical>
				return pdPASS;
 8005704:	2301      	movs	r3, #1
 8005706:	e063      	b.n	80057d0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800570e:	f002 fb53 	bl	8007db8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005712:	2300      	movs	r3, #0
 8005714:	e05c      	b.n	80057d0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800571c:	f107 0314 	add.w	r3, r7, #20
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fb47 	bl	8006db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800572a:	f002 fb45 	bl	8007db8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800572e:	f001 f8a3 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005732:	f002 fb0b 	bl	8007d4c <vPortEnterCritical>
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800573c:	b25b      	sxtb	r3, r3
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d103      	bne.n	800574c <xQueueGenericSend+0x184>
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005752:	b25b      	sxtb	r3, r3
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d103      	bne.n	8005762 <xQueueGenericSend+0x19a>
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005762:	f002 fb29 	bl	8007db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005766:	1d3a      	adds	r2, r7, #4
 8005768:	f107 0314 	add.w	r3, r7, #20
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fb36 	bl	8006de0 <xTaskCheckForTimeOut>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d124      	bne.n	80057c4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800577a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800577c:	f000 fd6a 	bl	8006254 <prvIsQueueFull>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d018      	beq.n	80057b8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	3310      	adds	r3, #16
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4611      	mov	r1, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fa54 	bl	8006c3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005796:	f000 fcf5 	bl	8006184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800579a:	f001 f87b 	bl	8006894 <xTaskResumeAll>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f47f af7c 	bne.w	800569e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80057a6:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <xQueueGenericSend+0x210>)
 80057a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	e772      	b.n	800569e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057ba:	f000 fce3 	bl	8006184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057be:	f001 f869 	bl	8006894 <xTaskResumeAll>
 80057c2:	e76c      	b.n	800569e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057c6:	f000 fcdd 	bl	8006184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057ca:	f001 f863 	bl	8006894 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3738      	adds	r7, #56	@ 0x38
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08e      	sub	sp, #56	@ 0x38
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	b672      	cpsid	i
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	b662      	cpsie	i
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <xQueueGenericSendFromISR+0x42>
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <xQueueGenericSendFromISR+0x46>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <xQueueGenericSendFromISR+0x48>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	b672      	cpsid	i
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	b662      	cpsie	i
 800583c:	623b      	str	r3, [r7, #32]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d103      	bne.n	8005852 <xQueueGenericSendFromISR+0x76>
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <xQueueGenericSendFromISR+0x7a>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <xQueueGenericSendFromISR+0x7c>
 8005856:	2300      	movs	r3, #0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10d      	bne.n	8005878 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	b672      	cpsid	i
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	b662      	cpsie	i
 8005870:	61fb      	str	r3, [r7, #28]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005878:	f002 fb50 	bl	8007f1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800587c:	f3ef 8211 	mrs	r2, BASEPRI
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	b672      	cpsid	i
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	b662      	cpsie	i
 8005894:	61ba      	str	r2, [r7, #24]
 8005896:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005898:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <xQueueGenericSendFromISR+0xd2>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d12c      	bne.n	8005908 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058be:	f000 fbd1 	bl	8006064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d112      	bne.n	80058f2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d016      	beq.n	8005902 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	3324      	adds	r3, #36	@ 0x24
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 fa05 	bl	8006ce8 <xTaskRemoveFromEventList>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e007      	b.n	8005902 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058f6:	3301      	adds	r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	b25a      	sxtb	r2, r3
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005902:	2301      	movs	r3, #1
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005906:	e001      	b.n	800590c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005908:	2300      	movs	r3, #0
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
 800590c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005916:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800591a:	4618      	mov	r0, r3
 800591c:	3738      	adds	r7, #56	@ 0x38
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b08e      	sub	sp, #56	@ 0x38
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10d      	bne.n	8005952 <xQueueGiveFromISR+0x30>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	b672      	cpsid	i
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	b662      	cpsie	i
 800594a:	623b      	str	r3, [r7, #32]
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	e7fd      	b.n	800594e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <xQueueGiveFromISR+0x54>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	b672      	cpsid	i
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	b662      	cpsie	i
 800596e:	61fb      	str	r3, [r7, #28]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <xQueueGiveFromISR+0x64>
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <xQueueGiveFromISR+0x68>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueGiveFromISR+0x6a>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10d      	bne.n	80059ac <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	b672      	cpsid	i
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	b662      	cpsie	i
 80059a4:	61bb      	str	r3, [r7, #24]
}
 80059a6:	bf00      	nop
 80059a8:	bf00      	nop
 80059aa:	e7fd      	b.n	80059a8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ac:	f002 fab6 	bl	8007f1c <vPortValidateInterruptPriority>
	__asm volatile
 80059b0:	f3ef 8211 	mrs	r2, BASEPRI
 80059b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b8:	b672      	cpsid	i
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	b662      	cpsie	i
 80059c8:	617a      	str	r2, [r7, #20]
 80059ca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80059cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059dc:	429a      	cmp	r2, r3
 80059de:	d22b      	bcs.n	8005a38 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d112      	bne.n	8005a22 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d016      	beq.n	8005a32 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	3324      	adds	r3, #36	@ 0x24
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f96d 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e007      	b.n	8005a32 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a26:	3301      	adds	r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	b25a      	sxtb	r2, r3
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a32:	2301      	movs	r3, #1
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a36:	e001      	b.n	8005a3c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f383 8811 	msr	BASEPRI, r3
}
 8005a46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3738      	adds	r7, #56	@ 0x38
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08c      	sub	sp, #48	@ 0x30
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10d      	bne.n	8005a8a <xQueueReceive+0x36>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	b672      	cpsid	i
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	b662      	cpsie	i
 8005a82:	623b      	str	r3, [r7, #32]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <xQueueReceive+0x44>
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <xQueueReceive+0x48>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <xQueueReceive+0x4a>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <xQueueReceive+0x6a>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa6:	b672      	cpsid	i
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	b662      	cpsie	i
 8005ab6:	61fb      	str	r3, [r7, #28]
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e7fd      	b.n	8005aba <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005abe:	f001 fae1 	bl	8007084 <xTaskGetSchedulerState>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <xQueueReceive+0x7a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <xQueueReceive+0x7e>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <xQueueReceive+0x80>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10d      	bne.n	8005af4 <xQueueReceive+0xa0>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005adc:	b672      	cpsid	i
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	b662      	cpsie	i
 8005aec:	61bb      	str	r3, [r7, #24]
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	e7fd      	b.n	8005af0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005af4:	f002 f92a 	bl	8007d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01f      	beq.n	8005b44 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b08:	f000 fb16 	bl	8006138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00f      	beq.n	8005b3c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	3310      	adds	r3, #16
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 f8e1 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c20 <xQueueReceive+0x1cc>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b3c:	f002 f93c 	bl	8007db8 <vPortExitCritical>
				return pdPASS;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e069      	b.n	8005c18 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b4a:	f002 f935 	bl	8007db8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e062      	b.n	8005c18 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b58:	f107 0310 	add.w	r3, r7, #16
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 f929 	bl	8006db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b66:	f002 f927 	bl	8007db8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b6a:	f000 fe85 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b6e:	f002 f8ed 	bl	8007d4c <vPortEnterCritical>
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d103      	bne.n	8005b88 <xQueueReceive+0x134>
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d103      	bne.n	8005b9e <xQueueReceive+0x14a>
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b9e:	f002 f90b 	bl	8007db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba2:	1d3a      	adds	r2, r7, #4
 8005ba4:	f107 0310 	add.w	r3, r7, #16
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 f918 	bl	8006de0 <xTaskCheckForTimeOut>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d123      	bne.n	8005bfe <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bb8:	f000 fb36 	bl	8006228 <prvIsQueueEmpty>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d017      	beq.n	8005bf2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	3324      	adds	r3, #36	@ 0x24
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 f836 	bl	8006c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bd2:	f000 fad7 	bl	8006184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bd6:	f000 fe5d 	bl	8006894 <xTaskResumeAll>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d189      	bne.n	8005af4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005be0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c20 <xQueueReceive+0x1cc>)
 8005be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	e780      	b.n	8005af4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bf4:	f000 fac6 	bl	8006184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bf8:	f000 fe4c 	bl	8006894 <xTaskResumeAll>
 8005bfc:	e77a      	b.n	8005af4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c00:	f000 fac0 	bl	8006184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c04:	f000 fe46 	bl	8006894 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c0a:	f000 fb0d 	bl	8006228 <prvIsQueueEmpty>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f43f af6f 	beq.w	8005af4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3730      	adds	r7, #48	@ 0x30
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08e      	sub	sp, #56	@ 0x38
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10d      	bne.n	8005c5c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	b672      	cpsid	i
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	b662      	cpsie	i
 8005c54:	623b      	str	r3, [r7, #32]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00d      	beq.n	8005c80 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c68:	b672      	cpsid	i
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	b662      	cpsie	i
 8005c78:	61fb      	str	r3, [r7, #28]
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	e7fd      	b.n	8005c7c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c80:	f001 fa00 	bl	8007084 <xTaskGetSchedulerState>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <xQueueSemaphoreTake+0x6c>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <xQueueSemaphoreTake+0x70>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <xQueueSemaphoreTake+0x72>
 8005c94:	2300      	movs	r3, #0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9e:	b672      	cpsid	i
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	b662      	cpsie	i
 8005cae:	61bb      	str	r3, [r7, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	e7fd      	b.n	8005cb2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cb6:	f002 f849 	bl	8007d4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d024      	beq.n	8005d10 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005cd6:	f001 fb57 	bl	8007388 <pvTaskIncrementMutexHeldCount>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00f      	beq.n	8005d08 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	3310      	adds	r3, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fffb 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cf8:	4b55      	ldr	r3, [pc, #340]	@ (8005e50 <xQueueSemaphoreTake+0x22c>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d08:	f002 f856 	bl	8007db8 <vPortExitCritical>
				return pdPASS;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e09a      	b.n	8005e46 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d114      	bne.n	8005d40 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00d      	beq.n	8005d38 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d20:	b672      	cpsid	i
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	b662      	cpsie	i
 8005d30:	617b      	str	r3, [r7, #20]
}
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	e7fd      	b.n	8005d34 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d38:	f002 f83e 	bl	8007db8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e082      	b.n	8005e46 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d46:	f107 030c 	add.w	r3, r7, #12
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 f832 	bl	8006db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d50:	2301      	movs	r3, #1
 8005d52:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d54:	f002 f830 	bl	8007db8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d58:	f000 fd8e 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d5c:	f001 fff6 	bl	8007d4c <vPortEnterCritical>
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d103      	bne.n	8005d76 <xQueueSemaphoreTake+0x152>
 8005d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d7c:	b25b      	sxtb	r3, r3
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d103      	bne.n	8005d8c <xQueueSemaphoreTake+0x168>
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d8c:	f002 f814 	bl	8007db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d90:	463a      	mov	r2, r7
 8005d92:	f107 030c 	add.w	r3, r7, #12
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 f821 	bl	8006de0 <xTaskCheckForTimeOut>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d132      	bne.n	8005e0a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005da4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005da6:	f000 fa3f 	bl	8006228 <prvIsQueueEmpty>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d026      	beq.n	8005dfe <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005db8:	f001 ffc8 	bl	8007d4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 f97d 	bl	80070c0 <xTaskPriorityInherit>
 8005dc6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005dc8:	f001 fff6 	bl	8007db8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dce:	3324      	adds	r3, #36	@ 0x24
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 ff31 	bl	8006c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ddc:	f000 f9d2 	bl	8006184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005de0:	f000 fd58 	bl	8006894 <xTaskResumeAll>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f47f af65 	bne.w	8005cb6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005dec:	4b18      	ldr	r3, [pc, #96]	@ (8005e50 <xQueueSemaphoreTake+0x22c>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	e75b      	b.n	8005cb6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005dfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e00:	f000 f9c0 	bl	8006184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e04:	f000 fd46 	bl	8006894 <xTaskResumeAll>
 8005e08:	e755      	b.n	8005cb6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e0c:	f000 f9ba 	bl	8006184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e10:	f000 fd40 	bl	8006894 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e16:	f000 fa07 	bl	8006228 <prvIsQueueEmpty>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f43f af4a 	beq.w	8005cb6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005e28:	f001 ff90 	bl	8007d4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e2e:	f000 f901 	bl	8006034 <prvGetDisinheritPriorityAfterTimeout>
 8005e32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 fa1c 	bl	8007278 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e40:	f001 ffba 	bl	8007db8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3738      	adds	r7, #56	@ 0x38
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08e      	sub	sp, #56	@ 0x38
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	b672      	cpsid	i
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	b662      	cpsie	i
 8005e7e:	623b      	str	r3, [r7, #32]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <xQueueReceiveFromISR+0x40>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <xQueueReceiveFromISR+0x44>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <xQueueReceiveFromISR+0x46>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10d      	bne.n	8005eba <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	b672      	cpsid	i
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	b662      	cpsie	i
 8005eb2:	61fb      	str	r3, [r7, #28]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eba:	f002 f82f 	bl	8007f1c <vPortValidateInterruptPriority>
	__asm volatile
 8005ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	b672      	cpsid	i
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	b662      	cpsie	i
 8005ed6:	61ba      	str	r2, [r7, #24]
 8005ed8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005eda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02f      	beq.n	8005f4a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ef8:	f000 f91e 	bl	8006138 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	1e5a      	subs	r2, r3, #1
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d112      	bne.n	8005f34 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	3310      	adds	r3, #16
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fee4 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00b      	beq.n	8005f44 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	e007      	b.n	8005f44 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	b25a      	sxtb	r2, r3
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005f44:	2301      	movs	r3, #1
 8005f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f48:	e001      	b.n	8005f4e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f383 8811 	msr	BASEPRI, r3
}
 8005f58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3738      	adds	r7, #56	@ 0x38
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10d      	bne.n	8005f8e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	b672      	cpsid	i
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	b662      	cpsie	i
 8005f86:	60bb      	str	r3, [r7, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005f8e:	f001 fedd 	bl	8007d4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f96:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005f98:	f001 ff0e 	bl	8007db8 <vPortExitCritical>

	return uxReturn;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	b672      	cpsid	i
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	b662      	cpsie	i
 8005fcc:	60fb      	str	r3, [r7, #12]
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005fda:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fdc:	4618      	mov	r0, r3
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10d      	bne.n	8006016 <vQueueDelete+0x2e>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	b672      	cpsid	i
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	b662      	cpsie	i
 800600e:	60bb      	str	r3, [r7, #8]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f95e 	bl	80062d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f002 f88c 	bl	8008144 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e001      	b.n	8006056 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006056:	68fb      	ldr	r3, [r7, #12]
	}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d14d      	bne.n	8006126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f87e 	bl	8007190 <xTaskPriorityDisinherit>
 8006094:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	e043      	b.n	8006126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d119      	bne.n	80060d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6858      	ldr	r0, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	f002 fa22 	bl	80084f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d32b      	bcc.n	8006126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	e026      	b.n	8006126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68d8      	ldr	r0, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	461a      	mov	r2, r3
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	f002 fa08 	bl	80084f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f0:	425b      	negs	r3, r3
 80060f2:	441a      	add	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d207      	bcs.n	8006114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	425b      	negs	r3, r3
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d105      	bne.n	8006126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	3b01      	subs	r3, #1
 8006124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800612e:	697b      	ldr	r3, [r7, #20]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d018      	beq.n	800617c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006152:	441a      	add	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	429a      	cmp	r2, r3
 8006162:	d303      	bcc.n	800616c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68d9      	ldr	r1, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	461a      	mov	r2, r3
 8006176:	6838      	ldr	r0, [r7, #0]
 8006178:	f002 f9be 	bl	80084f8 <memcpy>
	}
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800618c:	f001 fdde 	bl	8007d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006198:	e011      	b.n	80061be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d012      	beq.n	80061c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3324      	adds	r3, #36	@ 0x24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fd9e 	bl	8006ce8 <xTaskRemoveFromEventList>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061b2:	f000 fe7d 	bl	8006eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	dce9      	bgt.n	800619a <prvUnlockQueue+0x16>
 80061c6:	e000      	b.n	80061ca <prvUnlockQueue+0x46>
					break;
 80061c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	22ff      	movs	r2, #255	@ 0xff
 80061ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80061d2:	f001 fdf1 	bl	8007db8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061d6:	f001 fdb9 	bl	8007d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e2:	e011      	b.n	8006208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d012      	beq.n	8006212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3310      	adds	r3, #16
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fd79 	bl	8006ce8 <xTaskRemoveFromEventList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061fc:	f000 fe58 	bl	8006eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	3b01      	subs	r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800620c:	2b00      	cmp	r3, #0
 800620e:	dce9      	bgt.n	80061e4 <prvUnlockQueue+0x60>
 8006210:	e000      	b.n	8006214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	22ff      	movs	r2, #255	@ 0xff
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800621c:	f001 fdcc 	bl	8007db8 <vPortExitCritical>
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006230:	f001 fd8c 	bl	8007d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e001      	b.n	8006246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006246:	f001 fdb7 	bl	8007db8 <vPortExitCritical>

	return xReturn;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800625c:	f001 fd76 	bl	8007d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006268:	429a      	cmp	r2, r3
 800626a:	d102      	bne.n	8006272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800626c:	2301      	movs	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e001      	b.n	8006276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006276:	f001 fd9f 	bl	8007db8 <vPortExitCritical>

	return xReturn;
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e014      	b.n	80062be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006294:	4a0f      	ldr	r2, [pc, #60]	@ (80062d4 <vQueueAddToRegistry+0x50>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062a0:	490c      	ldr	r1, [pc, #48]	@ (80062d4 <vQueueAddToRegistry+0x50>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062aa:	4a0a      	ldr	r2, [pc, #40]	@ (80062d4 <vQueueAddToRegistry+0x50>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062b6:	e006      	b.n	80062c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b07      	cmp	r3, #7
 80062c2:	d9e7      	bls.n	8006294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000fcc 	.word	0x20000fcc

080062d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e016      	b.n	8006314 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062e6:	4a10      	ldr	r2, [pc, #64]	@ (8006328 <vQueueUnregisterQueue+0x50>)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4413      	add	r3, r2
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d10b      	bne.n	800630e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006328 <vQueueUnregisterQueue+0x50>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2100      	movs	r1, #0
 80062fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006300:	4a09      	ldr	r2, [pc, #36]	@ (8006328 <vQueueUnregisterQueue+0x50>)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	2200      	movs	r2, #0
 800630a:	605a      	str	r2, [r3, #4]
				break;
 800630c:	e006      	b.n	800631c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b07      	cmp	r3, #7
 8006318:	d9e5      	bls.n	80062e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	20000fcc 	.word	0x20000fcc

0800632c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800633c:	f001 fd06 	bl	8007d4c <vPortEnterCritical>
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006346:	b25b      	sxtb	r3, r3
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d103      	bne.n	8006356 <vQueueWaitForMessageRestricted+0x2a>
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800635c:	b25b      	sxtb	r3, r3
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d103      	bne.n	800636c <vQueueWaitForMessageRestricted+0x40>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800636c:	f001 fd24 	bl	8007db8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	3324      	adds	r3, #36	@ 0x24
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fc83 	bl	8006c8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006386:	6978      	ldr	r0, [r7, #20]
 8006388:	f7ff fefc 	bl	8006184 <prvUnlockQueue>
	}
 800638c:	bf00      	nop
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08e      	sub	sp, #56	@ 0x38
 8006398:	af04      	add	r7, sp, #16
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10d      	bne.n	80063c4 <xTaskCreateStatic+0x30>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	b672      	cpsid	i
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	b662      	cpsie	i
 80063bc:	623b      	str	r3, [r7, #32]
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10d      	bne.n	80063e6 <xTaskCreateStatic+0x52>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ce:	b672      	cpsid	i
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	b662      	cpsie	i
 80063de:	61fb      	str	r3, [r7, #28]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063e6:	23a8      	movs	r3, #168	@ 0xa8
 80063e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2ba8      	cmp	r3, #168	@ 0xa8
 80063ee:	d00d      	beq.n	800640c <xTaskCreateStatic+0x78>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	b672      	cpsid	i
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	b662      	cpsie	i
 8006404:	61bb      	str	r3, [r7, #24]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800640c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01e      	beq.n	8006452 <xTaskCreateStatic+0xbe>
 8006414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01b      	beq.n	8006452 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006422:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	2202      	movs	r2, #2
 8006428:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800642c:	2300      	movs	r3, #0
 800642e:	9303      	str	r3, [sp, #12]
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f851 	bl	80064ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800644a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800644c:	f000 f8f8 	bl	8006640 <prvAddNewTaskToReadyList>
 8006450:	e001      	b.n	8006456 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006456:	697b      	ldr	r3, [r7, #20]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	3728      	adds	r7, #40	@ 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08c      	sub	sp, #48	@ 0x30
 8006464:	af04      	add	r7, sp, #16
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fd97 	bl	8007fa8 <pvPortMalloc>
 800647a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006482:	20a8      	movs	r0, #168	@ 0xa8
 8006484:	f001 fd90 	bl	8007fa8 <pvPortMalloc>
 8006488:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
 8006496:	e005      	b.n	80064a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006498:	6978      	ldr	r0, [r7, #20]
 800649a:	f001 fe53 	bl	8008144 <vPortFree>
 800649e:	e001      	b.n	80064a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d017      	beq.n	80064da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	9302      	str	r3, [sp, #8]
 80064bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f80f 	bl	80064ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ce:	69f8      	ldr	r0, [r7, #28]
 80064d0:	f000 f8b6 	bl	8006640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064d4:	2301      	movs	r3, #1
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	e002      	b.n	80064e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064da:	f04f 33ff 	mov.w	r3, #4294967295
 80064de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064e0:	69bb      	ldr	r3, [r7, #24]
	}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	461a      	mov	r2, r3
 8006504:	21a5      	movs	r1, #165	@ 0xa5
 8006506:	f001 ff6d 	bl	80083e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006514:	440b      	add	r3, r1
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f023 0307 	bic.w	r3, r3, #7
 8006522:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	b672      	cpsid	i
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	b662      	cpsie	i
 8006542:	617b      	str	r3, [r7, #20]
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	e7fd      	b.n	8006546 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01f      	beq.n	8006590 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e012      	b.n	800657c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	7819      	ldrb	r1, [r3, #0]
 800655e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	3334      	adds	r3, #52	@ 0x34
 8006566:	460a      	mov	r2, r1
 8006568:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3301      	adds	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b0f      	cmp	r3, #15
 8006580:	d9e9      	bls.n	8006556 <prvInitialiseNewTask+0x6a>
 8006582:	e000      	b.n	8006586 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006584:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800658e:	e003      	b.n	8006598 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	2b37      	cmp	r3, #55	@ 0x37
 800659c:	d901      	bls.n	80065a2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800659e:	2337      	movs	r3, #55	@ 0x37
 80065a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	2200      	movs	r2, #0
 80065b2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	3304      	adds	r3, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe fda1 	bl	8005100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	3318      	adds	r3, #24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fd9c 	bl	8005100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	3354      	adds	r3, #84	@ 0x54
 80065f2:	224c      	movs	r2, #76	@ 0x4c
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 fef4 	bl	80083e4 <memset>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006634 <prvInitialiseNewTask+0x148>)
 8006600:	659a      	str	r2, [r3, #88]	@ 0x58
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	4a0c      	ldr	r2, [pc, #48]	@ (8006638 <prvInitialiseNewTask+0x14c>)
 8006606:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	4a0c      	ldr	r2, [pc, #48]	@ (800663c <prvInitialiseNewTask+0x150>)
 800660c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	69b8      	ldr	r0, [r7, #24]
 8006614:	f001 fa88 	bl	8007b28 <pxPortInitialiseStack>
 8006618:	4602      	mov	r2, r0
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800662a:	bf00      	nop
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20005258 	.word	0x20005258
 8006638:	200052c0 	.word	0x200052c0
 800663c:	20005328 	.word	0x20005328

08006640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006648:	f001 fb80 	bl	8007d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800664c:	4b2d      	ldr	r3, [pc, #180]	@ (8006704 <prvAddNewTaskToReadyList+0xc4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	4a2c      	ldr	r2, [pc, #176]	@ (8006704 <prvAddNewTaskToReadyList+0xc4>)
 8006654:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006656:	4b2c      	ldr	r3, [pc, #176]	@ (8006708 <prvAddNewTaskToReadyList+0xc8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800665e:	4a2a      	ldr	r2, [pc, #168]	@ (8006708 <prvAddNewTaskToReadyList+0xc8>)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006664:	4b27      	ldr	r3, [pc, #156]	@ (8006704 <prvAddNewTaskToReadyList+0xc4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d110      	bne.n	800668e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800666c:	f000 fc44 	bl	8006ef8 <prvInitialiseTaskLists>
 8006670:	e00d      	b.n	800668e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006672:	4b26      	ldr	r3, [pc, #152]	@ (800670c <prvAddNewTaskToReadyList+0xcc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800667a:	4b23      	ldr	r3, [pc, #140]	@ (8006708 <prvAddNewTaskToReadyList+0xc8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	429a      	cmp	r2, r3
 8006686:	d802      	bhi.n	800668e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006688:	4a1f      	ldr	r2, [pc, #124]	@ (8006708 <prvAddNewTaskToReadyList+0xc8>)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800668e:	4b20      	ldr	r3, [pc, #128]	@ (8006710 <prvAddNewTaskToReadyList+0xd0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a1e      	ldr	r2, [pc, #120]	@ (8006710 <prvAddNewTaskToReadyList+0xd0>)
 8006696:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006698:	4b1d      	ldr	r3, [pc, #116]	@ (8006710 <prvAddNewTaskToReadyList+0xd0>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006714 <prvAddNewTaskToReadyList+0xd4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d903      	bls.n	80066b4 <prvAddNewTaskToReadyList+0x74>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	4a18      	ldr	r2, [pc, #96]	@ (8006714 <prvAddNewTaskToReadyList+0xd4>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4a15      	ldr	r2, [pc, #84]	@ (8006718 <prvAddNewTaskToReadyList+0xd8>)
 80066c2:	441a      	add	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fe fd25 	bl	800511a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066d0:	f001 fb72 	bl	8007db8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066d4:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <prvAddNewTaskToReadyList+0xcc>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00e      	beq.n	80066fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <prvAddNewTaskToReadyList+0xc8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d207      	bcs.n	80066fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066ea:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <prvAddNewTaskToReadyList+0xdc>)
 80066ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	200014e0 	.word	0x200014e0
 8006708:	2000100c 	.word	0x2000100c
 800670c:	200014ec 	.word	0x200014ec
 8006710:	200014fc 	.word	0x200014fc
 8006714:	200014e8 	.word	0x200014e8
 8006718:	20001010 	.word	0x20001010
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01a      	beq.n	8006768 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006732:	4b15      	ldr	r3, [pc, #84]	@ (8006788 <vTaskDelay+0x68>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <vTaskDelay+0x36>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	b672      	cpsid	i
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	b662      	cpsie	i
 800674e:	60bb      	str	r3, [r7, #8]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006756:	f000 f88f 	bl	8006878 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800675a:	2100      	movs	r1, #0
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fe27 	bl	80073b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006762:	f000 f897 	bl	8006894 <xTaskResumeAll>
 8006766:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800676e:	4b07      	ldr	r3, [pc, #28]	@ (800678c <vTaskDelay+0x6c>)
 8006770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20001508 	.word	0x20001508
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	@ 0x28
 8006794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800679e:	463a      	mov	r2, r7
 80067a0:	1d39      	adds	r1, r7, #4
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe fc56 	bl	8005058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	9202      	str	r2, [sp, #8]
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	2300      	movs	r3, #0
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	2300      	movs	r3, #0
 80067bc:	460a      	mov	r2, r1
 80067be:	4926      	ldr	r1, [pc, #152]	@ (8006858 <vTaskStartScheduler+0xc8>)
 80067c0:	4826      	ldr	r0, [pc, #152]	@ (800685c <vTaskStartScheduler+0xcc>)
 80067c2:	f7ff fde7 	bl	8006394 <xTaskCreateStatic>
 80067c6:	4603      	mov	r3, r0
 80067c8:	4a25      	ldr	r2, [pc, #148]	@ (8006860 <vTaskStartScheduler+0xd0>)
 80067ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067cc:	4b24      	ldr	r3, [pc, #144]	@ (8006860 <vTaskStartScheduler+0xd0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067d4:	2301      	movs	r3, #1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e001      	b.n	80067de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d102      	bne.n	80067ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067e4:	f000 fe38 	bl	8007458 <xTimerCreateTimerTask>
 80067e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d11d      	bne.n	800682c <vTaskStartScheduler+0x9c>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f4:	b672      	cpsid	i
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	b662      	cpsie	i
 8006804:	613b      	str	r3, [r7, #16]
}
 8006806:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006808:	4b16      	ldr	r3, [pc, #88]	@ (8006864 <vTaskStartScheduler+0xd4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3354      	adds	r3, #84	@ 0x54
 800680e:	4a16      	ldr	r2, [pc, #88]	@ (8006868 <vTaskStartScheduler+0xd8>)
 8006810:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006812:	4b16      	ldr	r3, [pc, #88]	@ (800686c <vTaskStartScheduler+0xdc>)
 8006814:	f04f 32ff 	mov.w	r2, #4294967295
 8006818:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800681a:	4b15      	ldr	r3, [pc, #84]	@ (8006870 <vTaskStartScheduler+0xe0>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006820:	4b14      	ldr	r3, [pc, #80]	@ (8006874 <vTaskStartScheduler+0xe4>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006826:	f001 fa13 	bl	8007c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800682a:	e011      	b.n	8006850 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d10d      	bne.n	8006850 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006838:	b672      	cpsid	i
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	b662      	cpsie	i
 8006848:	60fb      	str	r3, [r7, #12]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <vTaskStartScheduler+0xbc>
}
 8006850:	bf00      	nop
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08008ecc 	.word	0x08008ecc
 800685c:	08006ec9 	.word	0x08006ec9
 8006860:	20001504 	.word	0x20001504
 8006864:	2000100c 	.word	0x2000100c
 8006868:	20000010 	.word	0x20000010
 800686c:	20001500 	.word	0x20001500
 8006870:	200014ec 	.word	0x200014ec
 8006874:	200014e4 	.word	0x200014e4

08006878 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800687c:	4b04      	ldr	r3, [pc, #16]	@ (8006890 <vTaskSuspendAll+0x18>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	4a03      	ldr	r2, [pc, #12]	@ (8006890 <vTaskSuspendAll+0x18>)
 8006884:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006886:	bf00      	nop
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20001508 	.word	0x20001508

08006894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068a2:	4b43      	ldr	r3, [pc, #268]	@ (80069b0 <xTaskResumeAll+0x11c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <xTaskResumeAll+0x32>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	b672      	cpsid	i
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	b662      	cpsie	i
 80068be:	603b      	str	r3, [r7, #0]
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	e7fd      	b.n	80068c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068c6:	f001 fa41 	bl	8007d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068ca:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <xTaskResumeAll+0x11c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4a37      	ldr	r2, [pc, #220]	@ (80069b0 <xTaskResumeAll+0x11c>)
 80068d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d4:	4b36      	ldr	r3, [pc, #216]	@ (80069b0 <xTaskResumeAll+0x11c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d162      	bne.n	80069a2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068dc:	4b35      	ldr	r3, [pc, #212]	@ (80069b4 <xTaskResumeAll+0x120>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05e      	beq.n	80069a2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068e4:	e02f      	b.n	8006946 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e6:	4b34      	ldr	r3, [pc, #208]	@ (80069b8 <xTaskResumeAll+0x124>)
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3318      	adds	r3, #24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fc6e 	bl	80051d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fc69 	bl	80051d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006906:	4b2d      	ldr	r3, [pc, #180]	@ (80069bc <xTaskResumeAll+0x128>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d903      	bls.n	8006916 <xTaskResumeAll+0x82>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	4a2a      	ldr	r2, [pc, #168]	@ (80069bc <xTaskResumeAll+0x128>)
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4a27      	ldr	r2, [pc, #156]	@ (80069c0 <xTaskResumeAll+0x12c>)
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3304      	adds	r3, #4
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7fe fbf4 	bl	800511a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006936:	4b23      	ldr	r3, [pc, #140]	@ (80069c4 <xTaskResumeAll+0x130>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006940:	4b21      	ldr	r3, [pc, #132]	@ (80069c8 <xTaskResumeAll+0x134>)
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006946:	4b1c      	ldr	r3, [pc, #112]	@ (80069b8 <xTaskResumeAll+0x124>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1cb      	bne.n	80068e6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006954:	f000 fb76 	bl	8007044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006958:	4b1c      	ldr	r3, [pc, #112]	@ (80069cc <xTaskResumeAll+0x138>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006964:	f000 f846 	bl	80069f4 <xTaskIncrementTick>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800696e:	4b16      	ldr	r3, [pc, #88]	@ (80069c8 <xTaskResumeAll+0x134>)
 8006970:	2201      	movs	r2, #1
 8006972:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3b01      	subs	r3, #1
 8006978:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f1      	bne.n	8006964 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006980:	4b12      	ldr	r3, [pc, #72]	@ (80069cc <xTaskResumeAll+0x138>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006986:	4b10      	ldr	r3, [pc, #64]	@ (80069c8 <xTaskResumeAll+0x134>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800698e:	2301      	movs	r3, #1
 8006990:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006992:	4b0f      	ldr	r3, [pc, #60]	@ (80069d0 <xTaskResumeAll+0x13c>)
 8006994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069a2:	f001 fa09 	bl	8007db8 <vPortExitCritical>

	return xAlreadyYielded;
 80069a6:	68bb      	ldr	r3, [r7, #8]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20001508 	.word	0x20001508
 80069b4:	200014e0 	.word	0x200014e0
 80069b8:	200014a0 	.word	0x200014a0
 80069bc:	200014e8 	.word	0x200014e8
 80069c0:	20001010 	.word	0x20001010
 80069c4:	2000100c 	.word	0x2000100c
 80069c8:	200014f4 	.word	0x200014f4
 80069cc:	200014f0 	.word	0x200014f0
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <xTaskGetTickCount+0x1c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069e0:	687b      	ldr	r3, [r7, #4]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200014e4 	.word	0x200014e4

080069f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069fe:	4b50      	ldr	r3, [pc, #320]	@ (8006b40 <xTaskIncrementTick+0x14c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f040 808c 	bne.w	8006b20 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a08:	4b4e      	ldr	r3, [pc, #312]	@ (8006b44 <xTaskIncrementTick+0x150>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a10:	4a4c      	ldr	r2, [pc, #304]	@ (8006b44 <xTaskIncrementTick+0x150>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d123      	bne.n	8006a64 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8006b48 <xTaskIncrementTick+0x154>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	b672      	cpsid	i
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	b662      	cpsie	i
 8006a3a:	603b      	str	r3, [r7, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	e7fd      	b.n	8006a3e <xTaskIncrementTick+0x4a>
 8006a42:	4b41      	ldr	r3, [pc, #260]	@ (8006b48 <xTaskIncrementTick+0x154>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	4b40      	ldr	r3, [pc, #256]	@ (8006b4c <xTaskIncrementTick+0x158>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006b48 <xTaskIncrementTick+0x154>)
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	4a3e      	ldr	r2, [pc, #248]	@ (8006b4c <xTaskIncrementTick+0x158>)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4b3e      	ldr	r3, [pc, #248]	@ (8006b50 <xTaskIncrementTick+0x15c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b50 <xTaskIncrementTick+0x15c>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	f000 faf0 	bl	8007044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a64:	4b3b      	ldr	r3, [pc, #236]	@ (8006b54 <xTaskIncrementTick+0x160>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d349      	bcc.n	8006b02 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a6e:	4b36      	ldr	r3, [pc, #216]	@ (8006b48 <xTaskIncrementTick+0x154>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a78:	4b36      	ldr	r3, [pc, #216]	@ (8006b54 <xTaskIncrementTick+0x160>)
 8006a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7e:	601a      	str	r2, [r3, #0]
					break;
 8006a80:	e03f      	b.n	8006b02 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a82:	4b31      	ldr	r3, [pc, #196]	@ (8006b48 <xTaskIncrementTick+0x154>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d203      	bcs.n	8006aa2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a9a:	4a2e      	ldr	r2, [pc, #184]	@ (8006b54 <xTaskIncrementTick+0x160>)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006aa0:	e02f      	b.n	8006b02 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fb94 	bl	80051d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	3318      	adds	r3, #24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe fb8b 	bl	80051d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac2:	4b25      	ldr	r3, [pc, #148]	@ (8006b58 <xTaskIncrementTick+0x164>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d903      	bls.n	8006ad2 <xTaskIncrementTick+0xde>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	4a22      	ldr	r2, [pc, #136]	@ (8006b58 <xTaskIncrementTick+0x164>)
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4a1f      	ldr	r2, [pc, #124]	@ (8006b5c <xTaskIncrementTick+0x168>)
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe fb16 	bl	800511a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b60 <xTaskIncrementTick+0x16c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d3b8      	bcc.n	8006a6e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b00:	e7b5      	b.n	8006a6e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b02:	4b17      	ldr	r3, [pc, #92]	@ (8006b60 <xTaskIncrementTick+0x16c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b08:	4914      	ldr	r1, [pc, #80]	@ (8006b5c <xTaskIncrementTick+0x168>)
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d907      	bls.n	8006b2a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	e004      	b.n	8006b2a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b20:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <xTaskIncrementTick+0x170>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	4a0f      	ldr	r2, [pc, #60]	@ (8006b64 <xTaskIncrementTick+0x170>)
 8006b28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b68 <xTaskIncrementTick+0x174>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006b32:	2301      	movs	r3, #1
 8006b34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b36:	697b      	ldr	r3, [r7, #20]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20001508 	.word	0x20001508
 8006b44:	200014e4 	.word	0x200014e4
 8006b48:	20001498 	.word	0x20001498
 8006b4c:	2000149c 	.word	0x2000149c
 8006b50:	200014f8 	.word	0x200014f8
 8006b54:	20001500 	.word	0x20001500
 8006b58:	200014e8 	.word	0x200014e8
 8006b5c:	20001010 	.word	0x20001010
 8006b60:	2000100c 	.word	0x2000100c
 8006b64:	200014f0 	.word	0x200014f0
 8006b68:	200014f4 	.word	0x200014f4

08006b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b72:	4b2c      	ldr	r3, [pc, #176]	@ (8006c24 <vTaskSwitchContext+0xb8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c28 <vTaskSwitchContext+0xbc>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b80:	e049      	b.n	8006c16 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006b82:	4b29      	ldr	r3, [pc, #164]	@ (8006c28 <vTaskSwitchContext+0xbc>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b88:	4b28      	ldr	r3, [pc, #160]	@ (8006c2c <vTaskSwitchContext+0xc0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	e013      	b.n	8006bb8 <vTaskSwitchContext+0x4c>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10d      	bne.n	8006bb2 <vTaskSwitchContext+0x46>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	b672      	cpsid	i
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	b662      	cpsie	i
 8006baa:	607b      	str	r3, [r7, #4]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <vTaskSwitchContext+0x42>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	491d      	ldr	r1, [pc, #116]	@ (8006c30 <vTaskSwitchContext+0xc4>)
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0e1      	beq.n	8006b90 <vTaskSwitchContext+0x24>
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4a16      	ldr	r2, [pc, #88]	@ (8006c30 <vTaskSwitchContext+0xc4>)
 8006bd8:	4413      	add	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	605a      	str	r2, [r3, #4]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	3308      	adds	r3, #8
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d104      	bne.n	8006bfc <vTaskSwitchContext+0x90>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	605a      	str	r2, [r3, #4]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4a0c      	ldr	r2, [pc, #48]	@ (8006c34 <vTaskSwitchContext+0xc8>)
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4a09      	ldr	r2, [pc, #36]	@ (8006c2c <vTaskSwitchContext+0xc0>)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c0c:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <vTaskSwitchContext+0xc8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3354      	adds	r3, #84	@ 0x54
 8006c12:	4a09      	ldr	r2, [pc, #36]	@ (8006c38 <vTaskSwitchContext+0xcc>)
 8006c14:	6013      	str	r3, [r2, #0]
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	20001508 	.word	0x20001508
 8006c28:	200014f4 	.word	0x200014f4
 8006c2c:	200014e8 	.word	0x200014e8
 8006c30:	20001010 	.word	0x20001010
 8006c34:	2000100c 	.word	0x2000100c
 8006c38:	20000010 	.word	0x20000010

08006c3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10d      	bne.n	8006c68 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c50:	b672      	cpsid	i
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	b662      	cpsie	i
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c68:	4b07      	ldr	r3, [pc, #28]	@ (8006c88 <vTaskPlaceOnEventList+0x4c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3318      	adds	r3, #24
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fe fa76 	bl	8005162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c76:	2101      	movs	r1, #1
 8006c78:	6838      	ldr	r0, [r7, #0]
 8006c7a:	f000 fb99 	bl	80073b0 <prvAddCurrentTaskToDelayedList>
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	2000100c 	.word	0x2000100c

08006c8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	b672      	cpsid	i
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	b662      	cpsie	i
 8006cb2:	617b      	str	r3, [r7, #20]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <vTaskPlaceOnEventListRestricted+0x58>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3318      	adds	r3, #24
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7fe fa29 	bl	800511a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006cce:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	68b8      	ldr	r0, [r7, #8]
 8006cd8:	f000 fb6a 	bl	80073b0 <prvAddCurrentTaskToDelayedList>
	}
 8006cdc:	bf00      	nop
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	2000100c 	.word	0x2000100c

08006ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	b672      	cpsid	i
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	b662      	cpsie	i
 8006d12:	60fb      	str	r3, [r7, #12]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fa58 	bl	80051d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d24:	4b1d      	ldr	r3, [pc, #116]	@ (8006d9c <xTaskRemoveFromEventList+0xb4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11d      	bne.n	8006d68 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fa4f 	bl	80051d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3a:	4b19      	ldr	r3, [pc, #100]	@ (8006da0 <xTaskRemoveFromEventList+0xb8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d903      	bls.n	8006d4a <xTaskRemoveFromEventList+0x62>
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d46:	4a16      	ldr	r2, [pc, #88]	@ (8006da0 <xTaskRemoveFromEventList+0xb8>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a13      	ldr	r2, [pc, #76]	@ (8006da4 <xTaskRemoveFromEventList+0xbc>)
 8006d58:	441a      	add	r2, r3
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fe f9da 	bl	800511a <vListInsertEnd>
 8006d66:	e005      	b.n	8006d74 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3318      	adds	r3, #24
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	480e      	ldr	r0, [pc, #56]	@ (8006da8 <xTaskRemoveFromEventList+0xc0>)
 8006d70:	f7fe f9d3 	bl	800511a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d78:	4b0c      	ldr	r3, [pc, #48]	@ (8006dac <xTaskRemoveFromEventList+0xc4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d905      	bls.n	8006d8e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d86:	4b0a      	ldr	r3, [pc, #40]	@ (8006db0 <xTaskRemoveFromEventList+0xc8>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e001      	b.n	8006d92 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d92:	697b      	ldr	r3, [r7, #20]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20001508 	.word	0x20001508
 8006da0:	200014e8 	.word	0x200014e8
 8006da4:	20001010 	.word	0x20001010
 8006da8:	200014a0 	.word	0x200014a0
 8006dac:	2000100c 	.word	0x2000100c
 8006db0:	200014f4 	.word	0x200014f4

08006db4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <vTaskInternalSetTimeOutState+0x24>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dc4:	4b05      	ldr	r3, [pc, #20]	@ (8006ddc <vTaskInternalSetTimeOutState+0x28>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	605a      	str	r2, [r3, #4]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	200014f8 	.word	0x200014f8
 8006ddc:	200014e4 	.word	0x200014e4

08006de0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10d      	bne.n	8006e0c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	b672      	cpsid	i
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	b662      	cpsie	i
 8006e04:	613b      	str	r3, [r7, #16]
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	b672      	cpsid	i
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	b662      	cpsie	i
 8006e26:	60fb      	str	r3, [r7, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	e7fd      	b.n	8006e2a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006e2e:	f000 ff8d 	bl	8007d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e32:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea8 <xTaskCheckForTimeOut+0xc8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d102      	bne.n	8006e52 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	e023      	b.n	8006e9a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b15      	ldr	r3, [pc, #84]	@ (8006eac <xTaskCheckForTimeOut+0xcc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d007      	beq.n	8006e6e <xTaskCheckForTimeOut+0x8e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	e015      	b.n	8006e9a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d20b      	bcs.n	8006e90 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff ff95 	bl	8006db4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e004      	b.n	8006e9a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e9a:	f000 ff8d 	bl	8007db8 <vPortExitCritical>

	return xReturn;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	200014e4 	.word	0x200014e4
 8006eac:	200014f8 	.word	0x200014f8

08006eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	@ (8006ec4 <vTaskMissedYield+0x14>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
}
 8006eba:	bf00      	nop
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	200014f4 	.word	0x200014f4

08006ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ed0:	f000 f852 	bl	8006f78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ed4:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <prvIdleTask+0x28>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d9f9      	bls.n	8006ed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006edc:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <prvIdleTask+0x2c>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006eec:	e7f0      	b.n	8006ed0 <prvIdleTask+0x8>
 8006eee:	bf00      	nop
 8006ef0:	20001010 	.word	0x20001010
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006efe:	2300      	movs	r3, #0
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	e00c      	b.n	8006f1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4a12      	ldr	r2, [pc, #72]	@ (8006f58 <prvInitialiseTaskLists+0x60>)
 8006f10:	4413      	add	r3, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe f8d4 	bl	80050c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b37      	cmp	r3, #55	@ 0x37
 8006f22:	d9ef      	bls.n	8006f04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f24:	480d      	ldr	r0, [pc, #52]	@ (8006f5c <prvInitialiseTaskLists+0x64>)
 8006f26:	f7fe f8cb 	bl	80050c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f2a:	480d      	ldr	r0, [pc, #52]	@ (8006f60 <prvInitialiseTaskLists+0x68>)
 8006f2c:	f7fe f8c8 	bl	80050c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f30:	480c      	ldr	r0, [pc, #48]	@ (8006f64 <prvInitialiseTaskLists+0x6c>)
 8006f32:	f7fe f8c5 	bl	80050c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f36:	480c      	ldr	r0, [pc, #48]	@ (8006f68 <prvInitialiseTaskLists+0x70>)
 8006f38:	f7fe f8c2 	bl	80050c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f3c:	480b      	ldr	r0, [pc, #44]	@ (8006f6c <prvInitialiseTaskLists+0x74>)
 8006f3e:	f7fe f8bf 	bl	80050c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f42:	4b0b      	ldr	r3, [pc, #44]	@ (8006f70 <prvInitialiseTaskLists+0x78>)
 8006f44:	4a05      	ldr	r2, [pc, #20]	@ (8006f5c <prvInitialiseTaskLists+0x64>)
 8006f46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f48:	4b0a      	ldr	r3, [pc, #40]	@ (8006f74 <prvInitialiseTaskLists+0x7c>)
 8006f4a:	4a05      	ldr	r2, [pc, #20]	@ (8006f60 <prvInitialiseTaskLists+0x68>)
 8006f4c:	601a      	str	r2, [r3, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20001010 	.word	0x20001010
 8006f5c:	20001470 	.word	0x20001470
 8006f60:	20001484 	.word	0x20001484
 8006f64:	200014a0 	.word	0x200014a0
 8006f68:	200014b4 	.word	0x200014b4
 8006f6c:	200014cc 	.word	0x200014cc
 8006f70:	20001498 	.word	0x20001498
 8006f74:	2000149c 	.word	0x2000149c

08006f78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f7e:	e019      	b.n	8006fb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f80:	f000 fee4 	bl	8007d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f84:	4b10      	ldr	r3, [pc, #64]	@ (8006fc8 <prvCheckTasksWaitingTermination+0x50>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe f91f 	bl	80051d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f96:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <prvCheckTasksWaitingTermination+0x54>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006fcc <prvCheckTasksWaitingTermination+0x54>)
 8006f9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd0 <prvCheckTasksWaitingTermination+0x58>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd0 <prvCheckTasksWaitingTermination+0x58>)
 8006fa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006faa:	f000 ff05 	bl	8007db8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f810 	bl	8006fd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb4:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <prvCheckTasksWaitingTermination+0x58>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e1      	bne.n	8006f80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200014b4 	.word	0x200014b4
 8006fcc:	200014e0 	.word	0x200014e0
 8006fd0:	200014c8 	.word	0x200014c8

08006fd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3354      	adds	r3, #84	@ 0x54
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 fa07 	bl	80083f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d108      	bne.n	8007002 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f8a5 	bl	8008144 <vPortFree>
				vPortFree( pxTCB );
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f8a2 	bl	8008144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007000:	e01b      	b.n	800703a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007008:	2b01      	cmp	r3, #1
 800700a:	d103      	bne.n	8007014 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 f899 	bl	8008144 <vPortFree>
	}
 8007012:	e012      	b.n	800703a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800701a:	2b02      	cmp	r3, #2
 800701c:	d00d      	beq.n	800703a <prvDeleteTCB+0x66>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	b672      	cpsid	i
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	b662      	cpsie	i
 8007032:	60fb      	str	r3, [r7, #12]
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	e7fd      	b.n	8007036 <prvDeleteTCB+0x62>
	}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704a:	4b0c      	ldr	r3, [pc, #48]	@ (800707c <prvResetNextTaskUnblockTime+0x38>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007054:	4b0a      	ldr	r3, [pc, #40]	@ (8007080 <prvResetNextTaskUnblockTime+0x3c>)
 8007056:	f04f 32ff 	mov.w	r2, #4294967295
 800705a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800705c:	e008      	b.n	8007070 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705e:	4b07      	ldr	r3, [pc, #28]	@ (800707c <prvResetNextTaskUnblockTime+0x38>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a04      	ldr	r2, [pc, #16]	@ (8007080 <prvResetNextTaskUnblockTime+0x3c>)
 800706e:	6013      	str	r3, [r2, #0]
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	20001498 	.word	0x20001498
 8007080:	20001500 	.word	0x20001500

08007084 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800708a:	4b0b      	ldr	r3, [pc, #44]	@ (80070b8 <xTaskGetSchedulerState+0x34>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007092:	2301      	movs	r3, #1
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	e008      	b.n	80070aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007098:	4b08      	ldr	r3, [pc, #32]	@ (80070bc <xTaskGetSchedulerState+0x38>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070a0:	2302      	movs	r3, #2
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	e001      	b.n	80070aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070a6:	2300      	movs	r3, #0
 80070a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070aa:	687b      	ldr	r3, [r7, #4]
	}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	200014ec 	.word	0x200014ec
 80070bc:	20001508 	.word	0x20001508

080070c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d051      	beq.n	800717a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070da:	4b2a      	ldr	r3, [pc, #168]	@ (8007184 <xTaskPriorityInherit+0xc4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d241      	bcs.n	8007168 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db06      	blt.n	80070fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ec:	4b25      	ldr	r3, [pc, #148]	@ (8007184 <xTaskPriorityInherit+0xc4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6959      	ldr	r1, [r3, #20]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4a1f      	ldr	r2, [pc, #124]	@ (8007188 <xTaskPriorityInherit+0xc8>)
 800710c:	4413      	add	r3, r2
 800710e:	4299      	cmp	r1, r3
 8007110:	d122      	bne.n	8007158 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	3304      	adds	r3, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe f85c 	bl	80051d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800711c:	4b19      	ldr	r3, [pc, #100]	@ (8007184 <xTaskPriorityInherit+0xc4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712a:	4b18      	ldr	r3, [pc, #96]	@ (800718c <xTaskPriorityInherit+0xcc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d903      	bls.n	800713a <xTaskPriorityInherit+0x7a>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	4a15      	ldr	r2, [pc, #84]	@ (800718c <xTaskPriorityInherit+0xcc>)
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4a10      	ldr	r2, [pc, #64]	@ (8007188 <xTaskPriorityInherit+0xc8>)
 8007148:	441a      	add	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3304      	adds	r3, #4
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f7fd ffe2 	bl	800511a <vListInsertEnd>
 8007156:	e004      	b.n	8007162 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007158:	4b0a      	ldr	r3, [pc, #40]	@ (8007184 <xTaskPriorityInherit+0xc4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007162:	2301      	movs	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e008      	b.n	800717a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800716c:	4b05      	ldr	r3, [pc, #20]	@ (8007184 <xTaskPriorityInherit+0xc4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	429a      	cmp	r2, r3
 8007174:	d201      	bcs.n	800717a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007176:	2301      	movs	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800717a:	68fb      	ldr	r3, [r7, #12]
	}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	2000100c 	.word	0x2000100c
 8007188:	20001010 	.word	0x20001010
 800718c:	200014e8 	.word	0x200014e8

08007190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d05c      	beq.n	8007260 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071a6:	4b31      	ldr	r3, [pc, #196]	@ (800726c <xTaskPriorityDisinherit+0xdc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d00d      	beq.n	80071cc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b4:	b672      	cpsid	i
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	b662      	cpsie	i
 80071c4:	60fb      	str	r3, [r7, #12]
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d8:	b672      	cpsid	i
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	b662      	cpsie	i
 80071e8:	60bb      	str	r3, [r7, #8]
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	e7fd      	b.n	80071ec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007202:	429a      	cmp	r2, r3
 8007204:	d02c      	beq.n	8007260 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720a:	2b00      	cmp	r3, #0
 800720c:	d128      	bne.n	8007260 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4618      	mov	r0, r3
 8007214:	f7fd ffde 	bl	80051d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007224:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007230:	4b0f      	ldr	r3, [pc, #60]	@ (8007270 <xTaskPriorityDisinherit+0xe0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d903      	bls.n	8007240 <xTaskPriorityDisinherit+0xb0>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723c:	4a0c      	ldr	r2, [pc, #48]	@ (8007270 <xTaskPriorityDisinherit+0xe0>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a09      	ldr	r2, [pc, #36]	@ (8007274 <xTaskPriorityDisinherit+0xe4>)
 800724e:	441a      	add	r2, r3
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7fd ff5f 	bl	800511a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007260:	697b      	ldr	r3, [r7, #20]
	}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000100c 	.word	0x2000100c
 8007270:	200014e8 	.word	0x200014e8
 8007274:	20001010 	.word	0x20001010

08007278 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007286:	2301      	movs	r3, #1
 8007288:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d070      	beq.n	8007372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10d      	bne.n	80072b4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729c:	b672      	cpsid	i
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	b662      	cpsie	i
 80072ac:	60fb      	str	r3, [r7, #12]
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	e7fd      	b.n	80072b0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d902      	bls.n	80072c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	e002      	b.n	80072ca <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d04e      	beq.n	8007372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d149      	bne.n	8007372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072de:	4b27      	ldr	r3, [pc, #156]	@ (800737c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d10d      	bne.n	8007304 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	b672      	cpsid	i
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	b662      	cpsie	i
 80072fc:	60bb      	str	r3, [r7, #8]
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	e7fd      	b.n	8007300 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	db04      	blt.n	8007322 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	6959      	ldr	r1, [r3, #20]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4a13      	ldr	r2, [pc, #76]	@ (8007380 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007332:	4413      	add	r3, r2
 8007334:	4299      	cmp	r1, r3
 8007336:	d11c      	bne.n	8007372 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	3304      	adds	r3, #4
 800733c:	4618      	mov	r0, r3
 800733e:	f7fd ff49 	bl	80051d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007346:	4b0f      	ldr	r3, [pc, #60]	@ (8007384 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d903      	bls.n	8007356 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007352:	4a0c      	ldr	r2, [pc, #48]	@ (8007384 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4a07      	ldr	r2, [pc, #28]	@ (8007380 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007364:	441a      	add	r2, r3
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fd fed4 	bl	800511a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007372:	bf00      	nop
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	2000100c 	.word	0x2000100c
 8007380:	20001010 	.word	0x20001010
 8007384:	200014e8 	.word	0x200014e8

08007388 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <pvTaskIncrementMutexHeldCount+0x24>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <pvTaskIncrementMutexHeldCount+0x24>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800739a:	3201      	adds	r2, #1
 800739c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800739e:	4b03      	ldr	r3, [pc, #12]	@ (80073ac <pvTaskIncrementMutexHeldCount+0x24>)
 80073a0:	681b      	ldr	r3, [r3, #0]
	}
 80073a2:	4618      	mov	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	2000100c 	.word	0x2000100c

080073b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ba:	4b21      	ldr	r3, [pc, #132]	@ (8007440 <prvAddCurrentTaskToDelayedList+0x90>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c0:	4b20      	ldr	r3, [pc, #128]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd ff04 	bl	80051d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d10a      	bne.n	80073ea <prvAddCurrentTaskToDelayedList+0x3a>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073da:	4b1a      	ldr	r3, [pc, #104]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4819      	ldr	r0, [pc, #100]	@ (8007448 <prvAddCurrentTaskToDelayedList+0x98>)
 80073e4:	f7fd fe99 	bl	800511a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073e8:	e026      	b.n	8007438 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4413      	add	r3, r2
 80073f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073f2:	4b14      	ldr	r3, [pc, #80]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d209      	bcs.n	8007416 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007402:	4b12      	ldr	r3, [pc, #72]	@ (800744c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7fd fea7 	bl	8005162 <vListInsert>
}
 8007414:	e010      	b.n	8007438 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007416:	4b0e      	ldr	r3, [pc, #56]	@ (8007450 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fd fe9d 	bl	8005162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007428:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <prvAddCurrentTaskToDelayedList+0xa4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	429a      	cmp	r2, r3
 8007430:	d202      	bcs.n	8007438 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007432:	4a08      	ldr	r2, [pc, #32]	@ (8007454 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	6013      	str	r3, [r2, #0]
}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200014e4 	.word	0x200014e4
 8007444:	2000100c 	.word	0x2000100c
 8007448:	200014cc 	.word	0x200014cc
 800744c:	2000149c 	.word	0x2000149c
 8007450:	20001498 	.word	0x20001498
 8007454:	20001500 	.word	0x20001500

08007458 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	@ 0x28
 800745c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007462:	f000 fb21 	bl	8007aa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007466:	4b1e      	ldr	r3, [pc, #120]	@ (80074e0 <xTimerCreateTimerTask+0x88>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d021      	beq.n	80074b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007476:	1d3a      	adds	r2, r7, #4
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	f107 030c 	add.w	r3, r7, #12
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd fe03 	bl	800508c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	9202      	str	r2, [sp, #8]
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	2302      	movs	r3, #2
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	460a      	mov	r2, r1
 8007498:	4912      	ldr	r1, [pc, #72]	@ (80074e4 <xTimerCreateTimerTask+0x8c>)
 800749a:	4813      	ldr	r0, [pc, #76]	@ (80074e8 <xTimerCreateTimerTask+0x90>)
 800749c:	f7fe ff7a 	bl	8006394 <xTaskCreateStatic>
 80074a0:	4603      	mov	r3, r0
 80074a2:	4a12      	ldr	r2, [pc, #72]	@ (80074ec <xTimerCreateTimerTask+0x94>)
 80074a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074a6:	4b11      	ldr	r3, [pc, #68]	@ (80074ec <xTimerCreateTimerTask+0x94>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ae:	2301      	movs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10d      	bne.n	80074d4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	b672      	cpsid	i
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	b662      	cpsie	i
 80074cc:	613b      	str	r3, [r7, #16]
}
 80074ce:	bf00      	nop
 80074d0:	bf00      	nop
 80074d2:	e7fd      	b.n	80074d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80074d4:	697b      	ldr	r3, [r7, #20]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	2000153c 	.word	0x2000153c
 80074e4:	08008ed4 	.word	0x08008ed4
 80074e8:	08007631 	.word	0x08007631
 80074ec:	20001540 	.word	0x20001540

080074f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	@ 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074fe:	2300      	movs	r3, #0
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10d      	bne.n	8007524 <xTimerGenericCommand+0x34>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750c:	b672      	cpsid	i
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	b662      	cpsie	i
 800751c:	623b      	str	r3, [r7, #32]
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007524:	4b19      	ldr	r3, [pc, #100]	@ (800758c <xTimerGenericCommand+0x9c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02a      	beq.n	8007582 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b05      	cmp	r3, #5
 800753c:	dc18      	bgt.n	8007570 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800753e:	f7ff fda1 	bl	8007084 <xTaskGetSchedulerState>
 8007542:	4603      	mov	r3, r0
 8007544:	2b02      	cmp	r3, #2
 8007546:	d109      	bne.n	800755c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007548:	4b10      	ldr	r3, [pc, #64]	@ (800758c <xTimerGenericCommand+0x9c>)
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	f107 0110 	add.w	r1, r7, #16
 8007550:	2300      	movs	r3, #0
 8007552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007554:	f7fe f838 	bl	80055c8 <xQueueGenericSend>
 8007558:	6278      	str	r0, [r7, #36]	@ 0x24
 800755a:	e012      	b.n	8007582 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <xTimerGenericCommand+0x9c>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	f107 0110 	add.w	r1, r7, #16
 8007564:	2300      	movs	r3, #0
 8007566:	2200      	movs	r2, #0
 8007568:	f7fe f82e 	bl	80055c8 <xQueueGenericSend>
 800756c:	6278      	str	r0, [r7, #36]	@ 0x24
 800756e:	e008      	b.n	8007582 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007570:	4b06      	ldr	r3, [pc, #24]	@ (800758c <xTimerGenericCommand+0x9c>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	f107 0110 	add.w	r1, r7, #16
 8007578:	2300      	movs	r3, #0
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	f7fe f92e 	bl	80057dc <xQueueGenericSendFromISR>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007584:	4618      	mov	r0, r3
 8007586:	3728      	adds	r7, #40	@ 0x28
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	2000153c 	.word	0x2000153c

08007590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759a:	4b24      	ldr	r3, [pc, #144]	@ (800762c <prvProcessExpiredTimer+0x9c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fd fe13 	bl	80051d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d025      	beq.n	8007608 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	18d1      	adds	r1, r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	6978      	ldr	r0, [r7, #20]
 80075ca:	f000 f8d7 	bl	800777c <prvInsertTimerInActiveList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d022      	beq.n	800761a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075d4:	2300      	movs	r3, #0
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	2100      	movs	r1, #0
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	f7ff ff86 	bl	80074f0 <xTimerGenericCommand>
 80075e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d116      	bne.n	800761a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f0:	b672      	cpsid	i
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	b662      	cpsie	i
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	b2da      	uxtb	r2, r3
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	4798      	blx	r3
}
 8007622:	bf00      	nop
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20001534 	.word	0x20001534

08007630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f859 	bl	80076f4 <prvGetNextExpireTime>
 8007642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4619      	mov	r1, r3
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f805 	bl	8007658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800764e:	f000 f8d7 	bl	8007800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007652:	bf00      	nop
 8007654:	e7f0      	b.n	8007638 <prvTimerTask+0x8>
	...

08007658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007662:	f7ff f909 	bl	8006878 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007666:	f107 0308 	add.w	r3, r7, #8
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f866 	bl	800773c <prvSampleTimeNow>
 8007670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d130      	bne.n	80076da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10a      	bne.n	8007694 <prvProcessTimerOrBlockTask+0x3c>
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	429a      	cmp	r2, r3
 8007684:	d806      	bhi.n	8007694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007686:	f7ff f905 	bl	8006894 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ff7f 	bl	8007590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007692:	e024      	b.n	80076de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800769a:	4b13      	ldr	r3, [pc, #76]	@ (80076e8 <prvProcessTimerOrBlockTask+0x90>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <prvProcessTimerOrBlockTask+0x50>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <prvProcessTimerOrBlockTask+0x52>
 80076a8:	2300      	movs	r3, #0
 80076aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076ac:	4b0f      	ldr	r3, [pc, #60]	@ (80076ec <prvProcessTimerOrBlockTask+0x94>)
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f7fe fe37 	bl	800632c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076be:	f7ff f8e9 	bl	8006894 <xTaskResumeAll>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076c8:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <prvProcessTimerOrBlockTask+0x98>)
 80076ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	f3bf 8f6f 	isb	sy
}
 80076d8:	e001      	b.n	80076de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076da:	f7ff f8db 	bl	8006894 <xTaskResumeAll>
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20001538 	.word	0x20001538
 80076ec:	2000153c 	.word	0x2000153c
 80076f0:	e000ed04 	.word	0xe000ed04

080076f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <prvGetNextExpireTime+0x44>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <prvGetNextExpireTime+0x16>
 8007706:	2201      	movs	r2, #1
 8007708:	e000      	b.n	800770c <prvGetNextExpireTime+0x18>
 800770a:	2200      	movs	r2, #0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d105      	bne.n	8007724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007718:	4b07      	ldr	r3, [pc, #28]	@ (8007738 <prvGetNextExpireTime+0x44>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	e001      	b.n	8007728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	20001534 	.word	0x20001534

0800773c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007744:	f7ff f946 	bl	80069d4 <xTaskGetTickCount>
 8007748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800774a:	4b0b      	ldr	r3, [pc, #44]	@ (8007778 <prvSampleTimeNow+0x3c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	429a      	cmp	r2, r3
 8007752:	d205      	bcs.n	8007760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007754:	f000 f940 	bl	80079d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	e002      	b.n	8007766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007766:	4a04      	ldr	r2, [pc, #16]	@ (8007778 <prvSampleTimeNow+0x3c>)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800776c:	68fb      	ldr	r3, [r7, #12]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20001544 	.word	0x20001544

0800777c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d812      	bhi.n	80077c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d302      	bcc.n	80077b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	e01b      	b.n	80077ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077b6:	4b10      	ldr	r3, [pc, #64]	@ (80077f8 <prvInsertTimerInActiveList+0x7c>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3304      	adds	r3, #4
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f7fd fcce 	bl	8005162 <vListInsert>
 80077c6:	e012      	b.n	80077ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d206      	bcs.n	80077de <prvInsertTimerInActiveList+0x62>
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d302      	bcc.n	80077de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	e007      	b.n	80077ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077de:	4b07      	ldr	r3, [pc, #28]	@ (80077fc <prvInsertTimerInActiveList+0x80>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4619      	mov	r1, r3
 80077e8:	4610      	mov	r0, r2
 80077ea:	f7fd fcba 	bl	8005162 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077ee:	697b      	ldr	r3, [r7, #20]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20001538 	.word	0x20001538
 80077fc:	20001534 	.word	0x20001534

08007800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08e      	sub	sp, #56	@ 0x38
 8007804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007806:	e0d4      	b.n	80079b2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	da1b      	bge.n	8007846 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	3304      	adds	r3, #4
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	b672      	cpsid	i
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	b662      	cpsie	i
 800782e:	61fb      	str	r3, [r7, #28]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800783c:	6850      	ldr	r0, [r2, #4]
 800783e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007840:	6892      	ldr	r2, [r2, #8]
 8007842:	4611      	mov	r1, r2
 8007844:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f2c0 80b2 	blt.w	80079b2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800785a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785c:	3304      	adds	r3, #4
 800785e:	4618      	mov	r0, r3
 8007860:	f7fd fcb8 	bl	80051d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007864:	463b      	mov	r3, r7
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff ff68 	bl	800773c <prvSampleTimeNow>
 800786c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b09      	cmp	r3, #9
 8007872:	f200 809b 	bhi.w	80079ac <prvProcessReceivedCommands+0x1ac>
 8007876:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <prvProcessReceivedCommands+0x7c>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078a5 	.word	0x080078a5
 8007884:	080078a5 	.word	0x080078a5
 8007888:	0800791f 	.word	0x0800791f
 800788c:	08007933 	.word	0x08007933
 8007890:	08007983 	.word	0x08007983
 8007894:	080078a5 	.word	0x080078a5
 8007898:	080078a5 	.word	0x080078a5
 800789c:	0800791f 	.word	0x0800791f
 80078a0:	08007933 	.word	0x08007933
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	18d1      	adds	r1, r2, r3
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078c4:	f7ff ff5a 	bl	800777c <prvInsertTimerInActiveList>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d070      	beq.n	80079b0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d065      	beq.n	80079b0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	441a      	add	r2, r3
 80078ec:	2300      	movs	r3, #0
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	2300      	movs	r3, #0
 80078f2:	2100      	movs	r1, #0
 80078f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f6:	f7ff fdfb 	bl	80074f0 <xTimerGenericCommand>
 80078fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d156      	bne.n	80079b0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	b672      	cpsid	i
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	b662      	cpsie	i
 8007916:	61bb      	str	r3, [r7, #24]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007930:	e03f      	b.n	80079b2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007938:	f043 0301 	orr.w	r3, r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800794a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10d      	bne.n	800796e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	b672      	cpsid	i
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	b662      	cpsie	i
 8007966:	617b      	str	r3, [r7, #20]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	18d1      	adds	r1, r2, r3
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800797a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800797c:	f7ff fefe 	bl	800777c <prvInsertTimerInActiveList>
					break;
 8007980:	e017      	b.n	80079b2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d103      	bne.n	8007998 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007992:	f000 fbd7 	bl	8008144 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007996:	e00c      	b.n	80079b2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80079aa:	e002      	b.n	80079b2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80079ac:	bf00      	nop
 80079ae:	e000      	b.n	80079b2 <prvProcessReceivedCommands+0x1b2>
					break;
 80079b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079b2:	4b08      	ldr	r3, [pc, #32]	@ (80079d4 <prvProcessReceivedCommands+0x1d4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	1d39      	adds	r1, r7, #4
 80079b8:	2200      	movs	r2, #0
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f84a 	bl	8005a54 <xQueueReceive>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f47f af20 	bne.w	8007808 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	3730      	adds	r7, #48	@ 0x30
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	2000153c 	.word	0x2000153c

080079d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079de:	e04b      	b.n	8007a78 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e0:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa0 <prvSwitchTimerLists+0xc8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ea:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa0 <prvSwitchTimerLists+0xc8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fd fbeb 	bl	80051d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d031      	beq.n	8007a78 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d90e      	bls.n	8007a44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a32:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa0 <prvSwitchTimerLists+0xc8>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fd fb90 	bl	8005162 <vListInsert>
 8007a42:	e019      	b.n	8007a78 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff fd4e 	bl	80074f0 <xTimerGenericCommand>
 8007a54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10d      	bne.n	8007a78 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	b672      	cpsid	i
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	b662      	cpsie	i
 8007a70:	603b      	str	r3, [r7, #0]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a78:	4b09      	ldr	r3, [pc, #36]	@ (8007aa0 <prvSwitchTimerLists+0xc8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1ae      	bne.n	80079e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a82:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <prvSwitchTimerLists+0xc8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <prvSwitchTimerLists+0xcc>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a04      	ldr	r2, [pc, #16]	@ (8007aa0 <prvSwitchTimerLists+0xc8>)
 8007a8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a90:	4a04      	ldr	r2, [pc, #16]	@ (8007aa4 <prvSwitchTimerLists+0xcc>)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6013      	str	r3, [r2, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20001534 	.word	0x20001534
 8007aa4:	20001538 	.word	0x20001538

08007aa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007aae:	f000 f94d 	bl	8007d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ab2:	4b15      	ldr	r3, [pc, #84]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d120      	bne.n	8007afc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aba:	4814      	ldr	r0, [pc, #80]	@ (8007b0c <prvCheckForValidListAndQueue+0x64>)
 8007abc:	f7fd fb00 	bl	80050c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ac0:	4813      	ldr	r0, [pc, #76]	@ (8007b10 <prvCheckForValidListAndQueue+0x68>)
 8007ac2:	f7fd fafd 	bl	80050c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ac6:	4b13      	ldr	r3, [pc, #76]	@ (8007b14 <prvCheckForValidListAndQueue+0x6c>)
 8007ac8:	4a10      	ldr	r2, [pc, #64]	@ (8007b0c <prvCheckForValidListAndQueue+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007acc:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <prvCheckForValidListAndQueue+0x70>)
 8007ace:	4a10      	ldr	r2, [pc, #64]	@ (8007b10 <prvCheckForValidListAndQueue+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4b11      	ldr	r3, [pc, #68]	@ (8007b1c <prvCheckForValidListAndQueue+0x74>)
 8007ad8:	4a11      	ldr	r2, [pc, #68]	@ (8007b20 <prvCheckForValidListAndQueue+0x78>)
 8007ada:	2110      	movs	r1, #16
 8007adc:	200a      	movs	r0, #10
 8007ade:	f7fd fc0f 	bl	8005300 <xQueueGenericCreateStatic>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4a08      	ldr	r2, [pc, #32]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007ae6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ae8:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d005      	beq.n	8007afc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007af0:	4b05      	ldr	r3, [pc, #20]	@ (8007b08 <prvCheckForValidListAndQueue+0x60>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	490b      	ldr	r1, [pc, #44]	@ (8007b24 <prvCheckForValidListAndQueue+0x7c>)
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fbc4 	bl	8006284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007afc:	f000 f95c 	bl	8007db8 <vPortExitCritical>
}
 8007b00:	bf00      	nop
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	2000153c 	.word	0x2000153c
 8007b0c:	2000150c 	.word	0x2000150c
 8007b10:	20001520 	.word	0x20001520
 8007b14:	20001534 	.word	0x20001534
 8007b18:	20001538 	.word	0x20001538
 8007b1c:	200015e8 	.word	0x200015e8
 8007b20:	20001548 	.word	0x20001548
 8007b24:	08008edc 	.word	0x08008edc

08007b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b04      	subs	r3, #4
 8007b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3b04      	subs	r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b58:	4a0c      	ldr	r2, [pc, #48]	@ (8007b8c <pxPortInitialiseStack+0x64>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b14      	subs	r3, #20
 8007b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3b04      	subs	r3, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f06f 0202 	mvn.w	r2, #2
 8007b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3b20      	subs	r3, #32
 8007b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	08007b91 	.word	0x08007b91

08007b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b9a:	4b15      	ldr	r3, [pc, #84]	@ (8007bf0 <prvTaskExitError+0x60>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d00d      	beq.n	8007bc0 <prvTaskExitError+0x30>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	b672      	cpsid	i
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	b662      	cpsie	i
 8007bb8:	60fb      	str	r3, [r7, #12]
}
 8007bba:	bf00      	nop
 8007bbc:	bf00      	nop
 8007bbe:	e7fd      	b.n	8007bbc <prvTaskExitError+0x2c>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	b672      	cpsid	i
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	b662      	cpsie	i
 8007bd4:	60bb      	str	r3, [r7, #8]
}
 8007bd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bd8:	bf00      	nop
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0fc      	beq.n	8007bda <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	2000000c 	.word	0x2000000c
	...

08007c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c00:	4b07      	ldr	r3, [pc, #28]	@ (8007c20 <pxCurrentTCBConst2>)
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f380 8809 	msr	PSP, r0
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8811 	msr	BASEPRI, r0
 8007c1a:	4770      	bx	lr
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst2>:
 8007c20:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c28:	4808      	ldr	r0, [pc, #32]	@ (8007c4c <prvPortStartFirstTask+0x24>)
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	f380 8808 	msr	MSP, r0
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8814 	msr	CONTROL, r0
 8007c3a:	b662      	cpsie	i
 8007c3c:	b661      	cpsie	f
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	df00      	svc	0
 8007c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c4a:	bf00      	nop
 8007c4c:	e000ed08 	.word	0xe000ed08

08007c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c56:	4b37      	ldr	r3, [pc, #220]	@ (8007d34 <xPortStartScheduler+0xe4>)
 8007c58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	22ff      	movs	r2, #255	@ 0xff
 8007c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d38 <xPortStartScheduler+0xe8>)
 8007c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007c80:	2207      	movs	r2, #7
 8007c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c84:	e009      	b.n	8007c9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c86:	4b2d      	ldr	r3, [pc, #180]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca2:	2b80      	cmp	r3, #128	@ 0x80
 8007ca4:	d0ef      	beq.n	8007c86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ca6:	4b25      	ldr	r3, [pc, #148]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f1c3 0307 	rsb	r3, r3, #7
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d00d      	beq.n	8007cce <xPortStartScheduler+0x7e>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	60bb      	str	r3, [r7, #8]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cce:	4b1b      	ldr	r3, [pc, #108]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	4a19      	ldr	r2, [pc, #100]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007cd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cd8:	4b18      	ldr	r3, [pc, #96]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ce0:	4a16      	ldr	r2, [pc, #88]	@ (8007d3c <xPortStartScheduler+0xec>)
 8007ce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cec:	4b14      	ldr	r3, [pc, #80]	@ (8007d40 <xPortStartScheduler+0xf0>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	@ (8007d40 <xPortStartScheduler+0xf0>)
 8007cf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cf8:	4b11      	ldr	r3, [pc, #68]	@ (8007d40 <xPortStartScheduler+0xf0>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a10      	ldr	r2, [pc, #64]	@ (8007d40 <xPortStartScheduler+0xf0>)
 8007cfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d04:	f000 f8dc 	bl	8007ec0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d08:	4b0e      	ldr	r3, [pc, #56]	@ (8007d44 <xPortStartScheduler+0xf4>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d0e:	f000 f8fb 	bl	8007f08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <xPortStartScheduler+0xf8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a0c      	ldr	r2, [pc, #48]	@ (8007d48 <xPortStartScheduler+0xf8>)
 8007d18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d1e:	f7ff ff83 	bl	8007c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d22:	f7fe ff23 	bl	8006b6c <vTaskSwitchContext>
	prvTaskExitError();
 8007d26:	f7ff ff33 	bl	8007b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	e000e400 	.word	0xe000e400
 8007d38:	20001638 	.word	0x20001638
 8007d3c:	2000163c 	.word	0x2000163c
 8007d40:	e000ed20 	.word	0xe000ed20
 8007d44:	2000000c 	.word	0x2000000c
 8007d48:	e000ef34 	.word	0xe000ef34

08007d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	b672      	cpsid	i
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	b662      	cpsie	i
 8007d66:	607b      	str	r3, [r7, #4]
}
 8007d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d6a:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <vPortEnterCritical+0x64>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	4a0f      	ldr	r2, [pc, #60]	@ (8007db0 <vPortEnterCritical+0x64>)
 8007d72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d74:	4b0e      	ldr	r3, [pc, #56]	@ (8007db0 <vPortEnterCritical+0x64>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d112      	bne.n	8007da2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <vPortEnterCritical+0x68>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00d      	beq.n	8007da2 <vPortEnterCritical+0x56>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	603b      	str	r3, [r7, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <vPortEnterCritical+0x52>
	}
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	2000000c 	.word	0x2000000c
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dbe:	4b13      	ldr	r3, [pc, #76]	@ (8007e0c <vPortExitCritical+0x54>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10d      	bne.n	8007de2 <vPortExitCritical+0x2a>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	b672      	cpsid	i
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	b662      	cpsie	i
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007de2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <vPortExitCritical+0x54>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	4a08      	ldr	r2, [pc, #32]	@ (8007e0c <vPortExitCritical+0x54>)
 8007dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dec:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <vPortExitCritical+0x54>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <vPortExitCritical+0x48>
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f383 8811 	msr	BASEPRI, r3
}
 8007dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e10:	f3ef 8009 	mrs	r0, PSP
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4b15      	ldr	r3, [pc, #84]	@ (8007e70 <pxCurrentTCBConst>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	f01e 0f10 	tst.w	lr, #16
 8007e20:	bf08      	it	eq
 8007e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	6010      	str	r0, [r2, #0]
 8007e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e34:	b672      	cpsid	i
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	b662      	cpsie	i
 8007e44:	f7fe fe92 	bl	8006b6c <vTaskSwitchContext>
 8007e48:	f04f 0000 	mov.w	r0, #0
 8007e4c:	f380 8811 	msr	BASEPRI, r0
 8007e50:	bc09      	pop	{r0, r3}
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	6808      	ldr	r0, [r1, #0]
 8007e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	f01e 0f10 	tst.w	lr, #16
 8007e5e:	bf08      	it	eq
 8007e60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e64:	f380 8809 	msr	PSP, r0
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop

08007e70 <pxCurrentTCBConst>:
 8007e70:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop

08007e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	b672      	cpsid	i
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	b662      	cpsie	i
 8007e92:	607b      	str	r3, [r7, #4]
}
 8007e94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e96:	f7fe fdad 	bl	80069f4 <xTaskIncrementTick>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ea0:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <SysTick_Handler+0x44>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f383 8811 	msr	BASEPRI, r3
}
 8007eb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	e000ed04 	.word	0xe000ed04

08007ec0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef4 <vPortSetupTimerInterrupt+0x34>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007eca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef8 <vPortSetupTimerInterrupt+0x38>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8007efc <vPortSetupTimerInterrupt+0x3c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8007f00 <vPortSetupTimerInterrupt+0x40>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	099b      	lsrs	r3, r3, #6
 8007edc:	4a09      	ldr	r2, [pc, #36]	@ (8007f04 <vPortSetupTimerInterrupt+0x44>)
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ee2:	4b04      	ldr	r3, [pc, #16]	@ (8007ef4 <vPortSetupTimerInterrupt+0x34>)
 8007ee4:	2207      	movs	r2, #7
 8007ee6:	601a      	str	r2, [r3, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	e000e010 	.word	0xe000e010
 8007ef8:	e000e018 	.word	0xe000e018
 8007efc:	20000000 	.word	0x20000000
 8007f00:	10624dd3 	.word	0x10624dd3
 8007f04:	e000e014 	.word	0xe000e014

08007f08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f18 <vPortEnableVFP+0x10>
 8007f0c:	6801      	ldr	r1, [r0, #0]
 8007f0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f12:	6001      	str	r1, [r0, #0]
 8007f14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f16:	bf00      	nop
 8007f18:	e000ed88 	.word	0xe000ed88

08007f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f22:	f3ef 8305 	mrs	r3, IPSR
 8007f26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b0f      	cmp	r3, #15
 8007f2c:	d917      	bls.n	8007f5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f98 <vPortValidateInterruptPriority+0x7c>)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f38:	4b18      	ldr	r3, [pc, #96]	@ (8007f9c <vPortValidateInterruptPriority+0x80>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	7afa      	ldrb	r2, [r7, #11]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d20d      	bcs.n	8007f5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	b672      	cpsid	i
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	b662      	cpsie	i
 8007f56:	607b      	str	r3, [r7, #4]
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	e7fd      	b.n	8007f5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f5e:	4b10      	ldr	r3, [pc, #64]	@ (8007fa0 <vPortValidateInterruptPriority+0x84>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f66:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa4 <vPortValidateInterruptPriority+0x88>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d90d      	bls.n	8007f8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	b672      	cpsid	i
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	b662      	cpsie	i
 8007f82:	603b      	str	r3, [r7, #0]
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop
 8007f88:	e7fd      	b.n	8007f86 <vPortValidateInterruptPriority+0x6a>
	}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	e000e3f0 	.word	0xe000e3f0
 8007f9c:	20001638 	.word	0x20001638
 8007fa0:	e000ed0c 	.word	0xe000ed0c
 8007fa4:	2000163c 	.word	0x2000163c

08007fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	@ 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fb4:	f7fe fc60 	bl	8006878 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fb8:	4b5d      	ldr	r3, [pc, #372]	@ (8008130 <pvPortMalloc+0x188>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fc0:	f000 f920 	bl	8008204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8008134 <pvPortMalloc+0x18c>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 8094 	bne.w	80080fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d020      	beq.n	800801a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007fd8:	2208      	movs	r2, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d017      	beq.n	800801a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f023 0307 	bic.w	r3, r3, #7
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00d      	beq.n	800801a <pvPortMalloc+0x72>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	b672      	cpsid	i
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	b662      	cpsie	i
 8008012:	617b      	str	r3, [r7, #20]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d06c      	beq.n	80080fa <pvPortMalloc+0x152>
 8008020:	4b45      	ldr	r3, [pc, #276]	@ (8008138 <pvPortMalloc+0x190>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d867      	bhi.n	80080fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800802a:	4b44      	ldr	r3, [pc, #272]	@ (800813c <pvPortMalloc+0x194>)
 800802c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800802e:	4b43      	ldr	r3, [pc, #268]	@ (800813c <pvPortMalloc+0x194>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008034:	e004      	b.n	8008040 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d903      	bls.n	8008052 <pvPortMalloc+0xaa>
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f1      	bne.n	8008036 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008052:	4b37      	ldr	r3, [pc, #220]	@ (8008130 <pvPortMalloc+0x188>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008058:	429a      	cmp	r2, r3
 800805a:	d04e      	beq.n	80080fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	4413      	add	r3, r2
 8008064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	2308      	movs	r3, #8
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	429a      	cmp	r2, r3
 800807c:	d922      	bls.n	80080c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800807e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00d      	beq.n	80080ac <pvPortMalloc+0x104>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	b672      	cpsid	i
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	b662      	cpsie	i
 80080a4:	613b      	str	r3, [r7, #16]
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	e7fd      	b.n	80080a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080be:	69b8      	ldr	r0, [r7, #24]
 80080c0:	f000 f902 	bl	80082c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008138 <pvPortMalloc+0x190>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008138 <pvPortMalloc+0x190>)
 80080d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080d2:	4b19      	ldr	r3, [pc, #100]	@ (8008138 <pvPortMalloc+0x190>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008140 <pvPortMalloc+0x198>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d203      	bcs.n	80080e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080de:	4b16      	ldr	r3, [pc, #88]	@ (8008138 <pvPortMalloc+0x190>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a17      	ldr	r2, [pc, #92]	@ (8008140 <pvPortMalloc+0x198>)
 80080e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	4b12      	ldr	r3, [pc, #72]	@ (8008134 <pvPortMalloc+0x18c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080fa:	f7fe fbcb 	bl	8006894 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <pvPortMalloc+0x17c>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <pvPortMalloc+0x178>
	return pvReturn;
 8008124:	69fb      	ldr	r3, [r7, #28]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3728      	adds	r7, #40	@ 0x28
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20005248 	.word	0x20005248
 8008134:	20005254 	.word	0x20005254
 8008138:	2000524c 	.word	0x2000524c
 800813c:	20005240 	.word	0x20005240
 8008140:	20005250 	.word	0x20005250

08008144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d04e      	beq.n	80081f4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008156:	2308      	movs	r3, #8
 8008158:	425b      	negs	r3, r3
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4413      	add	r3, r2
 800815e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4b24      	ldr	r3, [pc, #144]	@ (80081fc <vPortFree+0xb8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4013      	ands	r3, r2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10d      	bne.n	800818e <vPortFree+0x4a>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008176:	b672      	cpsid	i
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	b662      	cpsie	i
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00d      	beq.n	80081b2 <vPortFree+0x6e>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	b672      	cpsid	i
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	b662      	cpsie	i
 80081aa:	60bb      	str	r3, [r7, #8]
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	e7fd      	b.n	80081ae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	4b11      	ldr	r3, [pc, #68]	@ (80081fc <vPortFree+0xb8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d019      	beq.n	80081f4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d115      	bne.n	80081f4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <vPortFree+0xb8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	43db      	mvns	r3, r3
 80081d2:	401a      	ands	r2, r3
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081d8:	f7fe fb4e 	bl	8006878 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	4b07      	ldr	r3, [pc, #28]	@ (8008200 <vPortFree+0xbc>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4413      	add	r3, r2
 80081e6:	4a06      	ldr	r2, [pc, #24]	@ (8008200 <vPortFree+0xbc>)
 80081e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f000 f86c 	bl	80082c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081f0:	f7fe fb50 	bl	8006894 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081f4:	bf00      	nop
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20005254 	.word	0x20005254
 8008200:	2000524c 	.word	0x2000524c

08008204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800820a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800820e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008210:	4b27      	ldr	r3, [pc, #156]	@ (80082b0 <prvHeapInit+0xac>)
 8008212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00c      	beq.n	8008238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3307      	adds	r3, #7
 8008222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0307 	bic.w	r3, r3, #7
 800822a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	4a1f      	ldr	r2, [pc, #124]	@ (80082b0 <prvHeapInit+0xac>)
 8008234:	4413      	add	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800823c:	4a1d      	ldr	r2, [pc, #116]	@ (80082b4 <prvHeapInit+0xb0>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008242:	4b1c      	ldr	r3, [pc, #112]	@ (80082b4 <prvHeapInit+0xb0>)
 8008244:	2200      	movs	r2, #0
 8008246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008250:	2208      	movs	r2, #8
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0307 	bic.w	r3, r3, #7
 800825e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a15      	ldr	r2, [pc, #84]	@ (80082b8 <prvHeapInit+0xb4>)
 8008264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008266:	4b14      	ldr	r3, [pc, #80]	@ (80082b8 <prvHeapInit+0xb4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800826e:	4b12      	ldr	r3, [pc, #72]	@ (80082b8 <prvHeapInit+0xb4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008284:	4b0c      	ldr	r3, [pc, #48]	@ (80082b8 <prvHeapInit+0xb4>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a0a      	ldr	r2, [pc, #40]	@ (80082bc <prvHeapInit+0xb8>)
 8008292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	4a09      	ldr	r2, [pc, #36]	@ (80082c0 <prvHeapInit+0xbc>)
 800829a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800829c:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <prvHeapInit+0xc0>)
 800829e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	20001640 	.word	0x20001640
 80082b4:	20005240 	.word	0x20005240
 80082b8:	20005248 	.word	0x20005248
 80082bc:	20005250 	.word	0x20005250
 80082c0:	2000524c 	.word	0x2000524c
 80082c4:	20005254 	.word	0x20005254

080082c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082d0:	4b28      	ldr	r3, [pc, #160]	@ (8008374 <prvInsertBlockIntoFreeList+0xac>)
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e002      	b.n	80082dc <prvInsertBlockIntoFreeList+0x14>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d8f7      	bhi.n	80082d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d108      	bne.n	800830a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	441a      	add	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	441a      	add	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d118      	bne.n	8008350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	4b15      	ldr	r3, [pc, #84]	@ (8008378 <prvInsertBlockIntoFreeList+0xb0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d00d      	beq.n	8008346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	441a      	add	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e008      	b.n	8008358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008346:	4b0c      	ldr	r3, [pc, #48]	@ (8008378 <prvInsertBlockIntoFreeList+0xb0>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e003      	b.n	8008358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	429a      	cmp	r2, r3
 800835e:	d002      	beq.n	8008366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20005240 	.word	0x20005240
 8008378:	20005248 	.word	0x20005248

0800837c <sniprintf>:
 800837c:	b40c      	push	{r2, r3}
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	4b17      	ldr	r3, [pc, #92]	@ (80083e0 <sniprintf+0x64>)
 8008382:	1e0c      	subs	r4, r1, #0
 8008384:	681d      	ldr	r5, [r3, #0]
 8008386:	b09d      	sub	sp, #116	@ 0x74
 8008388:	da08      	bge.n	800839c <sniprintf+0x20>
 800838a:	238b      	movs	r3, #139	@ 0x8b
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	f04f 30ff 	mov.w	r0, #4294967295
 8008392:	b01d      	add	sp, #116	@ 0x74
 8008394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008398:	b002      	add	sp, #8
 800839a:	4770      	bx	lr
 800839c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083a4:	bf14      	ite	ne
 80083a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083aa:	4623      	moveq	r3, r4
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	9006      	str	r0, [sp, #24]
 80083b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083be:	ab21      	add	r3, sp, #132	@ 0x84
 80083c0:	a902      	add	r1, sp, #8
 80083c2:	4628      	mov	r0, r5
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	f000 f9f9 	bl	80087bc <_svfiprintf_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	bfbc      	itt	lt
 80083ce:	238b      	movlt	r3, #139	@ 0x8b
 80083d0:	602b      	strlt	r3, [r5, #0]
 80083d2:	2c00      	cmp	r4, #0
 80083d4:	d0dd      	beq.n	8008392 <sniprintf+0x16>
 80083d6:	9b02      	ldr	r3, [sp, #8]
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e7d9      	b.n	8008392 <sniprintf+0x16>
 80083de:	bf00      	nop
 80083e0:	20000010 	.word	0x20000010

080083e4 <memset>:
 80083e4:	4402      	add	r2, r0
 80083e6:	4603      	mov	r3, r0
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d100      	bne.n	80083ee <memset+0xa>
 80083ec:	4770      	bx	lr
 80083ee:	f803 1b01 	strb.w	r1, [r3], #1
 80083f2:	e7f9      	b.n	80083e8 <memset+0x4>

080083f4 <_reclaim_reent>:
 80083f4:	4b29      	ldr	r3, [pc, #164]	@ (800849c <_reclaim_reent+0xa8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4283      	cmp	r3, r0
 80083fa:	b570      	push	{r4, r5, r6, lr}
 80083fc:	4604      	mov	r4, r0
 80083fe:	d04b      	beq.n	8008498 <_reclaim_reent+0xa4>
 8008400:	69c3      	ldr	r3, [r0, #28]
 8008402:	b1ab      	cbz	r3, 8008430 <_reclaim_reent+0x3c>
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	b16b      	cbz	r3, 8008424 <_reclaim_reent+0x30>
 8008408:	2500      	movs	r5, #0
 800840a:	69e3      	ldr	r3, [r4, #28]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	5959      	ldr	r1, [r3, r5]
 8008410:	2900      	cmp	r1, #0
 8008412:	d13b      	bne.n	800848c <_reclaim_reent+0x98>
 8008414:	3504      	adds	r5, #4
 8008416:	2d80      	cmp	r5, #128	@ 0x80
 8008418:	d1f7      	bne.n	800840a <_reclaim_reent+0x16>
 800841a:	69e3      	ldr	r3, [r4, #28]
 800841c:	4620      	mov	r0, r4
 800841e:	68d9      	ldr	r1, [r3, #12]
 8008420:	f000 f878 	bl	8008514 <_free_r>
 8008424:	69e3      	ldr	r3, [r4, #28]
 8008426:	6819      	ldr	r1, [r3, #0]
 8008428:	b111      	cbz	r1, 8008430 <_reclaim_reent+0x3c>
 800842a:	4620      	mov	r0, r4
 800842c:	f000 f872 	bl	8008514 <_free_r>
 8008430:	6961      	ldr	r1, [r4, #20]
 8008432:	b111      	cbz	r1, 800843a <_reclaim_reent+0x46>
 8008434:	4620      	mov	r0, r4
 8008436:	f000 f86d 	bl	8008514 <_free_r>
 800843a:	69e1      	ldr	r1, [r4, #28]
 800843c:	b111      	cbz	r1, 8008444 <_reclaim_reent+0x50>
 800843e:	4620      	mov	r0, r4
 8008440:	f000 f868 	bl	8008514 <_free_r>
 8008444:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008446:	b111      	cbz	r1, 800844e <_reclaim_reent+0x5a>
 8008448:	4620      	mov	r0, r4
 800844a:	f000 f863 	bl	8008514 <_free_r>
 800844e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008450:	b111      	cbz	r1, 8008458 <_reclaim_reent+0x64>
 8008452:	4620      	mov	r0, r4
 8008454:	f000 f85e 	bl	8008514 <_free_r>
 8008458:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800845a:	b111      	cbz	r1, 8008462 <_reclaim_reent+0x6e>
 800845c:	4620      	mov	r0, r4
 800845e:	f000 f859 	bl	8008514 <_free_r>
 8008462:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008464:	b111      	cbz	r1, 800846c <_reclaim_reent+0x78>
 8008466:	4620      	mov	r0, r4
 8008468:	f000 f854 	bl	8008514 <_free_r>
 800846c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800846e:	b111      	cbz	r1, 8008476 <_reclaim_reent+0x82>
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f84f 	bl	8008514 <_free_r>
 8008476:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008478:	b111      	cbz	r1, 8008480 <_reclaim_reent+0x8c>
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f84a 	bl	8008514 <_free_r>
 8008480:	6a23      	ldr	r3, [r4, #32]
 8008482:	b14b      	cbz	r3, 8008498 <_reclaim_reent+0xa4>
 8008484:	4620      	mov	r0, r4
 8008486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800848a:	4718      	bx	r3
 800848c:	680e      	ldr	r6, [r1, #0]
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f840 	bl	8008514 <_free_r>
 8008494:	4631      	mov	r1, r6
 8008496:	e7bb      	b.n	8008410 <_reclaim_reent+0x1c>
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	bf00      	nop
 800849c:	20000010 	.word	0x20000010

080084a0 <__errno>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	@ (80084a8 <__errno+0x8>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000010 	.word	0x20000010

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4d0d      	ldr	r5, [pc, #52]	@ (80084e4 <__libc_init_array+0x38>)
 80084b0:	4c0d      	ldr	r4, [pc, #52]	@ (80084e8 <__libc_init_array+0x3c>)
 80084b2:	1b64      	subs	r4, r4, r5
 80084b4:	10a4      	asrs	r4, r4, #2
 80084b6:	2600      	movs	r6, #0
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	4d0b      	ldr	r5, [pc, #44]	@ (80084ec <__libc_init_array+0x40>)
 80084be:	4c0c      	ldr	r4, [pc, #48]	@ (80084f0 <__libc_init_array+0x44>)
 80084c0:	f000 fc66 	bl	8008d90 <_init>
 80084c4:	1b64      	subs	r4, r4, r5
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	2600      	movs	r6, #0
 80084ca:	42a6      	cmp	r6, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d4:	4798      	blx	r3
 80084d6:	3601      	adds	r6, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f855 3b04 	ldr.w	r3, [r5], #4
 80084de:	4798      	blx	r3
 80084e0:	3601      	adds	r6, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	08008fb4 	.word	0x08008fb4
 80084e8:	08008fb4 	.word	0x08008fb4
 80084ec:	08008fb4 	.word	0x08008fb4
 80084f0:	08008fb8 	.word	0x08008fb8

080084f4 <__retarget_lock_acquire_recursive>:
 80084f4:	4770      	bx	lr

080084f6 <__retarget_lock_release_recursive>:
 80084f6:	4770      	bx	lr

080084f8 <memcpy>:
 80084f8:	440a      	add	r2, r1
 80084fa:	4291      	cmp	r1, r2
 80084fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008500:	d100      	bne.n	8008504 <memcpy+0xc>
 8008502:	4770      	bx	lr
 8008504:	b510      	push	{r4, lr}
 8008506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800850a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800850e:	4291      	cmp	r1, r2
 8008510:	d1f9      	bne.n	8008506 <memcpy+0xe>
 8008512:	bd10      	pop	{r4, pc}

08008514 <_free_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4605      	mov	r5, r0
 8008518:	2900      	cmp	r1, #0
 800851a:	d041      	beq.n	80085a0 <_free_r+0x8c>
 800851c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008520:	1f0c      	subs	r4, r1, #4
 8008522:	2b00      	cmp	r3, #0
 8008524:	bfb8      	it	lt
 8008526:	18e4      	addlt	r4, r4, r3
 8008528:	f000 f8e0 	bl	80086ec <__malloc_lock>
 800852c:	4a1d      	ldr	r2, [pc, #116]	@ (80085a4 <_free_r+0x90>)
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	b933      	cbnz	r3, 8008540 <_free_r+0x2c>
 8008532:	6063      	str	r3, [r4, #4]
 8008534:	6014      	str	r4, [r2, #0]
 8008536:	4628      	mov	r0, r5
 8008538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800853c:	f000 b8dc 	b.w	80086f8 <__malloc_unlock>
 8008540:	42a3      	cmp	r3, r4
 8008542:	d908      	bls.n	8008556 <_free_r+0x42>
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	1821      	adds	r1, r4, r0
 8008548:	428b      	cmp	r3, r1
 800854a:	bf01      	itttt	eq
 800854c:	6819      	ldreq	r1, [r3, #0]
 800854e:	685b      	ldreq	r3, [r3, #4]
 8008550:	1809      	addeq	r1, r1, r0
 8008552:	6021      	streq	r1, [r4, #0]
 8008554:	e7ed      	b.n	8008532 <_free_r+0x1e>
 8008556:	461a      	mov	r2, r3
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	b10b      	cbz	r3, 8008560 <_free_r+0x4c>
 800855c:	42a3      	cmp	r3, r4
 800855e:	d9fa      	bls.n	8008556 <_free_r+0x42>
 8008560:	6811      	ldr	r1, [r2, #0]
 8008562:	1850      	adds	r0, r2, r1
 8008564:	42a0      	cmp	r0, r4
 8008566:	d10b      	bne.n	8008580 <_free_r+0x6c>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	4401      	add	r1, r0
 800856c:	1850      	adds	r0, r2, r1
 800856e:	4283      	cmp	r3, r0
 8008570:	6011      	str	r1, [r2, #0]
 8008572:	d1e0      	bne.n	8008536 <_free_r+0x22>
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	6053      	str	r3, [r2, #4]
 800857a:	4408      	add	r0, r1
 800857c:	6010      	str	r0, [r2, #0]
 800857e:	e7da      	b.n	8008536 <_free_r+0x22>
 8008580:	d902      	bls.n	8008588 <_free_r+0x74>
 8008582:	230c      	movs	r3, #12
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	e7d6      	b.n	8008536 <_free_r+0x22>
 8008588:	6820      	ldr	r0, [r4, #0]
 800858a:	1821      	adds	r1, r4, r0
 800858c:	428b      	cmp	r3, r1
 800858e:	bf04      	itt	eq
 8008590:	6819      	ldreq	r1, [r3, #0]
 8008592:	685b      	ldreq	r3, [r3, #4]
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	bf04      	itt	eq
 8008598:	1809      	addeq	r1, r1, r0
 800859a:	6021      	streq	r1, [r4, #0]
 800859c:	6054      	str	r4, [r2, #4]
 800859e:	e7ca      	b.n	8008536 <_free_r+0x22>
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	2000539c 	.word	0x2000539c

080085a8 <sbrk_aligned>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	4e0f      	ldr	r6, [pc, #60]	@ (80085e8 <sbrk_aligned+0x40>)
 80085ac:	460c      	mov	r4, r1
 80085ae:	6831      	ldr	r1, [r6, #0]
 80085b0:	4605      	mov	r5, r0
 80085b2:	b911      	cbnz	r1, 80085ba <sbrk_aligned+0x12>
 80085b4:	f000 fba6 	bl	8008d04 <_sbrk_r>
 80085b8:	6030      	str	r0, [r6, #0]
 80085ba:	4621      	mov	r1, r4
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 fba1 	bl	8008d04 <_sbrk_r>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	d103      	bne.n	80085ce <sbrk_aligned+0x26>
 80085c6:	f04f 34ff 	mov.w	r4, #4294967295
 80085ca:	4620      	mov	r0, r4
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	1cc4      	adds	r4, r0, #3
 80085d0:	f024 0403 	bic.w	r4, r4, #3
 80085d4:	42a0      	cmp	r0, r4
 80085d6:	d0f8      	beq.n	80085ca <sbrk_aligned+0x22>
 80085d8:	1a21      	subs	r1, r4, r0
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 fb92 	bl	8008d04 <_sbrk_r>
 80085e0:	3001      	adds	r0, #1
 80085e2:	d1f2      	bne.n	80085ca <sbrk_aligned+0x22>
 80085e4:	e7ef      	b.n	80085c6 <sbrk_aligned+0x1e>
 80085e6:	bf00      	nop
 80085e8:	20005398 	.word	0x20005398

080085ec <_malloc_r>:
 80085ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f0:	1ccd      	adds	r5, r1, #3
 80085f2:	f025 0503 	bic.w	r5, r5, #3
 80085f6:	3508      	adds	r5, #8
 80085f8:	2d0c      	cmp	r5, #12
 80085fa:	bf38      	it	cc
 80085fc:	250c      	movcc	r5, #12
 80085fe:	2d00      	cmp	r5, #0
 8008600:	4606      	mov	r6, r0
 8008602:	db01      	blt.n	8008608 <_malloc_r+0x1c>
 8008604:	42a9      	cmp	r1, r5
 8008606:	d904      	bls.n	8008612 <_malloc_r+0x26>
 8008608:	230c      	movs	r3, #12
 800860a:	6033      	str	r3, [r6, #0]
 800860c:	2000      	movs	r0, #0
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086e8 <_malloc_r+0xfc>
 8008616:	f000 f869 	bl	80086ec <__malloc_lock>
 800861a:	f8d8 3000 	ldr.w	r3, [r8]
 800861e:	461c      	mov	r4, r3
 8008620:	bb44      	cbnz	r4, 8008674 <_malloc_r+0x88>
 8008622:	4629      	mov	r1, r5
 8008624:	4630      	mov	r0, r6
 8008626:	f7ff ffbf 	bl	80085a8 <sbrk_aligned>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	4604      	mov	r4, r0
 800862e:	d158      	bne.n	80086e2 <_malloc_r+0xf6>
 8008630:	f8d8 4000 	ldr.w	r4, [r8]
 8008634:	4627      	mov	r7, r4
 8008636:	2f00      	cmp	r7, #0
 8008638:	d143      	bne.n	80086c2 <_malloc_r+0xd6>
 800863a:	2c00      	cmp	r4, #0
 800863c:	d04b      	beq.n	80086d6 <_malloc_r+0xea>
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	4639      	mov	r1, r7
 8008642:	4630      	mov	r0, r6
 8008644:	eb04 0903 	add.w	r9, r4, r3
 8008648:	f000 fb5c 	bl	8008d04 <_sbrk_r>
 800864c:	4581      	cmp	r9, r0
 800864e:	d142      	bne.n	80086d6 <_malloc_r+0xea>
 8008650:	6821      	ldr	r1, [r4, #0]
 8008652:	1a6d      	subs	r5, r5, r1
 8008654:	4629      	mov	r1, r5
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ffa6 	bl	80085a8 <sbrk_aligned>
 800865c:	3001      	adds	r0, #1
 800865e:	d03a      	beq.n	80086d6 <_malloc_r+0xea>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	442b      	add	r3, r5
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	f8d8 3000 	ldr.w	r3, [r8]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	bb62      	cbnz	r2, 80086c8 <_malloc_r+0xdc>
 800866e:	f8c8 7000 	str.w	r7, [r8]
 8008672:	e00f      	b.n	8008694 <_malloc_r+0xa8>
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	1b52      	subs	r2, r2, r5
 8008678:	d420      	bmi.n	80086bc <_malloc_r+0xd0>
 800867a:	2a0b      	cmp	r2, #11
 800867c:	d917      	bls.n	80086ae <_malloc_r+0xc2>
 800867e:	1961      	adds	r1, r4, r5
 8008680:	42a3      	cmp	r3, r4
 8008682:	6025      	str	r5, [r4, #0]
 8008684:	bf18      	it	ne
 8008686:	6059      	strne	r1, [r3, #4]
 8008688:	6863      	ldr	r3, [r4, #4]
 800868a:	bf08      	it	eq
 800868c:	f8c8 1000 	streq.w	r1, [r8]
 8008690:	5162      	str	r2, [r4, r5]
 8008692:	604b      	str	r3, [r1, #4]
 8008694:	4630      	mov	r0, r6
 8008696:	f000 f82f 	bl	80086f8 <__malloc_unlock>
 800869a:	f104 000b 	add.w	r0, r4, #11
 800869e:	1d23      	adds	r3, r4, #4
 80086a0:	f020 0007 	bic.w	r0, r0, #7
 80086a4:	1ac2      	subs	r2, r0, r3
 80086a6:	bf1c      	itt	ne
 80086a8:	1a1b      	subne	r3, r3, r0
 80086aa:	50a3      	strne	r3, [r4, r2]
 80086ac:	e7af      	b.n	800860e <_malloc_r+0x22>
 80086ae:	6862      	ldr	r2, [r4, #4]
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	bf0c      	ite	eq
 80086b4:	f8c8 2000 	streq.w	r2, [r8]
 80086b8:	605a      	strne	r2, [r3, #4]
 80086ba:	e7eb      	b.n	8008694 <_malloc_r+0xa8>
 80086bc:	4623      	mov	r3, r4
 80086be:	6864      	ldr	r4, [r4, #4]
 80086c0:	e7ae      	b.n	8008620 <_malloc_r+0x34>
 80086c2:	463c      	mov	r4, r7
 80086c4:	687f      	ldr	r7, [r7, #4]
 80086c6:	e7b6      	b.n	8008636 <_malloc_r+0x4a>
 80086c8:	461a      	mov	r2, r3
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	d1fb      	bne.n	80086c8 <_malloc_r+0xdc>
 80086d0:	2300      	movs	r3, #0
 80086d2:	6053      	str	r3, [r2, #4]
 80086d4:	e7de      	b.n	8008694 <_malloc_r+0xa8>
 80086d6:	230c      	movs	r3, #12
 80086d8:	6033      	str	r3, [r6, #0]
 80086da:	4630      	mov	r0, r6
 80086dc:	f000 f80c 	bl	80086f8 <__malloc_unlock>
 80086e0:	e794      	b.n	800860c <_malloc_r+0x20>
 80086e2:	6005      	str	r5, [r0, #0]
 80086e4:	e7d6      	b.n	8008694 <_malloc_r+0xa8>
 80086e6:	bf00      	nop
 80086e8:	2000539c 	.word	0x2000539c

080086ec <__malloc_lock>:
 80086ec:	4801      	ldr	r0, [pc, #4]	@ (80086f4 <__malloc_lock+0x8>)
 80086ee:	f7ff bf01 	b.w	80084f4 <__retarget_lock_acquire_recursive>
 80086f2:	bf00      	nop
 80086f4:	20005394 	.word	0x20005394

080086f8 <__malloc_unlock>:
 80086f8:	4801      	ldr	r0, [pc, #4]	@ (8008700 <__malloc_unlock+0x8>)
 80086fa:	f7ff befc 	b.w	80084f6 <__retarget_lock_release_recursive>
 80086fe:	bf00      	nop
 8008700:	20005394 	.word	0x20005394

08008704 <__ssputs_r>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	688e      	ldr	r6, [r1, #8]
 800870a:	461f      	mov	r7, r3
 800870c:	42be      	cmp	r6, r7
 800870e:	680b      	ldr	r3, [r1, #0]
 8008710:	4682      	mov	sl, r0
 8008712:	460c      	mov	r4, r1
 8008714:	4690      	mov	r8, r2
 8008716:	d82d      	bhi.n	8008774 <__ssputs_r+0x70>
 8008718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800871c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008720:	d026      	beq.n	8008770 <__ssputs_r+0x6c>
 8008722:	6965      	ldr	r5, [r4, #20]
 8008724:	6909      	ldr	r1, [r1, #16]
 8008726:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800872a:	eba3 0901 	sub.w	r9, r3, r1
 800872e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008732:	1c7b      	adds	r3, r7, #1
 8008734:	444b      	add	r3, r9
 8008736:	106d      	asrs	r5, r5, #1
 8008738:	429d      	cmp	r5, r3
 800873a:	bf38      	it	cc
 800873c:	461d      	movcc	r5, r3
 800873e:	0553      	lsls	r3, r2, #21
 8008740:	d527      	bpl.n	8008792 <__ssputs_r+0x8e>
 8008742:	4629      	mov	r1, r5
 8008744:	f7ff ff52 	bl	80085ec <_malloc_r>
 8008748:	4606      	mov	r6, r0
 800874a:	b360      	cbz	r0, 80087a6 <__ssputs_r+0xa2>
 800874c:	6921      	ldr	r1, [r4, #16]
 800874e:	464a      	mov	r2, r9
 8008750:	f7ff fed2 	bl	80084f8 <memcpy>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800875a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	6126      	str	r6, [r4, #16]
 8008762:	6165      	str	r5, [r4, #20]
 8008764:	444e      	add	r6, r9
 8008766:	eba5 0509 	sub.w	r5, r5, r9
 800876a:	6026      	str	r6, [r4, #0]
 800876c:	60a5      	str	r5, [r4, #8]
 800876e:	463e      	mov	r6, r7
 8008770:	42be      	cmp	r6, r7
 8008772:	d900      	bls.n	8008776 <__ssputs_r+0x72>
 8008774:	463e      	mov	r6, r7
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	4632      	mov	r2, r6
 800877a:	4641      	mov	r1, r8
 800877c:	f000 faa8 	bl	8008cd0 <memmove>
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	1b9b      	subs	r3, r3, r6
 8008784:	60a3      	str	r3, [r4, #8]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	4433      	add	r3, r6
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	2000      	movs	r0, #0
 800878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008792:	462a      	mov	r2, r5
 8008794:	f000 fac6 	bl	8008d24 <_realloc_r>
 8008798:	4606      	mov	r6, r0
 800879a:	2800      	cmp	r0, #0
 800879c:	d1e0      	bne.n	8008760 <__ssputs_r+0x5c>
 800879e:	6921      	ldr	r1, [r4, #16]
 80087a0:	4650      	mov	r0, sl
 80087a2:	f7ff feb7 	bl	8008514 <_free_r>
 80087a6:	230c      	movs	r3, #12
 80087a8:	f8ca 3000 	str.w	r3, [sl]
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	e7e9      	b.n	800878e <__ssputs_r+0x8a>
	...

080087bc <_svfiprintf_r>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	4698      	mov	r8, r3
 80087c2:	898b      	ldrh	r3, [r1, #12]
 80087c4:	061b      	lsls	r3, r3, #24
 80087c6:	b09d      	sub	sp, #116	@ 0x74
 80087c8:	4607      	mov	r7, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	4614      	mov	r4, r2
 80087ce:	d510      	bpl.n	80087f2 <_svfiprintf_r+0x36>
 80087d0:	690b      	ldr	r3, [r1, #16]
 80087d2:	b973      	cbnz	r3, 80087f2 <_svfiprintf_r+0x36>
 80087d4:	2140      	movs	r1, #64	@ 0x40
 80087d6:	f7ff ff09 	bl	80085ec <_malloc_r>
 80087da:	6028      	str	r0, [r5, #0]
 80087dc:	6128      	str	r0, [r5, #16]
 80087de:	b930      	cbnz	r0, 80087ee <_svfiprintf_r+0x32>
 80087e0:	230c      	movs	r3, #12
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	b01d      	add	sp, #116	@ 0x74
 80087ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ee:	2340      	movs	r3, #64	@ 0x40
 80087f0:	616b      	str	r3, [r5, #20]
 80087f2:	2300      	movs	r3, #0
 80087f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087f6:	2320      	movs	r3, #32
 80087f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008800:	2330      	movs	r3, #48	@ 0x30
 8008802:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089a0 <_svfiprintf_r+0x1e4>
 8008806:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800880a:	f04f 0901 	mov.w	r9, #1
 800880e:	4623      	mov	r3, r4
 8008810:	469a      	mov	sl, r3
 8008812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008816:	b10a      	cbz	r2, 800881c <_svfiprintf_r+0x60>
 8008818:	2a25      	cmp	r2, #37	@ 0x25
 800881a:	d1f9      	bne.n	8008810 <_svfiprintf_r+0x54>
 800881c:	ebba 0b04 	subs.w	fp, sl, r4
 8008820:	d00b      	beq.n	800883a <_svfiprintf_r+0x7e>
 8008822:	465b      	mov	r3, fp
 8008824:	4622      	mov	r2, r4
 8008826:	4629      	mov	r1, r5
 8008828:	4638      	mov	r0, r7
 800882a:	f7ff ff6b 	bl	8008704 <__ssputs_r>
 800882e:	3001      	adds	r0, #1
 8008830:	f000 80a7 	beq.w	8008982 <_svfiprintf_r+0x1c6>
 8008834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008836:	445a      	add	r2, fp
 8008838:	9209      	str	r2, [sp, #36]	@ 0x24
 800883a:	f89a 3000 	ldrb.w	r3, [sl]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 809f 	beq.w	8008982 <_svfiprintf_r+0x1c6>
 8008844:	2300      	movs	r3, #0
 8008846:	f04f 32ff 	mov.w	r2, #4294967295
 800884a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800884e:	f10a 0a01 	add.w	sl, sl, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	9307      	str	r3, [sp, #28]
 8008856:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800885a:	931a      	str	r3, [sp, #104]	@ 0x68
 800885c:	4654      	mov	r4, sl
 800885e:	2205      	movs	r2, #5
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	484e      	ldr	r0, [pc, #312]	@ (80089a0 <_svfiprintf_r+0x1e4>)
 8008866:	f7f7 fcf3 	bl	8000250 <memchr>
 800886a:	9a04      	ldr	r2, [sp, #16]
 800886c:	b9d8      	cbnz	r0, 80088a6 <_svfiprintf_r+0xea>
 800886e:	06d0      	lsls	r0, r2, #27
 8008870:	bf44      	itt	mi
 8008872:	2320      	movmi	r3, #32
 8008874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008878:	0711      	lsls	r1, r2, #28
 800887a:	bf44      	itt	mi
 800887c:	232b      	movmi	r3, #43	@ 0x2b
 800887e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008882:	f89a 3000 	ldrb.w	r3, [sl]
 8008886:	2b2a      	cmp	r3, #42	@ 0x2a
 8008888:	d015      	beq.n	80088b6 <_svfiprintf_r+0xfa>
 800888a:	9a07      	ldr	r2, [sp, #28]
 800888c:	4654      	mov	r4, sl
 800888e:	2000      	movs	r0, #0
 8008890:	f04f 0c0a 	mov.w	ip, #10
 8008894:	4621      	mov	r1, r4
 8008896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800889a:	3b30      	subs	r3, #48	@ 0x30
 800889c:	2b09      	cmp	r3, #9
 800889e:	d94b      	bls.n	8008938 <_svfiprintf_r+0x17c>
 80088a0:	b1b0      	cbz	r0, 80088d0 <_svfiprintf_r+0x114>
 80088a2:	9207      	str	r2, [sp, #28]
 80088a4:	e014      	b.n	80088d0 <_svfiprintf_r+0x114>
 80088a6:	eba0 0308 	sub.w	r3, r0, r8
 80088aa:	fa09 f303 	lsl.w	r3, r9, r3
 80088ae:	4313      	orrs	r3, r2
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	46a2      	mov	sl, r4
 80088b4:	e7d2      	b.n	800885c <_svfiprintf_r+0xa0>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	1d19      	adds	r1, r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	9103      	str	r1, [sp, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfbb      	ittet	lt
 80088c2:	425b      	neglt	r3, r3
 80088c4:	f042 0202 	orrlt.w	r2, r2, #2
 80088c8:	9307      	strge	r3, [sp, #28]
 80088ca:	9307      	strlt	r3, [sp, #28]
 80088cc:	bfb8      	it	lt
 80088ce:	9204      	strlt	r2, [sp, #16]
 80088d0:	7823      	ldrb	r3, [r4, #0]
 80088d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088d4:	d10a      	bne.n	80088ec <_svfiprintf_r+0x130>
 80088d6:	7863      	ldrb	r3, [r4, #1]
 80088d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088da:	d132      	bne.n	8008942 <_svfiprintf_r+0x186>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	9203      	str	r2, [sp, #12]
 80088e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088e8:	3402      	adds	r4, #2
 80088ea:	9305      	str	r3, [sp, #20]
 80088ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089b0 <_svfiprintf_r+0x1f4>
 80088f0:	7821      	ldrb	r1, [r4, #0]
 80088f2:	2203      	movs	r2, #3
 80088f4:	4650      	mov	r0, sl
 80088f6:	f7f7 fcab 	bl	8000250 <memchr>
 80088fa:	b138      	cbz	r0, 800890c <_svfiprintf_r+0x150>
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	eba0 000a 	sub.w	r0, r0, sl
 8008902:	2240      	movs	r2, #64	@ 0x40
 8008904:	4082      	lsls	r2, r0
 8008906:	4313      	orrs	r3, r2
 8008908:	3401      	adds	r4, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008910:	4824      	ldr	r0, [pc, #144]	@ (80089a4 <_svfiprintf_r+0x1e8>)
 8008912:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008916:	2206      	movs	r2, #6
 8008918:	f7f7 fc9a 	bl	8000250 <memchr>
 800891c:	2800      	cmp	r0, #0
 800891e:	d036      	beq.n	800898e <_svfiprintf_r+0x1d2>
 8008920:	4b21      	ldr	r3, [pc, #132]	@ (80089a8 <_svfiprintf_r+0x1ec>)
 8008922:	bb1b      	cbnz	r3, 800896c <_svfiprintf_r+0x1b0>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	3307      	adds	r3, #7
 8008928:	f023 0307 	bic.w	r3, r3, #7
 800892c:	3308      	adds	r3, #8
 800892e:	9303      	str	r3, [sp, #12]
 8008930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008932:	4433      	add	r3, r6
 8008934:	9309      	str	r3, [sp, #36]	@ 0x24
 8008936:	e76a      	b.n	800880e <_svfiprintf_r+0x52>
 8008938:	fb0c 3202 	mla	r2, ip, r2, r3
 800893c:	460c      	mov	r4, r1
 800893e:	2001      	movs	r0, #1
 8008940:	e7a8      	b.n	8008894 <_svfiprintf_r+0xd8>
 8008942:	2300      	movs	r3, #0
 8008944:	3401      	adds	r4, #1
 8008946:	9305      	str	r3, [sp, #20]
 8008948:	4619      	mov	r1, r3
 800894a:	f04f 0c0a 	mov.w	ip, #10
 800894e:	4620      	mov	r0, r4
 8008950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008954:	3a30      	subs	r2, #48	@ 0x30
 8008956:	2a09      	cmp	r2, #9
 8008958:	d903      	bls.n	8008962 <_svfiprintf_r+0x1a6>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0c6      	beq.n	80088ec <_svfiprintf_r+0x130>
 800895e:	9105      	str	r1, [sp, #20]
 8008960:	e7c4      	b.n	80088ec <_svfiprintf_r+0x130>
 8008962:	fb0c 2101 	mla	r1, ip, r1, r2
 8008966:	4604      	mov	r4, r0
 8008968:	2301      	movs	r3, #1
 800896a:	e7f0      	b.n	800894e <_svfiprintf_r+0x192>
 800896c:	ab03      	add	r3, sp, #12
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	462a      	mov	r2, r5
 8008972:	4b0e      	ldr	r3, [pc, #56]	@ (80089ac <_svfiprintf_r+0x1f0>)
 8008974:	a904      	add	r1, sp, #16
 8008976:	4638      	mov	r0, r7
 8008978:	f3af 8000 	nop.w
 800897c:	1c42      	adds	r2, r0, #1
 800897e:	4606      	mov	r6, r0
 8008980:	d1d6      	bne.n	8008930 <_svfiprintf_r+0x174>
 8008982:	89ab      	ldrh	r3, [r5, #12]
 8008984:	065b      	lsls	r3, r3, #25
 8008986:	f53f af2d 	bmi.w	80087e4 <_svfiprintf_r+0x28>
 800898a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800898c:	e72c      	b.n	80087e8 <_svfiprintf_r+0x2c>
 800898e:	ab03      	add	r3, sp, #12
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	462a      	mov	r2, r5
 8008994:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <_svfiprintf_r+0x1f0>)
 8008996:	a904      	add	r1, sp, #16
 8008998:	4638      	mov	r0, r7
 800899a:	f000 f879 	bl	8008a90 <_printf_i>
 800899e:	e7ed      	b.n	800897c <_svfiprintf_r+0x1c0>
 80089a0:	08008f78 	.word	0x08008f78
 80089a4:	08008f82 	.word	0x08008f82
 80089a8:	00000000 	.word	0x00000000
 80089ac:	08008705 	.word	0x08008705
 80089b0:	08008f7e 	.word	0x08008f7e

080089b4 <_printf_common>:
 80089b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	4616      	mov	r6, r2
 80089ba:	4698      	mov	r8, r3
 80089bc:	688a      	ldr	r2, [r1, #8]
 80089be:	690b      	ldr	r3, [r1, #16]
 80089c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	bfb8      	it	lt
 80089c8:	4613      	movlt	r3, r2
 80089ca:	6033      	str	r3, [r6, #0]
 80089cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089d0:	4607      	mov	r7, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	b10a      	cbz	r2, 80089da <_printf_common+0x26>
 80089d6:	3301      	adds	r3, #1
 80089d8:	6033      	str	r3, [r6, #0]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	0699      	lsls	r1, r3, #26
 80089de:	bf42      	ittt	mi
 80089e0:	6833      	ldrmi	r3, [r6, #0]
 80089e2:	3302      	addmi	r3, #2
 80089e4:	6033      	strmi	r3, [r6, #0]
 80089e6:	6825      	ldr	r5, [r4, #0]
 80089e8:	f015 0506 	ands.w	r5, r5, #6
 80089ec:	d106      	bne.n	80089fc <_printf_common+0x48>
 80089ee:	f104 0a19 	add.w	sl, r4, #25
 80089f2:	68e3      	ldr	r3, [r4, #12]
 80089f4:	6832      	ldr	r2, [r6, #0]
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	42ab      	cmp	r3, r5
 80089fa:	dc26      	bgt.n	8008a4a <_printf_common+0x96>
 80089fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a00:	6822      	ldr	r2, [r4, #0]
 8008a02:	3b00      	subs	r3, #0
 8008a04:	bf18      	it	ne
 8008a06:	2301      	movne	r3, #1
 8008a08:	0692      	lsls	r2, r2, #26
 8008a0a:	d42b      	bmi.n	8008a64 <_printf_common+0xb0>
 8008a0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a10:	4641      	mov	r1, r8
 8008a12:	4638      	mov	r0, r7
 8008a14:	47c8      	blx	r9
 8008a16:	3001      	adds	r0, #1
 8008a18:	d01e      	beq.n	8008a58 <_printf_common+0xa4>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	6922      	ldr	r2, [r4, #16]
 8008a1e:	f003 0306 	and.w	r3, r3, #6
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	bf02      	ittt	eq
 8008a26:	68e5      	ldreq	r5, [r4, #12]
 8008a28:	6833      	ldreq	r3, [r6, #0]
 8008a2a:	1aed      	subeq	r5, r5, r3
 8008a2c:	68a3      	ldr	r3, [r4, #8]
 8008a2e:	bf0c      	ite	eq
 8008a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a34:	2500      	movne	r5, #0
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bfc4      	itt	gt
 8008a3a:	1a9b      	subgt	r3, r3, r2
 8008a3c:	18ed      	addgt	r5, r5, r3
 8008a3e:	2600      	movs	r6, #0
 8008a40:	341a      	adds	r4, #26
 8008a42:	42b5      	cmp	r5, r6
 8008a44:	d11a      	bne.n	8008a7c <_printf_common+0xc8>
 8008a46:	2000      	movs	r0, #0
 8008a48:	e008      	b.n	8008a5c <_printf_common+0xa8>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4652      	mov	r2, sl
 8008a4e:	4641      	mov	r1, r8
 8008a50:	4638      	mov	r0, r7
 8008a52:	47c8      	blx	r9
 8008a54:	3001      	adds	r0, #1
 8008a56:	d103      	bne.n	8008a60 <_printf_common+0xac>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a60:	3501      	adds	r5, #1
 8008a62:	e7c6      	b.n	80089f2 <_printf_common+0x3e>
 8008a64:	18e1      	adds	r1, r4, r3
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	2030      	movs	r0, #48	@ 0x30
 8008a6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a6e:	4422      	add	r2, r4
 8008a70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a78:	3302      	adds	r3, #2
 8008a7a:	e7c7      	b.n	8008a0c <_printf_common+0x58>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	4622      	mov	r2, r4
 8008a80:	4641      	mov	r1, r8
 8008a82:	4638      	mov	r0, r7
 8008a84:	47c8      	blx	r9
 8008a86:	3001      	adds	r0, #1
 8008a88:	d0e6      	beq.n	8008a58 <_printf_common+0xa4>
 8008a8a:	3601      	adds	r6, #1
 8008a8c:	e7d9      	b.n	8008a42 <_printf_common+0x8e>
	...

08008a90 <_printf_i>:
 8008a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	7e0f      	ldrb	r7, [r1, #24]
 8008a96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a98:	2f78      	cmp	r7, #120	@ 0x78
 8008a9a:	4691      	mov	r9, r2
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	469a      	mov	sl, r3
 8008aa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aa6:	d807      	bhi.n	8008ab8 <_printf_i+0x28>
 8008aa8:	2f62      	cmp	r7, #98	@ 0x62
 8008aaa:	d80a      	bhi.n	8008ac2 <_printf_i+0x32>
 8008aac:	2f00      	cmp	r7, #0
 8008aae:	f000 80d2 	beq.w	8008c56 <_printf_i+0x1c6>
 8008ab2:	2f58      	cmp	r7, #88	@ 0x58
 8008ab4:	f000 80b9 	beq.w	8008c2a <_printf_i+0x19a>
 8008ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008abc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ac0:	e03a      	b.n	8008b38 <_printf_i+0xa8>
 8008ac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ac6:	2b15      	cmp	r3, #21
 8008ac8:	d8f6      	bhi.n	8008ab8 <_printf_i+0x28>
 8008aca:	a101      	add	r1, pc, #4	@ (adr r1, 8008ad0 <_printf_i+0x40>)
 8008acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ad0:	08008b29 	.word	0x08008b29
 8008ad4:	08008b3d 	.word	0x08008b3d
 8008ad8:	08008ab9 	.word	0x08008ab9
 8008adc:	08008ab9 	.word	0x08008ab9
 8008ae0:	08008ab9 	.word	0x08008ab9
 8008ae4:	08008ab9 	.word	0x08008ab9
 8008ae8:	08008b3d 	.word	0x08008b3d
 8008aec:	08008ab9 	.word	0x08008ab9
 8008af0:	08008ab9 	.word	0x08008ab9
 8008af4:	08008ab9 	.word	0x08008ab9
 8008af8:	08008ab9 	.word	0x08008ab9
 8008afc:	08008c3d 	.word	0x08008c3d
 8008b00:	08008b67 	.word	0x08008b67
 8008b04:	08008bf7 	.word	0x08008bf7
 8008b08:	08008ab9 	.word	0x08008ab9
 8008b0c:	08008ab9 	.word	0x08008ab9
 8008b10:	08008c5f 	.word	0x08008c5f
 8008b14:	08008ab9 	.word	0x08008ab9
 8008b18:	08008b67 	.word	0x08008b67
 8008b1c:	08008ab9 	.word	0x08008ab9
 8008b20:	08008ab9 	.word	0x08008ab9
 8008b24:	08008bff 	.word	0x08008bff
 8008b28:	6833      	ldr	r3, [r6, #0]
 8008b2a:	1d1a      	adds	r2, r3, #4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6032      	str	r2, [r6, #0]
 8008b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e09d      	b.n	8008c78 <_printf_i+0x1e8>
 8008b3c:	6833      	ldr	r3, [r6, #0]
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	1d19      	adds	r1, r3, #4
 8008b42:	6031      	str	r1, [r6, #0]
 8008b44:	0606      	lsls	r6, r0, #24
 8008b46:	d501      	bpl.n	8008b4c <_printf_i+0xbc>
 8008b48:	681d      	ldr	r5, [r3, #0]
 8008b4a:	e003      	b.n	8008b54 <_printf_i+0xc4>
 8008b4c:	0645      	lsls	r5, r0, #25
 8008b4e:	d5fb      	bpl.n	8008b48 <_printf_i+0xb8>
 8008b50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	da03      	bge.n	8008b60 <_printf_i+0xd0>
 8008b58:	232d      	movs	r3, #45	@ 0x2d
 8008b5a:	426d      	negs	r5, r5
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b60:	4859      	ldr	r0, [pc, #356]	@ (8008cc8 <_printf_i+0x238>)
 8008b62:	230a      	movs	r3, #10
 8008b64:	e011      	b.n	8008b8a <_printf_i+0xfa>
 8008b66:	6821      	ldr	r1, [r4, #0]
 8008b68:	6833      	ldr	r3, [r6, #0]
 8008b6a:	0608      	lsls	r0, r1, #24
 8008b6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b70:	d402      	bmi.n	8008b78 <_printf_i+0xe8>
 8008b72:	0649      	lsls	r1, r1, #25
 8008b74:	bf48      	it	mi
 8008b76:	b2ad      	uxthmi	r5, r5
 8008b78:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b7a:	4853      	ldr	r0, [pc, #332]	@ (8008cc8 <_printf_i+0x238>)
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	bf14      	ite	ne
 8008b80:	230a      	movne	r3, #10
 8008b82:	2308      	moveq	r3, #8
 8008b84:	2100      	movs	r1, #0
 8008b86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b8a:	6866      	ldr	r6, [r4, #4]
 8008b8c:	60a6      	str	r6, [r4, #8]
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	bfa2      	ittt	ge
 8008b92:	6821      	ldrge	r1, [r4, #0]
 8008b94:	f021 0104 	bicge.w	r1, r1, #4
 8008b98:	6021      	strge	r1, [r4, #0]
 8008b9a:	b90d      	cbnz	r5, 8008ba0 <_printf_i+0x110>
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	d04b      	beq.n	8008c38 <_printf_i+0x1a8>
 8008ba0:	4616      	mov	r6, r2
 8008ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8008baa:	5dc7      	ldrb	r7, [r0, r7]
 8008bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bb0:	462f      	mov	r7, r5
 8008bb2:	42bb      	cmp	r3, r7
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	d9f4      	bls.n	8008ba2 <_printf_i+0x112>
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d10b      	bne.n	8008bd4 <_printf_i+0x144>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	07df      	lsls	r7, r3, #31
 8008bc0:	d508      	bpl.n	8008bd4 <_printf_i+0x144>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	6861      	ldr	r1, [r4, #4]
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	bfde      	ittt	le
 8008bca:	2330      	movle	r3, #48	@ 0x30
 8008bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bd4:	1b92      	subs	r2, r2, r6
 8008bd6:	6122      	str	r2, [r4, #16]
 8008bd8:	f8cd a000 	str.w	sl, [sp]
 8008bdc:	464b      	mov	r3, r9
 8008bde:	aa03      	add	r2, sp, #12
 8008be0:	4621      	mov	r1, r4
 8008be2:	4640      	mov	r0, r8
 8008be4:	f7ff fee6 	bl	80089b4 <_printf_common>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d14a      	bne.n	8008c82 <_printf_i+0x1f2>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	b004      	add	sp, #16
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	f043 0320 	orr.w	r3, r3, #32
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	4833      	ldr	r0, [pc, #204]	@ (8008ccc <_printf_i+0x23c>)
 8008c00:	2778      	movs	r7, #120	@ 0x78
 8008c02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	6831      	ldr	r1, [r6, #0]
 8008c0a:	061f      	lsls	r7, r3, #24
 8008c0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c10:	d402      	bmi.n	8008c18 <_printf_i+0x188>
 8008c12:	065f      	lsls	r7, r3, #25
 8008c14:	bf48      	it	mi
 8008c16:	b2ad      	uxthmi	r5, r5
 8008c18:	6031      	str	r1, [r6, #0]
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	bf44      	itt	mi
 8008c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c22:	6023      	strmi	r3, [r4, #0]
 8008c24:	b11d      	cbz	r5, 8008c2e <_printf_i+0x19e>
 8008c26:	2310      	movs	r3, #16
 8008c28:	e7ac      	b.n	8008b84 <_printf_i+0xf4>
 8008c2a:	4827      	ldr	r0, [pc, #156]	@ (8008cc8 <_printf_i+0x238>)
 8008c2c:	e7e9      	b.n	8008c02 <_printf_i+0x172>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	f023 0320 	bic.w	r3, r3, #32
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	e7f6      	b.n	8008c26 <_printf_i+0x196>
 8008c38:	4616      	mov	r6, r2
 8008c3a:	e7bd      	b.n	8008bb8 <_printf_i+0x128>
 8008c3c:	6833      	ldr	r3, [r6, #0]
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	6961      	ldr	r1, [r4, #20]
 8008c42:	1d18      	adds	r0, r3, #4
 8008c44:	6030      	str	r0, [r6, #0]
 8008c46:	062e      	lsls	r6, r5, #24
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	d501      	bpl.n	8008c50 <_printf_i+0x1c0>
 8008c4c:	6019      	str	r1, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <_printf_i+0x1c6>
 8008c50:	0668      	lsls	r0, r5, #25
 8008c52:	d5fb      	bpl.n	8008c4c <_printf_i+0x1bc>
 8008c54:	8019      	strh	r1, [r3, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	4616      	mov	r6, r2
 8008c5c:	e7bc      	b.n	8008bd8 <_printf_i+0x148>
 8008c5e:	6833      	ldr	r3, [r6, #0]
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	6032      	str	r2, [r6, #0]
 8008c64:	681e      	ldr	r6, [r3, #0]
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7f7 faf0 	bl	8000250 <memchr>
 8008c70:	b108      	cbz	r0, 8008c76 <_printf_i+0x1e6>
 8008c72:	1b80      	subs	r0, r0, r6
 8008c74:	6060      	str	r0, [r4, #4]
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	6123      	str	r3, [r4, #16]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c80:	e7aa      	b.n	8008bd8 <_printf_i+0x148>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	4632      	mov	r2, r6
 8008c86:	4649      	mov	r1, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	47d0      	blx	sl
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d0ad      	beq.n	8008bec <_printf_i+0x15c>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	079b      	lsls	r3, r3, #30
 8008c94:	d413      	bmi.n	8008cbe <_printf_i+0x22e>
 8008c96:	68e0      	ldr	r0, [r4, #12]
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	bfb8      	it	lt
 8008c9e:	4618      	movlt	r0, r3
 8008ca0:	e7a6      	b.n	8008bf0 <_printf_i+0x160>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	47d0      	blx	sl
 8008cac:	3001      	adds	r0, #1
 8008cae:	d09d      	beq.n	8008bec <_printf_i+0x15c>
 8008cb0:	3501      	adds	r5, #1
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	9903      	ldr	r1, [sp, #12]
 8008cb6:	1a5b      	subs	r3, r3, r1
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dcf2      	bgt.n	8008ca2 <_printf_i+0x212>
 8008cbc:	e7eb      	b.n	8008c96 <_printf_i+0x206>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	f104 0619 	add.w	r6, r4, #25
 8008cc4:	e7f5      	b.n	8008cb2 <_printf_i+0x222>
 8008cc6:	bf00      	nop
 8008cc8:	08008f89 	.word	0x08008f89
 8008ccc:	08008f9a 	.word	0x08008f9a

08008cd0 <memmove>:
 8008cd0:	4288      	cmp	r0, r1
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	eb01 0402 	add.w	r4, r1, r2
 8008cd8:	d902      	bls.n	8008ce0 <memmove+0x10>
 8008cda:	4284      	cmp	r4, r0
 8008cdc:	4623      	mov	r3, r4
 8008cde:	d807      	bhi.n	8008cf0 <memmove+0x20>
 8008ce0:	1e43      	subs	r3, r0, #1
 8008ce2:	42a1      	cmp	r1, r4
 8008ce4:	d008      	beq.n	8008cf8 <memmove+0x28>
 8008ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cee:	e7f8      	b.n	8008ce2 <memmove+0x12>
 8008cf0:	4402      	add	r2, r0
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	d100      	bne.n	8008cfa <memmove+0x2a>
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d02:	e7f7      	b.n	8008cf4 <memmove+0x24>

08008d04 <_sbrk_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d06      	ldr	r5, [pc, #24]	@ (8008d20 <_sbrk_r+0x1c>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f8 fa34 	bl	800117c <_sbrk>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_sbrk_r+0x1a>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_sbrk_r+0x1a>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	20005390 	.word	0x20005390

08008d24 <_realloc_r>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4615      	mov	r5, r2
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	b921      	cbnz	r1, 8008d3a <_realloc_r+0x16>
 8008d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	4611      	mov	r1, r2
 8008d36:	f7ff bc59 	b.w	80085ec <_malloc_r>
 8008d3a:	b92a      	cbnz	r2, 8008d48 <_realloc_r+0x24>
 8008d3c:	f7ff fbea 	bl	8008514 <_free_r>
 8008d40:	2400      	movs	r4, #0
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	f000 f81a 	bl	8008d80 <_malloc_usable_size_r>
 8008d4c:	4285      	cmp	r5, r0
 8008d4e:	4606      	mov	r6, r0
 8008d50:	d802      	bhi.n	8008d58 <_realloc_r+0x34>
 8008d52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d56:	d8f4      	bhi.n	8008d42 <_realloc_r+0x1e>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f7ff fc46 	bl	80085ec <_malloc_r>
 8008d60:	4607      	mov	r7, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d0ec      	beq.n	8008d40 <_realloc_r+0x1c>
 8008d66:	42b5      	cmp	r5, r6
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	bf28      	it	cs
 8008d6e:	4632      	movcs	r2, r6
 8008d70:	f7ff fbc2 	bl	80084f8 <memcpy>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff fbcc 	bl	8008514 <_free_r>
 8008d7c:	463c      	mov	r4, r7
 8008d7e:	e7e0      	b.n	8008d42 <_realloc_r+0x1e>

08008d80 <_malloc_usable_size_r>:
 8008d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d84:	1f18      	subs	r0, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bfbc      	itt	lt
 8008d8a:	580b      	ldrlt	r3, [r1, r0]
 8008d8c:	18c0      	addlt	r0, r0, r3
 8008d8e:	4770      	bx	lr

08008d90 <_init>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr

08008d9c <_fini>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	bf00      	nop
 8008da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da2:	bc08      	pop	{r3}
 8008da4:	469e      	mov	lr, r3
 8008da6:	4770      	bx	lr
