
Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008798  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008998  08008998  00009998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b30  08008b30  0000a1a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b30  08008b30  00009b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b38  08008b38  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b38  08008b38  00009b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b3c  08008b3c  00009b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008b40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008ba0  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008c40  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005200  200001a0  08008ce0  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200053a0  08008ce0  0000a3a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022439  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000427d  00000000  00000000  0002c607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a50  00000000  00000000  00030888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001481  00000000  00000000  000322d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000046a9  00000000  00000000  00033759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f603  00000000  00000000  00037e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dd1d  00000000  00000000  00057405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00165122  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000750c  00000000  00000000  00165168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  0016c674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008980 	.word	0x08008980

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008980 	.word	0x08008980

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fdbb 	bl	800115e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f842 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f95e 	bl	80008ac <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f8b0 	bl	8000754 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f8fc 	bl	80007f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f92a 	bl	8000850 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f004 f9fc 	bl	80049f8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000600:	4810      	ldr	r0, [pc, #64]	@ (8000644 <main+0x64>)
 8000602:	f004 fb37 	bl	8004c74 <osMutexNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <main+0x68>)
 800060a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mtTask01 */
  mtTask01Handle = osThreadNew(StartTask01, NULL, &mtTask01_attributes);
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <main+0x6c>)
 800060e:	2100      	movs	r1, #0
 8000610:	480f      	ldr	r0, [pc, #60]	@ (8000650 <main+0x70>)
 8000612:	f004 fa5b 	bl	8004acc <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <main+0x74>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800061c:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <main+0x78>)
 800061e:	2100      	movs	r1, #0
 8000620:	480e      	ldr	r0, [pc, #56]	@ (800065c <main+0x7c>)
 8000622:	f004 fa53 	bl	8004acc <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <main+0x80>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <main+0x84>)
 800062e:	2100      	movs	r1, #0
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <main+0x88>)
 8000632:	f004 fa4b 	bl	8004acc <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0c      	ldr	r2, [pc, #48]	@ (800066c <main+0x8c>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f004 fa10 	bl	8004a60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x60>
 8000644:	08008ad4 	.word	0x08008ad4
 8000648:	20000818 	.word	0x20000818
 800064c:	08008a68 	.word	0x08008a68
 8000650:	080009f1 	.word	0x080009f1
 8000654:	2000080c 	.word	0x2000080c
 8000658:	08008a8c 	.word	0x08008a8c
 800065c:	08000a65 	.word	0x08000a65
 8000660:	20000810 	.word	0x20000810
 8000664:	08008ab0 	.word	0x08008ab0
 8000668:	08000af1 	.word	0x08000af1
 800066c:	20000814 	.word	0x20000814

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	@ 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f007 fca8 	bl	8007fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000694:	f001 fcfe 	bl	8002094 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <SystemClock_Config+0xdc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <SystemClock_Config+0xdc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <SystemClock_Config+0xdc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <SystemClock_Config+0xe0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b8:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <SystemClock_Config+0xe0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <SystemClock_Config+0xe0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e4:	2360      	movs	r3, #96	@ 0x60
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fd2b 	bl	8002154 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000704:	f000 fa5a 	bl	8000bbc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000708:	f001 fcd4 	bl	80020b4 <HAL_PWREx_EnableOverDrive>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000712:	f000 fa53 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2103      	movs	r1, #3
 8000732:	4618      	mov	r0, r3
 8000734:	f001 ffbc 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800073e:	f000 fa3d 	bl	8000bbc <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ETH_Init+0x84>)
 800075a:	4a20      	ldr	r2, [pc, #128]	@ (80007dc <MX_ETH_Init+0x88>)
 800075c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <MX_ETH_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_ETH_Init+0x8c>)
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <MX_ETH_Init+0x8c>)
 800076c:	22e1      	movs	r2, #225	@ 0xe1
 800076e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_ETH_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_ETH_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_ETH_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_ETH_Init+0x84>)
 8000784:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <MX_ETH_Init+0x8c>)
 8000786:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_ETH_Init+0x84>)
 800078a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800078e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_ETH_Init+0x84>)
 8000792:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <MX_ETH_Init+0x90>)
 8000794:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <MX_ETH_Init+0x84>)
 8000798:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <MX_ETH_Init+0x94>)
 800079a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_ETH_Init+0x84>)
 800079e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_ETH_Init+0x84>)
 80007a6:	f000 fe0d 	bl	80013c4 <HAL_ETH_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 fa04 	bl	8000bbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007b4:	2238      	movs	r2, #56	@ 0x38
 80007b6:	2100      	movs	r1, #0
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <MX_ETH_Init+0x98>)
 80007ba:	f007 fc0b 	bl	8007fd4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_ETH_Init+0x98>)
 80007c0:	2221      	movs	r2, #33	@ 0x21
 80007c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_ETH_Init+0x98>)
 80007c6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_ETH_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001f4 	.word	0x200001f4
 80007dc:	40028000 	.word	0x40028000
 80007e0:	2000081c 	.word	0x2000081c
 80007e4:	20000100 	.word	0x20000100
 80007e8:	20000060 	.word	0x20000060
 80007ec:	200001bc 	.word	0x200001bc

080007f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	@ (800084c <MX_USART3_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000834:	f003 f88a 	bl	800394c <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f9bd 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002a4 	.word	0x200002a4
 800084c:	40004800 	.word	0x40004800

08000850 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800085a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2206      	movs	r2, #6
 8000860:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2202      	movs	r2, #2
 8000866:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2202      	movs	r2, #2
 8000872:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2201      	movs	r2, #1
 8000878:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2201      	movs	r2, #1
 800088a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	f001 fac3 	bl	8001e1e <HAL_PCD_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f98d 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000032c 	.word	0x2000032c

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a46      	ldr	r2, [pc, #280]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b44      	ldr	r3, [pc, #272]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b41      	ldr	r3, [pc, #260]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a40      	ldr	r2, [pc, #256]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b3e      	ldr	r3, [pc, #248]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b3b      	ldr	r3, [pc, #236]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a3a      	ldr	r2, [pc, #232]	@ (80009e0 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a34      	ldr	r2, [pc, #208]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b32      	ldr	r3, [pc, #200]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a2e      	ldr	r2, [pc, #184]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <MX_GPIO_Init+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a28      	ldr	r2, [pc, #160]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000958:	4822      	ldr	r0, [pc, #136]	@ (80009e4 <MX_GPIO_Init+0x138>)
 800095a:	f001 fa2d 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2140      	movs	r1, #64	@ 0x40
 8000962:	4821      	ldr	r0, [pc, #132]	@ (80009e8 <MX_GPIO_Init+0x13c>)
 8000964:	f001 fa28 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	481b      	ldr	r0, [pc, #108]	@ (80009ec <MX_GPIO_Init+0x140>)
 8000980:	f001 f86e 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000984:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <MX_GPIO_Init+0x138>)
 800099e:	f001 f85f 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a2:	2340      	movs	r3, #64	@ 0x40
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <MX_GPIO_Init+0x13c>)
 80009ba:	f001 f851 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009be:	2380      	movs	r3, #128	@ 0x80
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_GPIO_Init+0x13c>)
 80009d2:	f001 f845 	bl	8001a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	@ 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40020800 	.word	0x40020800

080009f0 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	@ 0x50
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char buf[64];
  /* Infinite loop */
  for(;;)
  {
    osStatus status = osMutexAcquire(myMutex01Handle, osWaitForever);
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <StartTask01+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 f9d1 	bl	8004da8 <osMutexAcquire>
 8000a06:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if(status == osOK){
 8000a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d110      	bne.n	8000a30 <StartTask01+0x40>
    	snprintf(buf, sizeof(buf), "Executing Task 01... \r \n");
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4a11      	ldr	r2, [pc, #68]	@ (8000a58 <StartTask01+0x68>)
 8000a14:	2140      	movs	r1, #64	@ 0x40
 8000a16:	4618      	mov	r0, r3
 8000a18:	f007 faa8 	bl	8007f6c <sniprintf>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2101      	movs	r1, #1
 8000a20:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <StartTask01+0x6c>)
 8000a22:	f001 f9c9 	bl	8001db8 <HAL_GPIO_WritePin>
		osMutexRelease(myMutex01Handle);
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <StartTask01+0x64>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 fa1a 	bl	8004e64 <osMutexRelease>
	  }
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fc03 	bl	8000240 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f107 010c 	add.w	r1, r7, #12
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <StartTask01+0x70>)
 8000a48:	f002 ffce 	bl	80039e8 <HAL_UART_Transmit>
    osDelay(200);
 8000a4c:	20c8      	movs	r0, #200	@ 0xc8
 8000a4e:	f004 f8e3 	bl	8004c18 <osDelay>
  {
 8000a52:	e7d1      	b.n	80009f8 <StartTask01+0x8>
 8000a54:	20000818 	.word	0x20000818
 8000a58:	080089c8 	.word	0x080089c8
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	200002a4 	.word	0x200002a4

08000a64 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	@ 0x50
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	char buf[64];
  /* Infinite loop */
  for(;;)
  {
    osStatus_t status = osMutexAcquire(myMutex01Handle, osWaitForever);
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <StartTask02+0x7c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 f997 	bl	8004da8 <osMutexAcquire>
 8000a7a:	64b8      	str	r0, [r7, #72]	@ 0x48
    if(status == osOK){
 8000a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f4      	bne.n	8000a6c <StartTask02+0x8>
    	for(int i = 0; i<3; i++){
 8000a82:	2300      	movs	r3, #0
 8000a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000a86:	e01f      	b.n	8000ac8 <StartTask02+0x64>
			snprintf(buf, sizeof(buf), "Executing Task 02, cycle: %d \r \n", i);
 8000a88:	f107 0008 	add.w	r0, r7, #8
 8000a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <StartTask02+0x80>)
 8000a90:	2140      	movs	r1, #64	@ 0x40
 8000a92:	f007 fa6b 	bl	8007f6c <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fbd0 	bl	8000240 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f107 0108 	add.w	r1, r7, #8
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <StartTask02+0x84>)
 8000aae:	f002 ff9b 	bl	80039e8 <HAL_UART_Transmit>
			osDelay(800);
 8000ab2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000ab6:	f004 f8af 	bl	8004c18 <osDelay>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000aba:	2101      	movs	r1, #1
 8000abc:	480b      	ldr	r0, [pc, #44]	@ (8000aec <StartTask02+0x88>)
 8000abe:	f001 f994 	bl	8001dea <HAL_GPIO_TogglePin>
    	for(int i = 0; i<3; i++){
 8000ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	dddc      	ble.n	8000a88 <StartTask02+0x24>
		}
		osMutexRelease(myMutex01Handle);
 8000ace:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <StartTask02+0x7c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 f9c6 	bl	8004e64 <osMutexRelease>
		osDelay(200);
 8000ad8:	20c8      	movs	r0, #200	@ 0xc8
 8000ada:	f004 f89d 	bl	8004c18 <osDelay>
  {
 8000ade:	e7c5      	b.n	8000a6c <StartTask02+0x8>
 8000ae0:	20000818 	.word	0x20000818
 8000ae4:	080089e4 	.word	0x080089e4
 8000ae8:	200002a4 	.word	0x200002a4
 8000aec:	40020400 	.word	0x40020400

08000af0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	@ 0x50
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	char buf[64];
  /* Infinite loop */
  for(;;)
  {
    osStatus_t status = osMutexAcquire(myMutex01Handle, 2000U);
 8000af8:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <StartTask03+0x94>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f951 	bl	8004da8 <osMutexAcquire>
 8000b06:	64f8      	str	r0, [r7, #76]	@ 0x4c

    if(status == osOK){
 8000b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d11a      	bne.n	8000b44 <StartTask03+0x54>
    	snprintf(buf, sizeof(buf), "Executing Task 03... \r \n");
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <StartTask03+0x98>)
 8000b14:	2140      	movs	r1, #64	@ 0x40
 8000b16:	4618      	mov	r0, r3
 8000b18:	f007 fa28 	bl	8007f6c <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb8d 	bl	8000240 <strlen>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	f107 010c 	add.w	r1, r7, #12
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	4816      	ldr	r0, [pc, #88]	@ (8000b8c <StartTask03+0x9c>)
 8000b34:	f002 ff58 	bl	80039e8 <HAL_UART_Transmit>
		osMutexRelease(myMutex01Handle);
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <StartTask03+0x94>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 f991 	bl	8004e64 <osMutexRelease>
 8000b42:	e01a      	b.n	8000b7a <StartTask03+0x8a>
    }
    else{
    	snprintf(buf, sizeof(buf), "Task 03: Waiting for Mutex for too long \r \n");
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4a11      	ldr	r2, [pc, #68]	@ (8000b90 <StartTask03+0xa0>)
 8000b4a:	2140      	movs	r1, #64	@ 0x40
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f007 fa0d 	bl	8007f6c <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fb72 	bl	8000240 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f107 010c 	add.w	r1, r7, #12
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <StartTask03+0x9c>)
 8000b6a:	f002 ff3d 	bl	80039e8 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b74:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <StartTask03+0xa4>)
 8000b76:	f001 f91f 	bl	8001db8 <HAL_GPIO_WritePin>
    }
    osDelay(200);
 8000b7a:	20c8      	movs	r0, #200	@ 0xc8
 8000b7c:	f004 f84c 	bl	8004c18 <osDelay>
  {
 8000b80:	e7ba      	b.n	8000af8 <StartTask03+0x8>
 8000b82:	bf00      	nop
 8000b84:	20000818 	.word	0x20000818
 8000b88:	08008a08 	.word	0x08008a08
 8000b8c:	200002a4 	.word	0x200002a4
 8000b90:	08008a24 	.word	0x08008a24
 8000b94:	40020400 	.word	0x40020400

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 fae5 	bl	8001178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40001000 	.word	0x40001000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <Error_Handler+0x8>

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	f06f 0001 	mvn.w	r0, #1
 8000c06:	f000 fbb3 	bl	8001370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	@ 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a4e      	ldr	r2, [pc, #312]	@ (8000d70 <HAL_ETH_MspInit+0x158>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f040 8096 	bne.w	8000d68 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	4a4c      	ldr	r2, [pc, #304]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c48:	4b4a      	ldr	r3, [pc, #296]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c50:	623b      	str	r3, [r7, #32]
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	4b47      	ldr	r3, [pc, #284]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c58:	4a46      	ldr	r2, [pc, #280]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c60:	4b44      	ldr	r3, [pc, #272]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	4b41      	ldr	r3, [pc, #260]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	4a40      	ldr	r2, [pc, #256]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c78:	4b3e      	ldr	r3, [pc, #248]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	4a3a      	ldr	r2, [pc, #232]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c90:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b35      	ldr	r3, [pc, #212]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	4a34      	ldr	r2, [pc, #208]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca8:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	4a28      	ldr	r2, [pc, #160]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd8:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ce4:	2332      	movs	r3, #50	@ 0x32
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf4:	230b      	movs	r3, #11
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <HAL_ETH_MspInit+0x160>)
 8000d00:	f000 feae 	bl	8001a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d04:	2386      	movs	r3, #134	@ 0x86
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d14:	230b      	movs	r3, #11
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <HAL_ETH_MspInit+0x164>)
 8000d20:	f000 fe9e 	bl	8001a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d36:	230b      	movs	r3, #11
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	@ (8000d80 <HAL_ETH_MspInit+0x168>)
 8000d42:	f000 fe8d 	bl	8001a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d46:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d58:	230b      	movs	r3, #11
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <HAL_ETH_MspInit+0x16c>)
 8000d64:	f000 fe7c 	bl	8001a60 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	@ 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40028000 	.word	0x40028000
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40021800 	.word	0x40021800

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ae      	sub	sp, #184	@ 0xb8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2290      	movs	r2, #144	@ 0x90
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f007 f913 	bl	8007fd4 <memset>
  if(huart->Instance==USART3)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a22      	ldr	r2, [pc, #136]	@ (8000e3c <HAL_UART_MspInit+0xb4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d13c      	bne.n	8000e32 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 feca 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dd2:	f7ff fef3 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	4a19      	ldr	r2, [pc, #100]	@ (8000e40 <HAL_UART_MspInit+0xb8>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <HAL_UART_MspInit+0xb8>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_UART_MspInit+0xb8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a13      	ldr	r2, [pc, #76]	@ (8000e40 <HAL_UART_MspInit+0xb8>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e20:	2307      	movs	r3, #7
 8000e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e26:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <HAL_UART_MspInit+0xbc>)
 8000e2e:	f000 fe17 	bl	8001a60 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e32:	bf00      	nop
 8000e34:	37b8      	adds	r7, #184	@ 0xb8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40004800 	.word	0x40004800
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020c00 	.word	0x40020c00

08000e48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2290      	movs	r2, #144	@ 0x90
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 f8b3 	bl	8007fd4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e76:	d159      	bne.n	8000f2c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fe69 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e94:	f7ff fe92 	bl	8000bbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	4a25      	ldr	r2, [pc, #148]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea4:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eb0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eca:	230a      	movs	r3, #10
 8000ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4818      	ldr	r0, [pc, #96]	@ (8000f38 <HAL_PCD_MspInit+0xf0>)
 8000ed8:	f000 fdc2 	bl	8001a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <HAL_PCD_MspInit+0xf0>)
 8000ef8:	f000 fdb2 	bl	8001a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f06:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	4a06      	ldr	r2, [pc, #24]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <HAL_PCD_MspInit+0xec>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f2c:	bf00      	nop
 8000f2e:	37b8      	adds	r7, #184	@ 0xb8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f4c:	4b33      	ldr	r3, [pc, #204]	@ (800101c <HAL_InitTick+0xe0>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	4a32      	ldr	r2, [pc, #200]	@ (800101c <HAL_InitTick+0xe0>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f58:	4b30      	ldr	r3, [pc, #192]	@ (800101c <HAL_InitTick+0xe0>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f64:	f107 0210 	add.w	r2, r7, #16
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fdc4 	bl	8002afc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f7e:	f001 fd95 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8000f82:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f84:	e004      	b.n	8000f90 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f86:	f001 fd91 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f92:	4a23      	ldr	r2, [pc, #140]	@ (8001020 <HAL_InitTick+0xe4>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	0c9b      	lsrs	r3, r3, #18
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <HAL_InitTick+0xec>)
 8000fa2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fa6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000faa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fac:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fc4:	4817      	ldr	r0, [pc, #92]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fc6:	f002 f9f3 	bl	80033b0 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d11b      	bne.n	8001010 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fd8:	4812      	ldr	r0, [pc, #72]	@ (8001024 <HAL_InitTick+0xe8>)
 8000fda:	f002 fa4b 	bl	8003474 <HAL_TIM_Base_Start_IT>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fe4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d111      	bne.n	8001010 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fec:	2036      	movs	r0, #54	@ 0x36
 8000fee:	f000 f9db 	bl	80013a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d808      	bhi.n	800100a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	2036      	movs	r0, #54	@ 0x36
 8000ffe:	f000 f9b7 	bl	8001370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_InitTick+0xf0>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e002      	b.n	8001010 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001010:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001014:	4618      	mov	r0, r3
 8001016:	3738      	adds	r7, #56	@ 0x38
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	431bde83 	.word	0x431bde83
 8001024:	20000824 	.word	0x20000824
 8001028:	40001000 	.word	0x40001000
 800102c:	20000004 	.word	0x20000004

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <NMI_Handler+0x4>

08001038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <MemManage_Handler+0x4>

08001048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <UsageFault_Handler+0x4>

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <TIM6_DAC_IRQHandler+0x10>)
 800106e:	f002 fa79 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000824 	.word	0x20000824

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f006 fff0 	bl	8008090 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20080000 	.word	0x20080000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	20000870 	.word	0x20000870
 80010e4:	200053a0 	.word	0x200053a0

080010e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001110:	f7ff ffea 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800113a:	f006 ffaf 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fa4f 	bl	80005e0 <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001150:	08008b40 	.word	0x08008b40
  ldr r2, =_sbss
 8001154:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001158:	200053a0 	.word	0x200053a0

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>

0800115e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001162:	2003      	movs	r0, #3
 8001164:	f000 f8f9 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001168:	200f      	movs	r0, #15
 800116a:	f7ff fee7 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116e:	f7ff fd2b 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000874 	.word	0x20000874

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000874 	.word	0x20000874

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	4313      	orrs	r3, r2
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	05fa0000 	.word	0x05fa0000

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	@ (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001382:	f7ff ff61 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001386:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff ffb1 	bl	80012f4 <NVIC_EncodePriority>
 8001392:	4602      	mov	r2, r0
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff80 	bl	80012a0 <__NVIC_SetPriority>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff54 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e086      	b.n	80014e4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2220      	movs	r2, #32
 80013e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fc15 	bl	8000c18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <HAL_ETH_Init+0x128>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	4a3e      	ldr	r2, [pc, #248]	@ (80014ec <HAL_ETH_Init+0x128>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fa:	4b3c      	ldr	r3, [pc, #240]	@ (80014ec <HAL_ETH_Init+0x128>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001406:	4b3a      	ldr	r3, [pc, #232]	@ (80014f0 <HAL_ETH_Init+0x12c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a39      	ldr	r2, [pc, #228]	@ (80014f0 <HAL_ETH_Init+0x12c>)
 800140c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001410:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001412:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <HAL_ETH_Init+0x12c>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4935      	ldr	r1, [pc, #212]	@ (80014f0 <HAL_ETH_Init+0x12c>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001420:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <HAL_ETH_Init+0x12c>)
 8001422:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800143a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff feb0 	bl	80011a0 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001442:	e011      	b.n	8001468 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001444:	f7ff feac 	bl	80011a0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001452:	d909      	bls.n	8001468 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	22e0      	movs	r2, #224	@ 0xe0
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e03d      	b.n	80014e4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e4      	bne.n	8001444 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f97a 	bl	8001774 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fa25 	bl	80018d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fa7b 	bl	8001982 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f9e3 	bl	8001860 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80014a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_ETH_Init+0x130>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80014ce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2210      	movs	r2, #16
 80014de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40013800 	.word	0x40013800
 80014f4:	00020060 	.word	0x00020060

080014f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4b53      	ldr	r3, [pc, #332]	@ (800165c <ETH_SetMACConfig+0x164>)
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7b9b      	ldrb	r3, [r3, #14]
 8001516:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	7c12      	ldrb	r2, [r2, #16]
 800151c:	2a00      	cmp	r2, #0
 800151e:	d102      	bne.n	8001526 <ETH_SetMACConfig+0x2e>
 8001520:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001524:	e000      	b.n	8001528 <ETH_SetMACConfig+0x30>
 8001526:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001528:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	7c52      	ldrb	r2, [r2, #17]
 800152e:	2a00      	cmp	r2, #0
 8001530:	d102      	bne.n	8001538 <ETH_SetMACConfig+0x40>
 8001532:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001536:	e000      	b.n	800153a <ETH_SetMACConfig+0x42>
 8001538:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800153a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001540:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	7fdb      	ldrb	r3, [r3, #31]
 8001546:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001548:	431a      	orrs	r2, r3
                        macconf->Speed |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800154e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	7f92      	ldrb	r2, [r2, #30]
 8001554:	2a00      	cmp	r2, #0
 8001556:	d102      	bne.n	800155e <ETH_SetMACConfig+0x66>
 8001558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800155c:	e000      	b.n	8001560 <ETH_SetMACConfig+0x68>
 800155e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001560:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	7f1b      	ldrb	r3, [r3, #28]
 8001566:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001568:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800156e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001576:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800157e:	2a00      	cmp	r2, #0
 8001580:	d102      	bne.n	8001588 <ETH_SetMACConfig+0x90>
 8001582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001586:	e000      	b.n	800158a <ETH_SetMACConfig+0x92>
 8001588:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800158a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	7bdb      	ldrb	r3, [r3, #15]
 8001590:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001592:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001598:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015a2:	4313      	orrs	r3, r2
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fdfc 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d101      	bne.n	80015ee <ETH_SetMACConfig+0xf6>
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0xf8>
 80015ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80015fe:	2a01      	cmp	r2, #1
 8001600:	d101      	bne.n	8001606 <ETH_SetMACConfig+0x10e>
 8001602:	2208      	movs	r2, #8
 8001604:	e000      	b.n	8001608 <ETH_SetMACConfig+0x110>
 8001606:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001608:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001610:	2a01      	cmp	r2, #1
 8001612:	d101      	bne.n	8001618 <ETH_SetMACConfig+0x120>
 8001614:	2204      	movs	r2, #4
 8001616:	e000      	b.n	800161a <ETH_SetMACConfig+0x122>
 8001618:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800161a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001622:	2a01      	cmp	r2, #1
 8001624:	d101      	bne.n	800162a <ETH_SetMACConfig+0x132>
 8001626:	2202      	movs	r2, #2
 8001628:	e000      	b.n	800162c <ETH_SetMACConfig+0x134>
 800162a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800162c:	4313      	orrs	r3, r2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fdb7 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	fd20810f 	.word	0xfd20810f

08001660 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <ETH_SetDMAConfig+0x110>)
 800167a:	4013      	ands	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	7b1b      	ldrb	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <ETH_SetDMAConfig+0x2c>
 8001686:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800168a:	e000      	b.n	800168e <ETH_SetDMAConfig+0x2e>
 800168c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7b5b      	ldrb	r3, [r3, #13]
 8001692:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001694:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	7f52      	ldrb	r2, [r2, #29]
 800169a:	2a00      	cmp	r2, #0
 800169c:	d102      	bne.n	80016a4 <ETH_SetDMAConfig+0x44>
 800169e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016a2:	e000      	b.n	80016a6 <ETH_SetDMAConfig+0x46>
 80016a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	7b9b      	ldrb	r3, [r3, #14]
 80016ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	7f1b      	ldrb	r3, [r3, #28]
 80016ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7f9b      	ldrb	r3, [r3, #30]
 80016c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016d4:	4313      	orrs	r3, r2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fd5e 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001704:	461a      	mov	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001714:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800171a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001720:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001728:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800172a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001732:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001738:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001742:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001746:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fd2f 	bl	80011b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	f8de3f23 	.word	0xf8de3f23

08001774 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0a6      	sub	sp, #152	@ 0x98
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017b6:	2300      	movs	r3, #0
 80017b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe7f 	bl	80014f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001802:	2301      	movs	r3, #1
 8001804:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001808:	2301      	movs	r3, #1
 800180a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001820:	2301      	movs	r3, #1
 8001822:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001826:	2301      	movs	r3, #1
 8001828:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800182a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800182e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001830:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001834:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800183c:	2301      	movs	r3, #1
 800183e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001842:	2300      	movs	r3, #0
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff05 	bl	8001660 <ETH_SetDMAConfig>
}
 8001856:	bf00      	nop
 8001858:	3798      	adds	r7, #152	@ 0x98
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3305      	adds	r3, #5
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	3204      	adds	r2, #4
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <ETH_MACAddressConfig+0x68>)
 8001882:	4413      	add	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3303      	adds	r3, #3
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	061a      	lsls	r2, r3, #24
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3302      	adds	r3, #2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3301      	adds	r3, #1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	4313      	orrs	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <ETH_MACAddressConfig+0x6c>)
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	bf00      	nop
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40028040 	.word	0x40028040
 80018cc:	40028044 	.word	0x40028044

080018d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e03e      	b.n	800195c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	3206      	adds	r2, #6
 8001910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d80c      	bhi.n	8001940 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68d9      	ldr	r1, [r3, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	461a      	mov	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	e004      	b.n	800194a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d9bd      	bls.n	80018de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001974:	611a      	str	r2, [r3, #16]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e048      	b.n	8001a22 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6919      	ldr	r1, [r3, #16]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80019cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	3212      	adds	r2, #18
 80019ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d80c      	bhi.n	8001a12 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	e004      	b.n	8001a1c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d9b3      	bls.n	8001990 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a52:	60da      	str	r2, [r3, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e175      	b.n	8001d6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8164 	bne.w	8001d66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_GPIO_Init+0x56>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80be 	beq.w	8001d66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b63      	ldr	r3, [pc, #396]	@ (8001d84 <HAL_GPIO_Init+0x324>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c02:	4a61      	ldr	r2, [pc, #388]	@ (8001d88 <HAL_GPIO_Init+0x328>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a58      	ldr	r2, [pc, #352]	@ (8001d8c <HAL_GPIO_Init+0x32c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d037      	beq.n	8001c9e <HAL_GPIO_Init+0x23e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a57      	ldr	r2, [pc, #348]	@ (8001d90 <HAL_GPIO_Init+0x330>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d031      	beq.n	8001c9a <HAL_GPIO_Init+0x23a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a56      	ldr	r2, [pc, #344]	@ (8001d94 <HAL_GPIO_Init+0x334>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x236>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a55      	ldr	r2, [pc, #340]	@ (8001d98 <HAL_GPIO_Init+0x338>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x232>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a54      	ldr	r2, [pc, #336]	@ (8001d9c <HAL_GPIO_Init+0x33c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x22e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a53      	ldr	r2, [pc, #332]	@ (8001da0 <HAL_GPIO_Init+0x340>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x22a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a52      	ldr	r2, [pc, #328]	@ (8001da4 <HAL_GPIO_Init+0x344>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x226>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a51      	ldr	r2, [pc, #324]	@ (8001da8 <HAL_GPIO_Init+0x348>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x222>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a50      	ldr	r2, [pc, #320]	@ (8001dac <HAL_GPIO_Init+0x34c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x21e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4f      	ldr	r2, [pc, #316]	@ (8001db0 <HAL_GPIO_Init+0x350>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x21a>
 8001c76:	2309      	movs	r3, #9
 8001c78:	e012      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	e010      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c7e:	2308      	movs	r3, #8
 8001c80:	e00e      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e00c      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00a      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x240>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	@ (8001d88 <HAL_GPIO_Init+0x328>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce2:	4a34      	ldr	r2, [pc, #208]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b32      	ldr	r3, [pc, #200]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d0c:	4a29      	ldr	r2, [pc, #164]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d12:	4b28      	ldr	r3, [pc, #160]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d36:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <HAL_GPIO_Init+0x354>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f ae86 	bls.w	8001a80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	@ 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40022400 	.word	0x40022400
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af02      	add	r7, sp, #8
 8001e24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e108      	b.n	8002042 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fffc 	bl	8000e48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2203      	movs	r2, #3
 8001e54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fb20 	bl	80044b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7c1a      	ldrb	r2, [r3, #16]
 8001e78:	f88d 2000 	strb.w	r2, [sp]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e80:	f002 fabc 	bl	80043fc <USB_CoreInit>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0d5      	b.n	8002042 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fb18 	bl	80044d2 <USB_SetCurrentMode>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0c6      	b.n	8002042 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e04a      	b.n	8001f50 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3315      	adds	r3, #21
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	3314      	adds	r3, #20
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	b298      	uxth	r0, r3
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	332e      	adds	r3, #46	@ 0x2e
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3318      	adds	r3, #24
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	331c      	adds	r3, #28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	3320      	adds	r3, #32
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	3324      	adds	r3, #36	@ 0x24
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	791b      	ldrb	r3, [r3, #4]
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d3af      	bcc.n	8001eba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	e044      	b.n	8001fea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	791b      	ldrb	r3, [r3, #4]
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d3b5      	bcc.n	8001f60 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7c1a      	ldrb	r2, [r3, #16]
 8001ffc:	f88d 2000 	strb.w	r2, [sp]
 8002000:	3304      	adds	r3, #4
 8002002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002004:	f002 fab2 	bl	800456c <USB_DevInit>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e013      	b.n	8002042 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7b1b      	ldrb	r3, [r3, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d102      	bne.n	8002036 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f80b 	bl	800204c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fc6d 	bl	800491a <USB_DevDisconnect>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800207a:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_PCDEx_ActivateLPM+0x44>)
 800207c:	4313      	orrs	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	10000003 	.word	0x10000003

08002094 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000

080020b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b23      	ldr	r3, [pc, #140]	@ (800214c <HAL_PWREx_EnableOverDrive+0x98>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a22      	ldr	r2, [pc, #136]	@ (800214c <HAL_PWREx_EnableOverDrive+0x98>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b20      	ldr	r3, [pc, #128]	@ (800214c <HAL_PWREx_EnableOverDrive+0x98>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e2:	f7ff f85d 	bl	80011a0 <HAL_GetTick>
 80020e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020e8:	e009      	b.n	80020fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020ea:	f7ff f859 	bl	80011a0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020f8:	d901      	bls.n	80020fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e022      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020fe:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800210a:	d1ee      	bne.n	80020ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002116:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002118:	f7ff f842 	bl	80011a0 <HAL_GetTick>
 800211c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800211e:	e009      	b.n	8002134 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002120:	f7ff f83e 	bl	80011a0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800212e:	d901      	bls.n	8002134 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e007      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002140:	d1ee      	bne.n	8002120 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e29b      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8087 	beq.w	8002286 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002178:	4b96      	ldr	r3, [pc, #600]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b04      	cmp	r3, #4
 8002182:	d00c      	beq.n	800219e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002184:	4b93      	ldr	r3, [pc, #588]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d112      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62>
 8002190:	4b90      	ldr	r3, [pc, #576]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800219c:	d10b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219e:	4b8d      	ldr	r3, [pc, #564]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06c      	beq.n	8002284 <HAL_RCC_OscConfig+0x130>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d168      	bne.n	8002284 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e275      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x7a>
 80021c0:	4b84      	ldr	r3, [pc, #528]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a83      	ldr	r2, [pc, #524]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e02e      	b.n	800222c <HAL_RCC_OscConfig+0xd8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x9c>
 80021d6:	4b7f      	ldr	r3, [pc, #508]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7e      	ldr	r2, [pc, #504]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b7c      	ldr	r3, [pc, #496]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7b      	ldr	r2, [pc, #492]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xd8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0xc0>
 80021fa:	4b76      	ldr	r3, [pc, #472]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a75      	ldr	r2, [pc, #468]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b73      	ldr	r3, [pc, #460]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a72      	ldr	r2, [pc, #456]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xd8>
 8002214:	4b6f      	ldr	r3, [pc, #444]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6e      	ldr	r2, [pc, #440]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b6c      	ldr	r3, [pc, #432]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6b      	ldr	r2, [pc, #428]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe ffb4 	bl	80011a0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe ffb0 	bl	80011a0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e229      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xe8>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe ffa0 	bl	80011a0 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe ff9c 	bl	80011a0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e215      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b57      	ldr	r3, [pc, #348]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x110>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d069      	beq.n	8002366 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002292:	4b50      	ldr	r3, [pc, #320]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b4d      	ldr	r3, [pc, #308]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x190>
 80022aa:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b47      	ldr	r3, [pc, #284]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x17a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1e9      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b41      	ldr	r3, [pc, #260]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	493d      	ldr	r1, [pc, #244]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e040      	b.n	8002366 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b39      	ldr	r3, [pc, #228]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a38      	ldr	r2, [pc, #224]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe ff52 	bl	80011a0 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe ff4e 	bl	80011a0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1c7      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002312:	4b30      	ldr	r3, [pc, #192]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b2d      	ldr	r3, [pc, #180]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4929      	ldr	r1, [pc, #164]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
 8002332:	e018      	b.n	8002366 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002334:	4b27      	ldr	r3, [pc, #156]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a26      	ldr	r2, [pc, #152]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe ff2e 	bl	80011a0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe ff2a 	bl	80011a0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1a3      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d038      	beq.n	80023e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d019      	beq.n	80023ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 800237c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237e:	4a15      	ldr	r2, [pc, #84]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe ff0b 	bl	80011a0 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe ff07 	bl	80011a0 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e180      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x23a>
 80023ac:	e01a      	b.n	80023e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HAL_RCC_OscConfig+0x280>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fef1 	bl	80011a0 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe feed 	bl	80011a0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d903      	bls.n	80023d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e166      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
 80023d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ee      	bne.n	80023c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a4 	beq.w	800253a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b89      	ldr	r3, [pc, #548]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a88      	ldr	r2, [pc, #544]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b86      	ldr	r3, [pc, #536]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241a:	4b83      	ldr	r3, [pc, #524]	@ (8002628 <HAL_RCC_OscConfig+0x4d4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002426:	4b80      	ldr	r3, [pc, #512]	@ (8002628 <HAL_RCC_OscConfig+0x4d4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7f      	ldr	r2, [pc, #508]	@ (8002628 <HAL_RCC_OscConfig+0x4d4>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7fe feb5 	bl	80011a0 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe feb1 	bl	80011a0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	@ 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e12a      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244c:	4b76      	ldr	r3, [pc, #472]	@ (8002628 <HAL_RCC_OscConfig+0x4d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x31a>
 8002460:	4b70      	ldr	r3, [pc, #448]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	4a6f      	ldr	r2, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	@ 0x70
 800246c:	e02d      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x33c>
 8002476:	4b6b      	ldr	r3, [pc, #428]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	4a6a      	ldr	r2, [pc, #424]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	@ 0x70
 8002482:	4b68      	ldr	r3, [pc, #416]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	4a67      	ldr	r2, [pc, #412]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	@ 0x70
 800248e:	e01c      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x35e>
 8002498:	4b62      	ldr	r3, [pc, #392]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249c:	4a61      	ldr	r2, [pc, #388]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a8:	4a5e      	ldr	r2, [pc, #376]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x376>
 80024b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024be:	4b59      	ldr	r3, [pc, #356]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	4a58      	ldr	r2, [pc, #352]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe65 	bl	80011a0 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fe61 	bl	80011a0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0d8      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ee      	beq.n	80024da <HAL_RCC_OscConfig+0x386>
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fe4f 	bl	80011a0 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe fe4b 	bl	80011a0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0c2      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251c:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a3c      	ldr	r2, [pc, #240]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80ae 	beq.w	80026a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002544:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d06d      	beq.n	800262c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d14b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b32      	ldr	r3, [pc, #200]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a31      	ldr	r2, [pc, #196]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fe1c 	bl	80011a0 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fe18 	bl	80011a0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e091      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	4b29      	ldr	r3, [pc, #164]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	019b      	lsls	r3, r3, #6
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	071b      	lsls	r3, r3, #28
 80025b6:	491b      	ldr	r1, [pc, #108]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025bc:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fdea 	bl	80011a0 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fde6 	bl	80011a0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e05f      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x47c>
 80025ee:	e057      	b.n	80026a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 80025f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fdd0 	bl	80011a0 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe fdcc 	bl	80011a0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e045      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x4b0>
 8002622:	e03d      	b.n	80026a0 <HAL_RCC_OscConfig+0x54c>
 8002624:	40023800 	.word	0x40023800
 8002628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800262c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ac <HAL_RCC_OscConfig+0x558>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d030      	beq.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d129      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d122      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002662:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002664:	4293      	cmp	r3, r2
 8002666:	d119      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	3b01      	subs	r3, #1
 8002676:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d10f      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002686:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d0      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b67      	ldr	r3, [pc, #412]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 020f 	bic.w	r2, r3, #15
 80026de:	4965      	ldr	r1, [pc, #404]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800271a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e073      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06b      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4936      	ldr	r1, [pc, #216]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fcfc 	bl	80011a0 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7fe fcf8 	bl	80011a0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e053      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4922      	ldr	r1, [pc, #136]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	@ (800287c <HAL_RCC_ClockConfig+0x1cc>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <HAL_RCC_ClockConfig+0x1d0>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_RCC_ClockConfig+0x1d4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fb6a 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00
 8002878:	40023800 	.word	0x40023800
 800287c:	08008ae4 	.word	0x08008ae4
 8002880:	20000000 	.word	0x20000000
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800288c:	b094      	sub	sp, #80	@ 0x50
 800288e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	647b      	str	r3, [r7, #68]	@ 0x44
 8002894:	2300      	movs	r3, #0
 8002896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002898:	2300      	movs	r3, #0
 800289a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a0:	4b79      	ldr	r3, [pc, #484]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d00d      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x40>
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	f200 80e1 	bhi.w	8002a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x34>
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ba:	e0db      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b73      	ldr	r3, [pc, #460]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c0:	e0db      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c2:	4b73      	ldr	r3, [pc, #460]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80028c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c6:	e0d8      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d063      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	4b6a      	ldr	r3, [pc, #424]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	2200      	movs	r2, #0
 80028e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028f2:	2300      	movs	r3, #0
 80028f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028fa:	4622      	mov	r2, r4
 80028fc:	462b      	mov	r3, r5
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	0159      	lsls	r1, r3, #5
 8002908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290c:	0150      	lsls	r0, r2, #5
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4621      	mov	r1, r4
 8002914:	1a51      	subs	r1, r2, r1
 8002916:	6139      	str	r1, [r7, #16]
 8002918:	4629      	mov	r1, r5
 800291a:	eb63 0301 	sbc.w	r3, r3, r1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292c:	4659      	mov	r1, fp
 800292e:	018b      	lsls	r3, r1, #6
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002936:	4651      	mov	r1, sl
 8002938:	018a      	lsls	r2, r1, #6
 800293a:	4651      	mov	r1, sl
 800293c:	ebb2 0801 	subs.w	r8, r2, r1
 8002940:	4659      	mov	r1, fp
 8002942:	eb63 0901 	sbc.w	r9, r3, r1
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800295a:	4690      	mov	r8, r2
 800295c:	4699      	mov	r9, r3
 800295e:	4623      	mov	r3, r4
 8002960:	eb18 0303 	adds.w	r3, r8, r3
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	462b      	mov	r3, r5
 8002968:	eb49 0303 	adc.w	r3, r9, r3
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800297a:	4629      	mov	r1, r5
 800297c:	024b      	lsls	r3, r1, #9
 800297e:	4621      	mov	r1, r4
 8002980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002984:	4621      	mov	r1, r4
 8002986:	024a      	lsls	r2, r1, #9
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002998:	f7fd fcaa 	bl	80002f0 <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029a4:	e058      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	2200      	movs	r2, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	4611      	mov	r1, r2
 80029b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80029bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029c0:	4642      	mov	r2, r8
 80029c2:	464b      	mov	r3, r9
 80029c4:	f04f 0000 	mov.w	r0, #0
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	0159      	lsls	r1, r3, #5
 80029ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d2:	0150      	lsls	r0, r2, #5
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4641      	mov	r1, r8
 80029da:	ebb2 0a01 	subs.w	sl, r2, r1
 80029de:	4649      	mov	r1, r9
 80029e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029f8:	ebb2 040a 	subs.w	r4, r2, sl
 80029fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	00eb      	lsls	r3, r5, #3
 8002a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a0e:	00e2      	lsls	r2, r4, #3
 8002a10:	4614      	mov	r4, r2
 8002a12:	461d      	mov	r5, r3
 8002a14:	4643      	mov	r3, r8
 8002a16:	18e3      	adds	r3, r4, r3
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	eb45 0303 	adc.w	r3, r5, r3
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	028b      	lsls	r3, r1, #10
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a38:	4621      	mov	r1, r4
 8002a3a:	028a      	lsls	r2, r1, #10
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a42:	2200      	movs	r2, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	61fa      	str	r2, [r7, #28]
 8002a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4c:	f7fd fc50 	bl	80002f0 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3750      	adds	r7, #80	@ 0x50
 8002a80:	46bd      	mov	sp, r7
 8002a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	007a1200 	.word	0x007a1200

08002a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	@ (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08008af4 	.word	0x08008af4

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08008af4 	.word	0x08008af4

08002afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	220f      	movs	r2, #15
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <HAL_RCC_GetClockConfig+0x60>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40023c00 	.word	0x40023c00

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d012      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b88:	4b69      	ldr	r3, [pc, #420]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a68      	ldr	r2, [pc, #416]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	4b66      	ldr	r3, [pc, #408]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9c:	4964      	ldr	r1, [pc, #400]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d017      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bba:	4b5d      	ldr	r3, [pc, #372]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	4959      	ldr	r1, [pc, #356]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd8:	d101      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d017      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bfc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	494a      	ldr	r1, [pc, #296]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c14:	d101      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 808b 	beq.w	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b3a      	ldr	r3, [pc, #232]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	4a39      	ldr	r2, [pc, #228]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c50:	4b37      	ldr	r3, [pc, #220]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c5c:	4b35      	ldr	r3, [pc, #212]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a34      	ldr	r2, [pc, #208]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c68:	f7fe fa9a 	bl	80011a0 <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c70:	f7fe fa96 	bl	80011a0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e38f      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c82:	4b2c      	ldr	r3, [pc, #176]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c8e:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d035      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d02e      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	4a1d      	ldr	r2, [pc, #116]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002cce:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cd4:	4b16      	ldr	r3, [pc, #88]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d114      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fa5e 	bl	80011a0 <HAL_GetTick>
 8002ce4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fa5a 	bl	80011a0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e351      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0ee      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d16:	d111      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d24:	4b04      	ldr	r3, [pc, #16]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d26:	400b      	ands	r3, r1
 8002d28:	4901      	ldr	r1, [pc, #4]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000
 8002d38:	0ffffcff 	.word	0x0ffffcff
 8002d3c:	4bac      	ldr	r3, [pc, #688]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4aab      	ldr	r2, [pc, #684]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d46:	6093      	str	r3, [r2, #8]
 8002d48:	4ba9      	ldr	r3, [pc, #676]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	49a6      	ldr	r1, [pc, #664]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d66:	4ba2      	ldr	r3, [pc, #648]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d6c:	4aa0      	ldr	r2, [pc, #640]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d76:	4b9e      	ldr	r3, [pc, #632]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	499b      	ldr	r1, [pc, #620]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d94:	4b96      	ldr	r3, [pc, #600]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da2:	4993      	ldr	r1, [pc, #588]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002db6:	4b8e      	ldr	r3, [pc, #568]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc4:	498a      	ldr	r1, [pc, #552]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dd8:	4b85      	ldr	r3, [pc, #532]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002de6:	4982      	ldr	r1, [pc, #520]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e08:	4979      	ldr	r1, [pc, #484]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e1c:	4b74      	ldr	r3, [pc, #464]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	4971      	ldr	r1, [pc, #452]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e44:	f023 020c 	bic.w	r2, r3, #12
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4c:	4968      	ldr	r1, [pc, #416]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e60:	4b63      	ldr	r3, [pc, #396]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	4960      	ldr	r1, [pc, #384]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e82:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e90:	4957      	ldr	r1, [pc, #348]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ea4:	4b52      	ldr	r3, [pc, #328]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb2:	494f      	ldr	r1, [pc, #316]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	4946      	ldr	r1, [pc, #280]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ee8:	4b41      	ldr	r3, [pc, #260]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	493e      	ldr	r1, [pc, #248]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f0a:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f18:	4935      	ldr	r1, [pc, #212]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3a:	492d      	ldr	r1, [pc, #180]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d011      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f5c:	4924      	ldr	r1, [pc, #144]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f8e:	4b18      	ldr	r3, [pc, #96]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f94:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9c:	4914      	ldr	r1, [pc, #80]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc0:	490b      	ldr	r1, [pc, #44]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00f      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fda:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe4:	4902      	ldr	r1, [pc, #8]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fec:	e002      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003000:	4b8a      	ldr	r3, [pc, #552]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003006:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003010:	4986      	ldr	r1, [pc, #536]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003024:	4b81      	ldr	r3, [pc, #516]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003026:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800302a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003034:	497d      	ldr	r1, [pc, #500]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d006      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80d6 	beq.w	80031fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003050:	4b76      	ldr	r3, [pc, #472]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a75      	ldr	r2, [pc, #468]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003056:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800305a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800305c:	f7fe f8a0 	bl	80011a0 <HAL_GetTick>
 8003060:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003064:	f7fe f89c 	bl	80011a0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	@ 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e195      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003076:	4b6d      	ldr	r3, [pc, #436]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d021      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11d      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003096:	4b65      	ldr	r3, [pc, #404]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030a4:	4b61      	ldr	r3, [pc, #388]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030aa:	0e1b      	lsrs	r3, r3, #24
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	019a      	lsls	r2, r3, #6
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	071b      	lsls	r3, r3, #28
 80030ca:	4958      	ldr	r1, [pc, #352]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d02e      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fc:	d129      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030fe:	4b4b      	ldr	r3, [pc, #300]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800310c:	4b47      	ldr	r3, [pc, #284]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003112:	0f1b      	lsrs	r3, r3, #28
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	019a      	lsls	r2, r3, #6
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	431a      	orrs	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	493e      	ldr	r1, [pc, #248]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800313a:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003140:	f023 021f 	bic.w	r2, r3, #31
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	3b01      	subs	r3, #1
 800314a:	4938      	ldr	r1, [pc, #224]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01d      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800315e:	4b33      	ldr	r3, [pc, #204]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003164:	0e1b      	lsrs	r3, r3, #24
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800316c:	4b2f      	ldr	r3, [pc, #188]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003172:	0f1b      	lsrs	r3, r3, #28
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	019a      	lsls	r2, r3, #6
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	061b      	lsls	r3, r3, #24
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	071b      	lsls	r3, r3, #28
 8003192:	4926      	ldr	r1, [pc, #152]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d011      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	019a      	lsls	r2, r3, #6
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	071b      	lsls	r3, r3, #28
 80031c2:	491a      	ldr	r1, [pc, #104]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ca:	4b18      	ldr	r3, [pc, #96]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a17      	ldr	r2, [pc, #92]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d6:	f7fd ffe3 	bl	80011a0 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031de:	f7fd ffdf 	bl	80011a0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	@ 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0d8      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031f0:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 80ce 	bne.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003204:	4b09      	ldr	r3, [pc, #36]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a08      	ldr	r2, [pc, #32]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003210:	f7fd ffc6 	bl	80011a0 <HAL_GetTick>
 8003214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003216:	e00b      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003218:	f7fd ffc2 	bl	80011a0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	@ 0x64
 8003224:	d904      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0bb      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003230:	4b5e      	ldr	r3, [pc, #376]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800323c:	d0ec      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d12a      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003266:	4b51      	ldr	r3, [pc, #324]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003274:	4b4d      	ldr	r3, [pc, #308]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	0f1b      	lsrs	r3, r3, #28
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	019a      	lsls	r2, r3, #6
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	431a      	orrs	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	071b      	lsls	r3, r3, #28
 800329a:	4944      	ldr	r1, [pc, #272]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032a2:	4b42      	ldr	r3, [pc, #264]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	493d      	ldr	r1, [pc, #244]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d022      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032d0:	d11d      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032d2:	4b36      	ldr	r3, [pc, #216]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d8:	0e1b      	lsrs	r3, r3, #24
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032e0:	4b32      	ldr	r3, [pc, #200]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e6:	0f1b      	lsrs	r3, r3, #28
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	019a      	lsls	r2, r3, #6
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	431a      	orrs	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	071b      	lsls	r3, r3, #28
 8003306:	4929      	ldr	r1, [pc, #164]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d028      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800331a:	4b24      	ldr	r3, [pc, #144]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	0e1b      	lsrs	r3, r3, #24
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003328:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332e:	0c1b      	lsrs	r3, r3, #16
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	019a      	lsls	r2, r3, #6
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	431a      	orrs	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	071b      	lsls	r3, r3, #28
 800334e:	4917      	ldr	r1, [pc, #92]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800335c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	4911      	ldr	r1, [pc, #68]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800336c:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0e      	ldr	r2, [pc, #56]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fd ff12 	bl	80011a0 <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003380:	f7fd ff0e 	bl	80011a0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	@ 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e007      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800339a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800339e:	d1ef      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800

080033b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e049      	b.n	8003456 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f841 	bl	800345e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f000 f9e8 	bl	80037c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e054      	b.n	8003536 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a26      	ldr	r2, [pc, #152]	@ (8003544 <HAL_TIM_Base_Start_IT+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b6:	d01d      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a22      	ldr	r2, [pc, #136]	@ (8003548 <HAL_TIM_Base_Start_IT+0xd4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	@ (800354c <HAL_TIM_Base_Start_IT+0xd8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003550 <HAL_TIM_Base_Start_IT+0xdc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1e      	ldr	r2, [pc, #120]	@ (8003554 <HAL_TIM_Base_Start_IT+0xe0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003558 <HAL_TIM_Base_Start_IT+0xe4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x80>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	@ (800355c <HAL_TIM_Base_Start_IT+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d115      	bne.n	8003520 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_TIM_Base_Start_IT+0xec>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d015      	beq.n	8003532 <HAL_TIM_Base_Start_IT+0xbe>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350c:	d011      	beq.n	8003532 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351e:	e008      	b.n	8003532 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e000      	b.n	8003534 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40014000 	.word	0x40014000
 800355c:	40001800 	.word	0x40001800
 8003560:	00010007 	.word	0x00010007

08003564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0202 	mvn.w	r2, #2
 8003598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8e9 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8db 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8ec 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0204 	mvn.w	r2, #4
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8c3 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8b5 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f8c6 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0208 	mvn.w	r2, #8
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f89d 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f88f 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8a0 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0210 	mvn.w	r2, #16
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2208      	movs	r2, #8
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f877 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f869 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f87a 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0201 	mvn.w	r2, #1
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd fa64 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f913 	bl	8003924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00c      	beq.n	8003722 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f90b 	bl	8003938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f834 	bl	80037ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0220 	mvn.w	r2, #32
 8003762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8d3 	bl	8003910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a43      	ldr	r2, [pc, #268]	@ (80038e4 <TIM_Base_SetConfig+0x120>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e2:	d00f      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a40      	ldr	r2, [pc, #256]	@ (80038e8 <TIM_Base_SetConfig+0x124>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3f      	ldr	r2, [pc, #252]	@ (80038ec <TIM_Base_SetConfig+0x128>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3e      	ldr	r2, [pc, #248]	@ (80038f0 <TIM_Base_SetConfig+0x12c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3d      	ldr	r2, [pc, #244]	@ (80038f4 <TIM_Base_SetConfig+0x130>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d108      	bne.n	8003816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a32      	ldr	r2, [pc, #200]	@ (80038e4 <TIM_Base_SetConfig+0x120>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003824:	d027      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2f      	ldr	r2, [pc, #188]	@ (80038e8 <TIM_Base_SetConfig+0x124>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d023      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2e      	ldr	r2, [pc, #184]	@ (80038ec <TIM_Base_SetConfig+0x128>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01f      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2d      	ldr	r2, [pc, #180]	@ (80038f0 <TIM_Base_SetConfig+0x12c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2c      	ldr	r2, [pc, #176]	@ (80038f4 <TIM_Base_SetConfig+0x130>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d017      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2b      	ldr	r2, [pc, #172]	@ (80038f8 <TIM_Base_SetConfig+0x134>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <TIM_Base_SetConfig+0x138>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00f      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a29      	ldr	r2, [pc, #164]	@ (8003900 <TIM_Base_SetConfig+0x13c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a28      	ldr	r2, [pc, #160]	@ (8003904 <TIM_Base_SetConfig+0x140>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a27      	ldr	r2, [pc, #156]	@ (8003908 <TIM_Base_SetConfig+0x144>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a26      	ldr	r2, [pc, #152]	@ (800390c <TIM_Base_SetConfig+0x148>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a0e      	ldr	r2, [pc, #56]	@ (80038e4 <TIM_Base_SetConfig+0x120>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0xf2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a10      	ldr	r2, [pc, #64]	@ (80038f4 <TIM_Base_SetConfig+0x130>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d103      	bne.n	80038be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	40001800 	.word	0x40001800
 8003908:	40001c00 	.word	0x40001c00
 800390c:	40002000 	.word	0x40002000

08003910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e040      	b.n	80039e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fa0a 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2224      	movs	r2, #36	@ 0x24
 8003978:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fb16 	bl	8003fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8af 	bl	8003afc <UART_SetConfig>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01b      	b.n	80039e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fb95 	bl	8004108 <UART_CheckIdleState>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d177      	bne.n	8003af0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_UART_Transmit+0x24>
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e070      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2221      	movs	r2, #33	@ 0x21
 8003a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1e:	f7fd fbbf 	bl	80011a0 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a3c:	d108      	bne.n	8003a50 <HAL_UART_Transmit+0x68>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	e003      	b.n	8003a58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a58:	e02f      	b.n	8003aba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fbf7 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e03b      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3302      	adds	r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e007      	b.n	8003aa8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1c9      	bne.n	8003a5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	@ 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fbc1 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e005      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4ba6      	ldr	r3, [pc, #664]	@ (8003dc0 <UART_SetConfig+0x2c4>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	6979      	ldr	r1, [r7, #20]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a94      	ldr	r2, [pc, #592]	@ (8003dc4 <UART_SetConfig+0x2c8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d120      	bne.n	8003bba <UART_SetConfig+0xbe>
 8003b78:	4b93      	ldr	r3, [pc, #588]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d816      	bhi.n	8003bb4 <UART_SetConfig+0xb8>
 8003b86:	a201      	add	r2, pc, #4	@ (adr r2, 8003b8c <UART_SetConfig+0x90>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003ba9 	.word	0x08003ba9
 8003b94:	08003ba3 	.word	0x08003ba3
 8003b98:	08003baf 	.word	0x08003baf
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e150      	b.n	8003e44 <UART_SetConfig+0x348>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e14d      	b.n	8003e44 <UART_SetConfig+0x348>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e14a      	b.n	8003e44 <UART_SetConfig+0x348>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e147      	b.n	8003e44 <UART_SetConfig+0x348>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e144      	b.n	8003e44 <UART_SetConfig+0x348>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a83      	ldr	r2, [pc, #524]	@ (8003dcc <UART_SetConfig+0x2d0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d132      	bne.n	8003c2a <UART_SetConfig+0x12e>
 8003bc4:	4b80      	ldr	r3, [pc, #512]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d828      	bhi.n	8003c24 <UART_SetConfig+0x128>
 8003bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd8 <UART_SetConfig+0xdc>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003c25 	.word	0x08003c25
 8003be0:	08003c25 	.word	0x08003c25
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c19 	.word	0x08003c19
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c13 	.word	0x08003c13
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c25 	.word	0x08003c25
 8003c08:	08003c1f 	.word	0x08003c1f
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e118      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c12:	2302      	movs	r3, #2
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e115      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e112      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c1e:	2308      	movs	r3, #8
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e10f      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c24:	2310      	movs	r3, #16
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e10c      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a68      	ldr	r2, [pc, #416]	@ (8003dd0 <UART_SetConfig+0x2d4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d120      	bne.n	8003c76 <UART_SetConfig+0x17a>
 8003c34:	4b64      	ldr	r3, [pc, #400]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c3e:	2b30      	cmp	r3, #48	@ 0x30
 8003c40:	d013      	beq.n	8003c6a <UART_SetConfig+0x16e>
 8003c42:	2b30      	cmp	r3, #48	@ 0x30
 8003c44:	d814      	bhi.n	8003c70 <UART_SetConfig+0x174>
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d009      	beq.n	8003c5e <UART_SetConfig+0x162>
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d810      	bhi.n	8003c70 <UART_SetConfig+0x174>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <UART_SetConfig+0x15c>
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d006      	beq.n	8003c64 <UART_SetConfig+0x168>
 8003c56:	e00b      	b.n	8003c70 <UART_SetConfig+0x174>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e0f2      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	77fb      	strb	r3, [r7, #31]
 8003c62:	e0ef      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c64:	2304      	movs	r3, #4
 8003c66:	77fb      	strb	r3, [r7, #31]
 8003c68:	e0ec      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	77fb      	strb	r3, [r7, #31]
 8003c6e:	e0e9      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c70:	2310      	movs	r3, #16
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e0e6      	b.n	8003e44 <UART_SetConfig+0x348>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a56      	ldr	r2, [pc, #344]	@ (8003dd4 <UART_SetConfig+0x2d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d120      	bne.n	8003cc2 <UART_SetConfig+0x1c6>
 8003c80:	4b51      	ldr	r3, [pc, #324]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c8c:	d013      	beq.n	8003cb6 <UART_SetConfig+0x1ba>
 8003c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c90:	d814      	bhi.n	8003cbc <UART_SetConfig+0x1c0>
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d009      	beq.n	8003caa <UART_SetConfig+0x1ae>
 8003c96:	2b80      	cmp	r3, #128	@ 0x80
 8003c98:	d810      	bhi.n	8003cbc <UART_SetConfig+0x1c0>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <UART_SetConfig+0x1a8>
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	d006      	beq.n	8003cb0 <UART_SetConfig+0x1b4>
 8003ca2:	e00b      	b.n	8003cbc <UART_SetConfig+0x1c0>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e0cc      	b.n	8003e44 <UART_SetConfig+0x348>
 8003caa:	2302      	movs	r3, #2
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e0c9      	b.n	8003e44 <UART_SetConfig+0x348>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e0c6      	b.n	8003e44 <UART_SetConfig+0x348>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e0c3      	b.n	8003e44 <UART_SetConfig+0x348>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e0c0      	b.n	8003e44 <UART_SetConfig+0x348>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a44      	ldr	r2, [pc, #272]	@ (8003dd8 <UART_SetConfig+0x2dc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d125      	bne.n	8003d18 <UART_SetConfig+0x21c>
 8003ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cda:	d017      	beq.n	8003d0c <UART_SetConfig+0x210>
 8003cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ce0:	d817      	bhi.n	8003d12 <UART_SetConfig+0x216>
 8003ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce6:	d00b      	beq.n	8003d00 <UART_SetConfig+0x204>
 8003ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cec:	d811      	bhi.n	8003d12 <UART_SetConfig+0x216>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <UART_SetConfig+0x1fe>
 8003cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf6:	d006      	beq.n	8003d06 <UART_SetConfig+0x20a>
 8003cf8:	e00b      	b.n	8003d12 <UART_SetConfig+0x216>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e0a1      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d00:	2302      	movs	r3, #2
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e09e      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d06:	2304      	movs	r3, #4
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e09b      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e098      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d12:	2310      	movs	r3, #16
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e095      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003ddc <UART_SetConfig+0x2e0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d125      	bne.n	8003d6e <UART_SetConfig+0x272>
 8003d22:	4b29      	ldr	r3, [pc, #164]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d30:	d017      	beq.n	8003d62 <UART_SetConfig+0x266>
 8003d32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d36:	d817      	bhi.n	8003d68 <UART_SetConfig+0x26c>
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d3c:	d00b      	beq.n	8003d56 <UART_SetConfig+0x25a>
 8003d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d42:	d811      	bhi.n	8003d68 <UART_SetConfig+0x26c>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <UART_SetConfig+0x254>
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4c:	d006      	beq.n	8003d5c <UART_SetConfig+0x260>
 8003d4e:	e00b      	b.n	8003d68 <UART_SetConfig+0x26c>
 8003d50:	2301      	movs	r3, #1
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e076      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e073      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e070      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d62:	2308      	movs	r3, #8
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e06d      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e06a      	b.n	8003e44 <UART_SetConfig+0x348>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	@ (8003de0 <UART_SetConfig+0x2e4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d138      	bne.n	8003dea <UART_SetConfig+0x2ee>
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d86:	d017      	beq.n	8003db8 <UART_SetConfig+0x2bc>
 8003d88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d8c:	d82a      	bhi.n	8003de4 <UART_SetConfig+0x2e8>
 8003d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d92:	d00b      	beq.n	8003dac <UART_SetConfig+0x2b0>
 8003d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d98:	d824      	bhi.n	8003de4 <UART_SetConfig+0x2e8>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <UART_SetConfig+0x2aa>
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da2:	d006      	beq.n	8003db2 <UART_SetConfig+0x2b6>
 8003da4:	e01e      	b.n	8003de4 <UART_SetConfig+0x2e8>
 8003da6:	2300      	movs	r3, #0
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e04b      	b.n	8003e44 <UART_SetConfig+0x348>
 8003dac:	2302      	movs	r3, #2
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e048      	b.n	8003e44 <UART_SetConfig+0x348>
 8003db2:	2304      	movs	r3, #4
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e045      	b.n	8003e44 <UART_SetConfig+0x348>
 8003db8:	2308      	movs	r3, #8
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e042      	b.n	8003e44 <UART_SetConfig+0x348>
 8003dbe:	bf00      	nop
 8003dc0:	efff69f3 	.word	0xefff69f3
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40004400 	.word	0x40004400
 8003dd0:	40004800 	.word	0x40004800
 8003dd4:	40004c00 	.word	0x40004c00
 8003dd8:	40005000 	.word	0x40005000
 8003ddc:	40011400 	.word	0x40011400
 8003de0:	40007800 	.word	0x40007800
 8003de4:	2310      	movs	r3, #16
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e02c      	b.n	8003e44 <UART_SetConfig+0x348>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a72      	ldr	r2, [pc, #456]	@ (8003fb8 <UART_SetConfig+0x4bc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d125      	bne.n	8003e40 <UART_SetConfig+0x344>
 8003df4:	4b71      	ldr	r3, [pc, #452]	@ (8003fbc <UART_SetConfig+0x4c0>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dfe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e02:	d017      	beq.n	8003e34 <UART_SetConfig+0x338>
 8003e04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e08:	d817      	bhi.n	8003e3a <UART_SetConfig+0x33e>
 8003e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0e:	d00b      	beq.n	8003e28 <UART_SetConfig+0x32c>
 8003e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e14:	d811      	bhi.n	8003e3a <UART_SetConfig+0x33e>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <UART_SetConfig+0x326>
 8003e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e1e:	d006      	beq.n	8003e2e <UART_SetConfig+0x332>
 8003e20:	e00b      	b.n	8003e3a <UART_SetConfig+0x33e>
 8003e22:	2300      	movs	r3, #0
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e00d      	b.n	8003e44 <UART_SetConfig+0x348>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e00a      	b.n	8003e44 <UART_SetConfig+0x348>
 8003e2e:	2304      	movs	r3, #4
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e007      	b.n	8003e44 <UART_SetConfig+0x348>
 8003e34:	2308      	movs	r3, #8
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e004      	b.n	8003e44 <UART_SetConfig+0x348>
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e001      	b.n	8003e44 <UART_SetConfig+0x348>
 8003e40:	2310      	movs	r3, #16
 8003e42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e4c:	d15b      	bne.n	8003f06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e4e:	7ffb      	ldrb	r3, [r7, #31]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d828      	bhi.n	8003ea6 <UART_SetConfig+0x3aa>
 8003e54:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <UART_SetConfig+0x360>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e91 	.word	0x08003e91
 8003e68:	08003ea7 	.word	0x08003ea7
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08003ea7 	.word	0x08003ea7
 8003e74:	08003ea7 	.word	0x08003ea7
 8003e78:	08003ea7 	.word	0x08003ea7
 8003e7c:	08003e9f 	.word	0x08003e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e80:	f7fe fe14 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003e84:	61b8      	str	r0, [r7, #24]
        break;
 8003e86:	e013      	b.n	8003eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e88:	f7fe fe24 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8003e8c:	61b8      	str	r0, [r7, #24]
        break;
 8003e8e:	e00f      	b.n	8003eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e90:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc0 <UART_SetConfig+0x4c4>)
 8003e92:	61bb      	str	r3, [r7, #24]
        break;
 8003e94:	e00c      	b.n	8003eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e96:	f7fe fcf7 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8003e9a:	61b8      	str	r0, [r7, #24]
        break;
 8003e9c:	e008      	b.n	8003eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea2:	61bb      	str	r3, [r7, #24]
        break;
 8003ea4:	e004      	b.n	8003eb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77bb      	strb	r3, [r7, #30]
        break;
 8003eae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d074      	beq.n	8003fa0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	005a      	lsls	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b0f      	cmp	r3, #15
 8003ed0:	d916      	bls.n	8003f00 <UART_SetConfig+0x404>
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed8:	d212      	bcs.n	8003f00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f023 030f 	bic.w	r3, r3, #15
 8003ee2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	89fa      	ldrh	r2, [r7, #14]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	e04f      	b.n	8003fa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	77bb      	strb	r3, [r7, #30]
 8003f04:	e04c      	b.n	8003fa0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d828      	bhi.n	8003f5e <UART_SetConfig+0x462>
 8003f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <UART_SetConfig+0x418>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	08003f5f 	.word	0x08003f5f
 8003f24:	08003f4f 	.word	0x08003f4f
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f5f 	.word	0x08003f5f
 8003f30:	08003f5f 	.word	0x08003f5f
 8003f34:	08003f57 	.word	0x08003f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe fdb8 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003f3c:	61b8      	str	r0, [r7, #24]
        break;
 8003f3e:	e013      	b.n	8003f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f40:	f7fe fdc8 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8003f44:	61b8      	str	r0, [r7, #24]
        break;
 8003f46:	e00f      	b.n	8003f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <UART_SetConfig+0x4c4>)
 8003f4a:	61bb      	str	r3, [r7, #24]
        break;
 8003f4c:	e00c      	b.n	8003f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4e:	f7fe fc9b 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8003f52:	61b8      	str	r0, [r7, #24]
        break;
 8003f54:	e008      	b.n	8003f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5a:	61bb      	str	r3, [r7, #24]
        break;
 8003f5c:	e004      	b.n	8003f68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	77bb      	strb	r3, [r7, #30]
        break;
 8003f66:	bf00      	nop
    }

    if (pclk != 0U)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d018      	beq.n	8003fa0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	085a      	lsrs	r2, r3, #1
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	441a      	add	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d909      	bls.n	8003f9c <UART_SetConfig+0x4a0>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8e:	d205      	bcs.n	8003f9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e001      	b.n	8003fa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fac:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40007c00 	.word	0x40007c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	00f42400 	.word	0x00f42400

08003fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01a      	beq.n	80040da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c2:	d10a      	bne.n	80040da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b098      	sub	sp, #96	@ 0x60
 800410c:	af02      	add	r7, sp, #8
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004118:	f7fd f842 	bl	80011a0 <HAL_GetTick>
 800411c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d12e      	bne.n	800418a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800412c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f88c 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d021      	beq.n	800418a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415a:	653b      	str	r3, [r7, #80]	@ 0x50
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004164:	647b      	str	r3, [r7, #68]	@ 0x44
 8004166:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800416a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e6      	bne.n	8004146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e062      	b.n	8004250 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d149      	bne.n	800422c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004198:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a0:	2200      	movs	r2, #0
 80041a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f856 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03c      	beq.n	800422c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	623b      	str	r3, [r7, #32]
   return(result);
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e6      	bne.n	80041b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004204:	61fa      	str	r2, [r7, #28]
 8004206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	69b9      	ldr	r1, [r7, #24]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	617b      	str	r3, [r7, #20]
   return(result);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e011      	b.n	8004250 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3758      	adds	r7, #88	@ 0x58
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004268:	e04f      	b.n	800430a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d04b      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fc ff95 	bl	80011a0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <UART_WaitOnFlagUntilTimeout+0x30>
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e04e      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d037      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0xb2>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b80      	cmp	r3, #128	@ 0x80
 800429e:	d034      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b40      	cmp	r3, #64	@ 0x40
 80042a4:	d031      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d110      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2208      	movs	r2, #8
 80042ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f838 	bl	8004332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2208      	movs	r2, #8
 80042c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e029      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042e4:	d111      	bne.n	800430a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f81e 	bl	8004332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00f      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	d0a0      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004332:	b480      	push	{r7}
 8004334:	b095      	sub	sp, #84	@ 0x54
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004358:	643b      	str	r3, [r7, #64]	@ 0x40
 800435a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800435e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e6      	bne.n	800433a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	61fb      	str	r3, [r7, #28]
   return(result);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800438c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d118      	bne.n	80043da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0310 	bic.w	r3, r3, #16
 80043bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6979      	ldr	r1, [r7, #20]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	613b      	str	r3, [r7, #16]
   return(result);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043ee:	bf00      	nop
 80043f0:	3754      	adds	r7, #84	@ 0x54
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043fc:	b084      	sub	sp, #16
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	f107 001c 	add.w	r0, r7, #28
 800440a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800440e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004412:	2b01      	cmp	r3, #1
 8004414:	d121      	bne.n	800445a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	4b21      	ldr	r3, [pc, #132]	@ (80044ac <USB_CoreInit+0xb0>)
 8004428:	4013      	ands	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800443a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa92 	bl	8004978 <USB_CoreReset>
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e010      	b.n	800447c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa86 	bl	8004978 <USB_CoreReset>
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004474:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800447c:	7fbb      	ldrb	r3, [r7, #30]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d10b      	bne.n	800449a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f043 0206 	orr.w	r2, r3, #6
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800449a:	7bfb      	ldrb	r3, [r7, #15]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044a6:	b004      	add	sp, #16
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	ffbdffbf 	.word	0xffbdffbf

080044b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 0201 	bic.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d115      	bne.n	8004520 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004500:	200a      	movs	r0, #10
 8004502:	f7fc fe59 	bl	80011b8 <HAL_Delay>
      ms += 10U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	330a      	adds	r3, #10
 800450a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fa25 	bl	800495c <USB_GetMode>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	d01e      	beq.n	8004556 <USB_SetCurrentMode+0x84>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2bc7      	cmp	r3, #199	@ 0xc7
 800451c:	d9f0      	bls.n	8004500 <USB_SetCurrentMode+0x2e>
 800451e:	e01a      	b.n	8004556 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d115      	bne.n	8004552 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004532:	200a      	movs	r0, #10
 8004534:	f7fc fe40 	bl	80011b8 <HAL_Delay>
      ms += 10U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	330a      	adds	r3, #10
 800453c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa0c 	bl	800495c <USB_GetMode>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <USB_SetCurrentMode+0x84>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2bc7      	cmp	r3, #199	@ 0xc7
 800454e:	d9f0      	bls.n	8004532 <USB_SetCurrentMode+0x60>
 8004550:	e001      	b.n	8004556 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e005      	b.n	8004562 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2bc8      	cmp	r3, #200	@ 0xc8
 800455a:	d101      	bne.n	8004560 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800456c:	b084      	sub	sp, #16
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800457a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e009      	b.n	80045a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	3340      	adds	r3, #64	@ 0x40
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3301      	adds	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b0e      	cmp	r3, #14
 80045a4:	d9f2      	bls.n	800458c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d11c      	bne.n	80045e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e005      	b.n	80045f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004600:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10d      	bne.n	8004624 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004610:	2100      	movs	r1, #0
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f968 	bl	80048e8 <USB_SetDevSpeed>
 8004618:	e008      	b.n	800462c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800461a:	2101      	movs	r1, #1
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f963 	bl	80048e8 <USB_SetDevSpeed>
 8004622:	e003      	b.n	800462c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004624:	2103      	movs	r1, #3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f95e 	bl	80048e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800462c:	2110      	movs	r1, #16
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8fa 	bl	8004828 <USB_FlushTxFifo>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f924 	bl	800488c <USB_FlushRxFifo>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004654:	461a      	mov	r2, r3
 8004656:	2300      	movs	r3, #0
 8004658:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004660:	461a      	mov	r2, r3
 8004662:	2300      	movs	r3, #0
 8004664:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466c:	461a      	mov	r2, r3
 800466e:	2300      	movs	r3, #0
 8004670:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e043      	b.n	8004700 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800468a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800468e:	d118      	bne.n	80046c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e013      	b.n	80046d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	461a      	mov	r2, r3
 80046ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e008      	b.n	80046d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3301      	adds	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004704:	461a      	mov	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4293      	cmp	r3, r2
 800470a:	d3b5      	bcc.n	8004678 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e043      	b.n	800479a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004728:	d118      	bne.n	800475c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e013      	b.n	800476e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e008      	b.n	800476e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477a:	461a      	mov	r2, r3
 800477c:	2300      	movs	r3, #0
 800477e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478c:	461a      	mov	r2, r3
 800478e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3301      	adds	r3, #1
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800479e:	461a      	mov	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d3b5      	bcc.n	8004712 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f043 0210 	orr.w	r2, r3, #16
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004820 <USB_DevInit+0x2b4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f043 0208 	orr.w	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004800:	2b01      	cmp	r3, #1
 8004802:	d105      	bne.n	8004810 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <USB_DevInit+0x2b8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004810:	7dfb      	ldrb	r3, [r7, #23]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800481c:	b004      	add	sp, #16
 800481e:	4770      	bx	lr
 8004820:	803c3800 	.word	0x803c3800
 8004824:	40000004 	.word	0x40000004

08004828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004842:	d901      	bls.n	8004848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e01b      	b.n	8004880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	daf2      	bge.n	8004836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	019b      	lsls	r3, r3, #6
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800486c:	d901      	bls.n	8004872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e006      	b.n	8004880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b20      	cmp	r3, #32
 800487c:	d0f0      	beq.n	8004860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048a4:	d901      	bls.n	80048aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e018      	b.n	80048dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	daf2      	bge.n	8004898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2210      	movs	r2, #16
 80048ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048c8:	d901      	bls.n	80048ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e006      	b.n	80048dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d0f0      	beq.n	80048bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0301 	and.w	r3, r3, #1
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004990:	d901      	bls.n	8004996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e022      	b.n	80049dc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	daf2      	bge.n	8004984 <USB_CoreReset+0xc>

  count = 10U;
 800499e:	230a      	movs	r3, #10
 80049a0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80049a2:	e002      	b.n	80049aa <USB_CoreReset+0x32>
  {
    count--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f9      	bne.n	80049a4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c8:	d901      	bls.n	80049ce <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e006      	b.n	80049dc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d0f0      	beq.n	80049bc <USB_CoreReset+0x44>

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049fe:	f3ef 8305 	mrs	r3, IPSR
 8004a02:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0e:	607b      	str	r3, [r7, #4]
  return(result);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a16:	f3ef 8311 	mrs	r3, BASEPRI
 8004a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <osKernelInitialize+0x3a>
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <osKernelInitialize+0x64>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d103      	bne.n	8004a32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a2a:	f06f 0305 	mvn.w	r3, #5
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	e00c      	b.n	8004a4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <osKernelInitialize+0x64>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a3a:	4b08      	ldr	r3, [pc, #32]	@ (8004a5c <osKernelInitialize+0x64>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e002      	b.n	8004a4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000878 	.word	0x20000878

08004a60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a66:	f3ef 8305 	mrs	r3, IPSR
 8004a6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a72:	f3ef 8310 	mrs	r3, PRIMASK
 8004a76:	607b      	str	r3, [r7, #4]
  return(result);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d105      	bne.n	8004a8a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a82:	603b      	str	r3, [r7, #0]
  return(result);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d007      	beq.n	8004a9a <osKernelStart+0x3a>
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac8 <osKernelStart+0x68>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d103      	bne.n	8004a9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004a92:	f06f 0305 	mvn.w	r3, #5
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e010      	b.n	8004abc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <osKernelStart+0x68>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d109      	bne.n	8004ab6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004aa2:	f7ff ffa1 	bl	80049e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <osKernelStart+0x68>)
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004aac:	f001 fc5a 	bl	8006364 <vTaskStartScheduler>
      stat = osOK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e002      	b.n	8004abc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000878 	.word	0x20000878

08004acc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b090      	sub	sp, #64	@ 0x40
 8004ad0:	af04      	add	r7, sp, #16
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004adc:	f3ef 8305 	mrs	r3, IPSR
 8004ae0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ae2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 808f 	bne.w	8004c08 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aea:	f3ef 8310 	mrs	r3, PRIMASK
 8004aee:	61bb      	str	r3, [r7, #24]
  return(result);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d105      	bne.n	8004b02 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004af6:	f3ef 8311 	mrs	r3, BASEPRI
 8004afa:	617b      	str	r3, [r7, #20]
  return(result);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <osThreadNew+0x3e>
 8004b02:	4b44      	ldr	r3, [pc, #272]	@ (8004c14 <osThreadNew+0x148>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d07e      	beq.n	8004c08 <osThreadNew+0x13c>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d07b      	beq.n	8004c08 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004b14:	2318      	movs	r3, #24
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d045      	beq.n	8004bb4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <osThreadNew+0x6a>
        name = attr->name;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <osThreadNew+0x90>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	2b38      	cmp	r3, #56	@ 0x38
 8004b4e:	d805      	bhi.n	8004b5c <osThreadNew+0x90>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <osThreadNew+0x94>
        return (NULL);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e054      	b.n	8004c0a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <osThreadNew+0xca>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b7e:	d90a      	bls.n	8004b96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <osThreadNew+0xca>
        mem = 1;
 8004b90:	2301      	movs	r3, #1
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	e010      	b.n	8004bb8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <osThreadNew+0xec>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <osThreadNew+0xec>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <osThreadNew+0xec>
          mem = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	e001      	b.n	8004bb8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d110      	bne.n	8004be0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bc6:	9202      	str	r2, [sp, #8]
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f001 f9c7 	bl	8005f68 <xTaskCreateStatic>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	e013      	b.n	8004c08 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d110      	bne.n	8004c08 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	f107 0310 	add.w	r3, r7, #16
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f001 fa1b 	bl	8006034 <xTaskCreate>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d001      	beq.n	8004c08 <osThreadNew+0x13c>
          hTask = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c08:	693b      	ldr	r3, [r7, #16]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3730      	adds	r7, #48	@ 0x30
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000878 	.word	0x20000878

08004c18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c20:	f3ef 8305 	mrs	r3, IPSR
 8004c24:	613b      	str	r3, [r7, #16]
  return(result);
 8004c26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10f      	bne.n	8004c4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c38:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <osDelay+0x3c>
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <osDelay+0x58>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d103      	bne.n	8004c54 <osDelay+0x3c>
    stat = osErrorISR;
 8004c4c:	f06f 0305 	mvn.w	r3, #5
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e007      	b.n	8004c64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f001 fb48 	bl	80062f4 <vTaskDelay>
    }
  }

  return (stat);
 8004c64:	697b      	ldr	r3, [r7, #20]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000878 	.word	0x20000878

08004c74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	@ 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c80:	f3ef 8305 	mrs	r3, IPSR
 8004c84:	613b      	str	r3, [r7, #16]
  return(result);
 8004c86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f040 8085 	bne.w	8004d98 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <osMutexNew+0x3a>
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8004da4 <osMutexNew+0x130>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d074      	beq.n	8004d98 <osMutexNew+0x124>
    if (attr != NULL) {
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <osMutexNew+0x48>
      type = attr->attr_bits;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	e001      	b.n	8004cc0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <osMutexNew+0x5c>
      rmtx = 1U;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e001      	b.n	8004cd4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d15c      	bne.n	8004d98 <osMutexNew+0x124>
      mem = -1;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d015      	beq.n	8004d16 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <osMutexNew+0x8c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b4f      	cmp	r3, #79	@ 0x4f
 8004cf8:	d902      	bls.n	8004d00 <osMutexNew+0x8c>
          mem = 1;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e00c      	b.n	8004d1a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d108      	bne.n	8004d1a <osMutexNew+0xa6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <osMutexNew+0xa6>
            mem = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e001      	b.n	8004d1a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d112      	bne.n	8004d46 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	2004      	movs	r0, #4
 8004d2e:	f000 fb5c 	bl	80053ea <xQueueCreateMutexStatic>
 8004d32:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d34:	e016      	b.n	8004d64 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f000 fb54 	bl	80053ea <xQueueCreateMutexStatic>
 8004d42:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d44:	e00e      	b.n	8004d64 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004d52:	2004      	movs	r0, #4
 8004d54:	f000 fb31 	bl	80053ba <xQueueCreateMutex>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d5a:	e003      	b.n	8004d64 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f000 fb2c 	bl	80053ba <xQueueCreateMutex>
 8004d62:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <osMutexNew+0x110>
        if (attr != NULL) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <osMutexNew+0x104>
          name = attr->name;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e001      	b.n	8004d7c <osMutexNew+0x108>
        } else {
          name = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004d7c:	6979      	ldr	r1, [r7, #20]
 8004d7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d80:	f001 f894 	bl	8005eac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <osMutexNew+0x124>
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3728      	adds	r7, #40	@ 0x28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000878 	.word	0x20000878

08004da8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc6:	f3ef 8305 	mrs	r3, IPSR
 8004dca:	613b      	str	r3, [r7, #16]
  return(result);
 8004dcc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d105      	bne.n	8004dea <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dde:	f3ef 8311 	mrs	r3, BASEPRI
 8004de2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <osMutexAcquire+0x52>
 8004dea:	4b1d      	ldr	r3, [pc, #116]	@ (8004e60 <osMutexAcquire+0xb8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d103      	bne.n	8004dfa <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004df2:	f06f 0305 	mvn.w	r3, #5
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	e02c      	b.n	8004e54 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004e00:	f06f 0303 	mvn.w	r3, #3
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e025      	b.n	8004e54 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d011      	beq.n	8004e32 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	69b8      	ldr	r0, [r7, #24]
 8004e12:	f000 fb3c 	bl	800548e <xQueueTakeMutexRecursive>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d01b      	beq.n	8004e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004e22:	f06f 0301 	mvn.w	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e014      	b.n	8004e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004e2a:	f06f 0302 	mvn.w	r3, #2
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e010      	b.n	8004e54 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004e32:	6839      	ldr	r1, [r7, #0]
 8004e34:	69b8      	ldr	r0, [r7, #24]
 8004e36:	f000 fdf9 	bl	8005a2c <xQueueSemaphoreTake>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d009      	beq.n	8004e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004e46:	f06f 0301 	mvn.w	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e002      	b.n	8004e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004e4e:	f06f 0302 	mvn.w	r3, #2
 8004e52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e54:	69fb      	ldr	r3, [r7, #28]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000878 	.word	0x20000878

08004e64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e80:	f3ef 8305 	mrs	r3, IPSR
 8004e84:	613b      	str	r3, [r7, #16]
  return(result);
 8004e86:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10f      	bne.n	8004eac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e98:	f3ef 8311 	mrs	r3, BASEPRI
 8004e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <osMutexRelease+0x50>
 8004ea4:	4b16      	ldr	r3, [pc, #88]	@ (8004f00 <osMutexRelease+0x9c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d103      	bne.n	8004eb4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004eac:	f06f 0305 	mvn.w	r3, #5
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	e01f      	b.n	8004ef4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004eba:	f06f 0303 	mvn.w	r3, #3
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e018      	b.n	8004ef4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004ec8:	69b8      	ldr	r0, [r7, #24]
 8004eca:	f000 faa9 	bl	8005420 <xQueueGiveMutexRecursive>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d00f      	beq.n	8004ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004ed4:	f06f 0302 	mvn.w	r3, #2
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	e00b      	b.n	8004ef4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004edc:	2300      	movs	r3, #0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f000 fb0c 	bl	8005500 <xQueueGenericSend>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d002      	beq.n	8004ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004eee:	f06f 0302 	mvn.w	r3, #2
 8004ef2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000878 	.word	0x20000878

08004f04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a07      	ldr	r2, [pc, #28]	@ (8004f30 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4a06      	ldr	r2, [pc, #24]	@ (8004f34 <vApplicationGetIdleTaskMemory+0x30>)
 8004f1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	2000087c 	.word	0x2000087c
 8004f34:	20000924 	.word	0x20000924

08004f38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a07      	ldr	r2, [pc, #28]	@ (8004f64 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a06      	ldr	r2, [pc, #24]	@ (8004f68 <vApplicationGetTimerTaskMemory+0x30>)
 8004f4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f56:	601a      	str	r2, [r3, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000b24 	.word	0x20000b24
 8004f68:	20000bcc 	.word	0x20000bcc

08004f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f103 0208 	add.w	r2, r3, #8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f103 0208 	add.w	r2, r3, #8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f103 0208 	add.w	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d103      	bne.n	800502e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e00c      	b.n	8005048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3308      	adds	r3, #8
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e002      	b.n	800503c <vListInsert+0x2e>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	d2f6      	bcs.n	8005036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6892      	ldr	r2, [r2, #8]
 8005096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6852      	ldr	r2, [r2, #4]
 80050a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d103      	bne.n	80050b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	1e5a      	subs	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10d      	bne.n	8005104 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ec:	b672      	cpsid	i
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	b662      	cpsie	i
 80050fc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005104:	f002 fc1a 	bl	800793c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005134:	3b01      	subs	r3, #1
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800513a:	fb01 f303 	mul.w	r3, r1, r3
 800513e:	441a      	add	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	22ff      	movs	r2, #255	@ 0xff
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	22ff      	movs	r2, #255	@ 0xff
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d114      	bne.n	8005184 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3310      	adds	r3, #16
 8005166:	4618      	mov	r0, r3
 8005168:	f001 fba8 	bl	80068bc <xTaskRemoveFromEventList>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d012      	beq.n	8005198 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <xQueueGenericReset+0xd4>)
 8005174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	e009      	b.n	8005198 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3310      	adds	r3, #16
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff feef 	bl	8004f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3324      	adds	r3, #36	@ 0x24
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff feea 	bl	8004f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005198:	f002 fc06 	bl	80079a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800519c:	2301      	movs	r3, #1
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08e      	sub	sp, #56	@ 0x38
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10d      	bne.n	80051dc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	b672      	cpsid	i
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	b662      	cpsie	i
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10d      	bne.n	80051fe <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	b672      	cpsid	i
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	b662      	cpsie	i
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <xQueueGenericCreateStatic+0x5e>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <xQueueGenericCreateStatic+0x62>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueGenericCreateStatic+0x64>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	b672      	cpsid	i
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	b662      	cpsie	i
 8005228:	623b      	str	r3, [r7, #32]
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	e7fd      	b.n	800522c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <xQueueGenericCreateStatic+0x90>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <xQueueGenericCreateStatic+0x94>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <xQueueGenericCreateStatic+0x96>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10d      	bne.n	8005262 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	b672      	cpsid	i
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	b662      	cpsie	i
 800525a:	61fb      	str	r3, [r7, #28]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005262:	2350      	movs	r3, #80	@ 0x50
 8005264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b50      	cmp	r3, #80	@ 0x50
 800526a:	d00d      	beq.n	8005288 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	b672      	cpsid	i
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	b662      	cpsie	i
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005288:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800529c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f848 	bl	8005340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	@ 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	@ 0x28
 80052be:	af02      	add	r7, sp, #8
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10d      	bne.n	80052ea <xQueueGenericCreate+0x30>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	b672      	cpsid	i
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	b662      	cpsie	i
 80052e2:	613b      	str	r3, [r7, #16]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	e004      	b.n	8005300 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3350      	adds	r3, #80	@ 0x50
 8005304:	4618      	mov	r0, r3
 8005306:	f002 fc47 	bl	8007b98 <pvPortMalloc>
 800530a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d011      	beq.n	8005336 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3350      	adds	r3, #80	@ 0x50
 800531a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005324:	79fa      	ldrb	r2, [r7, #7]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f805 	bl	8005340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005336:	69bb      	ldr	r3, [r7, #24]
	}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d103      	bne.n	800535c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e002      	b.n	8005362 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800536e:	2101      	movs	r1, #1
 8005370:	69b8      	ldr	r0, [r7, #24]
 8005372:	f7ff feaf 	bl	80050d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80053a6:	2300      	movs	r3, #0
 80053a8:	2200      	movs	r2, #0
 80053aa:	2100      	movs	r1, #0
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8a7 	bl	8005500 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	4603      	mov	r3, r0
 80053c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	461a      	mov	r2, r3
 80053d0:	6939      	ldr	r1, [r7, #16]
 80053d2:	6978      	ldr	r0, [r7, #20]
 80053d4:	f7ff ff71 	bl	80052ba <xQueueGenericCreate>
 80053d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff ffd3 	bl	8005386 <prvInitialiseMutex>

		return xNewQueue;
 80053e0:	68fb      	ldr	r3, [r7, #12]
	}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b088      	sub	sp, #32
 80053ee:	af02      	add	r7, sp, #8
 80053f0:	4603      	mov	r3, r0
 80053f2:	6039      	str	r1, [r7, #0]
 80053f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053f6:	2301      	movs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2200      	movs	r2, #0
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	6978      	ldr	r0, [r7, #20]
 800540a:	f7ff fecf 	bl	80051ac <xQueueGenericCreateStatic>
 800540e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff ffb8 	bl	8005386 <prvInitialiseMutex>

		return xNewQueue;
 8005416:	68fb      	ldr	r3, [r7, #12]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10d      	bne.n	800544e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	b672      	cpsid	i
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	b662      	cpsie	i
 8005446:	60fb      	str	r3, [r7, #12]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	689c      	ldr	r4, [r3, #8]
 8005452:	f001 fc01 	bl	8006c58 <xTaskGetCurrentTaskHandle>
 8005456:	4603      	mov	r3, r0
 8005458:	429c      	cmp	r4, r3
 800545a:	d111      	bne.n	8005480 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d105      	bne.n	800547a <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800546e:	2300      	movs	r3, #0
 8005470:	2200      	movs	r2, #0
 8005472:	2100      	movs	r1, #0
 8005474:	6938      	ldr	r0, [r7, #16]
 8005476:	f000 f843 	bl	8005500 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800547a:	2301      	movs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e001      	b.n	8005484 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005484:	697b      	ldr	r3, [r7, #20]
	}
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	bd90      	pop	{r4, r7, pc}

0800548e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800548e:	b590      	push	{r4, r7, lr}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	b672      	cpsid	i
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	b662      	cpsie	i
 80054b6:	60fb      	str	r3, [r7, #12]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	689c      	ldr	r4, [r3, #8]
 80054c2:	f001 fbc9 	bl	8006c58 <xTaskGetCurrentTaskHandle>
 80054c6:	4603      	mov	r3, r0
 80054c8:	429c      	cmp	r4, r3
 80054ca:	d107      	bne.n	80054dc <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80054d6:	2301      	movs	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e00c      	b.n	80054f6 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6938      	ldr	r0, [r7, #16]
 80054e0:	f000 faa4 	bl	8005a2c <xQueueSemaphoreTake>
 80054e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80054f6:	697b      	ldr	r3, [r7, #20]
	}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd90      	pop	{r4, r7, pc}

08005500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08e      	sub	sp, #56	@ 0x38
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800550e:	2300      	movs	r3, #0
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10d      	bne.n	8005538 <xQueueGenericSend+0x38>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	b672      	cpsid	i
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	b662      	cpsie	i
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <xQueueGenericSend+0x46>
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueGenericSend+0x4a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSend+0x4c>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10d      	bne.n	800556c <xQueueGenericSend+0x6c>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	b672      	cpsid	i
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	b662      	cpsie	i
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d103      	bne.n	800557a <xQueueGenericSend+0x7a>
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <xQueueGenericSend+0x7e>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <xQueueGenericSend+0x80>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <xQueueGenericSend+0xa0>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	b672      	cpsid	i
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	b662      	cpsie	i
 8005598:	623b      	str	r3, [r7, #32]
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	e7fd      	b.n	800559c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055a0:	f001 fb6a 	bl	8006c78 <xTaskGetSchedulerState>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <xQueueGenericSend+0xb0>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <xQueueGenericSend+0xb4>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <xQueueGenericSend+0xb6>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <xQueueGenericSend+0xd6>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055be:	b672      	cpsid	i
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	b662      	cpsie	i
 80055ce:	61fb      	str	r3, [r7, #28]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055d6:	f002 f9b1 	bl	800793c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <xQueueGenericSend+0xec>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d129      	bne.n	8005640 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055f2:	f000 fb4b 	bl	8005c8c <prvCopyDataToQueue>
 80055f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d010      	beq.n	8005622 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	3324      	adds	r3, #36	@ 0x24
 8005604:	4618      	mov	r0, r3
 8005606:	f001 f959 	bl	80068bc <xTaskRemoveFromEventList>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005610:	4b3f      	ldr	r3, [pc, #252]	@ (8005710 <xQueueGenericSend+0x210>)
 8005612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	e00a      	b.n	8005638 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005628:	4b39      	ldr	r3, [pc, #228]	@ (8005710 <xQueueGenericSend+0x210>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005638:	f002 f9b6 	bl	80079a8 <vPortExitCritical>
				return pdPASS;
 800563c:	2301      	movs	r3, #1
 800563e:	e063      	b.n	8005708 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005646:	f002 f9af 	bl	80079a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800564a:	2300      	movs	r3, #0
 800564c:	e05c      	b.n	8005708 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800564e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	4618      	mov	r0, r3
 800565a:	f001 f995 	bl	8006988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005662:	f002 f9a1 	bl	80079a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005666:	f000 fef1 	bl	800644c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800566a:	f002 f967 	bl	800793c <vPortEnterCritical>
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005674:	b25b      	sxtb	r3, r3
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d103      	bne.n	8005684 <xQueueGenericSend+0x184>
 800567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800568a:	b25b      	sxtb	r3, r3
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d103      	bne.n	800569a <xQueueGenericSend+0x19a>
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800569a:	f002 f985 	bl	80079a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800569e:	1d3a      	adds	r2, r7, #4
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 f984 	bl	80069b4 <xTaskCheckForTimeOut>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d124      	bne.n	80056fc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056b4:	f000 fbe2 	bl	8005e7c <prvIsQueueFull>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	3310      	adds	r3, #16
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4611      	mov	r1, r2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 f8a2 	bl	8006810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ce:	f000 fb6d 	bl	8005dac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056d2:	f000 fec9 	bl	8006468 <xTaskResumeAll>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f47f af7c 	bne.w	80055d6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80056de:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <xQueueGenericSend+0x210>)
 80056e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	e772      	b.n	80055d6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056f2:	f000 fb5b 	bl	8005dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056f6:	f000 feb7 	bl	8006468 <xTaskResumeAll>
 80056fa:	e76c      	b.n	80055d6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056fe:	f000 fb55 	bl	8005dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005702:	f000 feb1 	bl	8006468 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005708:	4618      	mov	r0, r3
 800570a:	3738      	adds	r7, #56	@ 0x38
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08e      	sub	sp, #56	@ 0x38
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10d      	bne.n	8005748 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	b672      	cpsid	i
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	b662      	cpsie	i
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <xQueueGenericSendFromISR+0x42>
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <xQueueGenericSendFromISR+0x46>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueGenericSendFromISR+0x48>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10d      	bne.n	800577c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	b672      	cpsid	i
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	b662      	cpsie	i
 8005774:	623b      	str	r3, [r7, #32]
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d103      	bne.n	800578a <xQueueGenericSendFromISR+0x76>
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <xQueueGenericSendFromISR+0x7a>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <xQueueGenericSendFromISR+0x7c>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10d      	bne.n	80057b0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	b672      	cpsid	i
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	b662      	cpsie	i
 80057a8:	61fb      	str	r3, [r7, #28]
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057b0:	f002 f9ac 	bl	8007b0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057b4:	f3ef 8211 	mrs	r2, BASEPRI
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	b672      	cpsid	i
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	b662      	cpsie	i
 80057cc:	61ba      	str	r2, [r7, #24]
 80057ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057dc:	429a      	cmp	r2, r3
 80057de:	d302      	bcc.n	80057e6 <xQueueGenericSendFromISR+0xd2>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d12c      	bne.n	8005840 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057f6:	f000 fa49 	bl	8005c8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d112      	bne.n	800582a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	d016      	beq.n	800583a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	3324      	adds	r3, #36	@ 0x24
 8005810:	4618      	mov	r0, r3
 8005812:	f001 f853 	bl	80068bc <xTaskRemoveFromEventList>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00e      	beq.n	800583a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e007      	b.n	800583a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800582a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800582e:	3301      	adds	r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	b25a      	sxtb	r2, r3
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800583a:	2301      	movs	r3, #1
 800583c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800583e:	e001      	b.n	8005844 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005840:	2300      	movs	r3, #0
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800584e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005852:	4618      	mov	r0, r3
 8005854:	3738      	adds	r7, #56	@ 0x38
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	@ 0x30
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005868:	2300      	movs	r3, #0
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10d      	bne.n	8005892 <xQueueReceive+0x36>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	b672      	cpsid	i
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	b662      	cpsie	i
 800588a:	623b      	str	r3, [r7, #32]
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	e7fd      	b.n	800588e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <xQueueReceive+0x44>
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <xQueueReceive+0x48>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <xQueueReceive+0x4a>
 80058a4:	2300      	movs	r3, #0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10d      	bne.n	80058c6 <xQueueReceive+0x6a>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	b672      	cpsid	i
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	b662      	cpsie	i
 80058be:	61fb      	str	r3, [r7, #28]
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c6:	f001 f9d7 	bl	8006c78 <xTaskGetSchedulerState>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <xQueueReceive+0x7a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <xQueueReceive+0x7e>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueReceive+0x80>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <xQueueReceive+0xa0>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	b672      	cpsid	i
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	b662      	cpsie	i
 80058f4:	61bb      	str	r3, [r7, #24]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058fc:	f002 f81e 	bl	800793c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01f      	beq.n	800594c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005910:	f000 fa26 	bl	8005d60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00f      	beq.n	8005944 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	3310      	adds	r3, #16
 8005928:	4618      	mov	r0, r3
 800592a:	f000 ffc7 	bl	80068bc <xTaskRemoveFromEventList>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005934:	4b3c      	ldr	r3, [pc, #240]	@ (8005a28 <xQueueReceive+0x1cc>)
 8005936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005944:	f002 f830 	bl	80079a8 <vPortExitCritical>
				return pdPASS;
 8005948:	2301      	movs	r3, #1
 800594a:	e069      	b.n	8005a20 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005952:	f002 f829 	bl	80079a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005956:	2300      	movs	r3, #0
 8005958:	e062      	b.n	8005a20 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800595a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005960:	f107 0310 	add.w	r3, r7, #16
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f80f 	bl	8006988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800596e:	f002 f81b 	bl	80079a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005972:	f000 fd6b 	bl	800644c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005976:	f001 ffe1 	bl	800793c <vPortEnterCritical>
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005980:	b25b      	sxtb	r3, r3
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d103      	bne.n	8005990 <xQueueReceive+0x134>
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005996:	b25b      	sxtb	r3, r3
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d103      	bne.n	80059a6 <xQueueReceive+0x14a>
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a6:	f001 ffff 	bl	80079a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059aa:	1d3a      	adds	r2, r7, #4
 80059ac:	f107 0310 	add.w	r3, r7, #16
 80059b0:	4611      	mov	r1, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fffe 	bl	80069b4 <xTaskCheckForTimeOut>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d123      	bne.n	8005a06 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c0:	f000 fa46 	bl	8005e50 <prvIsQueueEmpty>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d017      	beq.n	80059fa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	3324      	adds	r3, #36	@ 0x24
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ff1c 	bl	8006810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059da:	f000 f9e7 	bl	8005dac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059de:	f000 fd43 	bl	8006468 <xTaskResumeAll>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d189      	bne.n	80058fc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80059e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a28 <xQueueReceive+0x1cc>)
 80059ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	e780      	b.n	80058fc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059fc:	f000 f9d6 	bl	8005dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a00:	f000 fd32 	bl	8006468 <xTaskResumeAll>
 8005a04:	e77a      	b.n	80058fc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a08:	f000 f9d0 	bl	8005dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a0c:	f000 fd2c 	bl	8006468 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a12:	f000 fa1d 	bl	8005e50 <prvIsQueueEmpty>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f43f af6f 	beq.w	80058fc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3730      	adds	r7, #48	@ 0x30
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08e      	sub	sp, #56	@ 0x38
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10d      	bne.n	8005a64 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4c:	b672      	cpsid	i
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	b662      	cpsie	i
 8005a5c:	623b      	str	r3, [r7, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	b672      	cpsid	i
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	b662      	cpsie	i
 8005a80:	61fb      	str	r3, [r7, #28]
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	e7fd      	b.n	8005a84 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a88:	f001 f8f6 	bl	8006c78 <xTaskGetSchedulerState>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <xQueueSemaphoreTake+0x6c>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <xQueueSemaphoreTake+0x70>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <xQueueSemaphoreTake+0x72>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa6:	b672      	cpsid	i
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	b662      	cpsie	i
 8005ab6:	61bb      	str	r3, [r7, #24]
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e7fd      	b.n	8005aba <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005abe:	f001 ff3d 	bl	800793c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d024      	beq.n	8005b18 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ade:	f001 fa4d 	bl	8006f7c <pvTaskIncrementMutexHeldCount>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00f      	beq.n	8005b10 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af2:	3310      	adds	r3, #16
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fee1 	bl	80068bc <xTaskRemoveFromEventList>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b00:	4b55      	ldr	r3, [pc, #340]	@ (8005c58 <xQueueSemaphoreTake+0x22c>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b10:	f001 ff4a 	bl	80079a8 <vPortExitCritical>
				return pdPASS;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e09a      	b.n	8005c4e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d114      	bne.n	8005b48 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	b672      	cpsid	i
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	b662      	cpsie	i
 8005b38:	617b      	str	r3, [r7, #20]
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b40:	f001 ff32 	bl	80079a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b44:	2300      	movs	r3, #0
 8005b46:	e082      	b.n	8005c4e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b4e:	f107 030c 	add.w	r3, r7, #12
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 ff18 	bl	8006988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b5c:	f001 ff24 	bl	80079a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b60:	f000 fc74 	bl	800644c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b64:	f001 feea 	bl	800793c <vPortEnterCritical>
 8005b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b6e:	b25b      	sxtb	r3, r3
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d103      	bne.n	8005b7e <xQueueSemaphoreTake+0x152>
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d103      	bne.n	8005b94 <xQueueSemaphoreTake+0x168>
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b94:	f001 ff08 	bl	80079a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b98:	463a      	mov	r2, r7
 8005b9a:	f107 030c 	add.w	r3, r7, #12
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 ff07 	bl	80069b4 <xTaskCheckForTimeOut>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d132      	bne.n	8005c12 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bae:	f000 f94f 	bl	8005e50 <prvIsQueueEmpty>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d026      	beq.n	8005c06 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005bc0:	f001 febc 	bl	800793c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 f873 	bl	8006cb4 <xTaskPriorityInherit>
 8005bce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005bd0:	f001 feea 	bl	80079a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	3324      	adds	r3, #36	@ 0x24
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fe17 	bl	8006810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005be2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005be4:	f000 f8e2 	bl	8005dac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005be8:	f000 fc3e 	bl	8006468 <xTaskResumeAll>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f47f af65 	bne.w	8005abe <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005bf4:	4b18      	ldr	r3, [pc, #96]	@ (8005c58 <xQueueSemaphoreTake+0x22c>)
 8005bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	e75b      	b.n	8005abe <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c08:	f000 f8d0 	bl	8005dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c0c:	f000 fc2c 	bl	8006468 <xTaskResumeAll>
 8005c10:	e755      	b.n	8005abe <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c14:	f000 f8ca 	bl	8005dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c18:	f000 fc26 	bl	8006468 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c1e:	f000 f917 	bl	8005e50 <prvIsQueueEmpty>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f43f af4a 	beq.w	8005abe <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00d      	beq.n	8005c4c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005c30:	f001 fe84 	bl	800793c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c36:	f000 f811 	bl	8005c5c <prvGetDisinheritPriorityAfterTimeout>
 8005c3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 f912 	bl	8006e6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c48:	f001 feae 	bl	80079a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3738      	adds	r7, #56	@ 0x38
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d006      	beq.n	8005c7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e001      	b.n	8005c7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10d      	bne.n	8005cc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d14d      	bne.n	8005d4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f864 	bl	8006d84 <xTaskPriorityDisinherit>
 8005cbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	e043      	b.n	8005d4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d119      	bne.n	8005d00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6858      	ldr	r0, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	f002 fa06 	bl	80080e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d32b      	bcc.n	8005d4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	e026      	b.n	8005d4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68d8      	ldr	r0, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	f002 f9ec 	bl	80080e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	425b      	negs	r3, r3
 8005d1a:	441a      	add	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d207      	bcs.n	8005d3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d34:	425b      	negs	r3, r3
 8005d36:	441a      	add	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d105      	bne.n	8005d4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d56:	697b      	ldr	r3, [r7, #20]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d018      	beq.n	8005da4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	441a      	add	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d303      	bcc.n	8005d94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68d9      	ldr	r1, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6838      	ldr	r0, [r7, #0]
 8005da0:	f002 f9a2 	bl	80080e8 <memcpy>
	}
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005db4:	f001 fdc2 	bl	800793c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dc0:	e011      	b.n	8005de6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d012      	beq.n	8005df0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3324      	adds	r3, #36	@ 0x24
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fd74 	bl	80068bc <xTaskRemoveFromEventList>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dda:	f000 fe53 	bl	8006a84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dce9      	bgt.n	8005dc2 <prvUnlockQueue+0x16>
 8005dee:	e000      	b.n	8005df2 <prvUnlockQueue+0x46>
					break;
 8005df0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	22ff      	movs	r2, #255	@ 0xff
 8005df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005dfa:	f001 fdd5 	bl	80079a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dfe:	f001 fd9d 	bl	800793c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e0a:	e011      	b.n	8005e30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d012      	beq.n	8005e3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3310      	adds	r3, #16
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fd4f 	bl	80068bc <xTaskRemoveFromEventList>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e24:	f000 fe2e 	bl	8006a84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dce9      	bgt.n	8005e0c <prvUnlockQueue+0x60>
 8005e38:	e000      	b.n	8005e3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	22ff      	movs	r2, #255	@ 0xff
 8005e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e44:	f001 fdb0 	bl	80079a8 <vPortExitCritical>
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e58:	f001 fd70 	bl	800793c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e001      	b.n	8005e6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e6e:	f001 fd9b 	bl	80079a8 <vPortExitCritical>

	return xReturn;
 8005e72:	68fb      	ldr	r3, [r7, #12]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e84:	f001 fd5a 	bl	800793c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d102      	bne.n	8005e9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e001      	b.n	8005e9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e9e:	f001 fd83 	bl	80079a8 <vPortExitCritical>

	return xReturn;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e014      	b.n	8005ee6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8005efc <vQueueAddToRegistry+0x50>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ec8:	490c      	ldr	r1, [pc, #48]	@ (8005efc <vQueueAddToRegistry+0x50>)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8005efc <vQueueAddToRegistry+0x50>)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4413      	add	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ede:	e006      	b.n	8005eee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b07      	cmp	r3, #7
 8005eea:	d9e7      	bls.n	8005ebc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000fcc 	.word	0x20000fcc

08005f00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f10:	f001 fd14 	bl	800793c <vPortEnterCritical>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d103      	bne.n	8005f2a <vQueueWaitForMessageRestricted+0x2a>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	d103      	bne.n	8005f40 <vQueueWaitForMessageRestricted+0x40>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f40:	f001 fd32 	bl	80079a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3324      	adds	r3, #36	@ 0x24
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fc83 	bl	8006860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f7ff ff26 	bl	8005dac <prvUnlockQueue>
	}
 8005f60:	bf00      	nop
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08e      	sub	sp, #56	@ 0x38
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10d      	bne.n	8005f98 <xTaskCreateStatic+0x30>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f80:	b672      	cpsid	i
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	b662      	cpsie	i
 8005f90:	623b      	str	r3, [r7, #32]
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	e7fd      	b.n	8005f94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10d      	bne.n	8005fba <xTaskCreateStatic+0x52>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	b672      	cpsid	i
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	b662      	cpsie	i
 8005fb2:	61fb      	str	r3, [r7, #28]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fba:	23a8      	movs	r3, #168	@ 0xa8
 8005fbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2ba8      	cmp	r3, #168	@ 0xa8
 8005fc2:	d00d      	beq.n	8005fe0 <xTaskCreateStatic+0x78>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	b672      	cpsid	i
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	b662      	cpsie	i
 8005fd8:	61bb      	str	r3, [r7, #24]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fe0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01e      	beq.n	8006026 <xTaskCreateStatic+0xbe>
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01b      	beq.n	8006026 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ff6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006000:	2300      	movs	r3, #0
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	9302      	str	r3, [sp, #8]
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f851 	bl	80060c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800601e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006020:	f000 f8f8 	bl	8006214 <prvAddNewTaskToReadyList>
 8006024:	e001      	b.n	800602a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800602a:	697b      	ldr	r3, [r7, #20]
	}
 800602c:	4618      	mov	r0, r3
 800602e:	3728      	adds	r7, #40	@ 0x28
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08c      	sub	sp, #48	@ 0x30
 8006038:	af04      	add	r7, sp, #16
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4618      	mov	r0, r3
 800604a:	f001 fda5 	bl	8007b98 <pvPortMalloc>
 800604e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00e      	beq.n	8006074 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006056:	20a8      	movs	r0, #168	@ 0xa8
 8006058:	f001 fd9e 	bl	8007b98 <pvPortMalloc>
 800605c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	631a      	str	r2, [r3, #48]	@ 0x30
 800606a:	e005      	b.n	8006078 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800606c:	6978      	ldr	r0, [r7, #20]
 800606e:	f001 fe61 	bl	8007d34 <vPortFree>
 8006072:	e001      	b.n	8006078 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d017      	beq.n	80060ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	2300      	movs	r3, #0
 800608a:	9303      	str	r3, [sp, #12]
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	9302      	str	r3, [sp, #8]
 8006090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f80f 	bl	80060c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060a2:	69f8      	ldr	r0, [r7, #28]
 80060a4:	f000 f8b6 	bl	8006214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060a8:	2301      	movs	r3, #1
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	e002      	b.n	80060b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060b4:	69bb      	ldr	r3, [r7, #24]
	}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	461a      	mov	r2, r3
 80060d8:	21a5      	movs	r1, #165	@ 0xa5
 80060da:	f001 ff7b 	bl	8007fd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80060e8:	440b      	add	r3, r1
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	b672      	cpsid	i
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	b662      	cpsie	i
 8006116:	617b      	str	r3, [r7, #20]
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	e7fd      	b.n	800611a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01f      	beq.n	8006164 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e012      	b.n	8006150 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	7819      	ldrb	r1, [r3, #0]
 8006132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	3334      	adds	r3, #52	@ 0x34
 800613a:	460a      	mov	r2, r1
 800613c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b0f      	cmp	r3, #15
 8006154:	d9e9      	bls.n	800612a <prvInitialiseNewTask+0x6a>
 8006156:	e000      	b.n	800615a <prvInitialiseNewTask+0x9a>
			{
				break;
 8006158:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006162:	e003      	b.n	800616c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	2b37      	cmp	r3, #55	@ 0x37
 8006170:	d901      	bls.n	8006176 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006172:	2337      	movs	r3, #55	@ 0x37
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006180:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	2200      	movs	r2, #0
 8006186:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	3304      	adds	r3, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe ff0d 	bl	8004fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	3318      	adds	r3, #24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe ff08 	bl	8004fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	3354      	adds	r3, #84	@ 0x54
 80061c6:	224c      	movs	r2, #76	@ 0x4c
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 ff02 	bl	8007fd4 <memset>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006208 <prvInitialiseNewTask+0x148>)
 80061d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	4a0c      	ldr	r2, [pc, #48]	@ (800620c <prvInitialiseNewTask+0x14c>)
 80061da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	4a0c      	ldr	r2, [pc, #48]	@ (8006210 <prvInitialiseNewTask+0x150>)
 80061e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	68f9      	ldr	r1, [r7, #12]
 80061e6:	69b8      	ldr	r0, [r7, #24]
 80061e8:	f001 fa98 	bl	800771c <pxPortInitialiseStack>
 80061ec:	4602      	mov	r2, r0
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061fe:	bf00      	nop
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20005258 	.word	0x20005258
 800620c:	200052c0 	.word	0x200052c0
 8006210:	20005328 	.word	0x20005328

08006214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800621c:	f001 fb8e 	bl	800793c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006220:	4b2d      	ldr	r3, [pc, #180]	@ (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a2c      	ldr	r2, [pc, #176]	@ (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 8006228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800622a:	4b2c      	ldr	r3, [pc, #176]	@ (80062dc <prvAddNewTaskToReadyList+0xc8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006232:	4a2a      	ldr	r2, [pc, #168]	@ (80062dc <prvAddNewTaskToReadyList+0xc8>)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006238:	4b27      	ldr	r3, [pc, #156]	@ (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d110      	bne.n	8006262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006240:	f000 fc44 	bl	8006acc <prvInitialiseTaskLists>
 8006244:	e00d      	b.n	8006262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006246:	4b26      	ldr	r3, [pc, #152]	@ (80062e0 <prvAddNewTaskToReadyList+0xcc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800624e:	4b23      	ldr	r3, [pc, #140]	@ (80062dc <prvAddNewTaskToReadyList+0xc8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	429a      	cmp	r2, r3
 800625a:	d802      	bhi.n	8006262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800625c:	4a1f      	ldr	r2, [pc, #124]	@ (80062dc <prvAddNewTaskToReadyList+0xc8>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006262:	4b20      	ldr	r3, [pc, #128]	@ (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	4a1e      	ldr	r2, [pc, #120]	@ (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 800626a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800626c:	4b1d      	ldr	r3, [pc, #116]	@ (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006278:	4b1b      	ldr	r3, [pc, #108]	@ (80062e8 <prvAddNewTaskToReadyList+0xd4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d903      	bls.n	8006288 <prvAddNewTaskToReadyList+0x74>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006284:	4a18      	ldr	r2, [pc, #96]	@ (80062e8 <prvAddNewTaskToReadyList+0xd4>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a15      	ldr	r2, [pc, #84]	@ (80062ec <prvAddNewTaskToReadyList+0xd8>)
 8006296:	441a      	add	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe fe91 	bl	8004fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062a4:	f001 fb80 	bl	80079a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062a8:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <prvAddNewTaskToReadyList+0xcc>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00e      	beq.n	80062ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062b0:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <prvAddNewTaskToReadyList+0xc8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d207      	bcs.n	80062ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062be:	4b0c      	ldr	r3, [pc, #48]	@ (80062f0 <prvAddNewTaskToReadyList+0xdc>)
 80062c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200014e0 	.word	0x200014e0
 80062dc:	2000100c 	.word	0x2000100c
 80062e0:	200014ec 	.word	0x200014ec
 80062e4:	200014fc 	.word	0x200014fc
 80062e8:	200014e8 	.word	0x200014e8
 80062ec:	20001010 	.word	0x20001010
 80062f0:	e000ed04 	.word	0xe000ed04

080062f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01a      	beq.n	800633c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006306:	4b15      	ldr	r3, [pc, #84]	@ (800635c <vTaskDelay+0x68>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <vTaskDelay+0x36>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	b672      	cpsid	i
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	b662      	cpsie	i
 8006322:	60bb      	str	r3, [r7, #8]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800632a:	f000 f88f 	bl	800644c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800632e:	2100      	movs	r1, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fe37 	bl	8006fa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006336:	f000 f897 	bl	8006468 <xTaskResumeAll>
 800633a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d107      	bne.n	8006352 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006342:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <vTaskDelay+0x6c>)
 8006344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20001508 	.word	0x20001508
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006372:	463a      	mov	r2, r7
 8006374:	1d39      	adds	r1, r7, #4
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fdc2 	bl	8004f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	9202      	str	r2, [sp, #8]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	460a      	mov	r2, r1
 8006392:	4926      	ldr	r1, [pc, #152]	@ (800642c <vTaskStartScheduler+0xc8>)
 8006394:	4826      	ldr	r0, [pc, #152]	@ (8006430 <vTaskStartScheduler+0xcc>)
 8006396:	f7ff fde7 	bl	8005f68 <xTaskCreateStatic>
 800639a:	4603      	mov	r3, r0
 800639c:	4a25      	ldr	r2, [pc, #148]	@ (8006434 <vTaskStartScheduler+0xd0>)
 800639e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063a0:	4b24      	ldr	r3, [pc, #144]	@ (8006434 <vTaskStartScheduler+0xd0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063a8:	2301      	movs	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e001      	b.n	80063b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d102      	bne.n	80063be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063b8:	f000 fe48 	bl	800704c <xTimerCreateTimerTask>
 80063bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d11d      	bne.n	8006400 <vTaskStartScheduler+0x9c>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	b672      	cpsid	i
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	b662      	cpsie	i
 80063d8:	613b      	str	r3, [r7, #16]
}
 80063da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063dc:	4b16      	ldr	r3, [pc, #88]	@ (8006438 <vTaskStartScheduler+0xd4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3354      	adds	r3, #84	@ 0x54
 80063e2:	4a16      	ldr	r2, [pc, #88]	@ (800643c <vTaskStartScheduler+0xd8>)
 80063e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063e6:	4b16      	ldr	r3, [pc, #88]	@ (8006440 <vTaskStartScheduler+0xdc>)
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ee:	4b15      	ldr	r3, [pc, #84]	@ (8006444 <vTaskStartScheduler+0xe0>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063f4:	4b14      	ldr	r3, [pc, #80]	@ (8006448 <vTaskStartScheduler+0xe4>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063fa:	f001 fa21 	bl	8007840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063fe:	e011      	b.n	8006424 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d10d      	bne.n	8006424 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	b672      	cpsid	i
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	b662      	cpsie	i
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <vTaskStartScheduler+0xbc>
}
 8006424:	bf00      	nop
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	08008a50 	.word	0x08008a50
 8006430:	08006a9d 	.word	0x08006a9d
 8006434:	20001504 	.word	0x20001504
 8006438:	2000100c 	.word	0x2000100c
 800643c:	20000010 	.word	0x20000010
 8006440:	20001500 	.word	0x20001500
 8006444:	200014ec 	.word	0x200014ec
 8006448:	200014e4 	.word	0x200014e4

0800644c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006450:	4b04      	ldr	r3, [pc, #16]	@ (8006464 <vTaskSuspendAll+0x18>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	4a03      	ldr	r2, [pc, #12]	@ (8006464 <vTaskSuspendAll+0x18>)
 8006458:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800645a:	bf00      	nop
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20001508 	.word	0x20001508

08006468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006476:	4b43      	ldr	r3, [pc, #268]	@ (8006584 <xTaskResumeAll+0x11c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10d      	bne.n	800649a <xTaskResumeAll+0x32>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006482:	b672      	cpsid	i
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	b662      	cpsie	i
 8006492:	603b      	str	r3, [r7, #0]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800649a:	f001 fa4f 	bl	800793c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800649e:	4b39      	ldr	r3, [pc, #228]	@ (8006584 <xTaskResumeAll+0x11c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	4a37      	ldr	r2, [pc, #220]	@ (8006584 <xTaskResumeAll+0x11c>)
 80064a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a8:	4b36      	ldr	r3, [pc, #216]	@ (8006584 <xTaskResumeAll+0x11c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d162      	bne.n	8006576 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064b0:	4b35      	ldr	r3, [pc, #212]	@ (8006588 <xTaskResumeAll+0x120>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05e      	beq.n	8006576 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064b8:	e02f      	b.n	800651a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ba:	4b34      	ldr	r3, [pc, #208]	@ (800658c <xTaskResumeAll+0x124>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3318      	adds	r3, #24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fdda 	bl	8005080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe fdd5 	bl	8005080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	4b2d      	ldr	r3, [pc, #180]	@ (8006590 <xTaskResumeAll+0x128>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d903      	bls.n	80064ea <xTaskResumeAll+0x82>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <xTaskResumeAll+0x128>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4a27      	ldr	r2, [pc, #156]	@ (8006594 <xTaskResumeAll+0x12c>)
 80064f8:	441a      	add	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7fe fd60 	bl	8004fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650a:	4b23      	ldr	r3, [pc, #140]	@ (8006598 <xTaskResumeAll+0x130>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006514:	4b21      	ldr	r3, [pc, #132]	@ (800659c <xTaskResumeAll+0x134>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800651a:	4b1c      	ldr	r3, [pc, #112]	@ (800658c <xTaskResumeAll+0x124>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1cb      	bne.n	80064ba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006528:	f000 fb76 	bl	8006c18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800652c:	4b1c      	ldr	r3, [pc, #112]	@ (80065a0 <xTaskResumeAll+0x138>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006538:	f000 f846 	bl	80065c8 <xTaskIncrementTick>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006542:	4b16      	ldr	r3, [pc, #88]	@ (800659c <xTaskResumeAll+0x134>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3b01      	subs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f1      	bne.n	8006538 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006554:	4b12      	ldr	r3, [pc, #72]	@ (80065a0 <xTaskResumeAll+0x138>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800655a:	4b10      	ldr	r3, [pc, #64]	@ (800659c <xTaskResumeAll+0x134>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006562:	2301      	movs	r3, #1
 8006564:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006566:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <xTaskResumeAll+0x13c>)
 8006568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006576:	f001 fa17 	bl	80079a8 <vPortExitCritical>

	return xAlreadyYielded;
 800657a:	68bb      	ldr	r3, [r7, #8]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20001508 	.word	0x20001508
 8006588:	200014e0 	.word	0x200014e0
 800658c:	200014a0 	.word	0x200014a0
 8006590:	200014e8 	.word	0x200014e8
 8006594:	20001010 	.word	0x20001010
 8006598:	2000100c 	.word	0x2000100c
 800659c:	200014f4 	.word	0x200014f4
 80065a0:	200014f0 	.word	0x200014f0
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065ae:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <xTaskGetTickCount+0x1c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065b4:	687b      	ldr	r3, [r7, #4]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	200014e4 	.word	0x200014e4

080065c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d2:	4b50      	ldr	r3, [pc, #320]	@ (8006714 <xTaskIncrementTick+0x14c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 808c 	bne.w	80066f4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065dc:	4b4e      	ldr	r3, [pc, #312]	@ (8006718 <xTaskIncrementTick+0x150>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065e4:	4a4c      	ldr	r2, [pc, #304]	@ (8006718 <xTaskIncrementTick+0x150>)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d123      	bne.n	8006638 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80065f0:	4b4a      	ldr	r3, [pc, #296]	@ (800671c <xTaskIncrementTick+0x154>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <xTaskIncrementTick+0x4e>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	b672      	cpsid	i
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	b662      	cpsie	i
 800660e:	603b      	str	r3, [r7, #0]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <xTaskIncrementTick+0x4a>
 8006616:	4b41      	ldr	r3, [pc, #260]	@ (800671c <xTaskIncrementTick+0x154>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	4b40      	ldr	r3, [pc, #256]	@ (8006720 <xTaskIncrementTick+0x158>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3e      	ldr	r2, [pc, #248]	@ (800671c <xTaskIncrementTick+0x154>)
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	4a3e      	ldr	r2, [pc, #248]	@ (8006720 <xTaskIncrementTick+0x158>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b3e      	ldr	r3, [pc, #248]	@ (8006724 <xTaskIncrementTick+0x15c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	4a3c      	ldr	r2, [pc, #240]	@ (8006724 <xTaskIncrementTick+0x15c>)
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	f000 faf0 	bl	8006c18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006638:	4b3b      	ldr	r3, [pc, #236]	@ (8006728 <xTaskIncrementTick+0x160>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d349      	bcc.n	80066d6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006642:	4b36      	ldr	r3, [pc, #216]	@ (800671c <xTaskIncrementTick+0x154>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800664c:	4b36      	ldr	r3, [pc, #216]	@ (8006728 <xTaskIncrementTick+0x160>)
 800664e:	f04f 32ff 	mov.w	r2, #4294967295
 8006652:	601a      	str	r2, [r3, #0]
					break;
 8006654:	e03f      	b.n	80066d6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006656:	4b31      	ldr	r3, [pc, #196]	@ (800671c <xTaskIncrementTick+0x154>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	d203      	bcs.n	8006676 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800666e:	4a2e      	ldr	r2, [pc, #184]	@ (8006728 <xTaskIncrementTick+0x160>)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006674:	e02f      	b.n	80066d6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3304      	adds	r3, #4
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fd00 	bl	8005080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3318      	adds	r3, #24
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe fcf7 	bl	8005080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006696:	4b25      	ldr	r3, [pc, #148]	@ (800672c <xTaskIncrementTick+0x164>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d903      	bls.n	80066a6 <xTaskIncrementTick+0xde>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	4a22      	ldr	r2, [pc, #136]	@ (800672c <xTaskIncrementTick+0x164>)
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006730 <xTaskIncrementTick+0x168>)
 80066b4:	441a      	add	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7fe fc82 	bl	8004fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006734 <xTaskIncrementTick+0x16c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d3b8      	bcc.n	8006642 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d4:	e7b5      	b.n	8006642 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066d6:	4b17      	ldr	r3, [pc, #92]	@ (8006734 <xTaskIncrementTick+0x16c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066dc:	4914      	ldr	r1, [pc, #80]	@ (8006730 <xTaskIncrementTick+0x168>)
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d907      	bls.n	80066fe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	e004      	b.n	80066fe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066f4:	4b10      	ldr	r3, [pc, #64]	@ (8006738 <xTaskIncrementTick+0x170>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006738 <xTaskIncrementTick+0x170>)
 80066fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066fe:	4b0f      	ldr	r3, [pc, #60]	@ (800673c <xTaskIncrementTick+0x174>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006706:	2301      	movs	r3, #1
 8006708:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800670a:	697b      	ldr	r3, [r7, #20]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20001508 	.word	0x20001508
 8006718:	200014e4 	.word	0x200014e4
 800671c:	20001498 	.word	0x20001498
 8006720:	2000149c 	.word	0x2000149c
 8006724:	200014f8 	.word	0x200014f8
 8006728:	20001500 	.word	0x20001500
 800672c:	200014e8 	.word	0x200014e8
 8006730:	20001010 	.word	0x20001010
 8006734:	2000100c 	.word	0x2000100c
 8006738:	200014f0 	.word	0x200014f0
 800673c:	200014f4 	.word	0x200014f4

08006740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006746:	4b2c      	ldr	r3, [pc, #176]	@ (80067f8 <vTaskSwitchContext+0xb8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800674e:	4b2b      	ldr	r3, [pc, #172]	@ (80067fc <vTaskSwitchContext+0xbc>)
 8006750:	2201      	movs	r2, #1
 8006752:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006754:	e049      	b.n	80067ea <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006756:	4b29      	ldr	r3, [pc, #164]	@ (80067fc <vTaskSwitchContext+0xbc>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675c:	4b28      	ldr	r3, [pc, #160]	@ (8006800 <vTaskSwitchContext+0xc0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	e013      	b.n	800678c <vTaskSwitchContext+0x4c>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10d      	bne.n	8006786 <vTaskSwitchContext+0x46>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	b672      	cpsid	i
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	b662      	cpsie	i
 800677e:	607b      	str	r3, [r7, #4]
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	e7fd      	b.n	8006782 <vTaskSwitchContext+0x42>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b01      	subs	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	491d      	ldr	r1, [pc, #116]	@ (8006804 <vTaskSwitchContext+0xc4>)
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0e1      	beq.n	8006764 <vTaskSwitchContext+0x24>
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4a16      	ldr	r2, [pc, #88]	@ (8006804 <vTaskSwitchContext+0xc4>)
 80067ac:	4413      	add	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	3308      	adds	r3, #8
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d104      	bne.n	80067d0 <vTaskSwitchContext+0x90>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	605a      	str	r2, [r3, #4]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006808 <vTaskSwitchContext+0xc8>)
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	4a09      	ldr	r2, [pc, #36]	@ (8006800 <vTaskSwitchContext+0xc0>)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067e0:	4b09      	ldr	r3, [pc, #36]	@ (8006808 <vTaskSwitchContext+0xc8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3354      	adds	r3, #84	@ 0x54
 80067e6:	4a09      	ldr	r2, [pc, #36]	@ (800680c <vTaskSwitchContext+0xcc>)
 80067e8:	6013      	str	r3, [r2, #0]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20001508 	.word	0x20001508
 80067fc:	200014f4 	.word	0x200014f4
 8006800:	200014e8 	.word	0x200014e8
 8006804:	20001010 	.word	0x20001010
 8006808:	2000100c 	.word	0x2000100c
 800680c:	20000010 	.word	0x20000010

08006810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10d      	bne.n	800683c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	b672      	cpsid	i
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	b662      	cpsie	i
 8006834:	60fb      	str	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800683c:	4b07      	ldr	r3, [pc, #28]	@ (800685c <vTaskPlaceOnEventList+0x4c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3318      	adds	r3, #24
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fe fbe2 	bl	800500e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800684a:	2101      	movs	r1, #1
 800684c:	6838      	ldr	r0, [r7, #0]
 800684e:	f000 fba9 	bl	8006fa4 <prvAddCurrentTaskToDelayedList>
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	2000100c 	.word	0x2000100c

08006860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	b672      	cpsid	i
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	b662      	cpsie	i
 8006886:	617b      	str	r3, [r7, #20]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800688e:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <vTaskPlaceOnEventListRestricted+0x58>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3318      	adds	r3, #24
 8006894:	4619      	mov	r1, r3
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7fe fb95 	bl	8004fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	68b8      	ldr	r0, [r7, #8]
 80068ac:	f000 fb7a 	bl	8006fa4 <prvAddCurrentTaskToDelayedList>
	}
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	2000100c 	.word	0x2000100c

080068bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10d      	bne.n	80068ee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	b672      	cpsid	i
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	b662      	cpsie	i
 80068e6:	60fb      	str	r3, [r7, #12]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3318      	adds	r3, #24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fbc4 	bl	8005080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <xTaskRemoveFromEventList+0xb4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d11d      	bne.n	800693c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	3304      	adds	r3, #4
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe fbbb 	bl	8005080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690e:	4b19      	ldr	r3, [pc, #100]	@ (8006974 <xTaskRemoveFromEventList+0xb8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d903      	bls.n	800691e <xTaskRemoveFromEventList+0x62>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691a:	4a16      	ldr	r2, [pc, #88]	@ (8006974 <xTaskRemoveFromEventList+0xb8>)
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <xTaskRemoveFromEventList+0xbc>)
 800692c:	441a      	add	r2, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3304      	adds	r3, #4
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f7fe fb46 	bl	8004fc6 <vListInsertEnd>
 800693a:	e005      	b.n	8006948 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	3318      	adds	r3, #24
 8006940:	4619      	mov	r1, r3
 8006942:	480e      	ldr	r0, [pc, #56]	@ (800697c <xTaskRemoveFromEventList+0xc0>)
 8006944:	f7fe fb3f 	bl	8004fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694c:	4b0c      	ldr	r3, [pc, #48]	@ (8006980 <xTaskRemoveFromEventList+0xc4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	429a      	cmp	r2, r3
 8006954:	d905      	bls.n	8006962 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006956:	2301      	movs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800695a:	4b0a      	ldr	r3, [pc, #40]	@ (8006984 <xTaskRemoveFromEventList+0xc8>)
 800695c:	2201      	movs	r2, #1
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e001      	b.n	8006966 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006966:	697b      	ldr	r3, [r7, #20]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20001508 	.word	0x20001508
 8006974:	200014e8 	.word	0x200014e8
 8006978:	20001010 	.word	0x20001010
 800697c:	200014a0 	.word	0x200014a0
 8006980:	2000100c 	.word	0x2000100c
 8006984:	200014f4 	.word	0x200014f4

08006988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <vTaskInternalSetTimeOutState+0x24>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006998:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <vTaskInternalSetTimeOutState+0x28>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	200014f8 	.word	0x200014f8
 80069b0:	200014e4 	.word	0x200014e4

080069b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10d      	bne.n	80069e0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	613b      	str	r3, [r7, #16]
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	e7fd      	b.n	80069dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	b672      	cpsid	i
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	b662      	cpsie	i
 80069fa:	60fb      	str	r3, [r7, #12]
}
 80069fc:	bf00      	nop
 80069fe:	bf00      	nop
 8006a00:	e7fd      	b.n	80069fe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006a02:	f000 ff9b 	bl	800793c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b1d      	ldr	r3, [pc, #116]	@ (8006a7c <xTaskCheckForTimeOut+0xc8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d102      	bne.n	8006a26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	e023      	b.n	8006a6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b15      	ldr	r3, [pc, #84]	@ (8006a80 <xTaskCheckForTimeOut+0xcc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d007      	beq.n	8006a42 <xTaskCheckForTimeOut+0x8e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e015      	b.n	8006a6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d20b      	bcs.n	8006a64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff ff95 	bl	8006988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	e004      	b.n	8006a6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a6e:	f000 ff9b 	bl	80079a8 <vPortExitCritical>

	return xReturn;
 8006a72:	69fb      	ldr	r3, [r7, #28]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200014e4 	.word	0x200014e4
 8006a80:	200014f8 	.word	0x200014f8

08006a84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a88:	4b03      	ldr	r3, [pc, #12]	@ (8006a98 <vTaskMissedYield+0x14>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	200014f4 	.word	0x200014f4

08006a9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006aa4:	f000 f852 	bl	8006b4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006aa8:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <prvIdleTask+0x28>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d9f9      	bls.n	8006aa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ab0:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <prvIdleTask+0x2c>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ac0:	e7f0      	b.n	8006aa4 <prvIdleTask+0x8>
 8006ac2:	bf00      	nop
 8006ac4:	20001010 	.word	0x20001010
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	e00c      	b.n	8006af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4a12      	ldr	r2, [pc, #72]	@ (8006b2c <prvInitialiseTaskLists+0x60>)
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fa40 	bl	8004f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3301      	adds	r3, #1
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b37      	cmp	r3, #55	@ 0x37
 8006af6:	d9ef      	bls.n	8006ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006af8:	480d      	ldr	r0, [pc, #52]	@ (8006b30 <prvInitialiseTaskLists+0x64>)
 8006afa:	f7fe fa37 	bl	8004f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006afe:	480d      	ldr	r0, [pc, #52]	@ (8006b34 <prvInitialiseTaskLists+0x68>)
 8006b00:	f7fe fa34 	bl	8004f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b04:	480c      	ldr	r0, [pc, #48]	@ (8006b38 <prvInitialiseTaskLists+0x6c>)
 8006b06:	f7fe fa31 	bl	8004f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b0a:	480c      	ldr	r0, [pc, #48]	@ (8006b3c <prvInitialiseTaskLists+0x70>)
 8006b0c:	f7fe fa2e 	bl	8004f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b10:	480b      	ldr	r0, [pc, #44]	@ (8006b40 <prvInitialiseTaskLists+0x74>)
 8006b12:	f7fe fa2b 	bl	8004f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <prvInitialiseTaskLists+0x78>)
 8006b18:	4a05      	ldr	r2, [pc, #20]	@ (8006b30 <prvInitialiseTaskLists+0x64>)
 8006b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <prvInitialiseTaskLists+0x7c>)
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <prvInitialiseTaskLists+0x68>)
 8006b20:	601a      	str	r2, [r3, #0]
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20001010 	.word	0x20001010
 8006b30:	20001470 	.word	0x20001470
 8006b34:	20001484 	.word	0x20001484
 8006b38:	200014a0 	.word	0x200014a0
 8006b3c:	200014b4 	.word	0x200014b4
 8006b40:	200014cc 	.word	0x200014cc
 8006b44:	20001498 	.word	0x20001498
 8006b48:	2000149c 	.word	0x2000149c

08006b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b52:	e019      	b.n	8006b88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b54:	f000 fef2 	bl	800793c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b58:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <prvCheckTasksWaitingTermination+0x50>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe fa8b 	bl	8005080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba0 <prvCheckTasksWaitingTermination+0x54>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	4a0b      	ldr	r2, [pc, #44]	@ (8006ba0 <prvCheckTasksWaitingTermination+0x54>)
 8006b72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x58>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x58>)
 8006b7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b7e:	f000 ff13 	bl	80079a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f810 	bl	8006ba8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b88:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <prvCheckTasksWaitingTermination+0x58>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e1      	bne.n	8006b54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200014b4 	.word	0x200014b4
 8006ba0:	200014e0 	.word	0x200014e0
 8006ba4:	200014c8 	.word	0x200014c8

08006ba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3354      	adds	r3, #84	@ 0x54
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fa15 	bl	8007fe4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d108      	bne.n	8006bd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f8b3 	bl	8007d34 <vPortFree>
				vPortFree( pxTCB );
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 f8b0 	bl	8007d34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bd4:	e01b      	b.n	8006c0e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d103      	bne.n	8006be8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f8a7 	bl	8007d34 <vPortFree>
	}
 8006be6:	e012      	b.n	8006c0e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d00d      	beq.n	8006c0e <prvDeleteTCB+0x66>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	60fb      	str	r3, [r7, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <prvDeleteTCB+0x62>
	}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c50 <prvResetNextTaskUnblockTime+0x38>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c28:	4b0a      	ldr	r3, [pc, #40]	@ (8006c54 <prvResetNextTaskUnblockTime+0x3c>)
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c30:	e008      	b.n	8006c44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c32:	4b07      	ldr	r3, [pc, #28]	@ (8006c50 <prvResetNextTaskUnblockTime+0x38>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4a04      	ldr	r2, [pc, #16]	@ (8006c54 <prvResetNextTaskUnblockTime+0x3c>)
 8006c42:	6013      	str	r3, [r2, #0]
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20001498 	.word	0x20001498
 8006c54:	20001500 	.word	0x20001500

08006c58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c5e:	4b05      	ldr	r3, [pc, #20]	@ (8006c74 <xTaskGetCurrentTaskHandle+0x1c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c64:	687b      	ldr	r3, [r7, #4]
	}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000100c 	.word	0x2000100c

08006c78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cac <xTaskGetSchedulerState+0x34>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d102      	bne.n	8006c8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c86:	2301      	movs	r3, #1
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	e008      	b.n	8006c9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8c:	4b08      	ldr	r3, [pc, #32]	@ (8006cb0 <xTaskGetSchedulerState+0x38>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c94:	2302      	movs	r3, #2
 8006c96:	607b      	str	r3, [r7, #4]
 8006c98:	e001      	b.n	8006c9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c9e:	687b      	ldr	r3, [r7, #4]
	}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	200014ec 	.word	0x200014ec
 8006cb0:	20001508 	.word	0x20001508

08006cb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d051      	beq.n	8006d6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cce:	4b2a      	ldr	r3, [pc, #168]	@ (8006d78 <xTaskPriorityInherit+0xc4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d241      	bcs.n	8006d5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	db06      	blt.n	8006cee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce0:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <xTaskPriorityInherit+0xc4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6959      	ldr	r1, [r3, #20]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8006d7c <xTaskPriorityInherit+0xc8>)
 8006d00:	4413      	add	r3, r2
 8006d02:	4299      	cmp	r1, r3
 8006d04:	d122      	bne.n	8006d4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe f9b8 	bl	8005080 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d10:	4b19      	ldr	r3, [pc, #100]	@ (8006d78 <xTaskPriorityInherit+0xc4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1e:	4b18      	ldr	r3, [pc, #96]	@ (8006d80 <xTaskPriorityInherit+0xcc>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d903      	bls.n	8006d2e <xTaskPriorityInherit+0x7a>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	4a15      	ldr	r2, [pc, #84]	@ (8006d80 <xTaskPriorityInherit+0xcc>)
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4a10      	ldr	r2, [pc, #64]	@ (8006d7c <xTaskPriorityInherit+0xc8>)
 8006d3c:	441a      	add	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f7fe f93e 	bl	8004fc6 <vListInsertEnd>
 8006d4a:	e004      	b.n	8006d56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <xTaskPriorityInherit+0xc4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d56:	2301      	movs	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	e008      	b.n	8006d6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <xTaskPriorityInherit+0xc4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d201      	bcs.n	8006d6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
	}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	2000100c 	.word	0x2000100c
 8006d7c:	20001010 	.word	0x20001010
 8006d80:	200014e8 	.word	0x200014e8

08006d84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d05c      	beq.n	8006e54 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d9a:	4b31      	ldr	r3, [pc, #196]	@ (8006e60 <xTaskPriorityDisinherit+0xdc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d00d      	beq.n	8006dc0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	b672      	cpsid	i
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	b662      	cpsie	i
 8006db8:	60fb      	str	r3, [r7, #12]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10d      	bne.n	8006de4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dcc:	b672      	cpsid	i
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	b662      	cpsie	i
 8006ddc:	60bb      	str	r3, [r7, #8]
}
 8006dde:	bf00      	nop
 8006de0:	bf00      	nop
 8006de2:	e7fd      	b.n	8006de0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de8:	1e5a      	subs	r2, r3, #1
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d02c      	beq.n	8006e54 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d128      	bne.n	8006e54 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe f93a 	bl	8005080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e24:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <xTaskPriorityDisinherit+0xe0>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d903      	bls.n	8006e34 <xTaskPriorityDisinherit+0xb0>
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	4a0c      	ldr	r2, [pc, #48]	@ (8006e64 <xTaskPriorityDisinherit+0xe0>)
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4a09      	ldr	r2, [pc, #36]	@ (8006e68 <xTaskPriorityDisinherit+0xe4>)
 8006e42:	441a      	add	r2, r3
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	f7fe f8bb 	bl	8004fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e54:	697b      	ldr	r3, [r7, #20]
	}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	2000100c 	.word	0x2000100c
 8006e64:	200014e8 	.word	0x200014e8
 8006e68:	20001010 	.word	0x20001010

08006e6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d070      	beq.n	8006f66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10d      	bne.n	8006ea8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	b672      	cpsid	i
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	b662      	cpsie	i
 8006ea0:	60fb      	str	r3, [r7, #12]
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d902      	bls.n	8006eb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	e002      	b.n	8006ebe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ebc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d04e      	beq.n	8006f66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d149      	bne.n	8006f66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ed2:	4b27      	ldr	r3, [pc, #156]	@ (8006f70 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d10d      	bne.n	8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	b672      	cpsid	i
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	b662      	cpsie	i
 8006ef0:	60bb      	str	r3, [r7, #8]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	db04      	blt.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	6959      	ldr	r1, [r3, #20]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4a13      	ldr	r2, [pc, #76]	@ (8006f74 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f26:	4413      	add	r3, r2
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d11c      	bne.n	8006f66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe f8a5 	bl	8005080 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f78 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d903      	bls.n	8006f4a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	4a0c      	ldr	r2, [pc, #48]	@ (8006f78 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4a07      	ldr	r2, [pc, #28]	@ (8006f74 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f58:	441a      	add	r2, r3
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe f830 	bl	8004fc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f66:	bf00      	nop
 8006f68:	3720      	adds	r7, #32
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	2000100c 	.word	0x2000100c
 8006f74:	20001010 	.word	0x20001010
 8006f78:	200014e8 	.word	0x200014e8

08006f7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f88:	4b05      	ldr	r3, [pc, #20]	@ (8006fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f8e:	3201      	adds	r2, #1
 8006f90:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006f92:	4b03      	ldr	r3, [pc, #12]	@ (8006fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f94:	681b      	ldr	r3, [r3, #0]
	}
 8006f96:	4618      	mov	r0, r3
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	2000100c 	.word	0x2000100c

08006fa4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fae:	4b21      	ldr	r3, [pc, #132]	@ (8007034 <prvAddCurrentTaskToDelayedList+0x90>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fb4:	4b20      	ldr	r3, [pc, #128]	@ (8007038 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe f860 	bl	8005080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d10a      	bne.n	8006fde <prvAddCurrentTaskToDelayedList+0x3a>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fce:	4b1a      	ldr	r3, [pc, #104]	@ (8007038 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4819      	ldr	r0, [pc, #100]	@ (800703c <prvAddCurrentTaskToDelayedList+0x98>)
 8006fd8:	f7fd fff5 	bl	8004fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fdc:	e026      	b.n	800702c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fe6:	4b14      	ldr	r3, [pc, #80]	@ (8007038 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d209      	bcs.n	800700a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff6:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7fe f803 	bl	800500e <vListInsert>
}
 8007008:	e010      	b.n	800702c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700a:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <prvAddCurrentTaskToDelayedList+0xa0>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4b0a      	ldr	r3, [pc, #40]	@ (8007038 <prvAddCurrentTaskToDelayedList+0x94>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f7fd fff9 	bl	800500e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800701c:	4b0a      	ldr	r3, [pc, #40]	@ (8007048 <prvAddCurrentTaskToDelayedList+0xa4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	d202      	bcs.n	800702c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007026:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6013      	str	r3, [r2, #0]
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200014e4 	.word	0x200014e4
 8007038:	2000100c 	.word	0x2000100c
 800703c:	200014cc 	.word	0x200014cc
 8007040:	2000149c 	.word	0x2000149c
 8007044:	20001498 	.word	0x20001498
 8007048:	20001500 	.word	0x20001500

0800704c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	@ 0x28
 8007050:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007056:	f000 fb21 	bl	800769c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800705a:	4b1e      	ldr	r3, [pc, #120]	@ (80070d4 <xTimerCreateTimerTask+0x88>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d021      	beq.n	80070a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800706a:	1d3a      	adds	r2, r7, #4
 800706c:	f107 0108 	add.w	r1, r7, #8
 8007070:	f107 030c 	add.w	r3, r7, #12
 8007074:	4618      	mov	r0, r3
 8007076:	f7fd ff5f 	bl	8004f38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	9202      	str	r2, [sp, #8]
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	2302      	movs	r3, #2
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2300      	movs	r3, #0
 800708a:	460a      	mov	r2, r1
 800708c:	4912      	ldr	r1, [pc, #72]	@ (80070d8 <xTimerCreateTimerTask+0x8c>)
 800708e:	4813      	ldr	r0, [pc, #76]	@ (80070dc <xTimerCreateTimerTask+0x90>)
 8007090:	f7fe ff6a 	bl	8005f68 <xTaskCreateStatic>
 8007094:	4603      	mov	r3, r0
 8007096:	4a12      	ldr	r2, [pc, #72]	@ (80070e0 <xTimerCreateTimerTask+0x94>)
 8007098:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800709a:	4b11      	ldr	r3, [pc, #68]	@ (80070e0 <xTimerCreateTimerTask+0x94>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070a2:	2301      	movs	r3, #1
 80070a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10d      	bne.n	80070c8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b0:	b672      	cpsid	i
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	b662      	cpsie	i
 80070c0:	613b      	str	r3, [r7, #16]
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	e7fd      	b.n	80070c4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80070c8:	697b      	ldr	r3, [r7, #20]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	2000153c 	.word	0x2000153c
 80070d8:	08008a58 	.word	0x08008a58
 80070dc:	08007225 	.word	0x08007225
 80070e0:	20001540 	.word	0x20001540

080070e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	@ 0x28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10d      	bne.n	8007118 <xTimerGenericCommand+0x34>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	b672      	cpsid	i
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	b662      	cpsie	i
 8007110:	623b      	str	r3, [r7, #32]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007118:	4b19      	ldr	r3, [pc, #100]	@ (8007180 <xTimerGenericCommand+0x9c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02a      	beq.n	8007176 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b05      	cmp	r3, #5
 8007130:	dc18      	bgt.n	8007164 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007132:	f7ff fda1 	bl	8006c78 <xTaskGetSchedulerState>
 8007136:	4603      	mov	r3, r0
 8007138:	2b02      	cmp	r3, #2
 800713a:	d109      	bne.n	8007150 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800713c:	4b10      	ldr	r3, [pc, #64]	@ (8007180 <xTimerGenericCommand+0x9c>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	f107 0110 	add.w	r1, r7, #16
 8007144:	2300      	movs	r3, #0
 8007146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007148:	f7fe f9da 	bl	8005500 <xQueueGenericSend>
 800714c:	6278      	str	r0, [r7, #36]	@ 0x24
 800714e:	e012      	b.n	8007176 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007150:	4b0b      	ldr	r3, [pc, #44]	@ (8007180 <xTimerGenericCommand+0x9c>)
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	f107 0110 	add.w	r1, r7, #16
 8007158:	2300      	movs	r3, #0
 800715a:	2200      	movs	r2, #0
 800715c:	f7fe f9d0 	bl	8005500 <xQueueGenericSend>
 8007160:	6278      	str	r0, [r7, #36]	@ 0x24
 8007162:	e008      	b.n	8007176 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007164:	4b06      	ldr	r3, [pc, #24]	@ (8007180 <xTimerGenericCommand+0x9c>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	f107 0110 	add.w	r1, r7, #16
 800716c:	2300      	movs	r3, #0
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	f7fe fad0 	bl	8005714 <xQueueGenericSendFromISR>
 8007174:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007178:	4618      	mov	r0, r3
 800717a:	3728      	adds	r7, #40	@ 0x28
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	2000153c 	.word	0x2000153c

08007184 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af02      	add	r7, sp, #8
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800718e:	4b24      	ldr	r3, [pc, #144]	@ (8007220 <prvProcessExpiredTimer+0x9c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fd ff6f 	bl	8005080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d025      	beq.n	80071fc <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	18d1      	adds	r1, r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	6978      	ldr	r0, [r7, #20]
 80071be:	f000 f8d7 	bl	8007370 <prvInsertTimerInActiveList>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d022      	beq.n	800720e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071c8:	2300      	movs	r3, #0
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	2300      	movs	r3, #0
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	2100      	movs	r1, #0
 80071d2:	6978      	ldr	r0, [r7, #20]
 80071d4:	f7ff ff86 	bl	80070e4 <xTimerGenericCommand>
 80071d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d116      	bne.n	800720e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	b672      	cpsid	i
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	b662      	cpsie	i
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	4798      	blx	r3
}
 8007216:	bf00      	nop
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20001534 	.word	0x20001534

08007224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f859 	bl	80072e8 <prvGetNextExpireTime>
 8007236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f805 	bl	800724c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007242:	f000 f8d7 	bl	80073f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007246:	bf00      	nop
 8007248:	e7f0      	b.n	800722c <prvTimerTask+0x8>
	...

0800724c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007256:	f7ff f8f9 	bl	800644c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f866 	bl	8007330 <prvSampleTimeNow>
 8007264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d130      	bne.n	80072ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <prvProcessTimerOrBlockTask+0x3c>
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	429a      	cmp	r2, r3
 8007278:	d806      	bhi.n	8007288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800727a:	f7ff f8f5 	bl	8006468 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff ff7f 	bl	8007184 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007286:	e024      	b.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d008      	beq.n	80072a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800728e:	4b13      	ldr	r3, [pc, #76]	@ (80072dc <prvProcessTimerOrBlockTask+0x90>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <prvProcessTimerOrBlockTask+0x50>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <prvProcessTimerOrBlockTask+0x52>
 800729c:	2300      	movs	r3, #0
 800729e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072a0:	4b0f      	ldr	r3, [pc, #60]	@ (80072e0 <prvProcessTimerOrBlockTask+0x94>)
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f7fe fe27 	bl	8005f00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072b2:	f7ff f8d9 	bl	8006468 <xTaskResumeAll>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072bc:	4b09      	ldr	r3, [pc, #36]	@ (80072e4 <prvProcessTimerOrBlockTask+0x98>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
}
 80072cc:	e001      	b.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ce:	f7ff f8cb 	bl	8006468 <xTaskResumeAll>
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20001538 	.word	0x20001538
 80072e0:	2000153c 	.word	0x2000153c
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072f0:	4b0e      	ldr	r3, [pc, #56]	@ (800732c <prvGetNextExpireTime+0x44>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <prvGetNextExpireTime+0x16>
 80072fa:	2201      	movs	r2, #1
 80072fc:	e000      	b.n	8007300 <prvGetNextExpireTime+0x18>
 80072fe:	2200      	movs	r2, #0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d105      	bne.n	8007318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800730c:	4b07      	ldr	r3, [pc, #28]	@ (800732c <prvGetNextExpireTime+0x44>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e001      	b.n	800731c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800731c:	68fb      	ldr	r3, [r7, #12]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20001534 	.word	0x20001534

08007330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007338:	f7ff f936 	bl	80065a8 <xTaskGetTickCount>
 800733c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800733e:	4b0b      	ldr	r3, [pc, #44]	@ (800736c <prvSampleTimeNow+0x3c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d205      	bcs.n	8007354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007348:	f000 f940 	bl	80075cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e002      	b.n	800735a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800735a:	4a04      	ldr	r2, [pc, #16]	@ (800736c <prvSampleTimeNow+0x3c>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20001544 	.word	0x20001544

08007370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d812      	bhi.n	80073bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e01b      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073aa:	4b10      	ldr	r3, [pc, #64]	@ (80073ec <prvInsertTimerInActiveList+0x7c>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7fd fe2a 	bl	800500e <vListInsert>
 80073ba:	e012      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d206      	bcs.n	80073d2 <prvInsertTimerInActiveList+0x62>
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d302      	bcc.n	80073d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073cc:	2301      	movs	r3, #1
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	e007      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073d2:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <prvInsertTimerInActiveList+0x80>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fd fe16 	bl	800500e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20001538 	.word	0x20001538
 80073f0:	20001534 	.word	0x20001534

080073f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08e      	sub	sp, #56	@ 0x38
 80073f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073fa:	e0d4      	b.n	80075a6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da1b      	bge.n	800743a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	3304      	adds	r3, #4
 8007406:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10d      	bne.n	800742a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	b672      	cpsid	i
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	b662      	cpsie	i
 8007422:	61fb      	str	r3, [r7, #28]
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800742a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007430:	6850      	ldr	r0, [r2, #4]
 8007432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007434:	6892      	ldr	r2, [r2, #8]
 8007436:	4611      	mov	r1, r2
 8007438:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f2c0 80b2 	blt.w	80075a6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	3304      	adds	r3, #4
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd fe14 	bl	8005080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007458:	463b      	mov	r3, r7
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff ff68 	bl	8007330 <prvSampleTimeNow>
 8007460:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b09      	cmp	r3, #9
 8007466:	f200 809b 	bhi.w	80075a0 <prvProcessReceivedCommands+0x1ac>
 800746a:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <prvProcessReceivedCommands+0x7c>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	08007499 	.word	0x08007499
 8007474:	08007499 	.word	0x08007499
 8007478:	08007499 	.word	0x08007499
 800747c:	08007513 	.word	0x08007513
 8007480:	08007527 	.word	0x08007527
 8007484:	08007577 	.word	0x08007577
 8007488:	08007499 	.word	0x08007499
 800748c:	08007499 	.word	0x08007499
 8007490:	08007513 	.word	0x08007513
 8007494:	08007527 	.word	0x08007527
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	18d1      	adds	r1, r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b8:	f7ff ff5a 	bl	8007370 <prvInsertTimerInActiveList>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d070      	beq.n	80075a4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d065      	beq.n	80075a4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	441a      	add	r2, r3
 80074e0:	2300      	movs	r3, #0
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074ea:	f7ff fdfb 	bl	80070e4 <xTimerGenericCommand>
 80074ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d156      	bne.n	80075a4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	b672      	cpsid	i
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	b662      	cpsie	i
 800750a:	61bb      	str	r3, [r7, #24]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	b2da      	uxtb	r2, r3
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007524:	e03f      	b.n	80075a6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	b2da      	uxtb	r2, r3
 8007532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10d      	bne.n	8007562 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	b672      	cpsid	i
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	b662      	cpsie	i
 800755a:	617b      	str	r3, [r7, #20]
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	e7fd      	b.n	800755e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	18d1      	adds	r1, r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007570:	f7ff fefe 	bl	8007370 <prvInsertTimerInActiveList>
					break;
 8007574:	e017      	b.n	80075a6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007586:	f000 fbd5 	bl	8007d34 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800758a:	e00c      	b.n	80075a6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007592:	f023 0301 	bic.w	r3, r3, #1
 8007596:	b2da      	uxtb	r2, r3
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800759e:	e002      	b.n	80075a6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80075a0:	bf00      	nop
 80075a2:	e000      	b.n	80075a6 <prvProcessReceivedCommands+0x1b2>
					break;
 80075a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075a6:	4b08      	ldr	r3, [pc, #32]	@ (80075c8 <prvProcessReceivedCommands+0x1d4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	1d39      	adds	r1, r7, #4
 80075ac:	2200      	movs	r2, #0
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe f954 	bl	800585c <xQueueReceive>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f47f af20 	bne.w	80073fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	3730      	adds	r7, #48	@ 0x30
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	2000153c 	.word	0x2000153c

080075cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075d2:	e04b      	b.n	800766c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007694 <prvSwitchTimerLists+0xc8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075de:	4b2d      	ldr	r3, [pc, #180]	@ (8007694 <prvSwitchTimerLists+0xc8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fd47 	bl	8005080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d031      	beq.n	800766c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4413      	add	r3, r2
 8007610:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	429a      	cmp	r2, r3
 8007618:	d90e      	bls.n	8007638 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007626:	4b1b      	ldr	r3, [pc, #108]	@ (8007694 <prvSwitchTimerLists+0xc8>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3304      	adds	r3, #4
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f7fd fcec 	bl	800500e <vListInsert>
 8007636:	e019      	b.n	800766c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007638:	2300      	movs	r3, #0
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	2300      	movs	r3, #0
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	2100      	movs	r1, #0
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fd4e 	bl	80070e4 <xTimerGenericCommand>
 8007648:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007654:	b672      	cpsid	i
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	b662      	cpsie	i
 8007664:	603b      	str	r3, [r7, #0]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800766c:	4b09      	ldr	r3, [pc, #36]	@ (8007694 <prvSwitchTimerLists+0xc8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1ae      	bne.n	80075d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007676:	4b07      	ldr	r3, [pc, #28]	@ (8007694 <prvSwitchTimerLists+0xc8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800767c:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <prvSwitchTimerLists+0xcc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a04      	ldr	r2, [pc, #16]	@ (8007694 <prvSwitchTimerLists+0xc8>)
 8007682:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007684:	4a04      	ldr	r2, [pc, #16]	@ (8007698 <prvSwitchTimerLists+0xcc>)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	6013      	str	r3, [r2, #0]
}
 800768a:	bf00      	nop
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20001534 	.word	0x20001534
 8007698:	20001538 	.word	0x20001538

0800769c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076a2:	f000 f94b 	bl	800793c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076a6:	4b15      	ldr	r3, [pc, #84]	@ (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d120      	bne.n	80076f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076ae:	4814      	ldr	r0, [pc, #80]	@ (8007700 <prvCheckForValidListAndQueue+0x64>)
 80076b0:	f7fd fc5c 	bl	8004f6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076b4:	4813      	ldr	r0, [pc, #76]	@ (8007704 <prvCheckForValidListAndQueue+0x68>)
 80076b6:	f7fd fc59 	bl	8004f6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076ba:	4b13      	ldr	r3, [pc, #76]	@ (8007708 <prvCheckForValidListAndQueue+0x6c>)
 80076bc:	4a10      	ldr	r2, [pc, #64]	@ (8007700 <prvCheckForValidListAndQueue+0x64>)
 80076be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076c0:	4b12      	ldr	r3, [pc, #72]	@ (800770c <prvCheckForValidListAndQueue+0x70>)
 80076c2:	4a10      	ldr	r2, [pc, #64]	@ (8007704 <prvCheckForValidListAndQueue+0x68>)
 80076c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076c6:	2300      	movs	r3, #0
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4b11      	ldr	r3, [pc, #68]	@ (8007710 <prvCheckForValidListAndQueue+0x74>)
 80076cc:	4a11      	ldr	r2, [pc, #68]	@ (8007714 <prvCheckForValidListAndQueue+0x78>)
 80076ce:	2110      	movs	r1, #16
 80076d0:	200a      	movs	r0, #10
 80076d2:	f7fd fd6b 	bl	80051ac <xQueueGenericCreateStatic>
 80076d6:	4603      	mov	r3, r0
 80076d8:	4a08      	ldr	r2, [pc, #32]	@ (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	490b      	ldr	r1, [pc, #44]	@ (8007718 <prvCheckForValidListAndQueue+0x7c>)
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fbde 	bl	8005eac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076f0:	f000 f95a 	bl	80079a8 <vPortExitCritical>
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	2000153c 	.word	0x2000153c
 8007700:	2000150c 	.word	0x2000150c
 8007704:	20001520 	.word	0x20001520
 8007708:	20001534 	.word	0x20001534
 800770c:	20001538 	.word	0x20001538
 8007710:	200015e8 	.word	0x200015e8
 8007714:	20001548 	.word	0x20001548
 8007718:	08008a60 	.word	0x08008a60

0800771c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3b04      	subs	r3, #4
 800772c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b04      	subs	r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f023 0201 	bic.w	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3b04      	subs	r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800774c:	4a0c      	ldr	r2, [pc, #48]	@ (8007780 <pxPortInitialiseStack+0x64>)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3b14      	subs	r3, #20
 8007756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3b04      	subs	r3, #4
 8007762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f06f 0202 	mvn.w	r2, #2
 800776a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b20      	subs	r3, #32
 8007770:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007772:	68fb      	ldr	r3, [r7, #12]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	08007785 	.word	0x08007785

08007784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800778e:	4b15      	ldr	r3, [pc, #84]	@ (80077e4 <prvTaskExitError+0x60>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d00d      	beq.n	80077b4 <prvTaskExitError+0x30>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779c:	b672      	cpsid	i
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	b662      	cpsie	i
 80077ac:	60fb      	str	r3, [r7, #12]
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <prvTaskExitError+0x2c>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b8:	b672      	cpsid	i
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	b662      	cpsie	i
 80077c8:	60bb      	str	r3, [r7, #8]
}
 80077ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077cc:	bf00      	nop
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0fc      	beq.n	80077ce <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	2000000c 	.word	0x2000000c
	...

080077f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077f0:	4b07      	ldr	r3, [pc, #28]	@ (8007810 <pxCurrentTCBConst2>)
 80077f2:	6819      	ldr	r1, [r3, #0]
 80077f4:	6808      	ldr	r0, [r1, #0]
 80077f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	f380 8809 	msr	PSP, r0
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8811 	msr	BASEPRI, r0
 800780a:	4770      	bx	lr
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst2>:
 8007810:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007818:	4808      	ldr	r0, [pc, #32]	@ (800783c <prvPortStartFirstTask+0x24>)
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	6800      	ldr	r0, [r0, #0]
 800781e:	f380 8808 	msr	MSP, r0
 8007822:	f04f 0000 	mov.w	r0, #0
 8007826:	f380 8814 	msr	CONTROL, r0
 800782a:	b662      	cpsie	i
 800782c:	b661      	cpsie	f
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	df00      	svc	0
 8007838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800783a:	bf00      	nop
 800783c:	e000ed08 	.word	0xe000ed08

08007840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007846:	4b37      	ldr	r3, [pc, #220]	@ (8007924 <xPortStartScheduler+0xe4>)
 8007848:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	22ff      	movs	r2, #255	@ 0xff
 8007856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007868:	b2da      	uxtb	r2, r3
 800786a:	4b2f      	ldr	r3, [pc, #188]	@ (8007928 <xPortStartScheduler+0xe8>)
 800786c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800786e:	4b2f      	ldr	r3, [pc, #188]	@ (800792c <xPortStartScheduler+0xec>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007874:	e009      	b.n	800788a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007876:	4b2d      	ldr	r3, [pc, #180]	@ (800792c <xPortStartScheduler+0xec>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	4a2b      	ldr	r2, [pc, #172]	@ (800792c <xPortStartScheduler+0xec>)
 800787e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007892:	2b80      	cmp	r3, #128	@ 0x80
 8007894:	d0ef      	beq.n	8007876 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007896:	4b25      	ldr	r3, [pc, #148]	@ (800792c <xPortStartScheduler+0xec>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1c3 0307 	rsb	r3, r3, #7
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00d      	beq.n	80078be <xPortStartScheduler+0x7e>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	b672      	cpsid	i
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	b662      	cpsie	i
 80078b6:	60bb      	str	r3, [r7, #8]
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078be:	4b1b      	ldr	r3, [pc, #108]	@ (800792c <xPortStartScheduler+0xec>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	4a19      	ldr	r2, [pc, #100]	@ (800792c <xPortStartScheduler+0xec>)
 80078c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c8:	4b18      	ldr	r3, [pc, #96]	@ (800792c <xPortStartScheduler+0xec>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078d0:	4a16      	ldr	r2, [pc, #88]	@ (800792c <xPortStartScheduler+0xec>)
 80078d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078dc:	4b14      	ldr	r3, [pc, #80]	@ (8007930 <xPortStartScheduler+0xf0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a13      	ldr	r2, [pc, #76]	@ (8007930 <xPortStartScheduler+0xf0>)
 80078e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e8:	4b11      	ldr	r3, [pc, #68]	@ (8007930 <xPortStartScheduler+0xf0>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a10      	ldr	r2, [pc, #64]	@ (8007930 <xPortStartScheduler+0xf0>)
 80078ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078f4:	f000 f8dc 	bl	8007ab0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <xPortStartScheduler+0xf4>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078fe:	f000 f8fb 	bl	8007af8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007902:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <xPortStartScheduler+0xf8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a0c      	ldr	r2, [pc, #48]	@ (8007938 <xPortStartScheduler+0xf8>)
 8007908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800790c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800790e:	f7ff ff83 	bl	8007818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007912:	f7fe ff15 	bl	8006740 <vTaskSwitchContext>
	prvTaskExitError();
 8007916:	f7ff ff35 	bl	8007784 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	e000e400 	.word	0xe000e400
 8007928:	20001638 	.word	0x20001638
 800792c:	2000163c 	.word	0x2000163c
 8007930:	e000ed20 	.word	0xe000ed20
 8007934:	2000000c 	.word	0x2000000c
 8007938:	e000ef34 	.word	0xe000ef34

0800793c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007946:	b672      	cpsid	i
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	b662      	cpsie	i
 8007956:	607b      	str	r3, [r7, #4]
}
 8007958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800795a:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <vPortEnterCritical+0x64>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	4a0f      	ldr	r2, [pc, #60]	@ (80079a0 <vPortEnterCritical+0x64>)
 8007962:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007964:	4b0e      	ldr	r3, [pc, #56]	@ (80079a0 <vPortEnterCritical+0x64>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d112      	bne.n	8007992 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800796c:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <vPortEnterCritical+0x68>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00d      	beq.n	8007992 <vPortEnterCritical+0x56>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	b672      	cpsid	i
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	b662      	cpsie	i
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <vPortEnterCritical+0x52>
	}
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	2000000c 	.word	0x2000000c
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ae:	4b13      	ldr	r3, [pc, #76]	@ (80079fc <vPortExitCritical+0x54>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10d      	bne.n	80079d2 <vPortExitCritical+0x2a>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	b672      	cpsid	i
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	b662      	cpsie	i
 80079ca:	607b      	str	r3, [r7, #4]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <vPortExitCritical+0x54>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	4a08      	ldr	r2, [pc, #32]	@ (80079fc <vPortExitCritical+0x54>)
 80079da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079dc:	4b07      	ldr	r3, [pc, #28]	@ (80079fc <vPortExitCritical+0x54>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <vPortExitCritical+0x48>
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f383 8811 	msr	BASEPRI, r3
}
 80079ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	2000000c 	.word	0x2000000c

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	@ (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a24:	b672      	cpsid	i
 8007a26:	f380 8811 	msr	BASEPRI, r0
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	b662      	cpsie	i
 8007a34:	f7fe fe84 	bl	8006740 <vTaskSwitchContext>
 8007a38:	f04f 0000 	mov.w	r0, #0
 8007a3c:	f380 8811 	msr	BASEPRI, r0
 8007a40:	bc09      	pop	{r0, r3}
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	f01e 0f10 	tst.w	lr, #16
 8007a4e:	bf08      	it	eq
 8007a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a54:	f380 8809 	msr	PSP, r0
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop

08007a60 <pxCurrentTCBConst>:
 8007a60:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	b672      	cpsid	i
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	b662      	cpsie	i
 8007a82:	607b      	str	r3, [r7, #4]
}
 8007a84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a86:	f7fe fd9f 	bl	80065c8 <xTaskIncrementTick>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a90:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <SysTick_Handler+0x44>)
 8007a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	f383 8811 	msr	BASEPRI, r3
}
 8007aa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	e000ed04 	.word	0xe000ed04

08007ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <vPortSetupTimerInterrupt+0x34>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007aba:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae8 <vPortSetupTimerInterrupt+0x38>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8007aec <vPortSetupTimerInterrupt+0x3c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8007af0 <vPortSetupTimerInterrupt+0x40>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	099b      	lsrs	r3, r3, #6
 8007acc:	4a09      	ldr	r2, [pc, #36]	@ (8007af4 <vPortSetupTimerInterrupt+0x44>)
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ad2:	4b04      	ldr	r3, [pc, #16]	@ (8007ae4 <vPortSetupTimerInterrupt+0x34>)
 8007ad4:	2207      	movs	r2, #7
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	e000e010 	.word	0xe000e010
 8007ae8:	e000e018 	.word	0xe000e018
 8007aec:	20000000 	.word	0x20000000
 8007af0:	10624dd3 	.word	0x10624dd3
 8007af4:	e000e014 	.word	0xe000e014

08007af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b08 <vPortEnableVFP+0x10>
 8007afc:	6801      	ldr	r1, [r0, #0]
 8007afe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b02:	6001      	str	r1, [r0, #0]
 8007b04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b06:	bf00      	nop
 8007b08:	e000ed88 	.word	0xe000ed88

08007b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b12:	f3ef 8305 	mrs	r3, IPSR
 8007b16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b0f      	cmp	r3, #15
 8007b1c:	d917      	bls.n	8007b4e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b88 <vPortValidateInterruptPriority+0x7c>)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b28:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <vPortValidateInterruptPriority+0x80>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	7afa      	ldrb	r2, [r7, #11]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d20d      	bcs.n	8007b4e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	b672      	cpsid	i
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	b662      	cpsie	i
 8007b46:	607b      	str	r3, [r7, #4]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b4e:	4b10      	ldr	r3, [pc, #64]	@ (8007b90 <vPortValidateInterruptPriority+0x84>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b56:	4b0f      	ldr	r3, [pc, #60]	@ (8007b94 <vPortValidateInterruptPriority+0x88>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d90d      	bls.n	8007b7a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	b672      	cpsid	i
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	b662      	cpsie	i
 8007b72:	603b      	str	r3, [r7, #0]
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	e7fd      	b.n	8007b76 <vPortValidateInterruptPriority+0x6a>
	}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	e000e3f0 	.word	0xe000e3f0
 8007b8c:	20001638 	.word	0x20001638
 8007b90:	e000ed0c 	.word	0xe000ed0c
 8007b94:	2000163c 	.word	0x2000163c

08007b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	@ 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ba4:	f7fe fc52 	bl	800644c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8007d20 <pvPortMalloc+0x188>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bb0:	f000 f920 	bl	8007df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8007d24 <pvPortMalloc+0x18c>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 8094 	bne.w	8007cea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d020      	beq.n	8007c0a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007bc8:	2208      	movs	r2, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f023 0307 	bic.w	r3, r3, #7
 8007be0:	3308      	adds	r3, #8
 8007be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00d      	beq.n	8007c0a <pvPortMalloc+0x72>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	b672      	cpsid	i
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	b662      	cpsie	i
 8007c02:	617b      	str	r3, [r7, #20]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d06c      	beq.n	8007cea <pvPortMalloc+0x152>
 8007c10:	4b45      	ldr	r3, [pc, #276]	@ (8007d28 <pvPortMalloc+0x190>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d867      	bhi.n	8007cea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c1a:	4b44      	ldr	r3, [pc, #272]	@ (8007d2c <pvPortMalloc+0x194>)
 8007c1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c1e:	4b43      	ldr	r3, [pc, #268]	@ (8007d2c <pvPortMalloc+0x194>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c24:	e004      	b.n	8007c30 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d903      	bls.n	8007c42 <pvPortMalloc+0xaa>
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f1      	bne.n	8007c26 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c42:	4b37      	ldr	r3, [pc, #220]	@ (8007d20 <pvPortMalloc+0x188>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d04e      	beq.n	8007cea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2208      	movs	r2, #8
 8007c52:	4413      	add	r3, r2
 8007c54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	1ad2      	subs	r2, r2, r3
 8007c66:	2308      	movs	r3, #8
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d922      	bls.n	8007cb4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4413      	add	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00d      	beq.n	8007c9c <pvPortMalloc+0x104>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	b672      	cpsid	i
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	b662      	cpsie	i
 8007c94:	613b      	str	r3, [r7, #16]
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	1ad2      	subs	r2, r2, r3
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cae:	69b8      	ldr	r0, [r7, #24]
 8007cb0:	f000 f902 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d28 <pvPortMalloc+0x190>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8007d28 <pvPortMalloc+0x190>)
 8007cc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cc2:	4b19      	ldr	r3, [pc, #100]	@ (8007d28 <pvPortMalloc+0x190>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d30 <pvPortMalloc+0x198>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d203      	bcs.n	8007cd6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cce:	4b16      	ldr	r3, [pc, #88]	@ (8007d28 <pvPortMalloc+0x190>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a17      	ldr	r2, [pc, #92]	@ (8007d30 <pvPortMalloc+0x198>)
 8007cd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	4b12      	ldr	r3, [pc, #72]	@ (8007d24 <pvPortMalloc+0x18c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cea:	f7fe fbbd 	bl	8006468 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00d      	beq.n	8007d14 <pvPortMalloc+0x17c>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	b672      	cpsid	i
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	b662      	cpsie	i
 8007d0c:	60fb      	str	r3, [r7, #12]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <pvPortMalloc+0x178>
	return pvReturn;
 8007d14:	69fb      	ldr	r3, [r7, #28]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3728      	adds	r7, #40	@ 0x28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20005248 	.word	0x20005248
 8007d24:	20005254 	.word	0x20005254
 8007d28:	2000524c 	.word	0x2000524c
 8007d2c:	20005240 	.word	0x20005240
 8007d30:	20005250 	.word	0x20005250

08007d34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d04e      	beq.n	8007de4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d46:	2308      	movs	r3, #8
 8007d48:	425b      	negs	r3, r3
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	4b24      	ldr	r3, [pc, #144]	@ (8007dec <vPortFree+0xb8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10d      	bne.n	8007d7e <vPortFree+0x4a>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	b672      	cpsid	i
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	b662      	cpsie	i
 8007d76:	60fb      	str	r3, [r7, #12]
}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	e7fd      	b.n	8007d7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00d      	beq.n	8007da2 <vPortFree+0x6e>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	60bb      	str	r3, [r7, #8]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4b11      	ldr	r3, [pc, #68]	@ (8007dec <vPortFree+0xb8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d019      	beq.n	8007de4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d115      	bne.n	8007de4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007dec <vPortFree+0xb8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dc8:	f7fe fb40 	bl	800644c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <vPortFree+0xbc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	4a06      	ldr	r2, [pc, #24]	@ (8007df0 <vPortFree+0xbc>)
 8007dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f000 f86c 	bl	8007eb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007de0:	f7fe fb42 	bl	8006468 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20005254 	.word	0x20005254
 8007df0:	2000524c 	.word	0x2000524c

08007df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dfa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e00:	4b27      	ldr	r3, [pc, #156]	@ (8007ea0 <prvHeapInit+0xac>)
 8007e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea0 <prvHeapInit+0xac>)
 8007e24:	4413      	add	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea4 <prvHeapInit+0xb0>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e32:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea4 <prvHeapInit+0xb0>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e40:	2208      	movs	r2, #8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e56:	4b14      	ldr	r3, [pc, #80]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e5e:	4b12      	ldr	r3, [pc, #72]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	@ (8007eac <prvHeapInit+0xb8>)
 8007e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <prvHeapInit+0xbc>)
 8007e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e8c:	4b09      	ldr	r3, [pc, #36]	@ (8007eb4 <prvHeapInit+0xc0>)
 8007e8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20001640 	.word	0x20001640
 8007ea4:	20005240 	.word	0x20005240
 8007ea8:	20005248 	.word	0x20005248
 8007eac:	20005250 	.word	0x20005250
 8007eb0:	2000524c 	.word	0x2000524c
 8007eb4:	20005254 	.word	0x20005254

08007eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ec0:	4b28      	ldr	r3, [pc, #160]	@ (8007f64 <prvInsertBlockIntoFreeList+0xac>)
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e002      	b.n	8007ecc <prvInsertBlockIntoFreeList+0x14>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d8f7      	bhi.n	8007ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d108      	bne.n	8007efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	441a      	add	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d118      	bne.n	8007f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b15      	ldr	r3, [pc, #84]	@ (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d00d      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e008      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f36:	4b0c      	ldr	r3, [pc, #48]	@ (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e003      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d002      	beq.n	8007f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20005240 	.word	0x20005240
 8007f68:	20005248 	.word	0x20005248

08007f6c <sniprintf>:
 8007f6c:	b40c      	push	{r2, r3}
 8007f6e:	b530      	push	{r4, r5, lr}
 8007f70:	4b17      	ldr	r3, [pc, #92]	@ (8007fd0 <sniprintf+0x64>)
 8007f72:	1e0c      	subs	r4, r1, #0
 8007f74:	681d      	ldr	r5, [r3, #0]
 8007f76:	b09d      	sub	sp, #116	@ 0x74
 8007f78:	da08      	bge.n	8007f8c <sniprintf+0x20>
 8007f7a:	238b      	movs	r3, #139	@ 0x8b
 8007f7c:	602b      	str	r3, [r5, #0]
 8007f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f82:	b01d      	add	sp, #116	@ 0x74
 8007f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f88:	b002      	add	sp, #8
 8007f8a:	4770      	bx	lr
 8007f8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f94:	bf14      	ite	ne
 8007f96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f9a:	4623      	moveq	r3, r4
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	9006      	str	r0, [sp, #24]
 8007fa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fae:	ab21      	add	r3, sp, #132	@ 0x84
 8007fb0:	a902      	add	r1, sp, #8
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	f000 f9f9 	bl	80083ac <_svfiprintf_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	bfbc      	itt	lt
 8007fbe:	238b      	movlt	r3, #139	@ 0x8b
 8007fc0:	602b      	strlt	r3, [r5, #0]
 8007fc2:	2c00      	cmp	r4, #0
 8007fc4:	d0dd      	beq.n	8007f82 <sniprintf+0x16>
 8007fc6:	9b02      	ldr	r3, [sp, #8]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	e7d9      	b.n	8007f82 <sniprintf+0x16>
 8007fce:	bf00      	nop
 8007fd0:	20000010 	.word	0x20000010

08007fd4 <memset>:
 8007fd4:	4402      	add	r2, r0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d100      	bne.n	8007fde <memset+0xa>
 8007fdc:	4770      	bx	lr
 8007fde:	f803 1b01 	strb.w	r1, [r3], #1
 8007fe2:	e7f9      	b.n	8007fd8 <memset+0x4>

08007fe4 <_reclaim_reent>:
 8007fe4:	4b29      	ldr	r3, [pc, #164]	@ (800808c <_reclaim_reent+0xa8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4283      	cmp	r3, r0
 8007fea:	b570      	push	{r4, r5, r6, lr}
 8007fec:	4604      	mov	r4, r0
 8007fee:	d04b      	beq.n	8008088 <_reclaim_reent+0xa4>
 8007ff0:	69c3      	ldr	r3, [r0, #28]
 8007ff2:	b1ab      	cbz	r3, 8008020 <_reclaim_reent+0x3c>
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	b16b      	cbz	r3, 8008014 <_reclaim_reent+0x30>
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	69e3      	ldr	r3, [r4, #28]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	5959      	ldr	r1, [r3, r5]
 8008000:	2900      	cmp	r1, #0
 8008002:	d13b      	bne.n	800807c <_reclaim_reent+0x98>
 8008004:	3504      	adds	r5, #4
 8008006:	2d80      	cmp	r5, #128	@ 0x80
 8008008:	d1f7      	bne.n	8007ffa <_reclaim_reent+0x16>
 800800a:	69e3      	ldr	r3, [r4, #28]
 800800c:	4620      	mov	r0, r4
 800800e:	68d9      	ldr	r1, [r3, #12]
 8008010:	f000 f878 	bl	8008104 <_free_r>
 8008014:	69e3      	ldr	r3, [r4, #28]
 8008016:	6819      	ldr	r1, [r3, #0]
 8008018:	b111      	cbz	r1, 8008020 <_reclaim_reent+0x3c>
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f872 	bl	8008104 <_free_r>
 8008020:	6961      	ldr	r1, [r4, #20]
 8008022:	b111      	cbz	r1, 800802a <_reclaim_reent+0x46>
 8008024:	4620      	mov	r0, r4
 8008026:	f000 f86d 	bl	8008104 <_free_r>
 800802a:	69e1      	ldr	r1, [r4, #28]
 800802c:	b111      	cbz	r1, 8008034 <_reclaim_reent+0x50>
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f868 	bl	8008104 <_free_r>
 8008034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008036:	b111      	cbz	r1, 800803e <_reclaim_reent+0x5a>
 8008038:	4620      	mov	r0, r4
 800803a:	f000 f863 	bl	8008104 <_free_r>
 800803e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008040:	b111      	cbz	r1, 8008048 <_reclaim_reent+0x64>
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f85e 	bl	8008104 <_free_r>
 8008048:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800804a:	b111      	cbz	r1, 8008052 <_reclaim_reent+0x6e>
 800804c:	4620      	mov	r0, r4
 800804e:	f000 f859 	bl	8008104 <_free_r>
 8008052:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008054:	b111      	cbz	r1, 800805c <_reclaim_reent+0x78>
 8008056:	4620      	mov	r0, r4
 8008058:	f000 f854 	bl	8008104 <_free_r>
 800805c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800805e:	b111      	cbz	r1, 8008066 <_reclaim_reent+0x82>
 8008060:	4620      	mov	r0, r4
 8008062:	f000 f84f 	bl	8008104 <_free_r>
 8008066:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008068:	b111      	cbz	r1, 8008070 <_reclaim_reent+0x8c>
 800806a:	4620      	mov	r0, r4
 800806c:	f000 f84a 	bl	8008104 <_free_r>
 8008070:	6a23      	ldr	r3, [r4, #32]
 8008072:	b14b      	cbz	r3, 8008088 <_reclaim_reent+0xa4>
 8008074:	4620      	mov	r0, r4
 8008076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800807a:	4718      	bx	r3
 800807c:	680e      	ldr	r6, [r1, #0]
 800807e:	4620      	mov	r0, r4
 8008080:	f000 f840 	bl	8008104 <_free_r>
 8008084:	4631      	mov	r1, r6
 8008086:	e7bb      	b.n	8008000 <_reclaim_reent+0x1c>
 8008088:	bd70      	pop	{r4, r5, r6, pc}
 800808a:	bf00      	nop
 800808c:	20000010 	.word	0x20000010

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	@ (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000010 	.word	0x20000010

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4d0d      	ldr	r5, [pc, #52]	@ (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	@ (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2600      	movs	r6, #0
 80080a8:	42a6      	cmp	r6, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4d0b      	ldr	r5, [pc, #44]	@ (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	@ (80080e0 <__libc_init_array+0x44>)
 80080b0:	f000 fc66 	bl	8008980 <_init>
 80080b4:	1b64      	subs	r4, r4, r5
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2600      	movs	r6, #0
 80080ba:	42a6      	cmp	r6, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c4:	4798      	blx	r3
 80080c6:	3601      	adds	r6, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ce:	4798      	blx	r3
 80080d0:	3601      	adds	r6, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	08008b38 	.word	0x08008b38
 80080d8:	08008b38 	.word	0x08008b38
 80080dc:	08008b38 	.word	0x08008b38
 80080e0:	08008b3c 	.word	0x08008b3c

080080e4 <__retarget_lock_acquire_recursive>:
 80080e4:	4770      	bx	lr

080080e6 <__retarget_lock_release_recursive>:
 80080e6:	4770      	bx	lr

080080e8 <memcpy>:
 80080e8:	440a      	add	r2, r1
 80080ea:	4291      	cmp	r1, r2
 80080ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f0:	d100      	bne.n	80080f4 <memcpy+0xc>
 80080f2:	4770      	bx	lr
 80080f4:	b510      	push	{r4, lr}
 80080f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fe:	4291      	cmp	r1, r2
 8008100:	d1f9      	bne.n	80080f6 <memcpy+0xe>
 8008102:	bd10      	pop	{r4, pc}

08008104 <_free_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4605      	mov	r5, r0
 8008108:	2900      	cmp	r1, #0
 800810a:	d041      	beq.n	8008190 <_free_r+0x8c>
 800810c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008110:	1f0c      	subs	r4, r1, #4
 8008112:	2b00      	cmp	r3, #0
 8008114:	bfb8      	it	lt
 8008116:	18e4      	addlt	r4, r4, r3
 8008118:	f000 f8e0 	bl	80082dc <__malloc_lock>
 800811c:	4a1d      	ldr	r2, [pc, #116]	@ (8008194 <_free_r+0x90>)
 800811e:	6813      	ldr	r3, [r2, #0]
 8008120:	b933      	cbnz	r3, 8008130 <_free_r+0x2c>
 8008122:	6063      	str	r3, [r4, #4]
 8008124:	6014      	str	r4, [r2, #0]
 8008126:	4628      	mov	r0, r5
 8008128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800812c:	f000 b8dc 	b.w	80082e8 <__malloc_unlock>
 8008130:	42a3      	cmp	r3, r4
 8008132:	d908      	bls.n	8008146 <_free_r+0x42>
 8008134:	6820      	ldr	r0, [r4, #0]
 8008136:	1821      	adds	r1, r4, r0
 8008138:	428b      	cmp	r3, r1
 800813a:	bf01      	itttt	eq
 800813c:	6819      	ldreq	r1, [r3, #0]
 800813e:	685b      	ldreq	r3, [r3, #4]
 8008140:	1809      	addeq	r1, r1, r0
 8008142:	6021      	streq	r1, [r4, #0]
 8008144:	e7ed      	b.n	8008122 <_free_r+0x1e>
 8008146:	461a      	mov	r2, r3
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	b10b      	cbz	r3, 8008150 <_free_r+0x4c>
 800814c:	42a3      	cmp	r3, r4
 800814e:	d9fa      	bls.n	8008146 <_free_r+0x42>
 8008150:	6811      	ldr	r1, [r2, #0]
 8008152:	1850      	adds	r0, r2, r1
 8008154:	42a0      	cmp	r0, r4
 8008156:	d10b      	bne.n	8008170 <_free_r+0x6c>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	4401      	add	r1, r0
 800815c:	1850      	adds	r0, r2, r1
 800815e:	4283      	cmp	r3, r0
 8008160:	6011      	str	r1, [r2, #0]
 8008162:	d1e0      	bne.n	8008126 <_free_r+0x22>
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	6053      	str	r3, [r2, #4]
 800816a:	4408      	add	r0, r1
 800816c:	6010      	str	r0, [r2, #0]
 800816e:	e7da      	b.n	8008126 <_free_r+0x22>
 8008170:	d902      	bls.n	8008178 <_free_r+0x74>
 8008172:	230c      	movs	r3, #12
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	e7d6      	b.n	8008126 <_free_r+0x22>
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	1821      	adds	r1, r4, r0
 800817c:	428b      	cmp	r3, r1
 800817e:	bf04      	itt	eq
 8008180:	6819      	ldreq	r1, [r3, #0]
 8008182:	685b      	ldreq	r3, [r3, #4]
 8008184:	6063      	str	r3, [r4, #4]
 8008186:	bf04      	itt	eq
 8008188:	1809      	addeq	r1, r1, r0
 800818a:	6021      	streq	r1, [r4, #0]
 800818c:	6054      	str	r4, [r2, #4]
 800818e:	e7ca      	b.n	8008126 <_free_r+0x22>
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	bf00      	nop
 8008194:	2000539c 	.word	0x2000539c

08008198 <sbrk_aligned>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	4e0f      	ldr	r6, [pc, #60]	@ (80081d8 <sbrk_aligned+0x40>)
 800819c:	460c      	mov	r4, r1
 800819e:	6831      	ldr	r1, [r6, #0]
 80081a0:	4605      	mov	r5, r0
 80081a2:	b911      	cbnz	r1, 80081aa <sbrk_aligned+0x12>
 80081a4:	f000 fba6 	bl	80088f4 <_sbrk_r>
 80081a8:	6030      	str	r0, [r6, #0]
 80081aa:	4621      	mov	r1, r4
 80081ac:	4628      	mov	r0, r5
 80081ae:	f000 fba1 	bl	80088f4 <_sbrk_r>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	d103      	bne.n	80081be <sbrk_aligned+0x26>
 80081b6:	f04f 34ff 	mov.w	r4, #4294967295
 80081ba:	4620      	mov	r0, r4
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
 80081be:	1cc4      	adds	r4, r0, #3
 80081c0:	f024 0403 	bic.w	r4, r4, #3
 80081c4:	42a0      	cmp	r0, r4
 80081c6:	d0f8      	beq.n	80081ba <sbrk_aligned+0x22>
 80081c8:	1a21      	subs	r1, r4, r0
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 fb92 	bl	80088f4 <_sbrk_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d1f2      	bne.n	80081ba <sbrk_aligned+0x22>
 80081d4:	e7ef      	b.n	80081b6 <sbrk_aligned+0x1e>
 80081d6:	bf00      	nop
 80081d8:	20005398 	.word	0x20005398

080081dc <_malloc_r>:
 80081dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e0:	1ccd      	adds	r5, r1, #3
 80081e2:	f025 0503 	bic.w	r5, r5, #3
 80081e6:	3508      	adds	r5, #8
 80081e8:	2d0c      	cmp	r5, #12
 80081ea:	bf38      	it	cc
 80081ec:	250c      	movcc	r5, #12
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	4606      	mov	r6, r0
 80081f2:	db01      	blt.n	80081f8 <_malloc_r+0x1c>
 80081f4:	42a9      	cmp	r1, r5
 80081f6:	d904      	bls.n	8008202 <_malloc_r+0x26>
 80081f8:	230c      	movs	r3, #12
 80081fa:	6033      	str	r3, [r6, #0]
 80081fc:	2000      	movs	r0, #0
 80081fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082d8 <_malloc_r+0xfc>
 8008206:	f000 f869 	bl	80082dc <__malloc_lock>
 800820a:	f8d8 3000 	ldr.w	r3, [r8]
 800820e:	461c      	mov	r4, r3
 8008210:	bb44      	cbnz	r4, 8008264 <_malloc_r+0x88>
 8008212:	4629      	mov	r1, r5
 8008214:	4630      	mov	r0, r6
 8008216:	f7ff ffbf 	bl	8008198 <sbrk_aligned>
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	4604      	mov	r4, r0
 800821e:	d158      	bne.n	80082d2 <_malloc_r+0xf6>
 8008220:	f8d8 4000 	ldr.w	r4, [r8]
 8008224:	4627      	mov	r7, r4
 8008226:	2f00      	cmp	r7, #0
 8008228:	d143      	bne.n	80082b2 <_malloc_r+0xd6>
 800822a:	2c00      	cmp	r4, #0
 800822c:	d04b      	beq.n	80082c6 <_malloc_r+0xea>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	4639      	mov	r1, r7
 8008232:	4630      	mov	r0, r6
 8008234:	eb04 0903 	add.w	r9, r4, r3
 8008238:	f000 fb5c 	bl	80088f4 <_sbrk_r>
 800823c:	4581      	cmp	r9, r0
 800823e:	d142      	bne.n	80082c6 <_malloc_r+0xea>
 8008240:	6821      	ldr	r1, [r4, #0]
 8008242:	1a6d      	subs	r5, r5, r1
 8008244:	4629      	mov	r1, r5
 8008246:	4630      	mov	r0, r6
 8008248:	f7ff ffa6 	bl	8008198 <sbrk_aligned>
 800824c:	3001      	adds	r0, #1
 800824e:	d03a      	beq.n	80082c6 <_malloc_r+0xea>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	442b      	add	r3, r5
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	f8d8 3000 	ldr.w	r3, [r8]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	bb62      	cbnz	r2, 80082b8 <_malloc_r+0xdc>
 800825e:	f8c8 7000 	str.w	r7, [r8]
 8008262:	e00f      	b.n	8008284 <_malloc_r+0xa8>
 8008264:	6822      	ldr	r2, [r4, #0]
 8008266:	1b52      	subs	r2, r2, r5
 8008268:	d420      	bmi.n	80082ac <_malloc_r+0xd0>
 800826a:	2a0b      	cmp	r2, #11
 800826c:	d917      	bls.n	800829e <_malloc_r+0xc2>
 800826e:	1961      	adds	r1, r4, r5
 8008270:	42a3      	cmp	r3, r4
 8008272:	6025      	str	r5, [r4, #0]
 8008274:	bf18      	it	ne
 8008276:	6059      	strne	r1, [r3, #4]
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	bf08      	it	eq
 800827c:	f8c8 1000 	streq.w	r1, [r8]
 8008280:	5162      	str	r2, [r4, r5]
 8008282:	604b      	str	r3, [r1, #4]
 8008284:	4630      	mov	r0, r6
 8008286:	f000 f82f 	bl	80082e8 <__malloc_unlock>
 800828a:	f104 000b 	add.w	r0, r4, #11
 800828e:	1d23      	adds	r3, r4, #4
 8008290:	f020 0007 	bic.w	r0, r0, #7
 8008294:	1ac2      	subs	r2, r0, r3
 8008296:	bf1c      	itt	ne
 8008298:	1a1b      	subne	r3, r3, r0
 800829a:	50a3      	strne	r3, [r4, r2]
 800829c:	e7af      	b.n	80081fe <_malloc_r+0x22>
 800829e:	6862      	ldr	r2, [r4, #4]
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	bf0c      	ite	eq
 80082a4:	f8c8 2000 	streq.w	r2, [r8]
 80082a8:	605a      	strne	r2, [r3, #4]
 80082aa:	e7eb      	b.n	8008284 <_malloc_r+0xa8>
 80082ac:	4623      	mov	r3, r4
 80082ae:	6864      	ldr	r4, [r4, #4]
 80082b0:	e7ae      	b.n	8008210 <_malloc_r+0x34>
 80082b2:	463c      	mov	r4, r7
 80082b4:	687f      	ldr	r7, [r7, #4]
 80082b6:	e7b6      	b.n	8008226 <_malloc_r+0x4a>
 80082b8:	461a      	mov	r2, r3
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	42a3      	cmp	r3, r4
 80082be:	d1fb      	bne.n	80082b8 <_malloc_r+0xdc>
 80082c0:	2300      	movs	r3, #0
 80082c2:	6053      	str	r3, [r2, #4]
 80082c4:	e7de      	b.n	8008284 <_malloc_r+0xa8>
 80082c6:	230c      	movs	r3, #12
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	4630      	mov	r0, r6
 80082cc:	f000 f80c 	bl	80082e8 <__malloc_unlock>
 80082d0:	e794      	b.n	80081fc <_malloc_r+0x20>
 80082d2:	6005      	str	r5, [r0, #0]
 80082d4:	e7d6      	b.n	8008284 <_malloc_r+0xa8>
 80082d6:	bf00      	nop
 80082d8:	2000539c 	.word	0x2000539c

080082dc <__malloc_lock>:
 80082dc:	4801      	ldr	r0, [pc, #4]	@ (80082e4 <__malloc_lock+0x8>)
 80082de:	f7ff bf01 	b.w	80080e4 <__retarget_lock_acquire_recursive>
 80082e2:	bf00      	nop
 80082e4:	20005394 	.word	0x20005394

080082e8 <__malloc_unlock>:
 80082e8:	4801      	ldr	r0, [pc, #4]	@ (80082f0 <__malloc_unlock+0x8>)
 80082ea:	f7ff befc 	b.w	80080e6 <__retarget_lock_release_recursive>
 80082ee:	bf00      	nop
 80082f0:	20005394 	.word	0x20005394

080082f4 <__ssputs_r>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	688e      	ldr	r6, [r1, #8]
 80082fa:	461f      	mov	r7, r3
 80082fc:	42be      	cmp	r6, r7
 80082fe:	680b      	ldr	r3, [r1, #0]
 8008300:	4682      	mov	sl, r0
 8008302:	460c      	mov	r4, r1
 8008304:	4690      	mov	r8, r2
 8008306:	d82d      	bhi.n	8008364 <__ssputs_r+0x70>
 8008308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800830c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008310:	d026      	beq.n	8008360 <__ssputs_r+0x6c>
 8008312:	6965      	ldr	r5, [r4, #20]
 8008314:	6909      	ldr	r1, [r1, #16]
 8008316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800831a:	eba3 0901 	sub.w	r9, r3, r1
 800831e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008322:	1c7b      	adds	r3, r7, #1
 8008324:	444b      	add	r3, r9
 8008326:	106d      	asrs	r5, r5, #1
 8008328:	429d      	cmp	r5, r3
 800832a:	bf38      	it	cc
 800832c:	461d      	movcc	r5, r3
 800832e:	0553      	lsls	r3, r2, #21
 8008330:	d527      	bpl.n	8008382 <__ssputs_r+0x8e>
 8008332:	4629      	mov	r1, r5
 8008334:	f7ff ff52 	bl	80081dc <_malloc_r>
 8008338:	4606      	mov	r6, r0
 800833a:	b360      	cbz	r0, 8008396 <__ssputs_r+0xa2>
 800833c:	6921      	ldr	r1, [r4, #16]
 800833e:	464a      	mov	r2, r9
 8008340:	f7ff fed2 	bl	80080e8 <memcpy>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800834a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	6126      	str	r6, [r4, #16]
 8008352:	6165      	str	r5, [r4, #20]
 8008354:	444e      	add	r6, r9
 8008356:	eba5 0509 	sub.w	r5, r5, r9
 800835a:	6026      	str	r6, [r4, #0]
 800835c:	60a5      	str	r5, [r4, #8]
 800835e:	463e      	mov	r6, r7
 8008360:	42be      	cmp	r6, r7
 8008362:	d900      	bls.n	8008366 <__ssputs_r+0x72>
 8008364:	463e      	mov	r6, r7
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	4632      	mov	r2, r6
 800836a:	4641      	mov	r1, r8
 800836c:	f000 faa8 	bl	80088c0 <memmove>
 8008370:	68a3      	ldr	r3, [r4, #8]
 8008372:	1b9b      	subs	r3, r3, r6
 8008374:	60a3      	str	r3, [r4, #8]
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	4433      	add	r3, r6
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	2000      	movs	r0, #0
 800837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008382:	462a      	mov	r2, r5
 8008384:	f000 fac6 	bl	8008914 <_realloc_r>
 8008388:	4606      	mov	r6, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	d1e0      	bne.n	8008350 <__ssputs_r+0x5c>
 800838e:	6921      	ldr	r1, [r4, #16]
 8008390:	4650      	mov	r0, sl
 8008392:	f7ff feb7 	bl	8008104 <_free_r>
 8008396:	230c      	movs	r3, #12
 8008398:	f8ca 3000 	str.w	r3, [sl]
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	e7e9      	b.n	800837e <__ssputs_r+0x8a>
	...

080083ac <_svfiprintf_r>:
 80083ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	4698      	mov	r8, r3
 80083b2:	898b      	ldrh	r3, [r1, #12]
 80083b4:	061b      	lsls	r3, r3, #24
 80083b6:	b09d      	sub	sp, #116	@ 0x74
 80083b8:	4607      	mov	r7, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	4614      	mov	r4, r2
 80083be:	d510      	bpl.n	80083e2 <_svfiprintf_r+0x36>
 80083c0:	690b      	ldr	r3, [r1, #16]
 80083c2:	b973      	cbnz	r3, 80083e2 <_svfiprintf_r+0x36>
 80083c4:	2140      	movs	r1, #64	@ 0x40
 80083c6:	f7ff ff09 	bl	80081dc <_malloc_r>
 80083ca:	6028      	str	r0, [r5, #0]
 80083cc:	6128      	str	r0, [r5, #16]
 80083ce:	b930      	cbnz	r0, 80083de <_svfiprintf_r+0x32>
 80083d0:	230c      	movs	r3, #12
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	b01d      	add	sp, #116	@ 0x74
 80083da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	2340      	movs	r3, #64	@ 0x40
 80083e0:	616b      	str	r3, [r5, #20]
 80083e2:	2300      	movs	r3, #0
 80083e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e6:	2320      	movs	r3, #32
 80083e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80083f0:	2330      	movs	r3, #48	@ 0x30
 80083f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008590 <_svfiprintf_r+0x1e4>
 80083f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083fa:	f04f 0901 	mov.w	r9, #1
 80083fe:	4623      	mov	r3, r4
 8008400:	469a      	mov	sl, r3
 8008402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008406:	b10a      	cbz	r2, 800840c <_svfiprintf_r+0x60>
 8008408:	2a25      	cmp	r2, #37	@ 0x25
 800840a:	d1f9      	bne.n	8008400 <_svfiprintf_r+0x54>
 800840c:	ebba 0b04 	subs.w	fp, sl, r4
 8008410:	d00b      	beq.n	800842a <_svfiprintf_r+0x7e>
 8008412:	465b      	mov	r3, fp
 8008414:	4622      	mov	r2, r4
 8008416:	4629      	mov	r1, r5
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff ff6b 	bl	80082f4 <__ssputs_r>
 800841e:	3001      	adds	r0, #1
 8008420:	f000 80a7 	beq.w	8008572 <_svfiprintf_r+0x1c6>
 8008424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008426:	445a      	add	r2, fp
 8008428:	9209      	str	r2, [sp, #36]	@ 0x24
 800842a:	f89a 3000 	ldrb.w	r3, [sl]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 809f 	beq.w	8008572 <_svfiprintf_r+0x1c6>
 8008434:	2300      	movs	r3, #0
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843e:	f10a 0a01 	add.w	sl, sl, #1
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	9307      	str	r3, [sp, #28]
 8008446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800844a:	931a      	str	r3, [sp, #104]	@ 0x68
 800844c:	4654      	mov	r4, sl
 800844e:	2205      	movs	r2, #5
 8008450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008454:	484e      	ldr	r0, [pc, #312]	@ (8008590 <_svfiprintf_r+0x1e4>)
 8008456:	f7f7 fefb 	bl	8000250 <memchr>
 800845a:	9a04      	ldr	r2, [sp, #16]
 800845c:	b9d8      	cbnz	r0, 8008496 <_svfiprintf_r+0xea>
 800845e:	06d0      	lsls	r0, r2, #27
 8008460:	bf44      	itt	mi
 8008462:	2320      	movmi	r3, #32
 8008464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008468:	0711      	lsls	r1, r2, #28
 800846a:	bf44      	itt	mi
 800846c:	232b      	movmi	r3, #43	@ 0x2b
 800846e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008472:	f89a 3000 	ldrb.w	r3, [sl]
 8008476:	2b2a      	cmp	r3, #42	@ 0x2a
 8008478:	d015      	beq.n	80084a6 <_svfiprintf_r+0xfa>
 800847a:	9a07      	ldr	r2, [sp, #28]
 800847c:	4654      	mov	r4, sl
 800847e:	2000      	movs	r0, #0
 8008480:	f04f 0c0a 	mov.w	ip, #10
 8008484:	4621      	mov	r1, r4
 8008486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800848a:	3b30      	subs	r3, #48	@ 0x30
 800848c:	2b09      	cmp	r3, #9
 800848e:	d94b      	bls.n	8008528 <_svfiprintf_r+0x17c>
 8008490:	b1b0      	cbz	r0, 80084c0 <_svfiprintf_r+0x114>
 8008492:	9207      	str	r2, [sp, #28]
 8008494:	e014      	b.n	80084c0 <_svfiprintf_r+0x114>
 8008496:	eba0 0308 	sub.w	r3, r0, r8
 800849a:	fa09 f303 	lsl.w	r3, r9, r3
 800849e:	4313      	orrs	r3, r2
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	46a2      	mov	sl, r4
 80084a4:	e7d2      	b.n	800844c <_svfiprintf_r+0xa0>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	1d19      	adds	r1, r3, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	9103      	str	r1, [sp, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfbb      	ittet	lt
 80084b2:	425b      	neglt	r3, r3
 80084b4:	f042 0202 	orrlt.w	r2, r2, #2
 80084b8:	9307      	strge	r3, [sp, #28]
 80084ba:	9307      	strlt	r3, [sp, #28]
 80084bc:	bfb8      	it	lt
 80084be:	9204      	strlt	r2, [sp, #16]
 80084c0:	7823      	ldrb	r3, [r4, #0]
 80084c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80084c4:	d10a      	bne.n	80084dc <_svfiprintf_r+0x130>
 80084c6:	7863      	ldrb	r3, [r4, #1]
 80084c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ca:	d132      	bne.n	8008532 <_svfiprintf_r+0x186>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	9203      	str	r2, [sp, #12]
 80084d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084d8:	3402      	adds	r4, #2
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085a0 <_svfiprintf_r+0x1f4>
 80084e0:	7821      	ldrb	r1, [r4, #0]
 80084e2:	2203      	movs	r2, #3
 80084e4:	4650      	mov	r0, sl
 80084e6:	f7f7 feb3 	bl	8000250 <memchr>
 80084ea:	b138      	cbz	r0, 80084fc <_svfiprintf_r+0x150>
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	eba0 000a 	sub.w	r0, r0, sl
 80084f2:	2240      	movs	r2, #64	@ 0x40
 80084f4:	4082      	lsls	r2, r0
 80084f6:	4313      	orrs	r3, r2
 80084f8:	3401      	adds	r4, #1
 80084fa:	9304      	str	r3, [sp, #16]
 80084fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008500:	4824      	ldr	r0, [pc, #144]	@ (8008594 <_svfiprintf_r+0x1e8>)
 8008502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008506:	2206      	movs	r2, #6
 8008508:	f7f7 fea2 	bl	8000250 <memchr>
 800850c:	2800      	cmp	r0, #0
 800850e:	d036      	beq.n	800857e <_svfiprintf_r+0x1d2>
 8008510:	4b21      	ldr	r3, [pc, #132]	@ (8008598 <_svfiprintf_r+0x1ec>)
 8008512:	bb1b      	cbnz	r3, 800855c <_svfiprintf_r+0x1b0>
 8008514:	9b03      	ldr	r3, [sp, #12]
 8008516:	3307      	adds	r3, #7
 8008518:	f023 0307 	bic.w	r3, r3, #7
 800851c:	3308      	adds	r3, #8
 800851e:	9303      	str	r3, [sp, #12]
 8008520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008522:	4433      	add	r3, r6
 8008524:	9309      	str	r3, [sp, #36]	@ 0x24
 8008526:	e76a      	b.n	80083fe <_svfiprintf_r+0x52>
 8008528:	fb0c 3202 	mla	r2, ip, r2, r3
 800852c:	460c      	mov	r4, r1
 800852e:	2001      	movs	r0, #1
 8008530:	e7a8      	b.n	8008484 <_svfiprintf_r+0xd8>
 8008532:	2300      	movs	r3, #0
 8008534:	3401      	adds	r4, #1
 8008536:	9305      	str	r3, [sp, #20]
 8008538:	4619      	mov	r1, r3
 800853a:	f04f 0c0a 	mov.w	ip, #10
 800853e:	4620      	mov	r0, r4
 8008540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008544:	3a30      	subs	r2, #48	@ 0x30
 8008546:	2a09      	cmp	r2, #9
 8008548:	d903      	bls.n	8008552 <_svfiprintf_r+0x1a6>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0c6      	beq.n	80084dc <_svfiprintf_r+0x130>
 800854e:	9105      	str	r1, [sp, #20]
 8008550:	e7c4      	b.n	80084dc <_svfiprintf_r+0x130>
 8008552:	fb0c 2101 	mla	r1, ip, r1, r2
 8008556:	4604      	mov	r4, r0
 8008558:	2301      	movs	r3, #1
 800855a:	e7f0      	b.n	800853e <_svfiprintf_r+0x192>
 800855c:	ab03      	add	r3, sp, #12
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	462a      	mov	r2, r5
 8008562:	4b0e      	ldr	r3, [pc, #56]	@ (800859c <_svfiprintf_r+0x1f0>)
 8008564:	a904      	add	r1, sp, #16
 8008566:	4638      	mov	r0, r7
 8008568:	f3af 8000 	nop.w
 800856c:	1c42      	adds	r2, r0, #1
 800856e:	4606      	mov	r6, r0
 8008570:	d1d6      	bne.n	8008520 <_svfiprintf_r+0x174>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	065b      	lsls	r3, r3, #25
 8008576:	f53f af2d 	bmi.w	80083d4 <_svfiprintf_r+0x28>
 800857a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800857c:	e72c      	b.n	80083d8 <_svfiprintf_r+0x2c>
 800857e:	ab03      	add	r3, sp, #12
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	462a      	mov	r2, r5
 8008584:	4b05      	ldr	r3, [pc, #20]	@ (800859c <_svfiprintf_r+0x1f0>)
 8008586:	a904      	add	r1, sp, #16
 8008588:	4638      	mov	r0, r7
 800858a:	f000 f879 	bl	8008680 <_printf_i>
 800858e:	e7ed      	b.n	800856c <_svfiprintf_r+0x1c0>
 8008590:	08008afc 	.word	0x08008afc
 8008594:	08008b06 	.word	0x08008b06
 8008598:	00000000 	.word	0x00000000
 800859c:	080082f5 	.word	0x080082f5
 80085a0:	08008b02 	.word	0x08008b02

080085a4 <_printf_common>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	4616      	mov	r6, r2
 80085aa:	4698      	mov	r8, r3
 80085ac:	688a      	ldr	r2, [r1, #8]
 80085ae:	690b      	ldr	r3, [r1, #16]
 80085b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	bfb8      	it	lt
 80085b8:	4613      	movlt	r3, r2
 80085ba:	6033      	str	r3, [r6, #0]
 80085bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085c0:	4607      	mov	r7, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	b10a      	cbz	r2, 80085ca <_printf_common+0x26>
 80085c6:	3301      	adds	r3, #1
 80085c8:	6033      	str	r3, [r6, #0]
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	0699      	lsls	r1, r3, #26
 80085ce:	bf42      	ittt	mi
 80085d0:	6833      	ldrmi	r3, [r6, #0]
 80085d2:	3302      	addmi	r3, #2
 80085d4:	6033      	strmi	r3, [r6, #0]
 80085d6:	6825      	ldr	r5, [r4, #0]
 80085d8:	f015 0506 	ands.w	r5, r5, #6
 80085dc:	d106      	bne.n	80085ec <_printf_common+0x48>
 80085de:	f104 0a19 	add.w	sl, r4, #25
 80085e2:	68e3      	ldr	r3, [r4, #12]
 80085e4:	6832      	ldr	r2, [r6, #0]
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	42ab      	cmp	r3, r5
 80085ea:	dc26      	bgt.n	800863a <_printf_common+0x96>
 80085ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	3b00      	subs	r3, #0
 80085f4:	bf18      	it	ne
 80085f6:	2301      	movne	r3, #1
 80085f8:	0692      	lsls	r2, r2, #26
 80085fa:	d42b      	bmi.n	8008654 <_printf_common+0xb0>
 80085fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008600:	4641      	mov	r1, r8
 8008602:	4638      	mov	r0, r7
 8008604:	47c8      	blx	r9
 8008606:	3001      	adds	r0, #1
 8008608:	d01e      	beq.n	8008648 <_printf_common+0xa4>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	f003 0306 	and.w	r3, r3, #6
 8008612:	2b04      	cmp	r3, #4
 8008614:	bf02      	ittt	eq
 8008616:	68e5      	ldreq	r5, [r4, #12]
 8008618:	6833      	ldreq	r3, [r6, #0]
 800861a:	1aed      	subeq	r5, r5, r3
 800861c:	68a3      	ldr	r3, [r4, #8]
 800861e:	bf0c      	ite	eq
 8008620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008624:	2500      	movne	r5, #0
 8008626:	4293      	cmp	r3, r2
 8008628:	bfc4      	itt	gt
 800862a:	1a9b      	subgt	r3, r3, r2
 800862c:	18ed      	addgt	r5, r5, r3
 800862e:	2600      	movs	r6, #0
 8008630:	341a      	adds	r4, #26
 8008632:	42b5      	cmp	r5, r6
 8008634:	d11a      	bne.n	800866c <_printf_common+0xc8>
 8008636:	2000      	movs	r0, #0
 8008638:	e008      	b.n	800864c <_printf_common+0xa8>
 800863a:	2301      	movs	r3, #1
 800863c:	4652      	mov	r2, sl
 800863e:	4641      	mov	r1, r8
 8008640:	4638      	mov	r0, r7
 8008642:	47c8      	blx	r9
 8008644:	3001      	adds	r0, #1
 8008646:	d103      	bne.n	8008650 <_printf_common+0xac>
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008650:	3501      	adds	r5, #1
 8008652:	e7c6      	b.n	80085e2 <_printf_common+0x3e>
 8008654:	18e1      	adds	r1, r4, r3
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	2030      	movs	r0, #48	@ 0x30
 800865a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800865e:	4422      	add	r2, r4
 8008660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008668:	3302      	adds	r3, #2
 800866a:	e7c7      	b.n	80085fc <_printf_common+0x58>
 800866c:	2301      	movs	r3, #1
 800866e:	4622      	mov	r2, r4
 8008670:	4641      	mov	r1, r8
 8008672:	4638      	mov	r0, r7
 8008674:	47c8      	blx	r9
 8008676:	3001      	adds	r0, #1
 8008678:	d0e6      	beq.n	8008648 <_printf_common+0xa4>
 800867a:	3601      	adds	r6, #1
 800867c:	e7d9      	b.n	8008632 <_printf_common+0x8e>
	...

08008680 <_printf_i>:
 8008680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008684:	7e0f      	ldrb	r7, [r1, #24]
 8008686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008688:	2f78      	cmp	r7, #120	@ 0x78
 800868a:	4691      	mov	r9, r2
 800868c:	4680      	mov	r8, r0
 800868e:	460c      	mov	r4, r1
 8008690:	469a      	mov	sl, r3
 8008692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008696:	d807      	bhi.n	80086a8 <_printf_i+0x28>
 8008698:	2f62      	cmp	r7, #98	@ 0x62
 800869a:	d80a      	bhi.n	80086b2 <_printf_i+0x32>
 800869c:	2f00      	cmp	r7, #0
 800869e:	f000 80d2 	beq.w	8008846 <_printf_i+0x1c6>
 80086a2:	2f58      	cmp	r7, #88	@ 0x58
 80086a4:	f000 80b9 	beq.w	800881a <_printf_i+0x19a>
 80086a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086b0:	e03a      	b.n	8008728 <_printf_i+0xa8>
 80086b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086b6:	2b15      	cmp	r3, #21
 80086b8:	d8f6      	bhi.n	80086a8 <_printf_i+0x28>
 80086ba:	a101      	add	r1, pc, #4	@ (adr r1, 80086c0 <_printf_i+0x40>)
 80086bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086c0:	08008719 	.word	0x08008719
 80086c4:	0800872d 	.word	0x0800872d
 80086c8:	080086a9 	.word	0x080086a9
 80086cc:	080086a9 	.word	0x080086a9
 80086d0:	080086a9 	.word	0x080086a9
 80086d4:	080086a9 	.word	0x080086a9
 80086d8:	0800872d 	.word	0x0800872d
 80086dc:	080086a9 	.word	0x080086a9
 80086e0:	080086a9 	.word	0x080086a9
 80086e4:	080086a9 	.word	0x080086a9
 80086e8:	080086a9 	.word	0x080086a9
 80086ec:	0800882d 	.word	0x0800882d
 80086f0:	08008757 	.word	0x08008757
 80086f4:	080087e7 	.word	0x080087e7
 80086f8:	080086a9 	.word	0x080086a9
 80086fc:	080086a9 	.word	0x080086a9
 8008700:	0800884f 	.word	0x0800884f
 8008704:	080086a9 	.word	0x080086a9
 8008708:	08008757 	.word	0x08008757
 800870c:	080086a9 	.word	0x080086a9
 8008710:	080086a9 	.word	0x080086a9
 8008714:	080087ef 	.word	0x080087ef
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6032      	str	r2, [r6, #0]
 8008720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008728:	2301      	movs	r3, #1
 800872a:	e09d      	b.n	8008868 <_printf_i+0x1e8>
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	6820      	ldr	r0, [r4, #0]
 8008730:	1d19      	adds	r1, r3, #4
 8008732:	6031      	str	r1, [r6, #0]
 8008734:	0606      	lsls	r6, r0, #24
 8008736:	d501      	bpl.n	800873c <_printf_i+0xbc>
 8008738:	681d      	ldr	r5, [r3, #0]
 800873a:	e003      	b.n	8008744 <_printf_i+0xc4>
 800873c:	0645      	lsls	r5, r0, #25
 800873e:	d5fb      	bpl.n	8008738 <_printf_i+0xb8>
 8008740:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008744:	2d00      	cmp	r5, #0
 8008746:	da03      	bge.n	8008750 <_printf_i+0xd0>
 8008748:	232d      	movs	r3, #45	@ 0x2d
 800874a:	426d      	negs	r5, r5
 800874c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008750:	4859      	ldr	r0, [pc, #356]	@ (80088b8 <_printf_i+0x238>)
 8008752:	230a      	movs	r3, #10
 8008754:	e011      	b.n	800877a <_printf_i+0xfa>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	6833      	ldr	r3, [r6, #0]
 800875a:	0608      	lsls	r0, r1, #24
 800875c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008760:	d402      	bmi.n	8008768 <_printf_i+0xe8>
 8008762:	0649      	lsls	r1, r1, #25
 8008764:	bf48      	it	mi
 8008766:	b2ad      	uxthmi	r5, r5
 8008768:	2f6f      	cmp	r7, #111	@ 0x6f
 800876a:	4853      	ldr	r0, [pc, #332]	@ (80088b8 <_printf_i+0x238>)
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	bf14      	ite	ne
 8008770:	230a      	movne	r3, #10
 8008772:	2308      	moveq	r3, #8
 8008774:	2100      	movs	r1, #0
 8008776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800877a:	6866      	ldr	r6, [r4, #4]
 800877c:	60a6      	str	r6, [r4, #8]
 800877e:	2e00      	cmp	r6, #0
 8008780:	bfa2      	ittt	ge
 8008782:	6821      	ldrge	r1, [r4, #0]
 8008784:	f021 0104 	bicge.w	r1, r1, #4
 8008788:	6021      	strge	r1, [r4, #0]
 800878a:	b90d      	cbnz	r5, 8008790 <_printf_i+0x110>
 800878c:	2e00      	cmp	r6, #0
 800878e:	d04b      	beq.n	8008828 <_printf_i+0x1a8>
 8008790:	4616      	mov	r6, r2
 8008792:	fbb5 f1f3 	udiv	r1, r5, r3
 8008796:	fb03 5711 	mls	r7, r3, r1, r5
 800879a:	5dc7      	ldrb	r7, [r0, r7]
 800879c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087a0:	462f      	mov	r7, r5
 80087a2:	42bb      	cmp	r3, r7
 80087a4:	460d      	mov	r5, r1
 80087a6:	d9f4      	bls.n	8008792 <_printf_i+0x112>
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d10b      	bne.n	80087c4 <_printf_i+0x144>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	07df      	lsls	r7, r3, #31
 80087b0:	d508      	bpl.n	80087c4 <_printf_i+0x144>
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	4299      	cmp	r1, r3
 80087b8:	bfde      	ittt	le
 80087ba:	2330      	movle	r3, #48	@ 0x30
 80087bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087c4:	1b92      	subs	r2, r2, r6
 80087c6:	6122      	str	r2, [r4, #16]
 80087c8:	f8cd a000 	str.w	sl, [sp]
 80087cc:	464b      	mov	r3, r9
 80087ce:	aa03      	add	r2, sp, #12
 80087d0:	4621      	mov	r1, r4
 80087d2:	4640      	mov	r0, r8
 80087d4:	f7ff fee6 	bl	80085a4 <_printf_common>
 80087d8:	3001      	adds	r0, #1
 80087da:	d14a      	bne.n	8008872 <_printf_i+0x1f2>
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	b004      	add	sp, #16
 80087e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	f043 0320 	orr.w	r3, r3, #32
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	4833      	ldr	r0, [pc, #204]	@ (80088bc <_printf_i+0x23c>)
 80087f0:	2778      	movs	r7, #120	@ 0x78
 80087f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	6831      	ldr	r1, [r6, #0]
 80087fa:	061f      	lsls	r7, r3, #24
 80087fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008800:	d402      	bmi.n	8008808 <_printf_i+0x188>
 8008802:	065f      	lsls	r7, r3, #25
 8008804:	bf48      	it	mi
 8008806:	b2ad      	uxthmi	r5, r5
 8008808:	6031      	str	r1, [r6, #0]
 800880a:	07d9      	lsls	r1, r3, #31
 800880c:	bf44      	itt	mi
 800880e:	f043 0320 	orrmi.w	r3, r3, #32
 8008812:	6023      	strmi	r3, [r4, #0]
 8008814:	b11d      	cbz	r5, 800881e <_printf_i+0x19e>
 8008816:	2310      	movs	r3, #16
 8008818:	e7ac      	b.n	8008774 <_printf_i+0xf4>
 800881a:	4827      	ldr	r0, [pc, #156]	@ (80088b8 <_printf_i+0x238>)
 800881c:	e7e9      	b.n	80087f2 <_printf_i+0x172>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	f023 0320 	bic.w	r3, r3, #32
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	e7f6      	b.n	8008816 <_printf_i+0x196>
 8008828:	4616      	mov	r6, r2
 800882a:	e7bd      	b.n	80087a8 <_printf_i+0x128>
 800882c:	6833      	ldr	r3, [r6, #0]
 800882e:	6825      	ldr	r5, [r4, #0]
 8008830:	6961      	ldr	r1, [r4, #20]
 8008832:	1d18      	adds	r0, r3, #4
 8008834:	6030      	str	r0, [r6, #0]
 8008836:	062e      	lsls	r6, r5, #24
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	d501      	bpl.n	8008840 <_printf_i+0x1c0>
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	e002      	b.n	8008846 <_printf_i+0x1c6>
 8008840:	0668      	lsls	r0, r5, #25
 8008842:	d5fb      	bpl.n	800883c <_printf_i+0x1bc>
 8008844:	8019      	strh	r1, [r3, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	4616      	mov	r6, r2
 800884c:	e7bc      	b.n	80087c8 <_printf_i+0x148>
 800884e:	6833      	ldr	r3, [r6, #0]
 8008850:	1d1a      	adds	r2, r3, #4
 8008852:	6032      	str	r2, [r6, #0]
 8008854:	681e      	ldr	r6, [r3, #0]
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	2100      	movs	r1, #0
 800885a:	4630      	mov	r0, r6
 800885c:	f7f7 fcf8 	bl	8000250 <memchr>
 8008860:	b108      	cbz	r0, 8008866 <_printf_i+0x1e6>
 8008862:	1b80      	subs	r0, r0, r6
 8008864:	6060      	str	r0, [r4, #4]
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	2300      	movs	r3, #0
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008870:	e7aa      	b.n	80087c8 <_printf_i+0x148>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	4632      	mov	r2, r6
 8008876:	4649      	mov	r1, r9
 8008878:	4640      	mov	r0, r8
 800887a:	47d0      	blx	sl
 800887c:	3001      	adds	r0, #1
 800887e:	d0ad      	beq.n	80087dc <_printf_i+0x15c>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	079b      	lsls	r3, r3, #30
 8008884:	d413      	bmi.n	80088ae <_printf_i+0x22e>
 8008886:	68e0      	ldr	r0, [r4, #12]
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	4298      	cmp	r0, r3
 800888c:	bfb8      	it	lt
 800888e:	4618      	movlt	r0, r3
 8008890:	e7a6      	b.n	80087e0 <_printf_i+0x160>
 8008892:	2301      	movs	r3, #1
 8008894:	4632      	mov	r2, r6
 8008896:	4649      	mov	r1, r9
 8008898:	4640      	mov	r0, r8
 800889a:	47d0      	blx	sl
 800889c:	3001      	adds	r0, #1
 800889e:	d09d      	beq.n	80087dc <_printf_i+0x15c>
 80088a0:	3501      	adds	r5, #1
 80088a2:	68e3      	ldr	r3, [r4, #12]
 80088a4:	9903      	ldr	r1, [sp, #12]
 80088a6:	1a5b      	subs	r3, r3, r1
 80088a8:	42ab      	cmp	r3, r5
 80088aa:	dcf2      	bgt.n	8008892 <_printf_i+0x212>
 80088ac:	e7eb      	b.n	8008886 <_printf_i+0x206>
 80088ae:	2500      	movs	r5, #0
 80088b0:	f104 0619 	add.w	r6, r4, #25
 80088b4:	e7f5      	b.n	80088a2 <_printf_i+0x222>
 80088b6:	bf00      	nop
 80088b8:	08008b0d 	.word	0x08008b0d
 80088bc:	08008b1e 	.word	0x08008b1e

080088c0 <memmove>:
 80088c0:	4288      	cmp	r0, r1
 80088c2:	b510      	push	{r4, lr}
 80088c4:	eb01 0402 	add.w	r4, r1, r2
 80088c8:	d902      	bls.n	80088d0 <memmove+0x10>
 80088ca:	4284      	cmp	r4, r0
 80088cc:	4623      	mov	r3, r4
 80088ce:	d807      	bhi.n	80088e0 <memmove+0x20>
 80088d0:	1e43      	subs	r3, r0, #1
 80088d2:	42a1      	cmp	r1, r4
 80088d4:	d008      	beq.n	80088e8 <memmove+0x28>
 80088d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088de:	e7f8      	b.n	80088d2 <memmove+0x12>
 80088e0:	4402      	add	r2, r0
 80088e2:	4601      	mov	r1, r0
 80088e4:	428a      	cmp	r2, r1
 80088e6:	d100      	bne.n	80088ea <memmove+0x2a>
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088f2:	e7f7      	b.n	80088e4 <memmove+0x24>

080088f4 <_sbrk_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d06      	ldr	r5, [pc, #24]	@ (8008910 <_sbrk_r+0x1c>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	602b      	str	r3, [r5, #0]
 8008900:	f7f8 fbbc 	bl	800107c <_sbrk>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_sbrk_r+0x1a>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_sbrk_r+0x1a>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20005390 	.word	0x20005390

08008914 <_realloc_r>:
 8008914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008918:	4680      	mov	r8, r0
 800891a:	4615      	mov	r5, r2
 800891c:	460c      	mov	r4, r1
 800891e:	b921      	cbnz	r1, 800892a <_realloc_r+0x16>
 8008920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	4611      	mov	r1, r2
 8008926:	f7ff bc59 	b.w	80081dc <_malloc_r>
 800892a:	b92a      	cbnz	r2, 8008938 <_realloc_r+0x24>
 800892c:	f7ff fbea 	bl	8008104 <_free_r>
 8008930:	2400      	movs	r4, #0
 8008932:	4620      	mov	r0, r4
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	f000 f81a 	bl	8008970 <_malloc_usable_size_r>
 800893c:	4285      	cmp	r5, r0
 800893e:	4606      	mov	r6, r0
 8008940:	d802      	bhi.n	8008948 <_realloc_r+0x34>
 8008942:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008946:	d8f4      	bhi.n	8008932 <_realloc_r+0x1e>
 8008948:	4629      	mov	r1, r5
 800894a:	4640      	mov	r0, r8
 800894c:	f7ff fc46 	bl	80081dc <_malloc_r>
 8008950:	4607      	mov	r7, r0
 8008952:	2800      	cmp	r0, #0
 8008954:	d0ec      	beq.n	8008930 <_realloc_r+0x1c>
 8008956:	42b5      	cmp	r5, r6
 8008958:	462a      	mov	r2, r5
 800895a:	4621      	mov	r1, r4
 800895c:	bf28      	it	cs
 800895e:	4632      	movcs	r2, r6
 8008960:	f7ff fbc2 	bl	80080e8 <memcpy>
 8008964:	4621      	mov	r1, r4
 8008966:	4640      	mov	r0, r8
 8008968:	f7ff fbcc 	bl	8008104 <_free_r>
 800896c:	463c      	mov	r4, r7
 800896e:	e7e0      	b.n	8008932 <_realloc_r+0x1e>

08008970 <_malloc_usable_size_r>:
 8008970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008974:	1f18      	subs	r0, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfbc      	itt	lt
 800897a:	580b      	ldrlt	r3, [r1, r0]
 800897c:	18c0      	addlt	r0, r0, r3
 800897e:	4770      	bx	lr

08008980 <_init>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	bf00      	nop
 8008984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008986:	bc08      	pop	{r3}
 8008988:	469e      	mov	lr, r3
 800898a:	4770      	bx	lr

0800898c <_fini>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr
