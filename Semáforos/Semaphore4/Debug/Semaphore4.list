
Semaphore4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008628  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08008828  08008828  00009828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800892c  0800892c  0000a1a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800892c  0800892c  0000992c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008934  08008934  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008934  08008934  00009934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008938  08008938  00009938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800893c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  0800899c  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008a3c  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051fc  200001a0  08008adc  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000539c  08008adc  0000a39c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000222d4  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004289  00000000  00000000  0002c4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a48  00000000  00000000  00030730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001478  00000000  00000000  00032178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000046a9  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f597  00000000  00000000  00037c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dcf5  00000000  00000000  00057230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00164f25  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000074ec  00000000  00000000  00164f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  0016c454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008810 	.word	0x08008810

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008810 	.word	0x08008810

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fd1f 	bl	8001026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f834 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f950 	bl	8000890 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f8a2 	bl	8000738 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f8ee 	bl	80007d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f91c 	bl	8000834 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f004 f946 	bl	800488c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <main+0x54>)
 8000602:	f004 fa81 	bl	8004b08 <osMutexNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <main+0x58>)
 800060a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <main+0x5c>)
 800060e:	2100      	movs	r1, #0
 8000610:	480b      	ldr	r0, [pc, #44]	@ (8000640 <main+0x60>)
 8000612:	f004 f9a5 	bl	8004960 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <main+0x64>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <main+0x68>)
 800061e:	2100      	movs	r1, #0
 8000620:	480a      	ldr	r0, [pc, #40]	@ (800064c <main+0x6c>)
 8000622:	f004 f99d 	bl	8004960 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a09      	ldr	r2, [pc, #36]	@ (8000650 <main+0x70>)
 800062a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f004 f962 	bl	80048f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0x50>
 8000634:	080088d0 	.word	0x080088d0
 8000638:	20000814 	.word	0x20000814
 800063c:	08008888 	.word	0x08008888
 8000640:	080009d5 	.word	0x080009d5
 8000644:	2000080c 	.word	0x2000080c
 8000648:	080088ac 	.word	0x080088ac
 800064c:	080009fd 	.word	0x080009fd
 8000650:	20000810 	.word	0x20000810

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	@ 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fbfe 	bl	8007e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000678:	f001 fc56 	bl	8001f28 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <SystemClock_Config+0xdc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a2b      	ldr	r2, [pc, #172]	@ (8000730 <SystemClock_Config+0xdc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <SystemClock_Config+0xdc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <SystemClock_Config+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a25      	ldr	r2, [pc, #148]	@ (8000734 <SystemClock_Config+0xe0>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <SystemClock_Config+0xe0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c8:	2360      	movs	r3, #96	@ 0x60
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fc83 	bl	8001fe8 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e8:	f000 f9cc 	bl	8000a84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ec:	f001 fc2c 	bl	8001f48 <HAL_PWREx_EnableOverDrive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f6:	f000 f9c5 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2103      	movs	r1, #3
 8000716:	4618      	mov	r0, r3
 8000718:	f001 ff14 	bl	8002544 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000722:	f000 f9af 	bl	8000a84 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	@ 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_ETH_Init+0x84>)
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <MX_ETH_Init+0x88>)
 8000740:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_ETH_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_ETH_Init+0x8c>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ETH_Init+0x8c>)
 8000750:	22e1      	movs	r2, #225	@ 0xe1
 8000752:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_ETH_Init+0x8c>)
 8000756:	2200      	movs	r2, #0
 8000758:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_ETH_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_ETH_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_ETH_Init+0x84>)
 8000768:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <MX_ETH_Init+0x8c>)
 800076a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_ETH_Init+0x84>)
 800076e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000772:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_ETH_Init+0x84>)
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <MX_ETH_Init+0x90>)
 8000778:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_ETH_Init+0x84>)
 800077c:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <MX_ETH_Init+0x94>)
 800077e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_ETH_Init+0x84>)
 8000782:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000786:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <MX_ETH_Init+0x84>)
 800078a:	f000 fd7f 	bl	800128c <HAL_ETH_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000794:	f000 f976 	bl	8000a84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000798:	2238      	movs	r2, #56	@ 0x38
 800079a:	2100      	movs	r1, #0
 800079c:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <MX_ETH_Init+0x98>)
 800079e:	f007 fb61 	bl	8007e64 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_ETH_Init+0x98>)
 80007a4:	2221      	movs	r2, #33	@ 0x21
 80007a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_ETH_Init+0x98>)
 80007aa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_ETH_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200001f4 	.word	0x200001f4
 80007c0:	40028000 	.word	0x40028000
 80007c4:	20000818 	.word	0x20000818
 80007c8:	20000100 	.word	0x20000100
 80007cc:	20000060 	.word	0x20000060
 80007d0:	200001bc 	.word	0x200001bc

080007d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_USART3_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <MX_USART3_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <MX_USART3_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART3_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_USART3_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART3_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART3_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART3_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART3_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART3_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART3_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART3_UART_Init+0x58>)
 8000818:	f002 ffe2 	bl	80037e0 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f92f 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200002a4 	.word	0x200002a4
 8000830:	40004800 	.word	0x40004800

08000834 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800083e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2206      	movs	r2, #6
 8000844:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	2202      	movs	r2, #2
 800084a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2202      	movs	r2, #2
 8000856:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2201      	movs	r2, #1
 800085c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2201      	movs	r2, #1
 800086e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	f001 fa1b 	bl	8001cb2 <HAL_PCD_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f8ff 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000032c 	.word	0x2000032c

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b47      	ldr	r3, [pc, #284]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a46      	ldr	r2, [pc, #280]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b44      	ldr	r3, [pc, #272]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b41      	ldr	r3, [pc, #260]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a40      	ldr	r2, [pc, #256]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b3e      	ldr	r3, [pc, #248]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b3b      	ldr	r3, [pc, #236]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a3a      	ldr	r2, [pc, #232]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b38      	ldr	r3, [pc, #224]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b35      	ldr	r3, [pc, #212]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a34      	ldr	r2, [pc, #208]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a2e      	ldr	r2, [pc, #184]	@ (80009c4 <MX_GPIO_Init+0x134>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a28      	ldr	r2, [pc, #160]	@ (80009c4 <MX_GPIO_Init+0x134>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f244 0181 	movw	r1, #16513	@ 0x4081
 800093c:	4822      	ldr	r0, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0x138>)
 800093e:	f001 f99f 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	@ 0x40
 8000946:	4821      	ldr	r0, [pc, #132]	@ (80009cc <MX_GPIO_Init+0x13c>)
 8000948:	f001 f99a 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	481b      	ldr	r0, [pc, #108]	@ (80009d0 <MX_GPIO_Init+0x140>)
 8000964:	f000 ffe0 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000968:	f244 0381 	movw	r3, #16513	@ 0x4081
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_GPIO_Init+0x138>)
 8000982:	f000 ffd1 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000986:	2340      	movs	r3, #64	@ 0x40
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_GPIO_Init+0x13c>)
 800099e:	f000 ffc3 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a2:	2380      	movs	r3, #128	@ 0x80
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_GPIO_Init+0x13c>)
 80009b6:	f000 ffb7 	bl	8001928 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	@ 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021800 	.word	0x40021800
 80009d0:	40020800 	.word	0x40020800

080009d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osMutexAcquire(myMutex01Handle, osWaitForever);
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <StartDefaultTask+0x24>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 f929 	bl	8004c3c <osMutexAcquire>
	osDelay(100);
 80009ea:	2064      	movs	r0, #100	@ 0x64
 80009ec:	f004 f85e 	bl	8004aac <osDelay>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f004 f85b 	bl	8004aac <osDelay>
 80009f6:	e7fb      	b.n	80009f0 <StartDefaultTask+0x1c>
 80009f8:	20000814 	.word	0x20000814

080009fc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b092      	sub	sp, #72	@ 0x48
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	char buf[64];
	osStatus_t status;

	if(osMutexRelease(myMutex01Handle) != osOK){
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <StartTask02+0x58>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 f975 	bl	8004cf8 <osMutexRelease>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d019      	beq.n	8000a48 <StartTask02+0x4c>
		snprintf(buf, sizeof(buf), "Trying to Free Resource: %lu \r \n", osMutexRelease(myMutex01Handle));
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <StartTask02+0x58>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 f96d 	bl	8004cf8 <osMutexRelease>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f107 0008 	add.w	r0, r7, #8
 8000a24:	4a0c      	ldr	r2, [pc, #48]	@ (8000a58 <StartTask02+0x5c>)
 8000a26:	2140      	movs	r1, #64	@ 0x40
 8000a28:	f007 f9e8 	bl	8007dfc <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fc05 	bl	8000240 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	f107 0108 	add.w	r1, r7, #8
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <StartTask02+0x60>)
 8000a44:	f002 ff1a 	bl	800387c <HAL_UART_Transmit>
	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4c:	f004 f82e 	bl	8004aac <osDelay>
 8000a50:	e7fa      	b.n	8000a48 <StartTask02+0x4c>
 8000a52:	bf00      	nop
 8000a54:	20000814 	.word	0x20000814
 8000a58:	0800884c 	.word	0x0800884c
 8000a5c:	200002a4 	.word	0x200002a4

08000a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a72:	f000 fae5 	bl	8001040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40001000 	.word	0x40001000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 fbb3 	bl	8001238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	@ 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a4e      	ldr	r2, [pc, #312]	@ (8000c38 <HAL_ETH_MspInit+0x158>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	f040 8096 	bne.w	8000c30 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b04:	4b4d      	ldr	r3, [pc, #308]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b08:	4a4c      	ldr	r2, [pc, #304]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b10:	4b4a      	ldr	r3, [pc, #296]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	4b47      	ldr	r3, [pc, #284]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	4a46      	ldr	r2, [pc, #280]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b28:	4b44      	ldr	r3, [pc, #272]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	4b41      	ldr	r3, [pc, #260]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a40      	ldr	r2, [pc, #256]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b40:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	4a3a      	ldr	r2, [pc, #232]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b58:	4b38      	ldr	r3, [pc, #224]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b35      	ldr	r3, [pc, #212]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a34      	ldr	r2, [pc, #208]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b32      	ldr	r3, [pc, #200]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	4a2e      	ldr	r2, [pc, #184]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b88:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b94:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a28      	ldr	r2, [pc, #160]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bac:	2332      	movs	r3, #50	@ 0x32
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481e      	ldr	r0, [pc, #120]	@ (8000c40 <HAL_ETH_MspInit+0x160>)
 8000bc8:	f000 feae 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bcc:	2386      	movs	r3, #134	@ 0x86
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	@ (8000c44 <HAL_ETH_MspInit+0x164>)
 8000be8:	f000 fe9e 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <HAL_ETH_MspInit+0x168>)
 8000c0a:	f000 fe8d 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <HAL_ETH_MspInit+0x16c>)
 8000c2c:	f000 fe7c 	bl	8001928 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	@ 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ae      	sub	sp, #184	@ 0xb8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2290      	movs	r2, #144	@ 0x90
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 f8f7 	bl	8007e64 <memset>
  if(huart->Instance==USART3)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <HAL_UART_MspInit+0xb4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13c      	bne.n	8000cfa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 feb0 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9a:	f7ff fef3 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_UART_MspInit+0xb8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_UART_MspInit+0xb8>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a13      	ldr	r2, [pc, #76]	@ (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <HAL_UART_MspInit+0xbc>)
 8000cf6:	f000 fe17 	bl	8001928 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cfa:	bf00      	nop
 8000cfc:	37b8      	adds	r7, #184	@ 0xb8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004800 	.word	0x40004800
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ae      	sub	sp, #184	@ 0xb8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2290      	movs	r2, #144	@ 0x90
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f007 f897 	bl	8007e64 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d3e:	d159      	bne.n	8000df4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fe4f 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d5c:	f7ff fe92 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6c:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d78:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d92:	230a      	movs	r3, #10
 8000d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4818      	ldr	r0, [pc, #96]	@ (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000da0:	f000 fdc2 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4810      	ldr	r0, [pc, #64]	@ (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000dc0:	f000 fdb2 	bl	8001928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dce:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <HAL_PCD_MspInit+0xec>)
 8000dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000df4:	bf00      	nop
 8000df6:	37b8      	adds	r7, #184	@ 0xb8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	@ 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e14:	4b33      	ldr	r3, [pc, #204]	@ (8000ee4 <HAL_InitTick+0xe0>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	4a32      	ldr	r2, [pc, #200]	@ (8000ee4 <HAL_InitTick+0xe0>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e20:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_InitTick+0xe0>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fdaa 	bl	8002990 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e46:	f001 fd7b 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8000e4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e4c:	e004      	b.n	8000e58 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e4e:	f001 fd77 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8000e52:	4603      	mov	r3, r0
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e60:	0c9b      	lsrs	r3, r3, #18
 8000e62:	3b01      	subs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e68:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e74:	4a1d      	ldr	r2, [pc, #116]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e8c:	4817      	ldr	r0, [pc, #92]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e8e:	f002 f9d9 	bl	8003244 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d11b      	bne.n	8000ed8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea0:	4812      	ldr	r0, [pc, #72]	@ (8000eec <HAL_InitTick+0xe8>)
 8000ea2:	f002 fa31 	bl	8003308 <HAL_TIM_Base_Start_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d111      	bne.n	8000ed8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eb4:	2036      	movs	r0, #54	@ 0x36
 8000eb6:	f000 f9db 	bl	8001270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d808      	bhi.n	8000ed2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	2036      	movs	r0, #54	@ 0x36
 8000ec6:	f000 f9b7 	bl	8001238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_InitTick+0xf0>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e002      	b.n	8000ed8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3738      	adds	r7, #56	@ 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	20000820 	.word	0x20000820
 8000ef0:	40001000 	.word	0x40001000
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <TIM6_DAC_IRQHandler+0x10>)
 8000f36:	f002 fa5f 	bl	80033f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000820 	.word	0x20000820

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f006 ffd4 	bl	8007f20 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20080000 	.word	0x20080000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	2000086c 	.word	0x2000086c
 8000fac:	200053a0 	.word	0x200053a0

08000fb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800100c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd8:	f7ff ffea 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001002:	f006 ff93 	bl	8007f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff faeb 	bl	80005e0 <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001018:	0800893c 	.word	0x0800893c
  ldr r2, =_sbss
 800101c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001020:	2000539c 	.word	0x2000539c

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>

08001026 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
 800102c:	f000 f8f9 	bl	8001222 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001030:	200f      	movs	r0, #15
 8001032:	f7ff fee7 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001036:	f7ff fd2b 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000870 	.word	0x20000870

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000870 	.word	0x20000870

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	05fa0000 	.word	0x05fa0000

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	@ (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	@ (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff4c 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124a:	f7ff ff61 	bl	8001110 <__NVIC_GetPriorityGrouping>
 800124e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f7ff ffb1 	bl	80011bc <NVIC_EncodePriority>
 800125a:	4602      	mov	r2, r0
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff80 	bl	8001168 <__NVIC_SetPriority>
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff54 	bl	800112c <__NVIC_EnableIRQ>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e086      	b.n	80013ac <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d106      	bne.n	80012b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2220      	movs	r2, #32
 80012ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fc15 	bl	8000ae0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b3f      	ldr	r3, [pc, #252]	@ (80013b4 <HAL_ETH_Init+0x128>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	4a3e      	ldr	r2, [pc, #248]	@ (80013b4 <HAL_ETH_Init+0x128>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c2:	4b3c      	ldr	r3, [pc, #240]	@ (80013b4 <HAL_ETH_Init+0x128>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012ce:	4b3a      	ldr	r3, [pc, #232]	@ (80013b8 <HAL_ETH_Init+0x12c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a39      	ldr	r2, [pc, #228]	@ (80013b8 <HAL_ETH_Init+0x12c>)
 80012d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012da:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <HAL_ETH_Init+0x12c>)
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4935      	ldr	r1, [pc, #212]	@ (80013b8 <HAL_ETH_Init+0x12c>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012e8:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <HAL_ETH_Init+0x12c>)
 80012ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001302:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001304:	f7ff feb0 	bl	8001068 <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800130a:	e011      	b.n	8001330 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800130c:	f7ff feac 	bl	8001068 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800131a:	d909      	bls.n	8001330 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2204      	movs	r2, #4
 8001320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	22e0      	movs	r2, #224	@ 0xe0
 8001328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e03d      	b.n	80013ac <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e4      	bne.n	800130c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f97a 	bl	800163c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fa25 	bl	8001798 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fa7b 	bl	800184a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	461a      	mov	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f9e3 	bl	8001728 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_ETH_Init+0x130>)
 8001380:	430b      	orrs	r3, r1
 8001382:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001396:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2210      	movs	r2, #16
 80013a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40013800 	.word	0x40013800
 80013bc:	00020060 	.word	0x00020060

080013c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <ETH_SetMACConfig+0x164>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7b9b      	ldrb	r3, [r3, #14]
 80013de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	7c12      	ldrb	r2, [r2, #16]
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d102      	bne.n	80013ee <ETH_SetMACConfig+0x2e>
 80013e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013ec:	e000      	b.n	80013f0 <ETH_SetMACConfig+0x30>
 80013ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	7c52      	ldrb	r2, [r2, #17]
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d102      	bne.n	8001400 <ETH_SetMACConfig+0x40>
 80013fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013fe:	e000      	b.n	8001402 <ETH_SetMACConfig+0x42>
 8001400:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001402:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001408:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	7fdb      	ldrb	r3, [r3, #31]
 800140e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001410:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001416:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	7f92      	ldrb	r2, [r2, #30]
 800141c:	2a00      	cmp	r2, #0
 800141e:	d102      	bne.n	8001426 <ETH_SetMACConfig+0x66>
 8001420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001424:	e000      	b.n	8001428 <ETH_SetMACConfig+0x68>
 8001426:	2200      	movs	r2, #0
                        macconf->Speed |
 8001428:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	7f1b      	ldrb	r3, [r3, #28]
 800142e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001430:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800143e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001446:	2a00      	cmp	r2, #0
 8001448:	d102      	bne.n	8001450 <ETH_SetMACConfig+0x90>
 800144a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144e:	e000      	b.n	8001452 <ETH_SetMACConfig+0x92>
 8001450:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001452:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	7bdb      	ldrb	r3, [r3, #15]
 8001458:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800145a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001460:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001468:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800146a:	4313      	orrs	r3, r2
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fdfc 	bl	8001080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d101      	bne.n	80014b6 <ETH_SetMACConfig+0xf6>
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	e000      	b.n	80014b8 <ETH_SetMACConfig+0xf8>
 80014b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80014c6:	2a01      	cmp	r2, #1
 80014c8:	d101      	bne.n	80014ce <ETH_SetMACConfig+0x10e>
 80014ca:	2208      	movs	r2, #8
 80014cc:	e000      	b.n	80014d0 <ETH_SetMACConfig+0x110>
 80014ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d101      	bne.n	80014e0 <ETH_SetMACConfig+0x120>
 80014dc:	2204      	movs	r2, #4
 80014de:	e000      	b.n	80014e2 <ETH_SetMACConfig+0x122>
 80014e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014ea:	2a01      	cmp	r2, #1
 80014ec:	d101      	bne.n	80014f2 <ETH_SetMACConfig+0x132>
 80014ee:	2202      	movs	r2, #2
 80014f0:	e000      	b.n	80014f4 <ETH_SetMACConfig+0x134>
 80014f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014f4:	4313      	orrs	r3, r2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fdb7 	bl	8001080 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	fd20810f 	.word	0xfd20810f

08001528 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <ETH_SetDMAConfig+0x110>)
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	7b1b      	ldrb	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <ETH_SetDMAConfig+0x2c>
 800154e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001552:	e000      	b.n	8001556 <ETH_SetDMAConfig+0x2e>
 8001554:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7b5b      	ldrb	r3, [r3, #13]
 800155a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	7f52      	ldrb	r2, [r2, #29]
 8001562:	2a00      	cmp	r2, #0
 8001564:	d102      	bne.n	800156c <ETH_SetDMAConfig+0x44>
 8001566:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800156a:	e000      	b.n	800156e <ETH_SetDMAConfig+0x46>
 800156c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800156e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	7b9b      	ldrb	r3, [r3, #14]
 8001574:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001576:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800157c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7f1b      	ldrb	r3, [r3, #28]
 8001582:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001584:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7f9b      	ldrb	r3, [r3, #30]
 800158a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800158c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001592:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800159a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800159c:	4313      	orrs	r3, r2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fd5e 	bl	8001080 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015cc:	461a      	mov	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	791b      	ldrb	r3, [r3, #4]
 80015d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001600:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800160a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800160e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fd2f 	bl	8001080 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	f8de3f23 	.word	0xf8de3f23

0800163c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0a6      	sub	sp, #152	@ 0x98
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001650:	2300      	movs	r3, #0
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800166c:	2301      	movs	r3, #1
 800166e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800167e:	2300      	movs	r3, #0
 8001680:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001688:	2300      	movs	r3, #0
 800168a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fe7f 	bl	80013c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016ee:	2301      	movs	r3, #1
 80016f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001702:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff05 	bl	8001528 <ETH_SetDMAConfig>
}
 800171e:	bf00      	nop
 8001720:	3798      	adds	r7, #152	@ 0x98
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3305      	adds	r3, #5
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	3204      	adds	r2, #4
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <ETH_MACAddressConfig+0x68>)
 800174a:	4413      	add	r3, r2
 800174c:	461a      	mov	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3303      	adds	r3, #3
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	061a      	lsls	r2, r3, #24
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3302      	adds	r3, #2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3301      	adds	r3, #1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	4313      	orrs	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <ETH_MACAddressConfig+0x6c>)
 800177a:	4413      	add	r3, r2
 800177c:	461a      	mov	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40028040 	.word	0x40028040
 8001794:	40028044 	.word	0x40028044

08001798 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e03e      	b.n	8001824 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	3206      	adds	r2, #6
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d80c      	bhi.n	8001808 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	e004      	b.n	8001812 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	461a      	mov	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d9bd      	bls.n	80017a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800183c:	611a      	str	r2, [r3, #16]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e048      	b.n	80018ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6919      	ldr	r1, [r3, #16]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001894:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	3212      	adds	r2, #18
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d80c      	bhi.n	80018da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6919      	ldr	r1, [r3, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	e004      	b.n	80018e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d9b3      	bls.n	8001858 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	60da      	str	r2, [r3, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	@ 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e175      	b.n	8001c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8164 	bne.w	8001c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_GPIO_Init+0x56>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80be 	beq.w	8001c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001abe:	4b63      	ldr	r3, [pc, #396]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aca:	4a61      	ldr	r2, [pc, #388]	@ (8001c50 <HAL_GPIO_Init+0x328>)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a58      	ldr	r2, [pc, #352]	@ (8001c54 <HAL_GPIO_Init+0x32c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d037      	beq.n	8001b66 <HAL_GPIO_Init+0x23e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a57      	ldr	r2, [pc, #348]	@ (8001c58 <HAL_GPIO_Init+0x330>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d031      	beq.n	8001b62 <HAL_GPIO_Init+0x23a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a56      	ldr	r2, [pc, #344]	@ (8001c5c <HAL_GPIO_Init+0x334>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02b      	beq.n	8001b5e <HAL_GPIO_Init+0x236>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a55      	ldr	r2, [pc, #340]	@ (8001c60 <HAL_GPIO_Init+0x338>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d025      	beq.n	8001b5a <HAL_GPIO_Init+0x232>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a54      	ldr	r2, [pc, #336]	@ (8001c64 <HAL_GPIO_Init+0x33c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01f      	beq.n	8001b56 <HAL_GPIO_Init+0x22e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a53      	ldr	r2, [pc, #332]	@ (8001c68 <HAL_GPIO_Init+0x340>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x22a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a52      	ldr	r2, [pc, #328]	@ (8001c6c <HAL_GPIO_Init+0x344>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x226>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a51      	ldr	r2, [pc, #324]	@ (8001c70 <HAL_GPIO_Init+0x348>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x222>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a50      	ldr	r2, [pc, #320]	@ (8001c74 <HAL_GPIO_Init+0x34c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x21e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4f      	ldr	r2, [pc, #316]	@ (8001c78 <HAL_GPIO_Init+0x350>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x21a>
 8001b3e:	2309      	movs	r3, #9
 8001b40:	e012      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b42:	230a      	movs	r3, #10
 8001b44:	e010      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b46:	2308      	movs	r3, #8
 8001b48:	e00e      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e00c      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e00a      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b52:	2305      	movs	r3, #5
 8001b54:	e008      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b56:	2304      	movs	r3, #4
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b66:	2300      	movs	r3, #0
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b78:	4935      	ldr	r1, [pc, #212]	@ (8001c50 <HAL_GPIO_Init+0x328>)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b86:	4b3d      	ldr	r3, [pc, #244]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001baa:	4a34      	ldr	r2, [pc, #208]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb0:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd4:	4a29      	ldr	r2, [pc, #164]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bda:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c28:	4a14      	ldr	r2, [pc, #80]	@ (8001c7c <HAL_GPIO_Init+0x354>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	f67f ae86 	bls.w	8001948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40013800 	.word	0x40013800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40021400 	.word	0x40021400
 8001c6c:	40021800 	.word	0x40021800
 8001c70:	40021c00 	.word	0x40021c00
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40022400 	.word	0x40022400
 8001c7c:	40013c00 	.word	0x40013c00

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	041a      	lsls	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af02      	add	r7, sp, #8
 8001cb8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e108      	b.n	8001ed6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff f816 	bl	8000d10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cf2:	d102      	bne.n	8001cfa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fb20 	bl	8004344 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7c1a      	ldrb	r2, [r3, #16]
 8001d0c:	f88d 2000 	strb.w	r2, [sp]
 8001d10:	3304      	adds	r3, #4
 8001d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d14:	f002 fabc 	bl	8004290 <USB_CoreInit>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0d5      	b.n	8001ed6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 fb18 	bl	8004366 <USB_SetCurrentMode>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0c6      	b.n	8001ed6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e04a      	b.n	8001de4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3315      	adds	r3, #21
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3314      	adds	r3, #20
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b298      	uxth	r0, r3
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	332e      	adds	r3, #46	@ 0x2e
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3318      	adds	r3, #24
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	331c      	adds	r3, #28
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3320      	adds	r3, #32
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3324      	adds	r3, #36	@ 0x24
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	3301      	adds	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3af      	bcc.n	8001d4e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e044      	b.n	8001e7e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3b5      	bcc.n	8001df4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7c1a      	ldrb	r2, [r3, #16]
 8001e90:	f88d 2000 	strb.w	r2, [sp]
 8001e94:	3304      	adds	r3, #4
 8001e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e98:	f002 fab2 	bl	8004400 <USB_DevInit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e013      	b.n	8001ed6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7b1b      	ldrb	r3, [r3, #12]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d102      	bne.n	8001eca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f80b 	bl	8001ee0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fc6d 	bl	80047ae <USB_DevDisconnect>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	10000003 	.word	0x10000003

08001f28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000

08001f48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a22      	ldr	r2, [pc, #136]	@ (8001fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f76:	f7ff f877 	bl	8001068 <HAL_GetTick>
 8001f7a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f7c:	e009      	b.n	8001f92 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f7e:	f7ff f873 	bl	8001068 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f8c:	d901      	bls.n	8001f92 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e022      	b.n	8001fd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001faa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fac:	f7ff f85c 	bl	8001068 <HAL_GetTick>
 8001fb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fb2:	e009      	b.n	8001fc8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fb4:	f7ff f858 	bl	8001068 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fc2:	d901      	bls.n	8001fc8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e007      	b.n	8001fd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fd4:	d1ee      	bne.n	8001fb4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e29b      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8087 	beq.w	800211a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800200c:	4b96      	ldr	r3, [pc, #600]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b04      	cmp	r3, #4
 8002016:	d00c      	beq.n	8002032 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002018:	4b93      	ldr	r3, [pc, #588]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d112      	bne.n	800204a <HAL_RCC_OscConfig+0x62>
 8002024:	4b90      	ldr	r3, [pc, #576]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800202c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002030:	d10b      	bne.n	800204a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002032:	4b8d      	ldr	r3, [pc, #564]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d06c      	beq.n	8002118 <HAL_RCC_OscConfig+0x130>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d168      	bne.n	8002118 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e275      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x7a>
 8002054:	4b84      	ldr	r3, [pc, #528]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a83      	ldr	r2, [pc, #524]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e02e      	b.n	80020c0 <HAL_RCC_OscConfig+0xd8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x9c>
 800206a:	4b7f      	ldr	r3, [pc, #508]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a7e      	ldr	r2, [pc, #504]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b7c      	ldr	r3, [pc, #496]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7b      	ldr	r2, [pc, #492]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800207c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0xd8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0xc0>
 800208e:	4b76      	ldr	r3, [pc, #472]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b73      	ldr	r3, [pc, #460]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a72      	ldr	r2, [pc, #456]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0xd8>
 80020a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe ffce 	bl	8001068 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe ffca 	bl	8001068 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e229      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b61      	ldr	r3, [pc, #388]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0xe8>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe ffba 	bl	8001068 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f8:	f7fe ffb6 	bl	8001068 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	@ 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e215      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	4b57      	ldr	r3, [pc, #348]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x110>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d069      	beq.n	80021fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002126:	4b50      	ldr	r3, [pc, #320]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b4d      	ldr	r3, [pc, #308]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b08      	cmp	r3, #8
 800213c:	d11c      	bne.n	8002178 <HAL_RCC_OscConfig+0x190>
 800213e:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b47      	ldr	r3, [pc, #284]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x17a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1e9      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b41      	ldr	r3, [pc, #260]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	493d      	ldr	r1, [pc, #244]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e040      	b.n	80021fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d023      	beq.n	80021c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a38      	ldr	r2, [pc, #224]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe ff6c 	bl	8001068 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7fe ff68 	bl	8001068 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1c7      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	4b30      	ldr	r3, [pc, #192]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4929      	ldr	r1, [pc, #164]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c8:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a26      	ldr	r2, [pc, #152]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe ff48 	bl	8001068 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021dc:	f7fe ff44 	bl	8001068 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1a3      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d038      	beq.n	8002278 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d019      	beq.n	8002242 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002212:	4a15      	ldr	r2, [pc, #84]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe ff25 	bl	8001068 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002222:	f7fe ff21 	bl	8001068 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e180      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x23a>
 8002240:	e01a      	b.n	8002278 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002246:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <HAL_RCC_OscConfig+0x280>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7fe ff0b 	bl	8001068 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe ff07 	bl	8001068 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d903      	bls.n	800226c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e166      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
 8002268:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	4b92      	ldr	r3, [pc, #584]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800226e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ee      	bne.n	8002256 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a4 	beq.w	80023ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b8c      	ldr	r3, [pc, #560]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b89      	ldr	r3, [pc, #548]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	4a88      	ldr	r2, [pc, #544]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229c:	6413      	str	r3, [r2, #64]	@ 0x40
 800229e:	4b86      	ldr	r3, [pc, #536]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ae:	4b83      	ldr	r3, [pc, #524]	@ (80024bc <HAL_RCC_OscConfig+0x4d4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022ba:	4b80      	ldr	r3, [pc, #512]	@ (80024bc <HAL_RCC_OscConfig+0x4d4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7f      	ldr	r2, [pc, #508]	@ (80024bc <HAL_RCC_OscConfig+0x4d4>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fecf 	bl	8001068 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7fe fecb 	bl	8001068 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	@ 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e12a      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e0:	4b76      	ldr	r3, [pc, #472]	@ (80024bc <HAL_RCC_OscConfig+0x4d4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x31a>
 80022f4:	4b70      	ldr	r3, [pc, #448]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f8:	4a6f      	ldr	r2, [pc, #444]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002300:	e02d      	b.n	800235e <HAL_RCC_OscConfig+0x376>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x33c>
 800230a:	4b6b      	ldr	r3, [pc, #428]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230e:	4a6a      	ldr	r2, [pc, #424]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	@ 0x70
 8002316:	4b68      	ldr	r3, [pc, #416]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	4a67      	ldr	r2, [pc, #412]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6713      	str	r3, [r2, #112]	@ 0x70
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x376>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x35e>
 800232c:	4b62      	ldr	r3, [pc, #392]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a61      	ldr	r2, [pc, #388]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
 8002338:	4b5f      	ldr	r3, [pc, #380]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	4a5e      	ldr	r2, [pc, #376]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	@ 0x70
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x376>
 8002346:	4b5c      	ldr	r3, [pc, #368]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	4a5b      	ldr	r2, [pc, #364]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	@ 0x70
 8002352:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7fe fe7f 	bl	8001068 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fe7b 	bl	8001068 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0d8      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b4c      	ldr	r3, [pc, #304]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x386>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe fe69 	bl	8001068 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fe65 	bl	8001068 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0c2      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b3d      	ldr	r3, [pc, #244]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a3c      	ldr	r2, [pc, #240]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80ae 	beq.w	8002534 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d06d      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d14b      	bne.n	8002484 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b32      	ldr	r3, [pc, #200]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a31      	ldr	r2, [pc, #196]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fe36 	bl	8001068 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fe32 	bl	8001068 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e091      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	4b29      	ldr	r3, [pc, #164]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	019b      	lsls	r3, r3, #6
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	3b01      	subs	r3, #1
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	071b      	lsls	r3, r3, #28
 800244a:	491b      	ldr	r1, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fe04 	bl	8001068 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe fe00 	bl	8001068 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e05f      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x47c>
 8002482:	e057      	b.n	8002534 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0b      	ldr	r2, [pc, #44]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fdea 	bl	8001068 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fde6 	bl	8001068 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e045      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x4b0>
 80024b6:	e03d      	b.n	8002534 <HAL_RCC_OscConfig+0x54c>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_RCC_OscConfig+0x558>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d030      	beq.n	8002530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d129      	bne.n	8002530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d122      	bne.n	8002530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d119      	bne.n	8002530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	3b01      	subs	r3, #1
 800250a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d10f      	bne.n	8002530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0d0      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b6a      	ldr	r3, [pc, #424]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b67      	ldr	r3, [pc, #412]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 020f 	bic.w	r2, r3, #15
 8002572:	4965      	ldr	r1, [pc, #404]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b63      	ldr	r3, [pc, #396]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b8      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a4:	4b59      	ldr	r3, [pc, #356]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a58      	ldr	r2, [pc, #352]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025bc:	4b53      	ldr	r3, [pc, #332]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b50      	ldr	r3, [pc, #320]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	494d      	ldr	r1, [pc, #308]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d040      	beq.n	8002668 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b47      	ldr	r3, [pc, #284]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d115      	bne.n	8002626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e07f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b41      	ldr	r3, [pc, #260]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e073      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	4b3d      	ldr	r3, [pc, #244]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06b      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b39      	ldr	r3, [pc, #228]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4936      	ldr	r1, [pc, #216]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fd16 	bl	8001068 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7fe fd12 	bl	8001068 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e053      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d210      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 020f 	bic.w	r2, r3, #15
 800267e:	4922      	ldr	r1, [pc, #136]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e032      	b.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4916      	ldr	r1, [pc, #88]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	490e      	ldr	r1, [pc, #56]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d6:	f000 f821 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490a      	ldr	r1, [pc, #40]	@ (8002710 <HAL_RCC_ClockConfig+0x1cc>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <HAL_RCC_ClockConfig+0x1d0>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026f2:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_RCC_ClockConfig+0x1d4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fb84 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00
 800270c:	40023800 	.word	0x40023800
 8002710:	080088e0 	.word	0x080088e0
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002720:	b094      	sub	sp, #80	@ 0x50
 8002722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	647b      	str	r3, [r7, #68]	@ 0x44
 8002728:	2300      	movs	r3, #0
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800272c:	2300      	movs	r3, #0
 800272e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002734:	4b79      	ldr	r3, [pc, #484]	@ (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00d      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x40>
 8002740:	2b08      	cmp	r3, #8
 8002742:	f200 80e1 	bhi.w	8002908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
 800274a:	2b04      	cmp	r3, #4
 800274c:	d003      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x3a>
 800274e:	e0db      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b73      	ldr	r3, [pc, #460]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x204>)
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002754:	e0db      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002756:	4b73      	ldr	r3, [pc, #460]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x208>)
 8002758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800275a:	e0d8      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800275c:	4b6f      	ldr	r3, [pc, #444]	@ (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002764:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002766:	4b6d      	ldr	r3, [pc, #436]	@ (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002772:	4b6a      	ldr	r3, [pc, #424]	@ (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	2200      	movs	r2, #0
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800277c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002784:	633b      	str	r3, [r7, #48]	@ 0x30
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
 800278a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800278e:	4622      	mov	r2, r4
 8002790:	462b      	mov	r3, r5
 8002792:	f04f 0000 	mov.w	r0, #0
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	0159      	lsls	r1, r3, #5
 800279c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a0:	0150      	lsls	r0, r2, #5
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4621      	mov	r1, r4
 80027a8:	1a51      	subs	r1, r2, r1
 80027aa:	6139      	str	r1, [r7, #16]
 80027ac:	4629      	mov	r1, r5
 80027ae:	eb63 0301 	sbc.w	r3, r3, r1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027c0:	4659      	mov	r1, fp
 80027c2:	018b      	lsls	r3, r1, #6
 80027c4:	4651      	mov	r1, sl
 80027c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ca:	4651      	mov	r1, sl
 80027cc:	018a      	lsls	r2, r1, #6
 80027ce:	4651      	mov	r1, sl
 80027d0:	ebb2 0801 	subs.w	r8, r2, r1
 80027d4:	4659      	mov	r1, fp
 80027d6:	eb63 0901 	sbc.w	r9, r3, r1
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ee:	4690      	mov	r8, r2
 80027f0:	4699      	mov	r9, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	eb18 0303 	adds.w	r3, r8, r3
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	462b      	mov	r3, r5
 80027fc:	eb49 0303 	adc.w	r3, r9, r3
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800280e:	4629      	mov	r1, r5
 8002810:	024b      	lsls	r3, r1, #9
 8002812:	4621      	mov	r1, r4
 8002814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002818:	4621      	mov	r1, r4
 800281a:	024a      	lsls	r2, r1, #9
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002822:	2200      	movs	r2, #0
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800282c:	f7fd fd60 	bl	80002f0 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002838:	e058      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4b38      	ldr	r3, [pc, #224]	@ (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	2200      	movs	r2, #0
 8002842:	4618      	mov	r0, r3
 8002844:	4611      	mov	r1, r2
 8002846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002854:	4642      	mov	r2, r8
 8002856:	464b      	mov	r3, r9
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0159      	lsls	r1, r3, #5
 8002862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002866:	0150      	lsls	r0, r2, #5
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4641      	mov	r1, r8
 800286e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002872:	4649      	mov	r1, r9
 8002874:	eb63 0b01 	sbc.w	fp, r3, r1
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800288c:	ebb2 040a 	subs.w	r4, r2, sl
 8002890:	eb63 050b 	sbc.w	r5, r3, fp
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	00eb      	lsls	r3, r5, #3
 800289e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a2:	00e2      	lsls	r2, r4, #3
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	18e3      	adds	r3, r4, r3
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	464b      	mov	r3, r9
 80028b0:	eb45 0303 	adc.w	r3, r5, r3
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c2:	4629      	mov	r1, r5
 80028c4:	028b      	lsls	r3, r1, #10
 80028c6:	4621      	mov	r1, r4
 80028c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028cc:	4621      	mov	r1, r4
 80028ce:	028a      	lsls	r2, r1, #10
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d6:	2200      	movs	r2, #0
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	61fa      	str	r2, [r7, #28]
 80028dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e0:	f7fd fd06 	bl	80002f0 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x204>)
 800290a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002910:	4618      	mov	r0, r3
 8002912:	3750      	adds	r7, #80	@ 0x50
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	00f42400 	.word	0x00f42400
 8002924:	007a1200 	.word	0x007a1200

08002928 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <HAL_RCC_GetHCLKFreq+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002944:	f7ff fff0 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0a9b      	lsrs	r3, r3, #10
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	@ (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	080088f0 	.word	0x080088f0

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800296c:	f7ff ffdc 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0b5b      	lsrs	r3, r3, #13
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	@ (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	080088f0 	.word	0x080088f0

08002990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	220f      	movs	r2, #15
 800299e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029ac:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <HAL_RCC_GetClockConfig+0x5c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_RCC_GetClockConfig+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029d2:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <HAL_RCC_GetClockConfig+0x60>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	601a      	str	r2, [r3, #0]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40023c00 	.word	0x40023c00

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a1c:	4b69      	ldr	r3, [pc, #420]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a68      	ldr	r2, [pc, #416]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a26:	6093      	str	r3, [r2, #8]
 8002a28:	4b66      	ldr	r3, [pc, #408]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a30:	4964      	ldr	r1, [pc, #400]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d017      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	4959      	ldr	r1, [pc, #356]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	494a      	ldr	r1, [pc, #296]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 808b 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	4a39      	ldr	r2, [pc, #228]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae4:	4b37      	ldr	r3, [pc, #220]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af0:	4b35      	ldr	r3, [pc, #212]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a34      	ldr	r2, [pc, #208]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fe fab4 	bl	8001068 <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fab0 	bl	8001068 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e38f      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b16:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b22:	4b28      	ldr	r3, [pc, #160]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d035      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d02e      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b40:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b56:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b62:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b68:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d114      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fa78 	bl	8001068 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fa74 	bl	8001068 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e351      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002baa:	d111      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bb8:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bba:	400b      	ands	r3, r1
 8002bbc:	4901      	ldr	r1, [pc, #4]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	0ffffcff 	.word	0x0ffffcff
 8002bd0:	4bac      	ldr	r3, [pc, #688]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4aab      	ldr	r2, [pc, #684]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	4ba9      	ldr	r3, [pc, #676]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be8:	49a6      	ldr	r1, [pc, #664]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bfa:	4ba2      	ldr	r3, [pc, #648]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c00:	4aa0      	ldr	r2, [pc, #640]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	499b      	ldr	r1, [pc, #620]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c28:	4b96      	ldr	r3, [pc, #600]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c36:	4993      	ldr	r1, [pc, #588]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4a:	4b8e      	ldr	r3, [pc, #568]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c58:	498a      	ldr	r1, [pc, #552]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6c:	4b85      	ldr	r3, [pc, #532]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7a:	4982      	ldr	r1, [pc, #520]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4979      	ldr	r1, [pc, #484]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb0:	4b74      	ldr	r3, [pc, #464]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4971      	ldr	r1, [pc, #452]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd8:	f023 020c 	bic.w	r2, r3, #12
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce0:	4968      	ldr	r1, [pc, #416]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf4:	4b63      	ldr	r3, [pc, #396]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4960      	ldr	r1, [pc, #384]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d16:	4b5b      	ldr	r3, [pc, #364]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d24:	4957      	ldr	r1, [pc, #348]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d38:	4b52      	ldr	r3, [pc, #328]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	494f      	ldr	r1, [pc, #316]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	4946      	ldr	r1, [pc, #280]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d7c:	4b41      	ldr	r3, [pc, #260]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8a:	493e      	ldr	r1, [pc, #248]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d9e:	4b39      	ldr	r3, [pc, #228]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dac:	4935      	ldr	r1, [pc, #212]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dc0:	4b30      	ldr	r3, [pc, #192]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dce:	492d      	ldr	r1, [pc, #180]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d011      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002de2:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002df0:	4924      	ldr	r1, [pc, #144]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e22:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e30:	4914      	ldr	r1, [pc, #80]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e44:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e54:	490b      	ldr	r1, [pc, #44]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00f      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e78:	4902      	ldr	r1, [pc, #8]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e80:	e002      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e94:	4b8a      	ldr	r3, [pc, #552]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	4986      	ldr	r1, [pc, #536]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002eb8:	4b81      	ldr	r3, [pc, #516]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ebe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ec8:	497d      	ldr	r1, [pc, #500]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d006      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80d6 	beq.w	8003090 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee4:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a75      	ldr	r2, [pc, #468]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef0:	f7fe f8ba 	bl	8001068 <HAL_GetTick>
 8002ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ef8:	f7fe f8b6 	bl	8001068 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e195      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d021      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f2a:	4b65      	ldr	r3, [pc, #404]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f38:	4b61      	ldr	r3, [pc, #388]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f3e:	0e1b      	lsrs	r3, r3, #24
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	019a      	lsls	r2, r3, #6
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	071b      	lsls	r3, r3, #28
 8002f5e:	4958      	ldr	r1, [pc, #352]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f90:	d129      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f92:	4b4b      	ldr	r3, [pc, #300]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fa0:	4b47      	ldr	r3, [pc, #284]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa6:	0f1b      	lsrs	r3, r3, #28
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	019a      	lsls	r2, r3, #6
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	071b      	lsls	r3, r3, #28
 8002fc6:	493e      	ldr	r1, [pc, #248]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fce:	4b3c      	ldr	r3, [pc, #240]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd4:	f023 021f 	bic.w	r2, r3, #31
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	4938      	ldr	r1, [pc, #224]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01d      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ff2:	4b33      	ldr	r3, [pc, #204]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ff8:	0e1b      	lsrs	r3, r3, #24
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003000:	4b2f      	ldr	r3, [pc, #188]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003006:	0f1b      	lsrs	r3, r3, #28
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4926      	ldr	r1, [pc, #152]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d011      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	019a      	lsls	r2, r3, #6
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	491a      	ldr	r1, [pc, #104]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306a:	f7fd fffd 	bl	8001068 <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003072:	f7fd fff9 	bl	8001068 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b64      	cmp	r3, #100	@ 0x64
 800307e:	d901      	bls.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0d8      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003084:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b01      	cmp	r3, #1
 8003094:	f040 80ce 	bne.w	8003234 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a4:	f7fd ffe0 	bl	8001068 <HAL_GetTick>
 80030a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030aa:	e00b      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030ac:	f7fd ffdc 	bl	8001068 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d904      	bls.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0bb      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d0:	d0ec      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d02e      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d12a      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030fa:	4b51      	ldr	r3, [pc, #324]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003108:	4b4d      	ldr	r3, [pc, #308]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	0f1b      	lsrs	r3, r3, #28
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	019a      	lsls	r2, r3, #6
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	071b      	lsls	r3, r3, #28
 800312e:	4944      	ldr	r1, [pc, #272]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003136:	4b42      	ldr	r3, [pc, #264]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003138:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800313c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	493d      	ldr	r1, [pc, #244]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d022      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003164:	d11d      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003166:	4b36      	ldr	r3, [pc, #216]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	0e1b      	lsrs	r3, r3, #24
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003174:	4b32      	ldr	r3, [pc, #200]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	0f1b      	lsrs	r3, r3, #28
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	019a      	lsls	r2, r3, #6
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	061b      	lsls	r3, r3, #24
 8003194:	431a      	orrs	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	071b      	lsls	r3, r3, #28
 800319a:	4929      	ldr	r1, [pc, #164]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b4:	0e1b      	lsrs	r3, r3, #24
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	019a      	lsls	r2, r3, #6
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	431a      	orrs	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	4917      	ldr	r1, [pc, #92]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	4911      	ldr	r1, [pc, #68]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0e      	ldr	r2, [pc, #56]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320c:	f7fd ff2c 	bl	8001068 <HAL_GetTick>
 8003210:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003214:	f7fd ff28 	bl	8001068 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e007      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800322e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003232:	d1ef      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e049      	b.n	80032ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f841 	bl	80032f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f000 f9e8 	bl	8003658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e054      	b.n	80033ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a26      	ldr	r2, [pc, #152]	@ (80033d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x80>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334a:	d01d      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x80>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x80>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a21      	ldr	r2, [pc, #132]	@ (80033e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x80>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1f      	ldr	r2, [pc, #124]	@ (80033e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x80>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x80>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <HAL_TIM_Base_Start_IT+0xe4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x80>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d115      	bne.n	80033b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <HAL_TIM_Base_Start_IT+0xec>)
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b06      	cmp	r3, #6
 8003398:	d015      	beq.n	80033c6 <HAL_TIM_Base_Start_IT+0xbe>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a0:	d011      	beq.n	80033c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b2:	e008      	b.n	80033c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e000      	b.n	80033c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40001800 	.word	0x40001800
 80033f4:	00010007 	.word	0x00010007

080033f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0202 	mvn.w	r2, #2
 800342c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8e9 	bl	800361a <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8db 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8ec 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0204 	mvn.w	r2, #4
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8c3 	bl	800361a <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8b5 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8c6 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d020      	beq.n	80034f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0208 	mvn.w	r2, #8
 80034c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f89d 	bl	800361a <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f88f 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8a0 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d020      	beq.n	8003540 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01b      	beq.n	8003540 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0210 	mvn.w	r2, #16
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2208      	movs	r2, #8
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f877 	bl	800361a <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f869 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f87a 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0201 	mvn.w	r2, #1
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd fa7e 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800358a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f913 	bl	80037b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f90b 	bl	80037cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00c      	beq.n	80035da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f834 	bl	8003642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00c      	beq.n	80035fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f06f 0220 	mvn.w	r2, #32
 80035f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8d3 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a43      	ldr	r2, [pc, #268]	@ (8003778 <TIM_Base_SetConfig+0x120>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d00f      	beq.n	8003698 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a40      	ldr	r2, [pc, #256]	@ (800377c <TIM_Base_SetConfig+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00b      	beq.n	8003698 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3f      	ldr	r2, [pc, #252]	@ (8003780 <TIM_Base_SetConfig+0x128>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3e      	ldr	r2, [pc, #248]	@ (8003784 <TIM_Base_SetConfig+0x12c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3d      	ldr	r2, [pc, #244]	@ (8003788 <TIM_Base_SetConfig+0x130>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a32      	ldr	r2, [pc, #200]	@ (8003778 <TIM_Base_SetConfig+0x120>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02b      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d027      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	@ (800377c <TIM_Base_SetConfig+0x124>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d023      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003780 <TIM_Base_SetConfig+0x128>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01f      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <TIM_Base_SetConfig+0x12c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01b      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003788 <TIM_Base_SetConfig+0x130>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d017      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2b      	ldr	r2, [pc, #172]	@ (800378c <TIM_Base_SetConfig+0x134>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003790 <TIM_Base_SetConfig+0x138>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00f      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a29      	ldr	r2, [pc, #164]	@ (8003794 <TIM_Base_SetConfig+0x13c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00b      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a28      	ldr	r2, [pc, #160]	@ (8003798 <TIM_Base_SetConfig+0x140>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a27      	ldr	r2, [pc, #156]	@ (800379c <TIM_Base_SetConfig+0x144>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a26      	ldr	r2, [pc, #152]	@ (80037a0 <TIM_Base_SetConfig+0x148>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a0e      	ldr	r2, [pc, #56]	@ (8003778 <TIM_Base_SetConfig+0x120>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d003      	beq.n	800374a <TIM_Base_SetConfig+0xf2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a10      	ldr	r2, [pc, #64]	@ (8003788 <TIM_Base_SetConfig+0x130>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d103      	bne.n	8003752 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	601a      	str	r2, [r3, #0]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40010400 	.word	0x40010400
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800
 8003798:	40001800 	.word	0x40001800
 800379c:	40001c00 	.word	0x40001c00
 80037a0:	40002000 	.word	0x40002000

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e040      	b.n	8003874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fa24 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	@ 0x24
 800380c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fb16 	bl	8003e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8af 	bl	8003990 <UART_SetConfig>
 8003832:	4603      	mov	r3, r0
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e01b      	b.n	8003874 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800384a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800385a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fb95 	bl	8003f9c <UART_CheckIdleState>
 8003872:	4603      	mov	r3, r0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	@ 0x28
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003890:	2b20      	cmp	r3, #32
 8003892:	d177      	bne.n	8003984 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_UART_Transmit+0x24>
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e070      	b.n	8003986 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2221      	movs	r2, #33	@ 0x21
 80038b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b2:	f7fd fbd9 	bl	8001068 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	88fa      	ldrh	r2, [r7, #6]
 80038c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d0:	d108      	bne.n	80038e4 <HAL_UART_Transmit+0x68>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e003      	b.n	80038ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038ec:	e02f      	b.n	800394e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	@ 0x80
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fbf7 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e03b      	b.n	8003986 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003922:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	3302      	adds	r3, #2
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	e007      	b.n	800393c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1c9      	bne.n	80038ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2200      	movs	r2, #0
 8003962:	2140      	movs	r1, #64	@ 0x40
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fbc1 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e005      	b.n	8003986 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003c54 <UART_SetConfig+0x2c4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a94      	ldr	r2, [pc, #592]	@ (8003c58 <UART_SetConfig+0x2c8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d120      	bne.n	8003a4e <UART_SetConfig+0xbe>
 8003a0c:	4b93      	ldr	r3, [pc, #588]	@ (8003c5c <UART_SetConfig+0x2cc>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d816      	bhi.n	8003a48 <UART_SetConfig+0xb8>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <UART_SetConfig+0x90>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a3d 	.word	0x08003a3d
 8003a28:	08003a37 	.word	0x08003a37
 8003a2c:	08003a43 	.word	0x08003a43
 8003a30:	2301      	movs	r3, #1
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e150      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a36:	2302      	movs	r3, #2
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e14d      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e14a      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a42:	2308      	movs	r3, #8
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e147      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e144      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a83      	ldr	r2, [pc, #524]	@ (8003c60 <UART_SetConfig+0x2d0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d132      	bne.n	8003abe <UART_SetConfig+0x12e>
 8003a58:	4b80      	ldr	r3, [pc, #512]	@ (8003c5c <UART_SetConfig+0x2cc>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d828      	bhi.n	8003ab8 <UART_SetConfig+0x128>
 8003a66:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <UART_SetConfig+0xdc>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ab9 	.word	0x08003ab9
 8003a74:	08003ab9 	.word	0x08003ab9
 8003a78:	08003ab9 	.word	0x08003ab9
 8003a7c:	08003aad 	.word	0x08003aad
 8003a80:	08003ab9 	.word	0x08003ab9
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003ab9 	.word	0x08003ab9
 8003a8c:	08003aa7 	.word	0x08003aa7
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ab9 	.word	0x08003ab9
 8003a9c:	08003ab3 	.word	0x08003ab3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e118      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e115      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003aac:	2304      	movs	r3, #4
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e112      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e10f      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e10c      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a68      	ldr	r2, [pc, #416]	@ (8003c64 <UART_SetConfig+0x2d4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d120      	bne.n	8003b0a <UART_SetConfig+0x17a>
 8003ac8:	4b64      	ldr	r3, [pc, #400]	@ (8003c5c <UART_SetConfig+0x2cc>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ad2:	2b30      	cmp	r3, #48	@ 0x30
 8003ad4:	d013      	beq.n	8003afe <UART_SetConfig+0x16e>
 8003ad6:	2b30      	cmp	r3, #48	@ 0x30
 8003ad8:	d814      	bhi.n	8003b04 <UART_SetConfig+0x174>
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d009      	beq.n	8003af2 <UART_SetConfig+0x162>
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d810      	bhi.n	8003b04 <UART_SetConfig+0x174>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <UART_SetConfig+0x15c>
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d006      	beq.n	8003af8 <UART_SetConfig+0x168>
 8003aea:	e00b      	b.n	8003b04 <UART_SetConfig+0x174>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e0f2      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003af2:	2302      	movs	r3, #2
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e0ef      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003af8:	2304      	movs	r3, #4
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e0ec      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003afe:	2308      	movs	r3, #8
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e0e9      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b04:	2310      	movs	r3, #16
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e0e6      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a56      	ldr	r2, [pc, #344]	@ (8003c68 <UART_SetConfig+0x2d8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d120      	bne.n	8003b56 <UART_SetConfig+0x1c6>
 8003b14:	4b51      	ldr	r3, [pc, #324]	@ (8003c5c <UART_SetConfig+0x2cc>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b20:	d013      	beq.n	8003b4a <UART_SetConfig+0x1ba>
 8003b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b24:	d814      	bhi.n	8003b50 <UART_SetConfig+0x1c0>
 8003b26:	2b80      	cmp	r3, #128	@ 0x80
 8003b28:	d009      	beq.n	8003b3e <UART_SetConfig+0x1ae>
 8003b2a:	2b80      	cmp	r3, #128	@ 0x80
 8003b2c:	d810      	bhi.n	8003b50 <UART_SetConfig+0x1c0>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <UART_SetConfig+0x1a8>
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d006      	beq.n	8003b44 <UART_SetConfig+0x1b4>
 8003b36:	e00b      	b.n	8003b50 <UART_SetConfig+0x1c0>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e0cc      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e0c9      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b44:	2304      	movs	r3, #4
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e0c6      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e0c3      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b50:	2310      	movs	r3, #16
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e0c0      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a44      	ldr	r2, [pc, #272]	@ (8003c6c <UART_SetConfig+0x2dc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d125      	bne.n	8003bac <UART_SetConfig+0x21c>
 8003b60:	4b3e      	ldr	r3, [pc, #248]	@ (8003c5c <UART_SetConfig+0x2cc>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b6e:	d017      	beq.n	8003ba0 <UART_SetConfig+0x210>
 8003b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b74:	d817      	bhi.n	8003ba6 <UART_SetConfig+0x216>
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7a:	d00b      	beq.n	8003b94 <UART_SetConfig+0x204>
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b80:	d811      	bhi.n	8003ba6 <UART_SetConfig+0x216>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <UART_SetConfig+0x1fe>
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b8a:	d006      	beq.n	8003b9a <UART_SetConfig+0x20a>
 8003b8c:	e00b      	b.n	8003ba6 <UART_SetConfig+0x216>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e0a1      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b94:	2302      	movs	r3, #2
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e09e      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e09b      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e098      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e095      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8003c70 <UART_SetConfig+0x2e0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d125      	bne.n	8003c02 <UART_SetConfig+0x272>
 8003bb6:	4b29      	ldr	r3, [pc, #164]	@ (8003c5c <UART_SetConfig+0x2cc>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bc4:	d017      	beq.n	8003bf6 <UART_SetConfig+0x266>
 8003bc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bca:	d817      	bhi.n	8003bfc <UART_SetConfig+0x26c>
 8003bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd0:	d00b      	beq.n	8003bea <UART_SetConfig+0x25a>
 8003bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd6:	d811      	bhi.n	8003bfc <UART_SetConfig+0x26c>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <UART_SetConfig+0x254>
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be0:	d006      	beq.n	8003bf0 <UART_SetConfig+0x260>
 8003be2:	e00b      	b.n	8003bfc <UART_SetConfig+0x26c>
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e076      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e073      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e070      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e06d      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e06a      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1b      	ldr	r2, [pc, #108]	@ (8003c74 <UART_SetConfig+0x2e4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d138      	bne.n	8003c7e <UART_SetConfig+0x2ee>
 8003c0c:	4b13      	ldr	r3, [pc, #76]	@ (8003c5c <UART_SetConfig+0x2cc>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c1a:	d017      	beq.n	8003c4c <UART_SetConfig+0x2bc>
 8003c1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c20:	d82a      	bhi.n	8003c78 <UART_SetConfig+0x2e8>
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c26:	d00b      	beq.n	8003c40 <UART_SetConfig+0x2b0>
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2c:	d824      	bhi.n	8003c78 <UART_SetConfig+0x2e8>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <UART_SetConfig+0x2aa>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	d006      	beq.n	8003c46 <UART_SetConfig+0x2b6>
 8003c38:	e01e      	b.n	8003c78 <UART_SetConfig+0x2e8>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e04b      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c40:	2302      	movs	r3, #2
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e048      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c46:	2304      	movs	r3, #4
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e045      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e042      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c52:	bf00      	nop
 8003c54:	efff69f3 	.word	0xefff69f3
 8003c58:	40011000 	.word	0x40011000
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40004400 	.word	0x40004400
 8003c64:	40004800 	.word	0x40004800
 8003c68:	40004c00 	.word	0x40004c00
 8003c6c:	40005000 	.word	0x40005000
 8003c70:	40011400 	.word	0x40011400
 8003c74:	40007800 	.word	0x40007800
 8003c78:	2310      	movs	r3, #16
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e02c      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	@ (8003e4c <UART_SetConfig+0x4bc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d125      	bne.n	8003cd4 <UART_SetConfig+0x344>
 8003c88:	4b71      	ldr	r3, [pc, #452]	@ (8003e50 <UART_SetConfig+0x4c0>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c96:	d017      	beq.n	8003cc8 <UART_SetConfig+0x338>
 8003c98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c9c:	d817      	bhi.n	8003cce <UART_SetConfig+0x33e>
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca2:	d00b      	beq.n	8003cbc <UART_SetConfig+0x32c>
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca8:	d811      	bhi.n	8003cce <UART_SetConfig+0x33e>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <UART_SetConfig+0x326>
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb2:	d006      	beq.n	8003cc2 <UART_SetConfig+0x332>
 8003cb4:	e00b      	b.n	8003cce <UART_SetConfig+0x33e>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e00d      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e00a      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e007      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cc8:	2308      	movs	r3, #8
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e004      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cce:	2310      	movs	r3, #16
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e001      	b.n	8003cd8 <UART_SetConfig+0x348>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce0:	d15b      	bne.n	8003d9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d828      	bhi.n	8003d3a <UART_SetConfig+0x3aa>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <UART_SetConfig+0x360>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe fe14 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003d18:	61b8      	str	r0, [r7, #24]
        break;
 8003d1a:	e013      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7fe fe24 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b4b      	ldr	r3, [pc, #300]	@ (8003e54 <UART_SetConfig+0x4c4>)
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e00c      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fe fcf7 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003d2e:	61b8      	str	r0, [r7, #24]
        break;
 8003d30:	e008      	b.n	8003d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d36:	61bb      	str	r3, [r7, #24]
        break;
 8003d38:	e004      	b.n	8003d44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	77bb      	strb	r3, [r7, #30]
        break;
 8003d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d074      	beq.n	8003e34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	005a      	lsls	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	441a      	add	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	d916      	bls.n	8003d94 <UART_SetConfig+0x404>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6c:	d212      	bcs.n	8003d94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f023 030f 	bic.w	r3, r3, #15
 8003d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	89fb      	ldrh	r3, [r7, #14]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	89fa      	ldrh	r2, [r7, #14]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	e04f      	b.n	8003e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	77bb      	strb	r3, [r7, #30]
 8003d98:	e04c      	b.n	8003e34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d828      	bhi.n	8003df2 <UART_SetConfig+0x462>
 8003da0:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <UART_SetConfig+0x418>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	08003ddd 	.word	0x08003ddd
 8003db4:	08003df3 	.word	0x08003df3
 8003db8:	08003de3 	.word	0x08003de3
 8003dbc:	08003df3 	.word	0x08003df3
 8003dc0:	08003df3 	.word	0x08003df3
 8003dc4:	08003df3 	.word	0x08003df3
 8003dc8:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe fdb8 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	61b8      	str	r0, [r7, #24]
        break;
 8003dd2:	e013      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7fe fdc8 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	61b8      	str	r0, [r7, #24]
        break;
 8003dda:	e00f      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <UART_SetConfig+0x4c4>)
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e00c      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de2:	f7fe fc9b 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003de6:	61b8      	str	r0, [r7, #24]
        break;
 8003de8:	e008      	b.n	8003dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e004      	b.n	8003dfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d018      	beq.n	8003e34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	085a      	lsrs	r2, r3, #1
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b0f      	cmp	r3, #15
 8003e1a:	d909      	bls.n	8003e30 <UART_SetConfig+0x4a0>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e22:	d205      	bcs.n	8003e30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	e001      	b.n	8003e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e40:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40007c00 	.word	0x40007c00
 8003e50:	40023800 	.word	0x40023800
 8003e54:	00f42400 	.word	0x00f42400

08003e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f56:	d10a      	bne.n	8003f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b098      	sub	sp, #96	@ 0x60
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fac:	f7fd f85c 	bl	8001068 <HAL_GetTick>
 8003fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d12e      	bne.n	800401e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f88c 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d021      	beq.n	800401e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e6      	bne.n	8003fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e062      	b.n	80040e4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b04      	cmp	r3, #4
 800402a:	d149      	bne.n	80040c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	2200      	movs	r2, #0
 8004036:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f856 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d03c      	beq.n	80040c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	623b      	str	r3, [r7, #32]
   return(result);
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004064:	633b      	str	r3, [r7, #48]	@ 0x30
 8004066:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800406a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e6      	bne.n	8004046 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60fb      	str	r3, [r7, #12]
   return(result);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3308      	adds	r3, #8
 8004096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004098:	61fa      	str	r2, [r7, #28]
 800409a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	617b      	str	r3, [r7, #20]
   return(result);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e011      	b.n	80040e4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3758      	adds	r7, #88	@ 0x58
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fc:	e04f      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d04b      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fc ffaf 	bl	8001068 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <UART_WaitOnFlagUntilTimeout+0x30>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e04e      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d037      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b80      	cmp	r3, #128	@ 0x80
 8004132:	d034      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b40      	cmp	r3, #64	@ 0x40
 8004138:	d031      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d110      	bne.n	800416a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2208      	movs	r2, #8
 800414e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f838 	bl	80041c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2208      	movs	r2, #8
 800415a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e029      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004178:	d111      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f81e 	bl	80041c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e00f      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d0a0      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b095      	sub	sp, #84	@ 0x54
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3308      	adds	r3, #8
 800421e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004238:	2b01      	cmp	r3, #1
 800423a:	d118      	bne.n	800426e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	60bb      	str	r3, [r7, #8]
   return(result);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0310 	bic.w	r3, r3, #16
 8004250:	647b      	str	r3, [r7, #68]	@ 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	6979      	ldr	r1, [r7, #20]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	613b      	str	r3, [r7, #16]
   return(result);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e6      	bne.n	800423c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004282:	bf00      	nop
 8004284:	3754      	adds	r7, #84	@ 0x54
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004290:	b084      	sub	sp, #16
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	f107 001c 	add.w	r0, r7, #28
 800429e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d121      	bne.n	80042ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	4b21      	ldr	r3, [pc, #132]	@ (8004340 <USB_CoreInit+0xb0>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d105      	bne.n	80042e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fa92 	bl	800480c <USB_CoreReset>
 80042e8:	4603      	mov	r3, r0
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e010      	b.n	8004310 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa86 	bl	800480c <USB_CoreReset>
 8004300:	4603      	mov	r3, r0
 8004302:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004310:	7fbb      	ldrb	r3, [r7, #30]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10b      	bne.n	800432e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f043 0206 	orr.w	r2, r3, #6
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800433a:	b004      	add	sp, #16
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	ffbdffbf 	.word	0xffbdffbf

08004344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 0201 	bic.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d115      	bne.n	80043b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004394:	200a      	movs	r0, #10
 8004396:	f7fc fe73 	bl	8001080 <HAL_Delay>
      ms += 10U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	330a      	adds	r3, #10
 800439e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fa25 	bl	80047f0 <USB_GetMode>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d01e      	beq.n	80043ea <USB_SetCurrentMode+0x84>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80043b0:	d9f0      	bls.n	8004394 <USB_SetCurrentMode+0x2e>
 80043b2:	e01a      	b.n	80043ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d115      	bne.n	80043e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043c6:	200a      	movs	r0, #10
 80043c8:	f7fc fe5a 	bl	8001080 <HAL_Delay>
      ms += 10U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	330a      	adds	r3, #10
 80043d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa0c 	bl	80047f0 <USB_GetMode>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <USB_SetCurrentMode+0x84>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80043e2:	d9f0      	bls.n	80043c6 <USB_SetCurrentMode+0x60>
 80043e4:	e001      	b.n	80043ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e005      	b.n	80043f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80043ee:	d101      	bne.n	80043f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004400:	b084      	sub	sp, #16
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800440e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	e009      	b.n	8004434 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3340      	adds	r3, #64	@ 0x40
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	2200      	movs	r2, #0
 800442c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b0e      	cmp	r3, #14
 8004438:	d9f2      	bls.n	8004420 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800443a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11c      	bne.n	800447c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e005      	b.n	8004488 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800448e:	461a      	mov	r2, r3
 8004490:	2300      	movs	r3, #0
 8004492:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004494:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10d      	bne.n	80044b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800449c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044a4:	2100      	movs	r1, #0
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f968 	bl	800477c <USB_SetDevSpeed>
 80044ac:	e008      	b.n	80044c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044ae:	2101      	movs	r1, #1
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f963 	bl	800477c <USB_SetDevSpeed>
 80044b6:	e003      	b.n	80044c0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044b8:	2103      	movs	r1, #3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f95e 	bl	800477c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044c0:	2110      	movs	r1, #16
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8fa 	bl	80046bc <USB_FlushTxFifo>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f924 	bl	8004720 <USB_FlushRxFifo>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e8:	461a      	mov	r2, r3
 80044ea:	2300      	movs	r3, #0
 80044ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f4:	461a      	mov	r2, r3
 80044f6:	2300      	movs	r3, #0
 80044f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004500:	461a      	mov	r2, r3
 8004502:	2300      	movs	r3, #0
 8004504:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e043      	b.n	8004594 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800451e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004522:	d118      	bne.n	8004556 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004536:	461a      	mov	r2, r3
 8004538:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e013      	b.n	8004568 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454c:	461a      	mov	r2, r3
 800454e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	e008      	b.n	8004568 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004562:	461a      	mov	r2, r3
 8004564:	2300      	movs	r3, #0
 8004566:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004586:	461a      	mov	r2, r3
 8004588:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800458c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	3301      	adds	r3, #1
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004598:	461a      	mov	r2, r3
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4293      	cmp	r3, r2
 800459e:	d3b5      	bcc.n	800450c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	e043      	b.n	800462e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045bc:	d118      	bne.n	80045f0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d0:	461a      	mov	r2, r3
 80045d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	e013      	b.n	8004602 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e008      	b.n	8004602 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004620:	461a      	mov	r2, r3
 8004622:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004626:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3301      	adds	r3, #1
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004632:	461a      	mov	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4293      	cmp	r3, r2
 8004638:	d3b5      	bcc.n	80045a6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800464c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800465a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800465c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f043 0210 	orr.w	r2, r3, #16
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699a      	ldr	r2, [r3, #24]
 8004674:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <USB_DevInit+0x2b4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800467c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f043 0208 	orr.w	r2, r3, #8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004690:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004694:	2b01      	cmp	r3, #1
 8004696:	d105      	bne.n	80046a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699a      	ldr	r2, [r3, #24]
 800469c:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <USB_DevInit+0x2b8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b0:	b004      	add	sp, #16
 80046b2:	4770      	bx	lr
 80046b4:	803c3800 	.word	0x803c3800
 80046b8:	40000004 	.word	0x40000004

080046bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046d6:	d901      	bls.n	80046dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e01b      	b.n	8004714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	daf2      	bge.n	80046ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	019b      	lsls	r3, r3, #6
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004700:	d901      	bls.n	8004706 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e006      	b.n	8004714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b20      	cmp	r3, #32
 8004710:	d0f0      	beq.n	80046f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004738:	d901      	bls.n	800473e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e018      	b.n	8004770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	daf2      	bge.n	800472c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2210      	movs	r2, #16
 800474e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800475c:	d901      	bls.n	8004762 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e006      	b.n	8004770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b10      	cmp	r3, #16
 800476c:	d0f0      	beq.n	8004750 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047c8:	f023 0303 	bic.w	r3, r3, #3
 80047cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f003 0301 	and.w	r3, r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3301      	adds	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004824:	d901      	bls.n	800482a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e022      	b.n	8004870 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	daf2      	bge.n	8004818 <USB_CoreReset+0xc>

  count = 10U;
 8004832:	230a      	movs	r3, #10
 8004834:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004836:	e002      	b.n	800483e <USB_CoreReset+0x32>
  {
    count--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3b01      	subs	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f9      	bne.n	8004838 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800485c:	d901      	bls.n	8004862 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e006      	b.n	8004870 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d0f0      	beq.n	8004850 <USB_CoreReset+0x44>

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004892:	f3ef 8305 	mrs	r3, IPSR
 8004896:	60bb      	str	r3, [r7, #8]
  return(result);
 8004898:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489e:	f3ef 8310 	mrs	r3, PRIMASK
 80048a2:	607b      	str	r3, [r7, #4]
  return(result);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048aa:	f3ef 8311 	mrs	r3, BASEPRI
 80048ae:	603b      	str	r3, [r7, #0]
  return(result);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <osKernelInitialize+0x3a>
 80048b6:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <osKernelInitialize+0x64>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d103      	bne.n	80048c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80048be:	f06f 0305 	mvn.w	r3, #5
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e00c      	b.n	80048e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048c6:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <osKernelInitialize+0x64>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <osKernelInitialize+0x64>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e002      	b.n	80048e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
 80048de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048e0:	68fb      	ldr	r3, [r7, #12]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000874 	.word	0x20000874

080048f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fa:	f3ef 8305 	mrs	r3, IPSR
 80048fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	607b      	str	r3, [r7, #4]
  return(result);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004912:	f3ef 8311 	mrs	r3, BASEPRI
 8004916:	603b      	str	r3, [r7, #0]
  return(result);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <osKernelStart+0x3a>
 800491e:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <osKernelStart+0x68>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d103      	bne.n	800492e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004926:	f06f 0305 	mvn.w	r3, #5
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e010      	b.n	8004950 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <osKernelStart+0x68>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d109      	bne.n	800494a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004936:	f7ff ffa1 	bl	800487c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800493a:	4b08      	ldr	r3, [pc, #32]	@ (800495c <osKernelStart+0x68>)
 800493c:	2202      	movs	r2, #2
 800493e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004940:	f001 fc5a 	bl	80061f8 <vTaskStartScheduler>
      stat = osOK;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e002      	b.n	8004950 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004950:	68fb      	ldr	r3, [r7, #12]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000874 	.word	0x20000874

08004960 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b090      	sub	sp, #64	@ 0x40
 8004964:	af04      	add	r7, sp, #16
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004970:	f3ef 8305 	mrs	r3, IPSR
 8004974:	61fb      	str	r3, [r7, #28]
  return(result);
 8004976:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 808f 	bne.w	8004a9c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497e:	f3ef 8310 	mrs	r3, PRIMASK
 8004982:	61bb      	str	r3, [r7, #24]
  return(result);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800498a:	f3ef 8311 	mrs	r3, BASEPRI
 800498e:	617b      	str	r3, [r7, #20]
  return(result);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <osThreadNew+0x3e>
 8004996:	4b44      	ldr	r3, [pc, #272]	@ (8004aa8 <osThreadNew+0x148>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d07e      	beq.n	8004a9c <osThreadNew+0x13c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d07b      	beq.n	8004a9c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80049a8:	2318      	movs	r3, #24
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d045      	beq.n	8004a48 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <osThreadNew+0x6a>
        name = attr->name;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <osThreadNew+0x90>
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	2b38      	cmp	r3, #56	@ 0x38
 80049e2:	d805      	bhi.n	80049f0 <osThreadNew+0x90>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <osThreadNew+0x94>
        return (NULL);
 80049f0:	2300      	movs	r3, #0
 80049f2:	e054      	b.n	8004a9e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00e      	beq.n	8004a2a <osThreadNew+0xca>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a12:	d90a      	bls.n	8004a2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d006      	beq.n	8004a2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <osThreadNew+0xca>
        mem = 1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	e010      	b.n	8004a4c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10c      	bne.n	8004a4c <osThreadNew+0xec>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <osThreadNew+0xec>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <osThreadNew+0xec>
          mem = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	e001      	b.n	8004a4c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d110      	bne.n	8004a74 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a5a:	9202      	str	r2, [sp, #8]
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f001 f9c7 	bl	8005dfc <xTaskCreateStatic>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e013      	b.n	8004a9c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d110      	bne.n	8004a9c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	f107 0310 	add.w	r3, r7, #16
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f001 fa1b 	bl	8005ec8 <xTaskCreate>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d001      	beq.n	8004a9c <osThreadNew+0x13c>
          hTask = NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a9c:	693b      	ldr	r3, [r7, #16]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3730      	adds	r7, #48	@ 0x30
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000874 	.word	0x20000874

08004aac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab4:	f3ef 8305 	mrs	r3, IPSR
 8004ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8004aba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10f      	bne.n	8004ae0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004acc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <osDelay+0x3c>
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <osDelay+0x58>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d103      	bne.n	8004ae8 <osDelay+0x3c>
    stat = osErrorISR;
 8004ae0:	f06f 0305 	mvn.w	r3, #5
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e007      	b.n	8004af8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f001 fb48 	bl	8006188 <vTaskDelay>
    }
  }

  return (stat);
 8004af8:	697b      	ldr	r3, [r7, #20]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000874 	.word	0x20000874

08004b08 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b14:	f3ef 8305 	mrs	r3, IPSR
 8004b18:	613b      	str	r3, [r7, #16]
  return(result);
 8004b1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 8085 	bne.w	8004c2c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b22:	f3ef 8310 	mrs	r3, PRIMASK
 8004b26:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b32:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <osMutexNew+0x3a>
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c38 <osMutexNew+0x130>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d074      	beq.n	8004c2c <osMutexNew+0x124>
    if (attr != NULL) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	e001      	b.n	8004b54 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <osMutexNew+0x5c>
      rmtx = 1U;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e001      	b.n	8004b68 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d15c      	bne.n	8004c2c <osMutexNew+0x124>
      mem = -1;
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295
 8004b76:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d015      	beq.n	8004baa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <osMutexNew+0x8c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b8c:	d902      	bls.n	8004b94 <osMutexNew+0x8c>
          mem = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	e00c      	b.n	8004bae <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d108      	bne.n	8004bae <osMutexNew+0xa6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <osMutexNew+0xa6>
            mem = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e001      	b.n	8004bae <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d112      	bne.n	8004bda <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	2004      	movs	r0, #4
 8004bc2:	f000 fb5c 	bl	800527e <xQueueCreateMutexStatic>
 8004bc6:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bc8:	e016      	b.n	8004bf8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f000 fb54 	bl	800527e <xQueueCreateMutexStatic>
 8004bd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bd8:	e00e      	b.n	8004bf8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004be6:	2004      	movs	r0, #4
 8004be8:	f000 fb31 	bl	800524e <xQueueCreateMutex>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bee:	e003      	b.n	8004bf8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f000 fb2c 	bl	800524e <xQueueCreateMutex>
 8004bf6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <osMutexNew+0x110>
        if (attr != NULL) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <osMutexNew+0x104>
          name = attr->name;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e001      	b.n	8004c10 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c14:	f001 f894 	bl	8005d40 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d006      	beq.n	8004c2c <osMutexNew+0x124>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3728      	adds	r7, #40	@ 0x28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000874 	.word	0x20000874

08004c3c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5a:	f3ef 8305 	mrs	r3, IPSR
 8004c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8004c60:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c72:	f3ef 8311 	mrs	r3, BASEPRI
 8004c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <osMutexAcquire+0x52>
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <osMutexAcquire+0xb8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d103      	bne.n	8004c8e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004c86:	f06f 0305 	mvn.w	r3, #5
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e02c      	b.n	8004ce8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004c94:	f06f 0303 	mvn.w	r3, #3
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e025      	b.n	8004ce8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d011      	beq.n	8004cc6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	69b8      	ldr	r0, [r7, #24]
 8004ca6:	f000 fb3c 	bl	8005322 <xQueueTakeMutexRecursive>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d01b      	beq.n	8004ce8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004cb6:	f06f 0301 	mvn.w	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e014      	b.n	8004ce8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004cbe:	f06f 0302 	mvn.w	r3, #2
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e010      	b.n	8004ce8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	69b8      	ldr	r0, [r7, #24]
 8004cca:	f000 fdf9 	bl	80058c0 <xQueueSemaphoreTake>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d009      	beq.n	8004ce8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004cda:	f06f 0301 	mvn.w	r3, #1
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	e002      	b.n	8004ce8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004ce2:	f06f 0302 	mvn.w	r3, #2
 8004ce6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004ce8:	69fb      	ldr	r3, [r7, #28]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000874 	.word	0x20000874

08004cf8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d14:	f3ef 8305 	mrs	r3, IPSR
 8004d18:	613b      	str	r3, [r7, #16]
  return(result);
 8004d1a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d20:	f3ef 8310 	mrs	r3, PRIMASK
 8004d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <osMutexRelease+0x50>
 8004d38:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <osMutexRelease+0x9c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d103      	bne.n	8004d48 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004d40:	f06f 0305 	mvn.w	r3, #5
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e01f      	b.n	8004d88 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004d4e:	f06f 0303 	mvn.w	r3, #3
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e018      	b.n	8004d88 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004d5c:	69b8      	ldr	r0, [r7, #24]
 8004d5e:	f000 faa9 	bl	80052b4 <xQueueGiveMutexRecursive>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d00f      	beq.n	8004d88 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004d68:	f06f 0302 	mvn.w	r3, #2
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e00b      	b.n	8004d88 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004d70:	2300      	movs	r3, #0
 8004d72:	2200      	movs	r2, #0
 8004d74:	2100      	movs	r1, #0
 8004d76:	69b8      	ldr	r0, [r7, #24]
 8004d78:	f000 fb0c 	bl	8005394 <xQueueGenericSend>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004d82:	f06f 0302 	mvn.w	r3, #2
 8004d86:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004d88:	69fb      	ldr	r3, [r7, #28]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000874 	.word	0x20000874

08004d98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a07      	ldr	r2, [pc, #28]	@ (8004dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004da8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4a06      	ldr	r2, [pc, #24]	@ (8004dc8 <vApplicationGetIdleTaskMemory+0x30>)
 8004dae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2280      	movs	r2, #128	@ 0x80
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20000878 	.word	0x20000878
 8004dc8:	20000920 	.word	0x20000920

08004dcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a07      	ldr	r2, [pc, #28]	@ (8004df8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ddc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4a06      	ldr	r2, [pc, #24]	@ (8004dfc <vApplicationGetTimerTaskMemory+0x30>)
 8004de2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dea:	601a      	str	r2, [r3, #0]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20000b20 	.word	0x20000b20
 8004dfc:	20000bc8 	.word	0x20000bc8

08004e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f103 0208 	add.w	r2, r3, #8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295
 8004e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f103 0208 	add.w	r2, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f103 0208 	add.w	r2, r3, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d103      	bne.n	8004ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e00c      	b.n	8004edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e002      	b.n	8004ed0 <vListInsert+0x2e>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d2f6      	bcs.n	8004eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	601a      	str	r2, [r3, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6892      	ldr	r2, [r2, #8]
 8004f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6852      	ldr	r2, [r2, #4]
 8004f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d103      	bne.n	8004f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1e5a      	subs	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10d      	bne.n	8004f98 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	b672      	cpsid	i
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	b662      	cpsie	i
 8004f90:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004f98:	f002 fc18 	bl	80077cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa4:	68f9      	ldr	r1, [r7, #12]
 8004fa6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fce:	fb01 f303 	mul.w	r3, r1, r3
 8004fd2:	441a      	add	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	22ff      	movs	r2, #255	@ 0xff
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	22ff      	movs	r2, #255	@ 0xff
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d114      	bne.n	8005018 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01a      	beq.n	800502c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 fba8 	bl	8006750 <xTaskRemoveFromEventList>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d012      	beq.n	800502c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <xQueueGenericReset+0xd4>)
 8005008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	e009      	b.n	800502c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3310      	adds	r3, #16
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff feef 	bl	8004e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3324      	adds	r3, #36	@ 0x24
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff feea 	bl	8004e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800502c:	f002 fc04 	bl	8007838 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005030:	2301      	movs	r3, #1
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	@ 0x38
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10d      	bne.n	8005070 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	b672      	cpsid	i
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	b662      	cpsie	i
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10d      	bne.n	8005092 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	b672      	cpsid	i
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	b662      	cpsie	i
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <xQueueGenericCreateStatic+0x5e>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <xQueueGenericCreateStatic+0x62>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <xQueueGenericCreateStatic+0x64>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	b672      	cpsid	i
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	b662      	cpsie	i
 80050bc:	623b      	str	r3, [r7, #32]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <xQueueGenericCreateStatic+0x90>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <xQueueGenericCreateStatic+0x94>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <xQueueGenericCreateStatic+0x96>
 80050d4:	2300      	movs	r3, #0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10d      	bne.n	80050f6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	b672      	cpsid	i
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	b662      	cpsie	i
 80050ee:	61fb      	str	r3, [r7, #28]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050f6:	2350      	movs	r3, #80	@ 0x50
 80050f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b50      	cmp	r3, #80	@ 0x50
 80050fe:	d00d      	beq.n	800511c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	b672      	cpsid	i
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	b662      	cpsie	i
 8005114:	61bb      	str	r3, [r7, #24]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800511c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005130:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f848 	bl	80051d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005146:	4618      	mov	r0, r3
 8005148:	3730      	adds	r7, #48	@ 0x30
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800514e:	b580      	push	{r7, lr}
 8005150:	b08a      	sub	sp, #40	@ 0x28
 8005152:	af02      	add	r7, sp, #8
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	4613      	mov	r3, r2
 800515a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10d      	bne.n	800517e <xQueueGenericCreate+0x30>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	b672      	cpsid	i
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	b662      	cpsie	i
 8005176:	613b      	str	r3, [r7, #16]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	e004      	b.n	8005194 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3350      	adds	r3, #80	@ 0x50
 8005198:	4618      	mov	r0, r3
 800519a:	f002 fc45 	bl	8007a28 <pvPortMalloc>
 800519e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3350      	adds	r3, #80	@ 0x50
 80051ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051b8:	79fa      	ldrb	r2, [r7, #7]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f805 	bl	80051d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051ca:	69bb      	ldr	r3, [r7, #24]
	}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e002      	b.n	80051f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005202:	2101      	movs	r1, #1
 8005204:	69b8      	ldr	r0, [r7, #24]
 8005206:	f7ff feaf 	bl	8004f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800523a:	2300      	movs	r3, #0
 800523c:	2200      	movs	r2, #0
 800523e:	2100      	movs	r1, #0
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8a7 	bl	8005394 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800524e:	b580      	push	{r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	461a      	mov	r2, r3
 8005264:	6939      	ldr	r1, [r7, #16]
 8005266:	6978      	ldr	r0, [r7, #20]
 8005268:	f7ff ff71 	bl	800514e <xQueueGenericCreate>
 800526c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff ffd3 	bl	800521a <prvInitialiseMutex>

		return xNewQueue;
 8005274:	68fb      	ldr	r3, [r7, #12]
	}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af02      	add	r7, sp, #8
 8005284:	4603      	mov	r3, r0
 8005286:	6039      	str	r1, [r7, #0]
 8005288:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800528a:	2301      	movs	r3, #1
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	6939      	ldr	r1, [r7, #16]
 800529c:	6978      	ldr	r0, [r7, #20]
 800529e:	f7ff fecf 	bl	8005040 <xQueueGenericCreateStatic>
 80052a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff ffb8 	bl	800521a <prvInitialiseMutex>

		return xNewQueue;
 80052aa:	68fb      	ldr	r3, [r7, #12]
	}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10d      	bne.n	80052e2 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	b672      	cpsid	i
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	b662      	cpsie	i
 80052da:	60fb      	str	r3, [r7, #12]
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	e7fd      	b.n	80052de <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	689c      	ldr	r4, [r3, #8]
 80052e6:	f001 fc01 	bl	8006aec <xTaskGetCurrentTaskHandle>
 80052ea:	4603      	mov	r3, r0
 80052ec:	429c      	cmp	r4, r3
 80052ee:	d111      	bne.n	8005314 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005302:	2300      	movs	r3, #0
 8005304:	2200      	movs	r2, #0
 8005306:	2100      	movs	r1, #0
 8005308:	6938      	ldr	r0, [r7, #16]
 800530a:	f000 f843 	bl	8005394 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800530e:	2301      	movs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e001      	b.n	8005318 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005318:	697b      	ldr	r3, [r7, #20]
	}
 800531a:	4618      	mov	r0, r3
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	bd90      	pop	{r4, r7, pc}

08005322 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005322:	b590      	push	{r4, r7, lr}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10d      	bne.n	8005352 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	b672      	cpsid	i
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	b662      	cpsie	i
 800534a:	60fb      	str	r3, [r7, #12]
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	689c      	ldr	r4, [r3, #8]
 8005356:	f001 fbc9 	bl	8006aec <xTaskGetCurrentTaskHandle>
 800535a:	4603      	mov	r3, r0
 800535c:	429c      	cmp	r4, r3
 800535e:	d107      	bne.n	8005370 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800536a:	2301      	movs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e00c      	b.n	800538a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6938      	ldr	r0, [r7, #16]
 8005374:	f000 faa4 	bl	80058c0 <xQueueSemaphoreTake>
 8005378:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800538a:	697b      	ldr	r3, [r7, #20]
	}
 800538c:	4618      	mov	r0, r3
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}

08005394 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08e      	sub	sp, #56	@ 0x38
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053a2:	2300      	movs	r3, #0
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10d      	bne.n	80053cc <xQueueGenericSend+0x38>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	b672      	cpsid	i
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	b662      	cpsie	i
 80053c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <xQueueGenericSend+0x46>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <xQueueGenericSend+0x4a>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <xQueueGenericSend+0x4c>
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10d      	bne.n	8005400 <xQueueGenericSend+0x6c>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e8:	b672      	cpsid	i
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	b662      	cpsie	i
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d103      	bne.n	800540e <xQueueGenericSend+0x7a>
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <xQueueGenericSend+0x7e>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericSend+0x80>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10d      	bne.n	8005434 <xQueueGenericSend+0xa0>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	b672      	cpsid	i
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	b662      	cpsie	i
 800542c:	623b      	str	r3, [r7, #32]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005434:	f001 fb6a 	bl	8006b0c <xTaskGetSchedulerState>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <xQueueGenericSend+0xb0>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <xQueueGenericSend+0xb4>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <xQueueGenericSend+0xb6>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10d      	bne.n	800546a <xQueueGenericSend+0xd6>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	b672      	cpsid	i
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	b662      	cpsie	i
 8005462:	61fb      	str	r3, [r7, #28]
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	e7fd      	b.n	8005466 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800546a:	f002 f9af 	bl	80077cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <xQueueGenericSend+0xec>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d129      	bne.n	80054d4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005486:	f000 fb4b 	bl	8005b20 <prvCopyDataToQueue>
 800548a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	d010      	beq.n	80054b6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	3324      	adds	r3, #36	@ 0x24
 8005498:	4618      	mov	r0, r3
 800549a:	f001 f959 	bl	8006750 <xTaskRemoveFromEventList>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054a4:	4b3f      	ldr	r3, [pc, #252]	@ (80055a4 <xQueueGenericSend+0x210>)
 80054a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	e00a      	b.n	80054cc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054bc:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <xQueueGenericSend+0x210>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054cc:	f002 f9b4 	bl	8007838 <vPortExitCritical>
				return pdPASS;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e063      	b.n	800559c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054da:	f002 f9ad 	bl	8007838 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	e05c      	b.n	800559c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054e8:	f107 0314 	add.w	r3, r7, #20
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 f995 	bl	800681c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054f6:	f002 f99f 	bl	8007838 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054fa:	f000 fef1 	bl	80062e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054fe:	f002 f965 	bl	80077cc <vPortEnterCritical>
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005508:	b25b      	sxtb	r3, r3
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d103      	bne.n	8005518 <xQueueGenericSend+0x184>
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800551e:	b25b      	sxtb	r3, r3
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d103      	bne.n	800552e <xQueueGenericSend+0x19a>
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800552e:	f002 f983 	bl	8007838 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005532:	1d3a      	adds	r2, r7, #4
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f984 	bl	8006848 <xTaskCheckForTimeOut>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d124      	bne.n	8005590 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005546:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005548:	f000 fbe2 	bl	8005d10 <prvIsQueueFull>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	3310      	adds	r3, #16
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f001 f8a2 	bl	80066a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005562:	f000 fb6d 	bl	8005c40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005566:	f000 fec9 	bl	80062fc <xTaskResumeAll>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	f47f af7c 	bne.w	800546a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <xQueueGenericSend+0x210>)
 8005574:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	e772      	b.n	800546a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005586:	f000 fb5b 	bl	8005c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800558a:	f000 feb7 	bl	80062fc <xTaskResumeAll>
 800558e:	e76c      	b.n	800546a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005592:	f000 fb55 	bl	8005c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005596:	f000 feb1 	bl	80062fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800559a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800559c:	4618      	mov	r0, r3
 800559e:	3738      	adds	r7, #56	@ 0x38
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	@ 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <xQueueGenericSendFromISR+0x42>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <xQueueGenericSendFromISR+0x46>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueGenericSendFromISR+0x48>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	b672      	cpsid	i
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	b662      	cpsie	i
 8005608:	623b      	str	r3, [r7, #32]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <xQueueGenericSendFromISR+0x76>
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <xQueueGenericSendFromISR+0x7a>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericSendFromISR+0x7c>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	b672      	cpsid	i
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	b662      	cpsie	i
 800563c:	61fb      	str	r3, [r7, #28]
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005644:	f002 f9aa 	bl	800799c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005648:	f3ef 8211 	mrs	r2, BASEPRI
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	b672      	cpsid	i
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	b662      	cpsie	i
 8005660:	61ba      	str	r2, [r7, #24]
 8005662:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005664:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <xQueueGenericSendFromISR+0xd2>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d12c      	bne.n	80056d4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005680:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800568a:	f000 fa49 	bl	8005b20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800568e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d112      	bne.n	80056be <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d016      	beq.n	80056ce <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	3324      	adds	r3, #36	@ 0x24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f853 	bl	8006750 <xTaskRemoveFromEventList>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00e      	beq.n	80056ce <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e007      	b.n	80056ce <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056c2:	3301      	adds	r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	b25a      	sxtb	r2, r3
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056ce:	2301      	movs	r3, #1
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80056d2:	e001      	b.n	80056d8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3738      	adds	r7, #56	@ 0x38
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08c      	sub	sp, #48	@ 0x30
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <xQueueReceive+0x36>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	b672      	cpsid	i
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	b662      	cpsie	i
 800571e:	623b      	str	r3, [r7, #32]
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	e7fd      	b.n	8005722 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d103      	bne.n	8005734 <xQueueReceive+0x44>
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <xQueueReceive+0x48>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <xQueueReceive+0x4a>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <xQueueReceive+0x6a>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	b672      	cpsid	i
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	b662      	cpsie	i
 8005752:	61fb      	str	r3, [r7, #28]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800575a:	f001 f9d7 	bl	8006b0c <xTaskGetSchedulerState>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <xQueueReceive+0x7a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <xQueueReceive+0x7e>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueReceive+0x80>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10d      	bne.n	8005790 <xQueueReceive+0xa0>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	b672      	cpsid	i
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	b662      	cpsie	i
 8005788:	61bb      	str	r3, [r7, #24]
}
 800578a:	bf00      	nop
 800578c:	bf00      	nop
 800578e:	e7fd      	b.n	800578c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005790:	f002 f81c 	bl	80077cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01f      	beq.n	80057e0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057a4:	f000 fa26 	bl	8005bf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	1e5a      	subs	r2, r3, #1
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00f      	beq.n	80057d8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	3310      	adds	r3, #16
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 ffc7 	bl	8006750 <xTaskRemoveFromEventList>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057c8:	4b3c      	ldr	r3, [pc, #240]	@ (80058bc <xQueueReceive+0x1cc>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057d8:	f002 f82e 	bl	8007838 <vPortExitCritical>
				return pdPASS;
 80057dc:	2301      	movs	r3, #1
 80057de:	e069      	b.n	80058b4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e6:	f002 f827 	bl	8007838 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e062      	b.n	80058b4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057f4:	f107 0310 	add.w	r3, r7, #16
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f80f 	bl	800681c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057fe:	2301      	movs	r3, #1
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005802:	f002 f819 	bl	8007838 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005806:	f000 fd6b 	bl	80062e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800580a:	f001 ffdf 	bl	80077cc <vPortEnterCritical>
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005814:	b25b      	sxtb	r3, r3
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d103      	bne.n	8005824 <xQueueReceive+0x134>
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800582a:	b25b      	sxtb	r3, r3
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d103      	bne.n	800583a <xQueueReceive+0x14a>
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800583a:	f001 fffd 	bl	8007838 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583e:	1d3a      	adds	r2, r7, #4
 8005840:	f107 0310 	add.w	r3, r7, #16
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fffe 	bl	8006848 <xTaskCheckForTimeOut>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d123      	bne.n	800589a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005854:	f000 fa46 	bl	8005ce4 <prvIsQueueEmpty>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d017      	beq.n	800588e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	3324      	adds	r3, #36	@ 0x24
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f000 ff1c 	bl	80066a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800586c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800586e:	f000 f9e7 	bl	8005c40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005872:	f000 fd43 	bl	80062fc <xTaskResumeAll>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d189      	bne.n	8005790 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800587c:	4b0f      	ldr	r3, [pc, #60]	@ (80058bc <xQueueReceive+0x1cc>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	e780      	b.n	8005790 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800588e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005890:	f000 f9d6 	bl	8005c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005894:	f000 fd32 	bl	80062fc <xTaskResumeAll>
 8005898:	e77a      	b.n	8005790 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800589a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800589c:	f000 f9d0 	bl	8005c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058a0:	f000 fd2c 	bl	80062fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058a6:	f000 fa1d 	bl	8005ce4 <prvIsQueueEmpty>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f43f af6f 	beq.w	8005790 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3730      	adds	r7, #48	@ 0x30
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08e      	sub	sp, #56	@ 0x38
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	b672      	cpsid	i
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	b662      	cpsie	i
 80058f0:	623b      	str	r3, [r7, #32]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00d      	beq.n	800591c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	b672      	cpsid	i
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	b662      	cpsie	i
 8005914:	61fb      	str	r3, [r7, #28]
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800591c:	f001 f8f6 	bl	8006b0c <xTaskGetSchedulerState>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <xQueueSemaphoreTake+0x6c>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <xQueueSemaphoreTake+0x70>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <xQueueSemaphoreTake+0x72>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10d      	bne.n	8005952 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	b672      	cpsid	i
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	b662      	cpsie	i
 800594a:	61bb      	str	r3, [r7, #24]
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	e7fd      	b.n	800594e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005952:	f001 ff3b 	bl	80077cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d024      	beq.n	80059ac <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005968:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005972:	f001 fa4d 	bl	8006e10 <pvTaskIncrementMutexHeldCount>
 8005976:	4602      	mov	r2, r0
 8005978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00f      	beq.n	80059a4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005986:	3310      	adds	r3, #16
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fee1 	bl	8006750 <xTaskRemoveFromEventList>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005994:	4b55      	ldr	r3, [pc, #340]	@ (8005aec <xQueueSemaphoreTake+0x22c>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059a4:	f001 ff48 	bl	8007838 <vPortExitCritical>
				return pdPASS;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e09a      	b.n	8005ae2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d114      	bne.n	80059dc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	b672      	cpsid	i
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	b662      	cpsie	i
 80059cc:	617b      	str	r3, [r7, #20]
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80059d4:	f001 ff30 	bl	8007838 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059d8:	2300      	movs	r3, #0
 80059da:	e082      	b.n	8005ae2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 ff18 	bl	800681c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ec:	2301      	movs	r3, #1
 80059ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059f0:	f001 ff22 	bl	8007838 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059f4:	f000 fc74 	bl	80062e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059f8:	f001 fee8 	bl	80077cc <vPortEnterCritical>
 80059fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a02:	b25b      	sxtb	r3, r3
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d103      	bne.n	8005a12 <xQueueSemaphoreTake+0x152>
 8005a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d103      	bne.n	8005a28 <xQueueSemaphoreTake+0x168>
 8005a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a28:	f001 ff06 	bl	8007838 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a2c:	463a      	mov	r2, r7
 8005a2e:	f107 030c 	add.w	r3, r7, #12
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 ff07 	bl	8006848 <xTaskCheckForTimeOut>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d132      	bne.n	8005aa6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a42:	f000 f94f 	bl	8005ce4 <prvIsQueueEmpty>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d026      	beq.n	8005a9a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d109      	bne.n	8005a68 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005a54:	f001 feba 	bl	80077cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f873 	bl	8006b48 <xTaskPriorityInherit>
 8005a62:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005a64:	f001 fee8 	bl	8007838 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6a:	3324      	adds	r3, #36	@ 0x24
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fe17 	bl	80066a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a78:	f000 f8e2 	bl	8005c40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a7c:	f000 fc3e 	bl	80062fc <xTaskResumeAll>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f47f af65 	bne.w	8005952 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005a88:	4b18      	ldr	r3, [pc, #96]	@ (8005aec <xQueueSemaphoreTake+0x22c>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	e75b      	b.n	8005952 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a9c:	f000 f8d0 	bl	8005c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aa0:	f000 fc2c 	bl	80062fc <xTaskResumeAll>
 8005aa4:	e755      	b.n	8005952 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005aa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005aa8:	f000 f8ca 	bl	8005c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aac:	f000 fc26 	bl	80062fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ab2:	f000 f917 	bl	8005ce4 <prvIsQueueEmpty>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f43f af4a 	beq.w	8005952 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005ac4:	f001 fe82 	bl	80077cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ac8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005aca:	f000 f811 	bl	8005af0 <prvGetDisinheritPriorityAfterTimeout>
 8005ace:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 f912 	bl	8006d00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005adc:	f001 feac 	bl	8007838 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ae0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3738      	adds	r7, #56	@ 0x38
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d006      	beq.n	8005b0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e001      	b.n	8005b12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b12:	68fb      	ldr	r3, [r7, #12]
	}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d14d      	bne.n	8005be2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 f864 	bl	8006c18 <xTaskPriorityDisinherit>
 8005b50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	e043      	b.n	8005be2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d119      	bne.n	8005b94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	f002 fa04 	bl	8007f78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d32b      	bcc.n	8005be2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e026      	b.n	8005be2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68d8      	ldr	r0, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	f002 f9ea 	bl	8007f78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bac:	425b      	negs	r3, r3
 8005bae:	441a      	add	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d207      	bcs.n	8005bd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	425b      	negs	r3, r3
 8005bca:	441a      	add	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d105      	bne.n	8005be2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005bea:	697b      	ldr	r3, [r7, #20]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0e:	441a      	add	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d303      	bcc.n	8005c28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68d9      	ldr	r1, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	461a      	mov	r2, r3
 8005c32:	6838      	ldr	r0, [r7, #0]
 8005c34:	f002 f9a0 	bl	8007f78 <memcpy>
	}
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c48:	f001 fdc0 	bl	80077cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c54:	e011      	b.n	8005c7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3324      	adds	r3, #36	@ 0x24
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fd74 	bl	8006750 <xTaskRemoveFromEventList>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c6e:	f000 fe53 	bl	8006918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dce9      	bgt.n	8005c56 <prvUnlockQueue+0x16>
 8005c82:	e000      	b.n	8005c86 <prvUnlockQueue+0x46>
					break;
 8005c84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	22ff      	movs	r2, #255	@ 0xff
 8005c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c8e:	f001 fdd3 	bl	8007838 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c92:	f001 fd9b 	bl	80077cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9e:	e011      	b.n	8005cc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3310      	adds	r3, #16
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fd4f 	bl	8006750 <xTaskRemoveFromEventList>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb8:	f000 fe2e 	bl	8006918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dce9      	bgt.n	8005ca0 <prvUnlockQueue+0x60>
 8005ccc:	e000      	b.n	8005cd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	22ff      	movs	r2, #255	@ 0xff
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cd8:	f001 fdae 	bl	8007838 <vPortExitCritical>
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cec:	f001 fd6e 	bl	80077cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e001      	b.n	8005d02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f001 fd99 	bl	8007838 <vPortExitCritical>

	return xReturn;
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d18:	f001 fd58 	bl	80077cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d102      	bne.n	8005d2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e001      	b.n	8005d32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d32:	f001 fd81 	bl	8007838 <vPortExitCritical>

	return xReturn;
 8005d36:	68fb      	ldr	r3, [r7, #12]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e014      	b.n	8005d7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d50:	4a0f      	ldr	r2, [pc, #60]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d5c:	490c      	ldr	r1, [pc, #48]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d66:	4a0a      	ldr	r2, [pc, #40]	@ (8005d90 <vQueueAddToRegistry+0x50>)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d72:	e006      	b.n	8005d82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	d9e7      	bls.n	8005d50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000fc8 	.word	0x20000fc8

08005d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005da4:	f001 fd12 	bl	80077cc <vPortEnterCritical>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dae:	b25b      	sxtb	r3, r3
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d103      	bne.n	8005dbe <vQueueWaitForMessageRestricted+0x2a>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d103      	bne.n	8005dd4 <vQueueWaitForMessageRestricted+0x40>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd4:	f001 fd30 	bl	8007838 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	3324      	adds	r3, #36	@ 0x24
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fc83 	bl	80066f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f7ff ff26 	bl	8005c40 <prvUnlockQueue>
	}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	@ 0x38
 8005e00:	af04      	add	r7, sp, #16
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10d      	bne.n	8005e2c <xTaskCreateStatic+0x30>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	b672      	cpsid	i
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	b662      	cpsie	i
 8005e24:	623b      	str	r3, [r7, #32]
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	e7fd      	b.n	8005e28 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10d      	bne.n	8005e4e <xTaskCreateStatic+0x52>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	b672      	cpsid	i
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	b662      	cpsie	i
 8005e46:	61fb      	str	r3, [r7, #28]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e4e:	23a8      	movs	r3, #168	@ 0xa8
 8005e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2ba8      	cmp	r3, #168	@ 0xa8
 8005e56:	d00d      	beq.n	8005e74 <xTaskCreateStatic+0x78>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	b672      	cpsid	i
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	b662      	cpsie	i
 8005e6c:	61bb      	str	r3, [r7, #24]
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01e      	beq.n	8005eba <xTaskCreateStatic+0xbe>
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01b      	beq.n	8005eba <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e94:	2300      	movs	r3, #0
 8005e96:	9303      	str	r3, [sp, #12]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	9302      	str	r3, [sp, #8]
 8005e9c:	f107 0314 	add.w	r3, r7, #20
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f851 	bl	8005f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005eb4:	f000 f8f8 	bl	80060a8 <prvAddNewTaskToReadyList>
 8005eb8:	e001      	b.n	8005ebe <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ebe:	697b      	ldr	r3, [r7, #20]
	}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3728      	adds	r7, #40	@ 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08c      	sub	sp, #48	@ 0x30
 8005ecc:	af04      	add	r7, sp, #16
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 fda3 	bl	8007a28 <pvPortMalloc>
 8005ee2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eea:	20a8      	movs	r0, #168	@ 0xa8
 8005eec:	f001 fd9c 	bl	8007a28 <pvPortMalloc>
 8005ef0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005efe:	e005      	b.n	8005f0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f00:	6978      	ldr	r0, [r7, #20]
 8005f02:	f001 fe5f 	bl	8007bc4 <vPortFree>
 8005f06:	e001      	b.n	8005f0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9303      	str	r3, [sp, #12]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f80f 	bl	8005f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f36:	69f8      	ldr	r0, [r7, #28]
 8005f38:	f000 f8b6 	bl	80060a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e002      	b.n	8005f48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295
 8005f46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f48:	69bb      	ldr	r3, [r7, #24]
	}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	21a5      	movs	r1, #165	@ 0xa5
 8005f6e:	f001 ff79 	bl	8007e64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005f7c:	440b      	add	r3, r1
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f023 0307 	bic.w	r3, r3, #7
 8005f8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00d      	beq.n	8005fb2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	b672      	cpsid	i
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	b662      	cpsie	i
 8005faa:	617b      	str	r3, [r7, #20]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01f      	beq.n	8005ff8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	e012      	b.n	8005fe4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	7819      	ldrb	r1, [r3, #0]
 8005fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3334      	adds	r3, #52	@ 0x34
 8005fce:	460a      	mov	r2, r1
 8005fd0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b0f      	cmp	r3, #15
 8005fe8:	d9e9      	bls.n	8005fbe <prvInitialiseNewTask+0x6a>
 8005fea:	e000      	b.n	8005fee <prvInitialiseNewTask+0x9a>
			{
				break;
 8005fec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ff6:	e003      	b.n	8006000 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	2b37      	cmp	r3, #55	@ 0x37
 8006004:	d901      	bls.n	800600a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006006:	2337      	movs	r3, #55	@ 0x37
 8006008:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800600e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006014:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2200      	movs	r2, #0
 800601a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	3304      	adds	r3, #4
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe ff0d 	bl	8004e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	3318      	adds	r3, #24
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe ff08 	bl	8004e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006034:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	2200      	movs	r2, #0
 800604a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	2200      	movs	r2, #0
 8006052:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	3354      	adds	r3, #84	@ 0x54
 800605a:	224c      	movs	r2, #76	@ 0x4c
 800605c:	2100      	movs	r1, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f001 ff00 	bl	8007e64 <memset>
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	4a0d      	ldr	r2, [pc, #52]	@ (800609c <prvInitialiseNewTask+0x148>)
 8006068:	659a      	str	r2, [r3, #88]	@ 0x58
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	4a0c      	ldr	r2, [pc, #48]	@ (80060a0 <prvInitialiseNewTask+0x14c>)
 800606e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006072:	4a0c      	ldr	r2, [pc, #48]	@ (80060a4 <prvInitialiseNewTask+0x150>)
 8006074:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	69b8      	ldr	r0, [r7, #24]
 800607c:	f001 fa98 	bl	80075b0 <pxPortInitialiseStack>
 8006080:	4602      	mov	r2, r0
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800608c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006092:	bf00      	nop
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20005254 	.word	0x20005254
 80060a0:	200052bc 	.word	0x200052bc
 80060a4:	20005324 	.word	0x20005324

080060a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060b0:	f001 fb8c 	bl	80077cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060b4:	4b2d      	ldr	r3, [pc, #180]	@ (800616c <prvAddNewTaskToReadyList+0xc4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	4a2c      	ldr	r2, [pc, #176]	@ (800616c <prvAddNewTaskToReadyList+0xc4>)
 80060bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060be:	4b2c      	ldr	r3, [pc, #176]	@ (8006170 <prvAddNewTaskToReadyList+0xc8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006170 <prvAddNewTaskToReadyList+0xc8>)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060cc:	4b27      	ldr	r3, [pc, #156]	@ (800616c <prvAddNewTaskToReadyList+0xc4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d110      	bne.n	80060f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060d4:	f000 fc44 	bl	8006960 <prvInitialiseTaskLists>
 80060d8:	e00d      	b.n	80060f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060da:	4b26      	ldr	r3, [pc, #152]	@ (8006174 <prvAddNewTaskToReadyList+0xcc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060e2:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <prvAddNewTaskToReadyList+0xc8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d802      	bhi.n	80060f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006170 <prvAddNewTaskToReadyList+0xc8>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060f6:	4b20      	ldr	r3, [pc, #128]	@ (8006178 <prvAddNewTaskToReadyList+0xd0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006178 <prvAddNewTaskToReadyList+0xd0>)
 80060fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006100:	4b1d      	ldr	r3, [pc, #116]	@ (8006178 <prvAddNewTaskToReadyList+0xd0>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610c:	4b1b      	ldr	r3, [pc, #108]	@ (800617c <prvAddNewTaskToReadyList+0xd4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d903      	bls.n	800611c <prvAddNewTaskToReadyList+0x74>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	4a18      	ldr	r2, [pc, #96]	@ (800617c <prvAddNewTaskToReadyList+0xd4>)
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4a15      	ldr	r2, [pc, #84]	@ (8006180 <prvAddNewTaskToReadyList+0xd8>)
 800612a:	441a      	add	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7fe fe91 	bl	8004e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006138:	f001 fb7e 	bl	8007838 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800613c:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <prvAddNewTaskToReadyList+0xcc>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00e      	beq.n	8006162 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006144:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <prvAddNewTaskToReadyList+0xc8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614e:	429a      	cmp	r2, r3
 8006150:	d207      	bcs.n	8006162 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006152:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <prvAddNewTaskToReadyList+0xdc>)
 8006154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	200014dc 	.word	0x200014dc
 8006170:	20001008 	.word	0x20001008
 8006174:	200014e8 	.word	0x200014e8
 8006178:	200014f8 	.word	0x200014f8
 800617c:	200014e4 	.word	0x200014e4
 8006180:	2000100c 	.word	0x2000100c
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01a      	beq.n	80061d0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800619a:	4b15      	ldr	r3, [pc, #84]	@ (80061f0 <vTaskDelay+0x68>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <vTaskDelay+0x36>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	b672      	cpsid	i
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	b662      	cpsie	i
 80061b6:	60bb      	str	r3, [r7, #8]
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	e7fd      	b.n	80061ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 80061be:	f000 f88f 	bl	80062e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061c2:	2100      	movs	r1, #0
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fe37 	bl	8006e38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061ca:	f000 f897 	bl	80062fc <xTaskResumeAll>
 80061ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80061d6:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <vTaskDelay+0x6c>)
 80061d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20001504 	.word	0x20001504
 80061f4:	e000ed04 	.word	0xe000ed04

080061f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	@ 0x28
 80061fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006206:	463a      	mov	r2, r7
 8006208:	1d39      	adds	r1, r7, #4
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fdc2 	bl	8004d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	2300      	movs	r3, #0
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	460a      	mov	r2, r1
 8006226:	4926      	ldr	r1, [pc, #152]	@ (80062c0 <vTaskStartScheduler+0xc8>)
 8006228:	4826      	ldr	r0, [pc, #152]	@ (80062c4 <vTaskStartScheduler+0xcc>)
 800622a:	f7ff fde7 	bl	8005dfc <xTaskCreateStatic>
 800622e:	4603      	mov	r3, r0
 8006230:	4a25      	ldr	r2, [pc, #148]	@ (80062c8 <vTaskStartScheduler+0xd0>)
 8006232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006234:	4b24      	ldr	r3, [pc, #144]	@ (80062c8 <vTaskStartScheduler+0xd0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e001      	b.n	8006246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d102      	bne.n	8006252 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800624c:	f000 fe48 	bl	8006ee0 <xTimerCreateTimerTask>
 8006250:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d11d      	bne.n	8006294 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	b672      	cpsid	i
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	b662      	cpsie	i
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006270:	4b16      	ldr	r3, [pc, #88]	@ (80062cc <vTaskStartScheduler+0xd4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3354      	adds	r3, #84	@ 0x54
 8006276:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <vTaskStartScheduler+0xd8>)
 8006278:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800627a:	4b16      	ldr	r3, [pc, #88]	@ (80062d4 <vTaskStartScheduler+0xdc>)
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006282:	4b15      	ldr	r3, [pc, #84]	@ (80062d8 <vTaskStartScheduler+0xe0>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006288:	4b14      	ldr	r3, [pc, #80]	@ (80062dc <vTaskStartScheduler+0xe4>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800628e:	f001 fa1f 	bl	80076d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006292:	e011      	b.n	80062b8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d10d      	bne.n	80062b8 <vTaskStartScheduler+0xc0>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	b672      	cpsid	i
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	b662      	cpsie	i
 80062b0:	60fb      	str	r3, [r7, #12]
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <vTaskStartScheduler+0xbc>
}
 80062b8:	bf00      	nop
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	08008870 	.word	0x08008870
 80062c4:	08006931 	.word	0x08006931
 80062c8:	20001500 	.word	0x20001500
 80062cc:	20001008 	.word	0x20001008
 80062d0:	20000010 	.word	0x20000010
 80062d4:	200014fc 	.word	0x200014fc
 80062d8:	200014e8 	.word	0x200014e8
 80062dc:	200014e0 	.word	0x200014e0

080062e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062e4:	4b04      	ldr	r3, [pc, #16]	@ (80062f8 <vTaskSuspendAll+0x18>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	4a03      	ldr	r2, [pc, #12]	@ (80062f8 <vTaskSuspendAll+0x18>)
 80062ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80062ee:	bf00      	nop
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20001504 	.word	0x20001504

080062fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800630a:	4b43      	ldr	r3, [pc, #268]	@ (8006418 <xTaskResumeAll+0x11c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10d      	bne.n	800632e <xTaskResumeAll+0x32>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	b672      	cpsid	i
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	b662      	cpsie	i
 8006326:	603b      	str	r3, [r7, #0]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800632e:	f001 fa4d 	bl	80077cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006332:	4b39      	ldr	r3, [pc, #228]	@ (8006418 <xTaskResumeAll+0x11c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a37      	ldr	r2, [pc, #220]	@ (8006418 <xTaskResumeAll+0x11c>)
 800633a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633c:	4b36      	ldr	r3, [pc, #216]	@ (8006418 <xTaskResumeAll+0x11c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d162      	bne.n	800640a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006344:	4b35      	ldr	r3, [pc, #212]	@ (800641c <xTaskResumeAll+0x120>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d05e      	beq.n	800640a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800634c:	e02f      	b.n	80063ae <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634e:	4b34      	ldr	r3, [pc, #208]	@ (8006420 <xTaskResumeAll+0x124>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3318      	adds	r3, #24
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fdda 	bl	8004f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3304      	adds	r3, #4
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fdd5 	bl	8004f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636e:	4b2d      	ldr	r3, [pc, #180]	@ (8006424 <xTaskResumeAll+0x128>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d903      	bls.n	800637e <xTaskResumeAll+0x82>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637a:	4a2a      	ldr	r2, [pc, #168]	@ (8006424 <xTaskResumeAll+0x128>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a27      	ldr	r2, [pc, #156]	@ (8006428 <xTaskResumeAll+0x12c>)
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f7fe fd60 	bl	8004e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639e:	4b23      	ldr	r3, [pc, #140]	@ (800642c <xTaskResumeAll+0x130>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80063a8:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <xTaskResumeAll+0x134>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006420 <xTaskResumeAll+0x124>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1cb      	bne.n	800634e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063bc:	f000 fb76 	bl	8006aac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006434 <xTaskResumeAll+0x138>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063cc:	f000 f846 	bl	800645c <xTaskIncrementTick>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80063d6:	4b16      	ldr	r3, [pc, #88]	@ (8006430 <xTaskResumeAll+0x134>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3b01      	subs	r3, #1
 80063e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f1      	bne.n	80063cc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80063e8:	4b12      	ldr	r3, [pc, #72]	@ (8006434 <xTaskResumeAll+0x138>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063ee:	4b10      	ldr	r3, [pc, #64]	@ (8006430 <xTaskResumeAll+0x134>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006438 <xTaskResumeAll+0x13c>)
 80063fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800640a:	f001 fa15 	bl	8007838 <vPortExitCritical>

	return xAlreadyYielded;
 800640e:	68bb      	ldr	r3, [r7, #8]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20001504 	.word	0x20001504
 800641c:	200014dc 	.word	0x200014dc
 8006420:	2000149c 	.word	0x2000149c
 8006424:	200014e4 	.word	0x200014e4
 8006428:	2000100c 	.word	0x2000100c
 800642c:	20001008 	.word	0x20001008
 8006430:	200014f0 	.word	0x200014f0
 8006434:	200014ec 	.word	0x200014ec
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006442:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <xTaskGetTickCount+0x1c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006448:	687b      	ldr	r3, [r7, #4]
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	200014e0 	.word	0x200014e0

0800645c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006466:	4b50      	ldr	r3, [pc, #320]	@ (80065a8 <xTaskIncrementTick+0x14c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 808c 	bne.w	8006588 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006470:	4b4e      	ldr	r3, [pc, #312]	@ (80065ac <xTaskIncrementTick+0x150>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006478:	4a4c      	ldr	r2, [pc, #304]	@ (80065ac <xTaskIncrementTick+0x150>)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d123      	bne.n	80064cc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006484:	4b4a      	ldr	r3, [pc, #296]	@ (80065b0 <xTaskIncrementTick+0x154>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00d      	beq.n	80064aa <xTaskIncrementTick+0x4e>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	b672      	cpsid	i
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	b662      	cpsie	i
 80064a2:	603b      	str	r3, [r7, #0]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <xTaskIncrementTick+0x4a>
 80064aa:	4b41      	ldr	r3, [pc, #260]	@ (80065b0 <xTaskIncrementTick+0x154>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	4b40      	ldr	r3, [pc, #256]	@ (80065b4 <xTaskIncrementTick+0x158>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a3e      	ldr	r2, [pc, #248]	@ (80065b0 <xTaskIncrementTick+0x154>)
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4a3e      	ldr	r2, [pc, #248]	@ (80065b4 <xTaskIncrementTick+0x158>)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	4b3e      	ldr	r3, [pc, #248]	@ (80065b8 <xTaskIncrementTick+0x15c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a3c      	ldr	r2, [pc, #240]	@ (80065b8 <xTaskIncrementTick+0x15c>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	f000 faf0 	bl	8006aac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064cc:	4b3b      	ldr	r3, [pc, #236]	@ (80065bc <xTaskIncrementTick+0x160>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d349      	bcc.n	800656a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d6:	4b36      	ldr	r3, [pc, #216]	@ (80065b0 <xTaskIncrementTick+0x154>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e0:	4b36      	ldr	r3, [pc, #216]	@ (80065bc <xTaskIncrementTick+0x160>)
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	601a      	str	r2, [r3, #0]
					break;
 80064e8:	e03f      	b.n	800656a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ea:	4b31      	ldr	r3, [pc, #196]	@ (80065b0 <xTaskIncrementTick+0x154>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d203      	bcs.n	800650a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006502:	4a2e      	ldr	r2, [pc, #184]	@ (80065bc <xTaskIncrementTick+0x160>)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006508:	e02f      	b.n	800656a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe fd00 	bl	8004f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	3318      	adds	r3, #24
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fcf7 	bl	8004f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652a:	4b25      	ldr	r3, [pc, #148]	@ (80065c0 <xTaskIncrementTick+0x164>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d903      	bls.n	800653a <xTaskIncrementTick+0xde>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006536:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <xTaskIncrementTick+0x164>)
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4a1f      	ldr	r2, [pc, #124]	@ (80065c4 <xTaskIncrementTick+0x168>)
 8006548:	441a      	add	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	3304      	adds	r3, #4
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fe fc82 	bl	8004e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655a:	4b1b      	ldr	r3, [pc, #108]	@ (80065c8 <xTaskIncrementTick+0x16c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	429a      	cmp	r2, r3
 8006562:	d3b8      	bcc.n	80064d6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006568:	e7b5      	b.n	80064d6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800656a:	4b17      	ldr	r3, [pc, #92]	@ (80065c8 <xTaskIncrementTick+0x16c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4914      	ldr	r1, [pc, #80]	@ (80065c4 <xTaskIncrementTick+0x168>)
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d907      	bls.n	8006592 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006582:	2301      	movs	r3, #1
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e004      	b.n	8006592 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006588:	4b10      	ldr	r3, [pc, #64]	@ (80065cc <xTaskIncrementTick+0x170>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	4a0f      	ldr	r2, [pc, #60]	@ (80065cc <xTaskIncrementTick+0x170>)
 8006590:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006592:	4b0f      	ldr	r3, [pc, #60]	@ (80065d0 <xTaskIncrementTick+0x174>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800659a:	2301      	movs	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800659e:	697b      	ldr	r3, [r7, #20]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20001504 	.word	0x20001504
 80065ac:	200014e0 	.word	0x200014e0
 80065b0:	20001494 	.word	0x20001494
 80065b4:	20001498 	.word	0x20001498
 80065b8:	200014f4 	.word	0x200014f4
 80065bc:	200014fc 	.word	0x200014fc
 80065c0:	200014e4 	.word	0x200014e4
 80065c4:	2000100c 	.word	0x2000100c
 80065c8:	20001008 	.word	0x20001008
 80065cc:	200014ec 	.word	0x200014ec
 80065d0:	200014f0 	.word	0x200014f0

080065d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065da:	4b2c      	ldr	r3, [pc, #176]	@ (800668c <vTaskSwitchContext+0xb8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006690 <vTaskSwitchContext+0xbc>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065e8:	e049      	b.n	800667e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80065ea:	4b29      	ldr	r3, [pc, #164]	@ (8006690 <vTaskSwitchContext+0xbc>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	4b28      	ldr	r3, [pc, #160]	@ (8006694 <vTaskSwitchContext+0xc0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e013      	b.n	8006620 <vTaskSwitchContext+0x4c>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10d      	bne.n	800661a <vTaskSwitchContext+0x46>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	b672      	cpsid	i
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	b662      	cpsie	i
 8006612:	607b      	str	r3, [r7, #4]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <vTaskSwitchContext+0x42>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b01      	subs	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	491d      	ldr	r1, [pc, #116]	@ (8006698 <vTaskSwitchContext+0xc4>)
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0e1      	beq.n	80065f8 <vTaskSwitchContext+0x24>
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <vTaskSwitchContext+0xc4>)
 8006640:	4413      	add	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	3308      	adds	r3, #8
 8006656:	429a      	cmp	r2, r3
 8006658:	d104      	bne.n	8006664 <vTaskSwitchContext+0x90>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	605a      	str	r2, [r3, #4]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	4a0c      	ldr	r2, [pc, #48]	@ (800669c <vTaskSwitchContext+0xc8>)
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4a09      	ldr	r2, [pc, #36]	@ (8006694 <vTaskSwitchContext+0xc0>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006674:	4b09      	ldr	r3, [pc, #36]	@ (800669c <vTaskSwitchContext+0xc8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3354      	adds	r3, #84	@ 0x54
 800667a:	4a09      	ldr	r2, [pc, #36]	@ (80066a0 <vTaskSwitchContext+0xcc>)
 800667c:	6013      	str	r3, [r2, #0]
}
 800667e:	bf00      	nop
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20001504 	.word	0x20001504
 8006690:	200014f0 	.word	0x200014f0
 8006694:	200014e4 	.word	0x200014e4
 8006698:	2000100c 	.word	0x2000100c
 800669c:	20001008 	.word	0x20001008
 80066a0:	20000010 	.word	0x20000010

080066a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10d      	bne.n	80066d0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b8:	b672      	cpsid	i
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	b662      	cpsie	i
 80066c8:	60fb      	str	r3, [r7, #12]
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066d0:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <vTaskPlaceOnEventList+0x4c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3318      	adds	r3, #24
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fe fbe2 	bl	8004ea2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066de:	2101      	movs	r1, #1
 80066e0:	6838      	ldr	r0, [r7, #0]
 80066e2:	f000 fba9 	bl	8006e38 <prvAddCurrentTaskToDelayedList>
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20001008 	.word	0x20001008

080066f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10d      	bne.n	8006722 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	b672      	cpsid	i
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	b662      	cpsie	i
 800671a:	617b      	str	r3, [r7, #20]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006722:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <vTaskPlaceOnEventListRestricted+0x58>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3318      	adds	r3, #24
 8006728:	4619      	mov	r1, r3
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7fe fb95 	bl	8004e5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f000 fb7a 	bl	8006e38 <prvAddCurrentTaskToDelayedList>
	}
 8006744:	bf00      	nop
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20001008 	.word	0x20001008

08006750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	b672      	cpsid	i
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	b662      	cpsie	i
 800677a:	60fb      	str	r3, [r7, #12]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3318      	adds	r3, #24
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fbc4 	bl	8004f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678c:	4b1d      	ldr	r3, [pc, #116]	@ (8006804 <xTaskRemoveFromEventList+0xb4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11d      	bne.n	80067d0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3304      	adds	r3, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fbbb 	bl	8004f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a2:	4b19      	ldr	r3, [pc, #100]	@ (8006808 <xTaskRemoveFromEventList+0xb8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d903      	bls.n	80067b2 <xTaskRemoveFromEventList+0x62>
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	4a16      	ldr	r2, [pc, #88]	@ (8006808 <xTaskRemoveFromEventList+0xb8>)
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a13      	ldr	r2, [pc, #76]	@ (800680c <xTaskRemoveFromEventList+0xbc>)
 80067c0:	441a      	add	r2, r3
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7fe fb46 	bl	8004e5a <vListInsertEnd>
 80067ce:	e005      	b.n	80067dc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3318      	adds	r3, #24
 80067d4:	4619      	mov	r1, r3
 80067d6:	480e      	ldr	r0, [pc, #56]	@ (8006810 <xTaskRemoveFromEventList+0xc0>)
 80067d8:	f7fe fb3f 	bl	8004e5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <xTaskRemoveFromEventList+0xc4>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d905      	bls.n	80067f6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ea:	2301      	movs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006818 <xTaskRemoveFromEventList+0xc8>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e001      	b.n	80067fa <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067fa:	697b      	ldr	r3, [r7, #20]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20001504 	.word	0x20001504
 8006808:	200014e4 	.word	0x200014e4
 800680c:	2000100c 	.word	0x2000100c
 8006810:	2000149c 	.word	0x2000149c
 8006814:	20001008 	.word	0x20001008
 8006818:	200014f0 	.word	0x200014f0

0800681c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <vTaskInternalSetTimeOutState+0x24>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <vTaskInternalSetTimeOutState+0x28>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	605a      	str	r2, [r3, #4]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	200014f4 	.word	0x200014f4
 8006844:	200014e0 	.word	0x200014e0

08006848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10d      	bne.n	8006874 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	b672      	cpsid	i
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	b662      	cpsie	i
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10d      	bne.n	8006896 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	b672      	cpsid	i
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	b662      	cpsie	i
 800688e:	60fb      	str	r3, [r7, #12]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006896:	f000 ff99 	bl	80077cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800689a:	4b1d      	ldr	r3, [pc, #116]	@ (8006910 <xTaskCheckForTimeOut+0xc8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	d102      	bne.n	80068ba <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e023      	b.n	8006902 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b15      	ldr	r3, [pc, #84]	@ (8006914 <xTaskCheckForTimeOut+0xcc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d007      	beq.n	80068d6 <xTaskCheckForTimeOut+0x8e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e015      	b.n	8006902 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d20b      	bcs.n	80068f8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff ff95 	bl	800681c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	e004      	b.n	8006902 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068fe:	2301      	movs	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006902:	f000 ff99 	bl	8007838 <vPortExitCritical>

	return xReturn;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	200014e0 	.word	0x200014e0
 8006914:	200014f4 	.word	0x200014f4

08006918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800691c:	4b03      	ldr	r3, [pc, #12]	@ (800692c <vTaskMissedYield+0x14>)
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	200014f0 	.word	0x200014f0

08006930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006938:	f000 f852 	bl	80069e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800693c:	4b06      	ldr	r3, [pc, #24]	@ (8006958 <prvIdleTask+0x28>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d9f9      	bls.n	8006938 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <prvIdleTask+0x2c>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006954:	e7f0      	b.n	8006938 <prvIdleTask+0x8>
 8006956:	bf00      	nop
 8006958:	2000100c 	.word	0x2000100c
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006966:	2300      	movs	r3, #0
 8006968:	607b      	str	r3, [r7, #4]
 800696a:	e00c      	b.n	8006986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4a12      	ldr	r2, [pc, #72]	@ (80069c0 <prvInitialiseTaskLists+0x60>)
 8006978:	4413      	add	r3, r2
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fa40 	bl	8004e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3301      	adds	r3, #1
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b37      	cmp	r3, #55	@ 0x37
 800698a:	d9ef      	bls.n	800696c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800698c:	480d      	ldr	r0, [pc, #52]	@ (80069c4 <prvInitialiseTaskLists+0x64>)
 800698e:	f7fe fa37 	bl	8004e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006992:	480d      	ldr	r0, [pc, #52]	@ (80069c8 <prvInitialiseTaskLists+0x68>)
 8006994:	f7fe fa34 	bl	8004e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006998:	480c      	ldr	r0, [pc, #48]	@ (80069cc <prvInitialiseTaskLists+0x6c>)
 800699a:	f7fe fa31 	bl	8004e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800699e:	480c      	ldr	r0, [pc, #48]	@ (80069d0 <prvInitialiseTaskLists+0x70>)
 80069a0:	f7fe fa2e 	bl	8004e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069a4:	480b      	ldr	r0, [pc, #44]	@ (80069d4 <prvInitialiseTaskLists+0x74>)
 80069a6:	f7fe fa2b 	bl	8004e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069aa:	4b0b      	ldr	r3, [pc, #44]	@ (80069d8 <prvInitialiseTaskLists+0x78>)
 80069ac:	4a05      	ldr	r2, [pc, #20]	@ (80069c4 <prvInitialiseTaskLists+0x64>)
 80069ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <prvInitialiseTaskLists+0x7c>)
 80069b2:	4a05      	ldr	r2, [pc, #20]	@ (80069c8 <prvInitialiseTaskLists+0x68>)
 80069b4:	601a      	str	r2, [r3, #0]
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2000100c 	.word	0x2000100c
 80069c4:	2000146c 	.word	0x2000146c
 80069c8:	20001480 	.word	0x20001480
 80069cc:	2000149c 	.word	0x2000149c
 80069d0:	200014b0 	.word	0x200014b0
 80069d4:	200014c8 	.word	0x200014c8
 80069d8:	20001494 	.word	0x20001494
 80069dc:	20001498 	.word	0x20001498

080069e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e6:	e019      	b.n	8006a1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069e8:	f000 fef0 	bl	80077cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ec:	4b10      	ldr	r3, [pc, #64]	@ (8006a30 <prvCheckTasksWaitingTermination+0x50>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe fa8b 	bl	8004f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <prvCheckTasksWaitingTermination+0x54>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	4a0b      	ldr	r2, [pc, #44]	@ (8006a34 <prvCheckTasksWaitingTermination+0x54>)
 8006a06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a08:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <prvCheckTasksWaitingTermination+0x58>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a38 <prvCheckTasksWaitingTermination+0x58>)
 8006a10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a12:	f000 ff11 	bl	8007838 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f810 	bl	8006a3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a1c:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <prvCheckTasksWaitingTermination+0x58>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e1      	bne.n	80069e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	200014b0 	.word	0x200014b0
 8006a34:	200014dc 	.word	0x200014dc
 8006a38:	200014c4 	.word	0x200014c4

08006a3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3354      	adds	r3, #84	@ 0x54
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fa13 	bl	8007e74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d108      	bne.n	8006a6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 f8b1 	bl	8007bc4 <vPortFree>
				vPortFree( pxTCB );
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 f8ae 	bl	8007bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a68:	e01b      	b.n	8006aa2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d103      	bne.n	8006a7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 f8a5 	bl	8007bc4 <vPortFree>
	}
 8006a7a:	e012      	b.n	8006aa2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d00d      	beq.n	8006aa2 <prvDeleteTCB+0x66>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	b672      	cpsid	i
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	b662      	cpsie	i
 8006a9a:	60fb      	str	r3, [r7, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <prvDeleteTCB+0x62>
	}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <prvResetNextTaskUnblockTime+0x38>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <prvResetNextTaskUnblockTime+0x3c>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ac4:	e008      	b.n	8006ad8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac6:	4b07      	ldr	r3, [pc, #28]	@ (8006ae4 <prvResetNextTaskUnblockTime+0x38>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4a04      	ldr	r2, [pc, #16]	@ (8006ae8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ad6:	6013      	str	r3, [r2, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	20001494 	.word	0x20001494
 8006ae8:	200014fc 	.word	0x200014fc

08006aec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006af2:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <xTaskGetCurrentTaskHandle+0x1c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006af8:	687b      	ldr	r3, [r7, #4]
	}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20001008 	.word	0x20001008

08006b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b12:	4b0b      	ldr	r3, [pc, #44]	@ (8006b40 <xTaskGetSchedulerState+0x34>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	e008      	b.n	8006b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b20:	4b08      	ldr	r3, [pc, #32]	@ (8006b44 <xTaskGetSchedulerState+0x38>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	e001      	b.n	8006b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b32:	687b      	ldr	r3, [r7, #4]
	}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	200014e8 	.word	0x200014e8
 8006b44:	20001504 	.word	0x20001504

08006b48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d051      	beq.n	8006c02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b62:	4b2a      	ldr	r3, [pc, #168]	@ (8006c0c <xTaskPriorityInherit+0xc4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d241      	bcs.n	8006bf0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db06      	blt.n	8006b82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b74:	4b25      	ldr	r3, [pc, #148]	@ (8006c0c <xTaskPriorityInherit+0xc4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6959      	ldr	r1, [r3, #20]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4a1f      	ldr	r2, [pc, #124]	@ (8006c10 <xTaskPriorityInherit+0xc8>)
 8006b94:	4413      	add	r3, r2
 8006b96:	4299      	cmp	r1, r3
 8006b98:	d122      	bne.n	8006be0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe f9b8 	bl	8004f14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ba4:	4b19      	ldr	r3, [pc, #100]	@ (8006c0c <xTaskPriorityInherit+0xc4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb2:	4b18      	ldr	r3, [pc, #96]	@ (8006c14 <xTaskPriorityInherit+0xcc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d903      	bls.n	8006bc2 <xTaskPriorityInherit+0x7a>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbe:	4a15      	ldr	r2, [pc, #84]	@ (8006c14 <xTaskPriorityInherit+0xcc>)
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4a10      	ldr	r2, [pc, #64]	@ (8006c10 <xTaskPriorityInherit+0xc8>)
 8006bd0:	441a      	add	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7fe f93e 	bl	8004e5a <vListInsertEnd>
 8006bde:	e004      	b.n	8006bea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <xTaskPriorityInherit+0xc4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e008      	b.n	8006c02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bf4:	4b05      	ldr	r3, [pc, #20]	@ (8006c0c <xTaskPriorityInherit+0xc4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d201      	bcs.n	8006c02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c02:	68fb      	ldr	r3, [r7, #12]
	}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20001008 	.word	0x20001008
 8006c10:	2000100c 	.word	0x2000100c
 8006c14:	200014e4 	.word	0x200014e4

08006c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d05c      	beq.n	8006ce8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c2e:	4b31      	ldr	r3, [pc, #196]	@ (8006cf4 <xTaskPriorityDisinherit+0xdc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d00d      	beq.n	8006c54 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3c:	b672      	cpsid	i
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	b662      	cpsie	i
 8006c4c:	60fb      	str	r3, [r7, #12]
}
 8006c4e:	bf00      	nop
 8006c50:	bf00      	nop
 8006c52:	e7fd      	b.n	8006c50 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10d      	bne.n	8006c78 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	60bb      	str	r3, [r7, #8]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d02c      	beq.n	8006ce8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d128      	bne.n	8006ce8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe f93a 	bl	8004f14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf8 <xTaskPriorityDisinherit+0xe0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d903      	bls.n	8006cc8 <xTaskPriorityDisinherit+0xb0>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf8 <xTaskPriorityDisinherit+0xe0>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4a09      	ldr	r2, [pc, #36]	@ (8006cfc <xTaskPriorityDisinherit+0xe4>)
 8006cd6:	441a      	add	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7fe f8bb 	bl	8004e5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ce8:	697b      	ldr	r3, [r7, #20]
	}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20001008 	.word	0x20001008
 8006cf8:	200014e4 	.word	0x200014e4
 8006cfc:	2000100c 	.word	0x2000100c

08006d00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d070      	beq.n	8006dfa <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10d      	bne.n	8006d3c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	b672      	cpsid	i
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	b662      	cpsie	i
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d902      	bls.n	8006d4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	e002      	b.n	8006d52 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d04e      	beq.n	8006dfa <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d149      	bne.n	8006dfa <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d66:	4b27      	ldr	r3, [pc, #156]	@ (8006e04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10d      	bne.n	8006d8c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	60bb      	str	r3, [r7, #8]
}
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	db04      	blt.n	8006daa <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	6959      	ldr	r1, [r3, #20]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4a13      	ldr	r2, [pc, #76]	@ (8006e08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006dba:	4413      	add	r3, r2
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	d11c      	bne.n	8006dfa <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe f8a5 	bl	8004f14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dce:	4b0f      	ldr	r3, [pc, #60]	@ (8006e0c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d903      	bls.n	8006dde <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4a0c      	ldr	r2, [pc, #48]	@ (8006e0c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a07      	ldr	r2, [pc, #28]	@ (8006e08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006dec:	441a      	add	r2, r3
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe f830 	bl	8004e5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dfa:	bf00      	nop
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20001008 	.word	0x20001008
 8006e08:	2000100c 	.word	0x2000100c
 8006e0c:	200014e4 	.word	0x200014e4

08006e10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e14:	4b07      	ldr	r3, [pc, #28]	@ (8006e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e22:	3201      	adds	r2, #1
 8006e24:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006e26:	4b03      	ldr	r3, [pc, #12]	@ (8006e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e28:	681b      	ldr	r3, [r3, #0]
	}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	20001008 	.word	0x20001008

08006e38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e42:	4b21      	ldr	r3, [pc, #132]	@ (8006ec8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e48:	4b20      	ldr	r3, [pc, #128]	@ (8006ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe f860 	bl	8004f14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d10a      	bne.n	8006e72 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e62:	4b1a      	ldr	r3, [pc, #104]	@ (8006ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4819      	ldr	r0, [pc, #100]	@ (8006ed0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e6c:	f7fd fff5 	bl	8004e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e70:	e026      	b.n	8006ec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4413      	add	r3, r2
 8006e78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e7a:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d209      	bcs.n	8006e9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ed4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f7fe f803 	bl	8004ea2 <vListInsert>
}
 8006e9c:	e010      	b.n	8006ec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f7fd fff9 	bl	8004ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d202      	bcs.n	8006ec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006eba:	4a08      	ldr	r2, [pc, #32]	@ (8006edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	200014e0 	.word	0x200014e0
 8006ecc:	20001008 	.word	0x20001008
 8006ed0:	200014c8 	.word	0x200014c8
 8006ed4:	20001498 	.word	0x20001498
 8006ed8:	20001494 	.word	0x20001494
 8006edc:	200014fc 	.word	0x200014fc

08006ee0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	@ 0x28
 8006ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006eea:	f000 fb21 	bl	8007530 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006eee:	4b1e      	ldr	r3, [pc, #120]	@ (8006f68 <xTimerCreateTimerTask+0x88>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d021      	beq.n	8006f3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006efe:	1d3a      	adds	r2, r7, #4
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	f107 030c 	add.w	r3, r7, #12
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fd ff5f 	bl	8004dcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	9202      	str	r2, [sp, #8]
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	2302      	movs	r3, #2
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	460a      	mov	r2, r1
 8006f20:	4912      	ldr	r1, [pc, #72]	@ (8006f6c <xTimerCreateTimerTask+0x8c>)
 8006f22:	4813      	ldr	r0, [pc, #76]	@ (8006f70 <xTimerCreateTimerTask+0x90>)
 8006f24:	f7fe ff6a 	bl	8005dfc <xTaskCreateStatic>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	4a12      	ldr	r2, [pc, #72]	@ (8006f74 <xTimerCreateTimerTask+0x94>)
 8006f2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f2e:	4b11      	ldr	r3, [pc, #68]	@ (8006f74 <xTimerCreateTimerTask+0x94>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f36:	2301      	movs	r3, #1
 8006f38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10d      	bne.n	8006f5c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	b672      	cpsid	i
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	b662      	cpsie	i
 8006f54:	613b      	str	r3, [r7, #16]
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006f5c:	697b      	ldr	r3, [r7, #20]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20001538 	.word	0x20001538
 8006f6c:	08008878 	.word	0x08008878
 8006f70:	080070b9 	.word	0x080070b9
 8006f74:	2000153c 	.word	0x2000153c

08006f78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08a      	sub	sp, #40	@ 0x28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10d      	bne.n	8006fac <xTimerGenericCommand+0x34>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	623b      	str	r3, [r7, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fac:	4b19      	ldr	r3, [pc, #100]	@ (8007014 <xTimerGenericCommand+0x9c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d02a      	beq.n	800700a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	dc18      	bgt.n	8006ff8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fc6:	f7ff fda1 	bl	8006b0c <xTaskGetSchedulerState>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d109      	bne.n	8006fe4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fd0:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <xTimerGenericCommand+0x9c>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	f107 0110 	add.w	r1, r7, #16
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fdc:	f7fe f9da 	bl	8005394 <xQueueGenericSend>
 8006fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006fe2:	e012      	b.n	800700a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <xTimerGenericCommand+0x9c>)
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	f107 0110 	add.w	r1, r7, #16
 8006fec:	2300      	movs	r3, #0
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f7fe f9d0 	bl	8005394 <xQueueGenericSend>
 8006ff4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ff6:	e008      	b.n	800700a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <xTimerGenericCommand+0x9c>)
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	f107 0110 	add.w	r1, r7, #16
 8007000:	2300      	movs	r3, #0
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	f7fe fad0 	bl	80055a8 <xQueueGenericSendFromISR>
 8007008:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800700c:	4618      	mov	r0, r3
 800700e:	3728      	adds	r7, #40	@ 0x28
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20001538 	.word	0x20001538

08007018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af02      	add	r7, sp, #8
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007022:	4b24      	ldr	r3, [pc, #144]	@ (80070b4 <prvProcessExpiredTimer+0x9c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd ff6f 	bl	8004f14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d025      	beq.n	8007090 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	18d1      	adds	r1, r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	6978      	ldr	r0, [r7, #20]
 8007052:	f000 f8d7 	bl	8007204 <prvInsertTimerInActiveList>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d022      	beq.n	80070a2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800705c:	2300      	movs	r3, #0
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2300      	movs	r3, #0
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	2100      	movs	r1, #0
 8007066:	6978      	ldr	r0, [r7, #20]
 8007068:	f7ff ff86 	bl	8006f78 <xTimerGenericCommand>
 800706c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d116      	bne.n	80070a2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007078:	b672      	cpsid	i
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	b662      	cpsie	i
 8007088:	60fb      	str	r3, [r7, #12]
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	b2da      	uxtb	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	6978      	ldr	r0, [r7, #20]
 80070a8:	4798      	blx	r3
}
 80070aa:	bf00      	nop
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20001530 	.word	0x20001530

080070b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070c0:	f107 0308 	add.w	r3, r7, #8
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 f859 	bl	800717c <prvGetNextExpireTime>
 80070ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4619      	mov	r1, r3
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f805 	bl	80070e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070d6:	f000 f8d7 	bl	8007288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070da:	bf00      	nop
 80070dc:	e7f0      	b.n	80070c0 <prvTimerTask+0x8>
	...

080070e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070ea:	f7ff f8f9 	bl	80062e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f866 	bl	80071c4 <prvSampleTimeNow>
 80070f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d130      	bne.n	8007162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <prvProcessTimerOrBlockTask+0x3c>
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	429a      	cmp	r2, r3
 800710c:	d806      	bhi.n	800711c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800710e:	f7ff f8f5 	bl	80062fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ff7f 	bl	8007018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800711a:	e024      	b.n	8007166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007122:	4b13      	ldr	r3, [pc, #76]	@ (8007170 <prvProcessTimerOrBlockTask+0x90>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <prvProcessTimerOrBlockTask+0x50>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <prvProcessTimerOrBlockTask+0x52>
 8007130:	2300      	movs	r3, #0
 8007132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007134:	4b0f      	ldr	r3, [pc, #60]	@ (8007174 <prvProcessTimerOrBlockTask+0x94>)
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4619      	mov	r1, r3
 8007142:	f7fe fe27 	bl	8005d94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007146:	f7ff f8d9 	bl	80062fc <xTaskResumeAll>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007150:	4b09      	ldr	r3, [pc, #36]	@ (8007178 <prvProcessTimerOrBlockTask+0x98>)
 8007152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
}
 8007160:	e001      	b.n	8007166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007162:	f7ff f8cb 	bl	80062fc <xTaskResumeAll>
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20001534 	.word	0x20001534
 8007174:	20001538 	.word	0x20001538
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007184:	4b0e      	ldr	r3, [pc, #56]	@ (80071c0 <prvGetNextExpireTime+0x44>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <prvGetNextExpireTime+0x16>
 800718e:	2201      	movs	r2, #1
 8007190:	e000      	b.n	8007194 <prvGetNextExpireTime+0x18>
 8007192:	2200      	movs	r2, #0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a0:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <prvGetNextExpireTime+0x44>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	e001      	b.n	80071b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071b0:	68fb      	ldr	r3, [r7, #12]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20001530 	.word	0x20001530

080071c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071cc:	f7ff f936 	bl	800643c <xTaskGetTickCount>
 80071d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007200 <prvSampleTimeNow+0x3c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d205      	bcs.n	80071e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071dc:	f000 f940 	bl	8007460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e002      	b.n	80071ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071ee:	4a04      	ldr	r2, [pc, #16]	@ (8007200 <prvSampleTimeNow+0x3c>)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071f4:	68fb      	ldr	r3, [r7, #12]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20001540 	.word	0x20001540

08007204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	429a      	cmp	r2, r3
 8007228:	d812      	bhi.n	8007250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	429a      	cmp	r2, r3
 8007236:	d302      	bcc.n	800723e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e01b      	b.n	8007276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800723e:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <prvInsertTimerInActiveList+0x7c>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3304      	adds	r3, #4
 8007246:	4619      	mov	r1, r3
 8007248:	4610      	mov	r0, r2
 800724a:	f7fd fe2a 	bl	8004ea2 <vListInsert>
 800724e:	e012      	b.n	8007276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d206      	bcs.n	8007266 <prvInsertTimerInActiveList+0x62>
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d302      	bcc.n	8007266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	e007      	b.n	8007276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007266:	4b07      	ldr	r3, [pc, #28]	@ (8007284 <prvInsertTimerInActiveList+0x80>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3304      	adds	r3, #4
 800726e:	4619      	mov	r1, r3
 8007270:	4610      	mov	r0, r2
 8007272:	f7fd fe16 	bl	8004ea2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007276:	697b      	ldr	r3, [r7, #20]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20001534 	.word	0x20001534
 8007284:	20001530 	.word	0x20001530

08007288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08e      	sub	sp, #56	@ 0x38
 800728c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800728e:	e0d4      	b.n	800743a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da1b      	bge.n	80072ce <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	3304      	adds	r3, #4
 800729a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <prvProcessReceivedCommands+0x36>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a6:	b672      	cpsid	i
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	b662      	cpsie	i
 80072b6:	61fb      	str	r3, [r7, #28]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072c4:	6850      	ldr	r0, [r2, #4]
 80072c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072c8:	6892      	ldr	r2, [r2, #8]
 80072ca:	4611      	mov	r1, r2
 80072cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f2c0 80b2 	blt.w	800743a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	3304      	adds	r3, #4
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd fe14 	bl	8004f14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ec:	463b      	mov	r3, r7
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ff68 	bl	80071c4 <prvSampleTimeNow>
 80072f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b09      	cmp	r3, #9
 80072fa:	f200 809b 	bhi.w	8007434 <prvProcessReceivedCommands+0x1ac>
 80072fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <prvProcessReceivedCommands+0x7c>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	0800732d 	.word	0x0800732d
 8007308:	0800732d 	.word	0x0800732d
 800730c:	0800732d 	.word	0x0800732d
 8007310:	080073a7 	.word	0x080073a7
 8007314:	080073bb 	.word	0x080073bb
 8007318:	0800740b 	.word	0x0800740b
 800731c:	0800732d 	.word	0x0800732d
 8007320:	0800732d 	.word	0x0800732d
 8007324:	080073a7 	.word	0x080073a7
 8007328:	080073bb 	.word	0x080073bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	b2da      	uxtb	r2, r3
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	18d1      	adds	r1, r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800734c:	f7ff ff5a 	bl	8007204 <prvInsertTimerInActiveList>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d070      	beq.n	8007438 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800735c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d065      	beq.n	8007438 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	441a      	add	r2, r3
 8007374:	2300      	movs	r3, #0
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	2300      	movs	r3, #0
 800737a:	2100      	movs	r1, #0
 800737c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800737e:	f7ff fdfb 	bl	8006f78 <xTimerGenericCommand>
 8007382:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d156      	bne.n	8007438 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	b672      	cpsid	i
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	b662      	cpsie	i
 800739e:	61bb      	str	r3, [r7, #24]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80073b8:	e03f      	b.n	800743a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10d      	bne.n	80073f6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073de:	b672      	cpsid	i
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	b662      	cpsie	i
 80073ee:	617b      	str	r3, [r7, #20]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	18d1      	adds	r1, r2, r3
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007404:	f7ff fefe 	bl	8007204 <prvInsertTimerInActiveList>
					break;
 8007408:	e017      	b.n	800743a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800741a:	f000 fbd3 	bl	8007bc4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800741e:	e00c      	b.n	800743a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	b2da      	uxtb	r2, r3
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007432:	e002      	b.n	800743a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007434:	bf00      	nop
 8007436:	e000      	b.n	800743a <prvProcessReceivedCommands+0x1b2>
					break;
 8007438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800743a:	4b08      	ldr	r3, [pc, #32]	@ (800745c <prvProcessReceivedCommands+0x1d4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	1d39      	adds	r1, r7, #4
 8007440:	2200      	movs	r2, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe f954 	bl	80056f0 <xQueueReceive>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	f47f af20 	bne.w	8007290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3730      	adds	r7, #48	@ 0x30
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20001538 	.word	0x20001538

08007460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007466:	e04b      	b.n	8007500 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007468:	4b2f      	ldr	r3, [pc, #188]	@ (8007528 <prvSwitchTimerLists+0xc8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007472:	4b2d      	ldr	r3, [pc, #180]	@ (8007528 <prvSwitchTimerLists+0xc8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3304      	adds	r3, #4
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd fd47 	bl	8004f14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d031      	beq.n	8007500 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4413      	add	r3, r2
 80074a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d90e      	bls.n	80074cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007528 <prvSwitchTimerLists+0xc8>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7fd fcec 	bl	8004ea2 <vListInsert>
 80074ca:	e019      	b.n	8007500 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074cc:	2300      	movs	r3, #0
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	2300      	movs	r3, #0
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	2100      	movs	r1, #0
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fd4e 	bl	8006f78 <xTimerGenericCommand>
 80074dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10d      	bne.n	8007500 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	b672      	cpsid	i
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	b662      	cpsie	i
 80074f8:	603b      	str	r3, [r7, #0]
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007500:	4b09      	ldr	r3, [pc, #36]	@ (8007528 <prvSwitchTimerLists+0xc8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1ae      	bne.n	8007468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800750a:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <prvSwitchTimerLists+0xc8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007510:	4b06      	ldr	r3, [pc, #24]	@ (800752c <prvSwitchTimerLists+0xcc>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a04      	ldr	r2, [pc, #16]	@ (8007528 <prvSwitchTimerLists+0xc8>)
 8007516:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007518:	4a04      	ldr	r2, [pc, #16]	@ (800752c <prvSwitchTimerLists+0xcc>)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	6013      	str	r3, [r2, #0]
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20001530 	.word	0x20001530
 800752c:	20001534 	.word	0x20001534

08007530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007536:	f000 f949 	bl	80077cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800753a:	4b15      	ldr	r3, [pc, #84]	@ (8007590 <prvCheckForValidListAndQueue+0x60>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d120      	bne.n	8007584 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007542:	4814      	ldr	r0, [pc, #80]	@ (8007594 <prvCheckForValidListAndQueue+0x64>)
 8007544:	f7fd fc5c 	bl	8004e00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007548:	4813      	ldr	r0, [pc, #76]	@ (8007598 <prvCheckForValidListAndQueue+0x68>)
 800754a:	f7fd fc59 	bl	8004e00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800754e:	4b13      	ldr	r3, [pc, #76]	@ (800759c <prvCheckForValidListAndQueue+0x6c>)
 8007550:	4a10      	ldr	r2, [pc, #64]	@ (8007594 <prvCheckForValidListAndQueue+0x64>)
 8007552:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007554:	4b12      	ldr	r3, [pc, #72]	@ (80075a0 <prvCheckForValidListAndQueue+0x70>)
 8007556:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <prvCheckForValidListAndQueue+0x68>)
 8007558:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800755a:	2300      	movs	r3, #0
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4b11      	ldr	r3, [pc, #68]	@ (80075a4 <prvCheckForValidListAndQueue+0x74>)
 8007560:	4a11      	ldr	r2, [pc, #68]	@ (80075a8 <prvCheckForValidListAndQueue+0x78>)
 8007562:	2110      	movs	r1, #16
 8007564:	200a      	movs	r0, #10
 8007566:	f7fd fd6b 	bl	8005040 <xQueueGenericCreateStatic>
 800756a:	4603      	mov	r3, r0
 800756c:	4a08      	ldr	r2, [pc, #32]	@ (8007590 <prvCheckForValidListAndQueue+0x60>)
 800756e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007570:	4b07      	ldr	r3, [pc, #28]	@ (8007590 <prvCheckForValidListAndQueue+0x60>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007578:	4b05      	ldr	r3, [pc, #20]	@ (8007590 <prvCheckForValidListAndQueue+0x60>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	490b      	ldr	r1, [pc, #44]	@ (80075ac <prvCheckForValidListAndQueue+0x7c>)
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fbde 	bl	8005d40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007584:	f000 f958 	bl	8007838 <vPortExitCritical>
}
 8007588:	bf00      	nop
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20001538 	.word	0x20001538
 8007594:	20001508 	.word	0x20001508
 8007598:	2000151c 	.word	0x2000151c
 800759c:	20001530 	.word	0x20001530
 80075a0:	20001534 	.word	0x20001534
 80075a4:	200015e4 	.word	0x200015e4
 80075a8:	20001544 	.word	0x20001544
 80075ac:	08008880 	.word	0x08008880

080075b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3b04      	subs	r3, #4
 80075c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3b04      	subs	r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f023 0201 	bic.w	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3b04      	subs	r3, #4
 80075de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007614 <pxPortInitialiseStack+0x64>)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3b14      	subs	r3, #20
 80075ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3b04      	subs	r3, #4
 80075f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f06f 0202 	mvn.w	r2, #2
 80075fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3b20      	subs	r3, #32
 8007604:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007606:	68fb      	ldr	r3, [r7, #12]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	08007619 	.word	0x08007619

08007618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007622:	4b15      	ldr	r3, [pc, #84]	@ (8007678 <prvTaskExitError+0x60>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d00d      	beq.n	8007648 <prvTaskExitError+0x30>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007630:	b672      	cpsid	i
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	b662      	cpsie	i
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <prvTaskExitError+0x2c>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	b672      	cpsid	i
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	b662      	cpsie	i
 800765c:	60bb      	str	r3, [r7, #8]
}
 800765e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007660:	bf00      	nop
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0fc      	beq.n	8007662 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	2000000c 	.word	0x2000000c
 800767c:	00000000 	.word	0x00000000

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	@ (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst2>:
 80076a0:	20001008 	.word	0x20001008
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076a8:	4808      	ldr	r0, [pc, #32]	@ (80076cc <prvPortStartFirstTask+0x24>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8814 	msr	CONTROL, r0
 80076ba:	b662      	cpsie	i
 80076bc:	b661      	cpsie	f
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	df00      	svc	0
 80076c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ca:	bf00      	nop
 80076cc:	e000ed08 	.word	0xe000ed08

080076d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076d6:	4b37      	ldr	r3, [pc, #220]	@ (80077b4 <xPortStartScheduler+0xe4>)
 80076d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	22ff      	movs	r2, #255	@ 0xff
 80076e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	4b2f      	ldr	r3, [pc, #188]	@ (80077b8 <xPortStartScheduler+0xe8>)
 80076fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076fe:	4b2f      	ldr	r3, [pc, #188]	@ (80077bc <xPortStartScheduler+0xec>)
 8007700:	2207      	movs	r2, #7
 8007702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007704:	e009      	b.n	800771a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007706:	4b2d      	ldr	r3, [pc, #180]	@ (80077bc <xPortStartScheduler+0xec>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3b01      	subs	r3, #1
 800770c:	4a2b      	ldr	r2, [pc, #172]	@ (80077bc <xPortStartScheduler+0xec>)
 800770e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	b2db      	uxtb	r3, r3
 8007718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007722:	2b80      	cmp	r3, #128	@ 0x80
 8007724:	d0ef      	beq.n	8007706 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007726:	4b25      	ldr	r3, [pc, #148]	@ (80077bc <xPortStartScheduler+0xec>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f1c3 0307 	rsb	r3, r3, #7
 800772e:	2b04      	cmp	r3, #4
 8007730:	d00d      	beq.n	800774e <xPortStartScheduler+0x7e>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	b672      	cpsid	i
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	b662      	cpsie	i
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800774e:	4b1b      	ldr	r3, [pc, #108]	@ (80077bc <xPortStartScheduler+0xec>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	4a19      	ldr	r2, [pc, #100]	@ (80077bc <xPortStartScheduler+0xec>)
 8007756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007758:	4b18      	ldr	r3, [pc, #96]	@ (80077bc <xPortStartScheduler+0xec>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007760:	4a16      	ldr	r2, [pc, #88]	@ (80077bc <xPortStartScheduler+0xec>)
 8007762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	b2da      	uxtb	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800776c:	4b14      	ldr	r3, [pc, #80]	@ (80077c0 <xPortStartScheduler+0xf0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a13      	ldr	r2, [pc, #76]	@ (80077c0 <xPortStartScheduler+0xf0>)
 8007772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007778:	4b11      	ldr	r3, [pc, #68]	@ (80077c0 <xPortStartScheduler+0xf0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a10      	ldr	r2, [pc, #64]	@ (80077c0 <xPortStartScheduler+0xf0>)
 800777e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007784:	f000 f8dc 	bl	8007940 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007788:	4b0e      	ldr	r3, [pc, #56]	@ (80077c4 <xPortStartScheduler+0xf4>)
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800778e:	f000 f8fb 	bl	8007988 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <xPortStartScheduler+0xf8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a0c      	ldr	r2, [pc, #48]	@ (80077c8 <xPortStartScheduler+0xf8>)
 8007798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800779c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800779e:	f7ff ff83 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077a2:	f7fe ff17 	bl	80065d4 <vTaskSwitchContext>
	prvTaskExitError();
 80077a6:	f7ff ff37 	bl	8007618 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	e000e400 	.word	0xe000e400
 80077b8:	20001634 	.word	0x20001634
 80077bc:	20001638 	.word	0x20001638
 80077c0:	e000ed20 	.word	0xe000ed20
 80077c4:	2000000c 	.word	0x2000000c
 80077c8:	e000ef34 	.word	0xe000ef34

080077cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	b672      	cpsid	i
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	b662      	cpsie	i
 80077e6:	607b      	str	r3, [r7, #4]
}
 80077e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077ea:	4b11      	ldr	r3, [pc, #68]	@ (8007830 <vPortEnterCritical+0x64>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4a0f      	ldr	r2, [pc, #60]	@ (8007830 <vPortEnterCritical+0x64>)
 80077f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007830 <vPortEnterCritical+0x64>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d112      	bne.n	8007822 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <vPortEnterCritical+0x68>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <vPortEnterCritical+0x56>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	b672      	cpsid	i
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	b662      	cpsie	i
 800781a:	603b      	str	r3, [r7, #0]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <vPortEnterCritical+0x52>
	}
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	2000000c 	.word	0x2000000c
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800783e:	4b13      	ldr	r3, [pc, #76]	@ (800788c <vPortExitCritical+0x54>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10d      	bne.n	8007862 <vPortExitCritical+0x2a>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	b672      	cpsid	i
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	b662      	cpsie	i
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	e7fd      	b.n	800785e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007862:	4b0a      	ldr	r3, [pc, #40]	@ (800788c <vPortExitCritical+0x54>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3b01      	subs	r3, #1
 8007868:	4a08      	ldr	r2, [pc, #32]	@ (800788c <vPortExitCritical+0x54>)
 800786a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800786c:	4b07      	ldr	r3, [pc, #28]	@ (800788c <vPortExitCritical+0x54>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d105      	bne.n	8007880 <vPortExitCritical+0x48>
 8007874:	2300      	movs	r3, #0
 8007876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f383 8811 	msr	BASEPRI, r3
}
 800787e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	2000000c 	.word	0x2000000c

08007890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007890:	f3ef 8009 	mrs	r0, PSP
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4b15      	ldr	r3, [pc, #84]	@ (80078f0 <pxCurrentTCBConst>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f01e 0f10 	tst.w	lr, #16
 80078a0:	bf08      	it	eq
 80078a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	6010      	str	r0, [r2, #0]
 80078ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80078b4:	b672      	cpsid	i
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	b662      	cpsie	i
 80078c4:	f7fe fe86 	bl	80065d4 <vTaskSwitchContext>
 80078c8:	f04f 0000 	mov.w	r0, #0
 80078cc:	f380 8811 	msr	BASEPRI, r0
 80078d0:	bc09      	pop	{r0, r3}
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	f01e 0f10 	tst.w	lr, #16
 80078de:	bf08      	it	eq
 80078e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078e4:	f380 8809 	msr	PSP, r0
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <pxCurrentTCBConst>:
 80078f0:	20001008 	.word	0x20001008
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	b672      	cpsid	i
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	b662      	cpsie	i
 8007912:	607b      	str	r3, [r7, #4]
}
 8007914:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007916:	f7fe fda1 	bl	800645c <xTaskIncrementTick>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007920:	4b06      	ldr	r3, [pc, #24]	@ (800793c <SysTick_Handler+0x44>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	2300      	movs	r3, #0
 800792a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f383 8811 	msr	BASEPRI, r3
}
 8007932:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007944:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <vPortSetupTimerInterrupt+0x34>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800794a:	4b0b      	ldr	r3, [pc, #44]	@ (8007978 <vPortSetupTimerInterrupt+0x38>)
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007950:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <vPortSetupTimerInterrupt+0x3c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a0a      	ldr	r2, [pc, #40]	@ (8007980 <vPortSetupTimerInterrupt+0x40>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	099b      	lsrs	r3, r3, #6
 800795c:	4a09      	ldr	r2, [pc, #36]	@ (8007984 <vPortSetupTimerInterrupt+0x44>)
 800795e:	3b01      	subs	r3, #1
 8007960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007962:	4b04      	ldr	r3, [pc, #16]	@ (8007974 <vPortSetupTimerInterrupt+0x34>)
 8007964:	2207      	movs	r2, #7
 8007966:	601a      	str	r2, [r3, #0]
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	e000e010 	.word	0xe000e010
 8007978:	e000e018 	.word	0xe000e018
 800797c:	20000000 	.word	0x20000000
 8007980:	10624dd3 	.word	0x10624dd3
 8007984:	e000e014 	.word	0xe000e014

08007988 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007988:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007998 <vPortEnableVFP+0x10>
 800798c:	6801      	ldr	r1, [r0, #0]
 800798e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007992:	6001      	str	r1, [r0, #0]
 8007994:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007996:	bf00      	nop
 8007998:	e000ed88 	.word	0xe000ed88

0800799c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079a2:	f3ef 8305 	mrs	r3, IPSR
 80079a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b0f      	cmp	r3, #15
 80079ac:	d917      	bls.n	80079de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007a18 <vPortValidateInterruptPriority+0x7c>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079b8:	4b18      	ldr	r3, [pc, #96]	@ (8007a1c <vPortValidateInterruptPriority+0x80>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	7afa      	ldrb	r2, [r7, #11]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d20d      	bcs.n	80079de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	b672      	cpsid	i
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	b662      	cpsie	i
 80079d6:	607b      	str	r3, [r7, #4]
}
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	e7fd      	b.n	80079da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079de:	4b10      	ldr	r3, [pc, #64]	@ (8007a20 <vPortValidateInterruptPriority+0x84>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <vPortValidateInterruptPriority+0x88>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d90d      	bls.n	8007a0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	b672      	cpsid	i
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	b662      	cpsie	i
 8007a02:	603b      	str	r3, [r7, #0]
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop
 8007a08:	e7fd      	b.n	8007a06 <vPortValidateInterruptPriority+0x6a>
	}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	e000e3f0 	.word	0xe000e3f0
 8007a1c:	20001634 	.word	0x20001634
 8007a20:	e000ed0c 	.word	0xe000ed0c
 8007a24:	20001638 	.word	0x20001638

08007a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	@ 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a34:	f7fe fc54 	bl	80062e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a38:	4b5d      	ldr	r3, [pc, #372]	@ (8007bb0 <pvPortMalloc+0x188>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a40:	f000 f920 	bl	8007c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a44:	4b5b      	ldr	r3, [pc, #364]	@ (8007bb4 <pvPortMalloc+0x18c>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 8094 	bne.w	8007b7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d020      	beq.n	8007a9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007a58:	2208      	movs	r2, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d017      	beq.n	8007a9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f023 0307 	bic.w	r3, r3, #7
 8007a70:	3308      	adds	r3, #8
 8007a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00d      	beq.n	8007a9a <pvPortMalloc+0x72>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a82:	b672      	cpsid	i
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	b662      	cpsie	i
 8007a92:	617b      	str	r3, [r7, #20]
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	e7fd      	b.n	8007a96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d06c      	beq.n	8007b7a <pvPortMalloc+0x152>
 8007aa0:	4b45      	ldr	r3, [pc, #276]	@ (8007bb8 <pvPortMalloc+0x190>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d867      	bhi.n	8007b7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aaa:	4b44      	ldr	r3, [pc, #272]	@ (8007bbc <pvPortMalloc+0x194>)
 8007aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007aae:	4b43      	ldr	r3, [pc, #268]	@ (8007bbc <pvPortMalloc+0x194>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ab4:	e004      	b.n	8007ac0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d903      	bls.n	8007ad2 <pvPortMalloc+0xaa>
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f1      	bne.n	8007ab6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ad2:	4b37      	ldr	r3, [pc, #220]	@ (8007bb0 <pvPortMalloc+0x188>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d04e      	beq.n	8007b7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	4413      	add	r3, r2
 8007ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	2308      	movs	r3, #8
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d922      	bls.n	8007b44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4413      	add	r3, r2
 8007b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00d      	beq.n	8007b2c <pvPortMalloc+0x104>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	b672      	cpsid	i
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	b662      	cpsie	i
 8007b24:	613b      	str	r3, [r7, #16]
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b3e:	69b8      	ldr	r0, [r7, #24]
 8007b40:	f000 f902 	bl	8007d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b44:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb8 <pvPortMalloc+0x190>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8007bb8 <pvPortMalloc+0x190>)
 8007b50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b52:	4b19      	ldr	r3, [pc, #100]	@ (8007bb8 <pvPortMalloc+0x190>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc0 <pvPortMalloc+0x198>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d203      	bcs.n	8007b66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b5e:	4b16      	ldr	r3, [pc, #88]	@ (8007bb8 <pvPortMalloc+0x190>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a17      	ldr	r2, [pc, #92]	@ (8007bc0 <pvPortMalloc+0x198>)
 8007b64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <pvPortMalloc+0x18c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	2200      	movs	r2, #0
 8007b78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b7a:	f7fe fbbf 	bl	80062fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00d      	beq.n	8007ba4 <pvPortMalloc+0x17c>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8c:	b672      	cpsid	i
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	b662      	cpsie	i
 8007b9c:	60fb      	str	r3, [r7, #12]
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	e7fd      	b.n	8007ba0 <pvPortMalloc+0x178>
	return pvReturn;
 8007ba4:	69fb      	ldr	r3, [r7, #28]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3728      	adds	r7, #40	@ 0x28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20005244 	.word	0x20005244
 8007bb4:	20005250 	.word	0x20005250
 8007bb8:	20005248 	.word	0x20005248
 8007bbc:	2000523c 	.word	0x2000523c
 8007bc0:	2000524c 	.word	0x2000524c

08007bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d04e      	beq.n	8007c74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	425b      	negs	r3, r3
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4413      	add	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	4b24      	ldr	r3, [pc, #144]	@ (8007c7c <vPortFree+0xb8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10d      	bne.n	8007c0e <vPortFree+0x4a>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	b672      	cpsid	i
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	b662      	cpsie	i
 8007c06:	60fb      	str	r3, [r7, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	e7fd      	b.n	8007c0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00d      	beq.n	8007c32 <vPortFree+0x6e>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1a:	b672      	cpsid	i
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	b662      	cpsie	i
 8007c2a:	60bb      	str	r3, [r7, #8]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4b11      	ldr	r3, [pc, #68]	@ (8007c7c <vPortFree+0xb8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d019      	beq.n	8007c74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d115      	bne.n	8007c74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c7c <vPortFree+0xb8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	43db      	mvns	r3, r3
 8007c52:	401a      	ands	r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c58:	f7fe fb42 	bl	80062e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	4b07      	ldr	r3, [pc, #28]	@ (8007c80 <vPortFree+0xbc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4413      	add	r3, r2
 8007c66:	4a06      	ldr	r2, [pc, #24]	@ (8007c80 <vPortFree+0xbc>)
 8007c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c6a:	6938      	ldr	r0, [r7, #16]
 8007c6c:	f000 f86c 	bl	8007d48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c70:	f7fe fb44 	bl	80062fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c74:	bf00      	nop
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20005250 	.word	0x20005250
 8007c80:	20005248 	.word	0x20005248

08007c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c90:	4b27      	ldr	r3, [pc, #156]	@ (8007d30 <prvHeapInit+0xac>)
 8007c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00c      	beq.n	8007cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0307 	bic.w	r3, r3, #7
 8007caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <prvHeapInit+0xac>)
 8007cb4:	4413      	add	r3, r2
 8007cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007d34 <prvHeapInit+0xb0>)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d34 <prvHeapInit+0xb0>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	4413      	add	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0307 	bic.w	r3, r3, #7
 8007cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4a15      	ldr	r2, [pc, #84]	@ (8007d38 <prvHeapInit+0xb4>)
 8007ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ce6:	4b14      	ldr	r3, [pc, #80]	@ (8007d38 <prvHeapInit+0xb4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cee:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <prvHeapInit+0xb4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d04:	4b0c      	ldr	r3, [pc, #48]	@ (8007d38 <prvHeapInit+0xb4>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	4a0a      	ldr	r2, [pc, #40]	@ (8007d3c <prvHeapInit+0xb8>)
 8007d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a09      	ldr	r2, [pc, #36]	@ (8007d40 <prvHeapInit+0xbc>)
 8007d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d1c:	4b09      	ldr	r3, [pc, #36]	@ (8007d44 <prvHeapInit+0xc0>)
 8007d1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	2000163c 	.word	0x2000163c
 8007d34:	2000523c 	.word	0x2000523c
 8007d38:	20005244 	.word	0x20005244
 8007d3c:	2000524c 	.word	0x2000524c
 8007d40:	20005248 	.word	0x20005248
 8007d44:	20005250 	.word	0x20005250

08007d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d50:	4b28      	ldr	r3, [pc, #160]	@ (8007df4 <prvInsertBlockIntoFreeList+0xac>)
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e002      	b.n	8007d5c <prvInsertBlockIntoFreeList+0x14>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d8f7      	bhi.n	8007d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	4413      	add	r3, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d108      	bne.n	8007d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	441a      	add	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	441a      	add	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d118      	bne.n	8007dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b15      	ldr	r3, [pc, #84]	@ (8007df8 <prvInsertBlockIntoFreeList+0xb0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d00d      	beq.n	8007dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	441a      	add	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e008      	b.n	8007dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e003      	b.n	8007dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d002      	beq.n	8007de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	2000523c 	.word	0x2000523c
 8007df8:	20005244 	.word	0x20005244

08007dfc <sniprintf>:
 8007dfc:	b40c      	push	{r2, r3}
 8007dfe:	b530      	push	{r4, r5, lr}
 8007e00:	4b17      	ldr	r3, [pc, #92]	@ (8007e60 <sniprintf+0x64>)
 8007e02:	1e0c      	subs	r4, r1, #0
 8007e04:	681d      	ldr	r5, [r3, #0]
 8007e06:	b09d      	sub	sp, #116	@ 0x74
 8007e08:	da08      	bge.n	8007e1c <sniprintf+0x20>
 8007e0a:	238b      	movs	r3, #139	@ 0x8b
 8007e0c:	602b      	str	r3, [r5, #0]
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	b01d      	add	sp, #116	@ 0x74
 8007e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e18:	b002      	add	sp, #8
 8007e1a:	4770      	bx	lr
 8007e1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e24:	bf14      	ite	ne
 8007e26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e2a:	4623      	moveq	r3, r4
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	9307      	str	r3, [sp, #28]
 8007e30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e34:	9002      	str	r0, [sp, #8]
 8007e36:	9006      	str	r0, [sp, #24]
 8007e38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e3e:	ab21      	add	r3, sp, #132	@ 0x84
 8007e40:	a902      	add	r1, sp, #8
 8007e42:	4628      	mov	r0, r5
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	f000 f9f9 	bl	800823c <_svfiprintf_r>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	bfbc      	itt	lt
 8007e4e:	238b      	movlt	r3, #139	@ 0x8b
 8007e50:	602b      	strlt	r3, [r5, #0]
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	d0dd      	beq.n	8007e12 <sniprintf+0x16>
 8007e56:	9b02      	ldr	r3, [sp, #8]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	e7d9      	b.n	8007e12 <sniprintf+0x16>
 8007e5e:	bf00      	nop
 8007e60:	20000010 	.word	0x20000010

08007e64 <memset>:
 8007e64:	4402      	add	r2, r0
 8007e66:	4603      	mov	r3, r0
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d100      	bne.n	8007e6e <memset+0xa>
 8007e6c:	4770      	bx	lr
 8007e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e72:	e7f9      	b.n	8007e68 <memset+0x4>

08007e74 <_reclaim_reent>:
 8007e74:	4b29      	ldr	r3, [pc, #164]	@ (8007f1c <_reclaim_reent+0xa8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	d04b      	beq.n	8007f18 <_reclaim_reent+0xa4>
 8007e80:	69c3      	ldr	r3, [r0, #28]
 8007e82:	b1ab      	cbz	r3, 8007eb0 <_reclaim_reent+0x3c>
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	b16b      	cbz	r3, 8007ea4 <_reclaim_reent+0x30>
 8007e88:	2500      	movs	r5, #0
 8007e8a:	69e3      	ldr	r3, [r4, #28]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	5959      	ldr	r1, [r3, r5]
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d13b      	bne.n	8007f0c <_reclaim_reent+0x98>
 8007e94:	3504      	adds	r5, #4
 8007e96:	2d80      	cmp	r5, #128	@ 0x80
 8007e98:	d1f7      	bne.n	8007e8a <_reclaim_reent+0x16>
 8007e9a:	69e3      	ldr	r3, [r4, #28]
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	68d9      	ldr	r1, [r3, #12]
 8007ea0:	f000 f878 	bl	8007f94 <_free_r>
 8007ea4:	69e3      	ldr	r3, [r4, #28]
 8007ea6:	6819      	ldr	r1, [r3, #0]
 8007ea8:	b111      	cbz	r1, 8007eb0 <_reclaim_reent+0x3c>
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 f872 	bl	8007f94 <_free_r>
 8007eb0:	6961      	ldr	r1, [r4, #20]
 8007eb2:	b111      	cbz	r1, 8007eba <_reclaim_reent+0x46>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 f86d 	bl	8007f94 <_free_r>
 8007eba:	69e1      	ldr	r1, [r4, #28]
 8007ebc:	b111      	cbz	r1, 8007ec4 <_reclaim_reent+0x50>
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f868 	bl	8007f94 <_free_r>
 8007ec4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007ec6:	b111      	cbz	r1, 8007ece <_reclaim_reent+0x5a>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 f863 	bl	8007f94 <_free_r>
 8007ece:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ed0:	b111      	cbz	r1, 8007ed8 <_reclaim_reent+0x64>
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f85e 	bl	8007f94 <_free_r>
 8007ed8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007eda:	b111      	cbz	r1, 8007ee2 <_reclaim_reent+0x6e>
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 f859 	bl	8007f94 <_free_r>
 8007ee2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ee4:	b111      	cbz	r1, 8007eec <_reclaim_reent+0x78>
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 f854 	bl	8007f94 <_free_r>
 8007eec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007eee:	b111      	cbz	r1, 8007ef6 <_reclaim_reent+0x82>
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 f84f 	bl	8007f94 <_free_r>
 8007ef6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007ef8:	b111      	cbz	r1, 8007f00 <_reclaim_reent+0x8c>
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 f84a 	bl	8007f94 <_free_r>
 8007f00:	6a23      	ldr	r3, [r4, #32]
 8007f02:	b14b      	cbz	r3, 8007f18 <_reclaim_reent+0xa4>
 8007f04:	4620      	mov	r0, r4
 8007f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f0a:	4718      	bx	r3
 8007f0c:	680e      	ldr	r6, [r1, #0]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f840 	bl	8007f94 <_free_r>
 8007f14:	4631      	mov	r1, r6
 8007f16:	e7bb      	b.n	8007e90 <_reclaim_reent+0x1c>
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000010 	.word	0x20000010

08007f20 <__errno>:
 8007f20:	4b01      	ldr	r3, [pc, #4]	@ (8007f28 <__errno+0x8>)
 8007f22:	6818      	ldr	r0, [r3, #0]
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20000010 	.word	0x20000010

08007f2c <__libc_init_array>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f64 <__libc_init_array+0x38>)
 8007f30:	4c0d      	ldr	r4, [pc, #52]	@ (8007f68 <__libc_init_array+0x3c>)
 8007f32:	1b64      	subs	r4, r4, r5
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	2600      	movs	r6, #0
 8007f38:	42a6      	cmp	r6, r4
 8007f3a:	d109      	bne.n	8007f50 <__libc_init_array+0x24>
 8007f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f6c <__libc_init_array+0x40>)
 8007f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8007f70 <__libc_init_array+0x44>)
 8007f40:	f000 fc66 	bl	8008810 <_init>
 8007f44:	1b64      	subs	r4, r4, r5
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	2600      	movs	r6, #0
 8007f4a:	42a6      	cmp	r6, r4
 8007f4c:	d105      	bne.n	8007f5a <__libc_init_array+0x2e>
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f54:	4798      	blx	r3
 8007f56:	3601      	adds	r6, #1
 8007f58:	e7ee      	b.n	8007f38 <__libc_init_array+0xc>
 8007f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5e:	4798      	blx	r3
 8007f60:	3601      	adds	r6, #1
 8007f62:	e7f2      	b.n	8007f4a <__libc_init_array+0x1e>
 8007f64:	08008934 	.word	0x08008934
 8007f68:	08008934 	.word	0x08008934
 8007f6c:	08008934 	.word	0x08008934
 8007f70:	08008938 	.word	0x08008938

08007f74 <__retarget_lock_acquire_recursive>:
 8007f74:	4770      	bx	lr

08007f76 <__retarget_lock_release_recursive>:
 8007f76:	4770      	bx	lr

08007f78 <memcpy>:
 8007f78:	440a      	add	r2, r1
 8007f7a:	4291      	cmp	r1, r2
 8007f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f80:	d100      	bne.n	8007f84 <memcpy+0xc>
 8007f82:	4770      	bx	lr
 8007f84:	b510      	push	{r4, lr}
 8007f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f8e:	4291      	cmp	r1, r2
 8007f90:	d1f9      	bne.n	8007f86 <memcpy+0xe>
 8007f92:	bd10      	pop	{r4, pc}

08007f94 <_free_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4605      	mov	r5, r0
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d041      	beq.n	8008020 <_free_r+0x8c>
 8007f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa0:	1f0c      	subs	r4, r1, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bfb8      	it	lt
 8007fa6:	18e4      	addlt	r4, r4, r3
 8007fa8:	f000 f8e0 	bl	800816c <__malloc_lock>
 8007fac:	4a1d      	ldr	r2, [pc, #116]	@ (8008024 <_free_r+0x90>)
 8007fae:	6813      	ldr	r3, [r2, #0]
 8007fb0:	b933      	cbnz	r3, 8007fc0 <_free_r+0x2c>
 8007fb2:	6063      	str	r3, [r4, #4]
 8007fb4:	6014      	str	r4, [r2, #0]
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fbc:	f000 b8dc 	b.w	8008178 <__malloc_unlock>
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d908      	bls.n	8007fd6 <_free_r+0x42>
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	1821      	adds	r1, r4, r0
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf01      	itttt	eq
 8007fcc:	6819      	ldreq	r1, [r3, #0]
 8007fce:	685b      	ldreq	r3, [r3, #4]
 8007fd0:	1809      	addeq	r1, r1, r0
 8007fd2:	6021      	streq	r1, [r4, #0]
 8007fd4:	e7ed      	b.n	8007fb2 <_free_r+0x1e>
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	b10b      	cbz	r3, 8007fe0 <_free_r+0x4c>
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d9fa      	bls.n	8007fd6 <_free_r+0x42>
 8007fe0:	6811      	ldr	r1, [r2, #0]
 8007fe2:	1850      	adds	r0, r2, r1
 8007fe4:	42a0      	cmp	r0, r4
 8007fe6:	d10b      	bne.n	8008000 <_free_r+0x6c>
 8007fe8:	6820      	ldr	r0, [r4, #0]
 8007fea:	4401      	add	r1, r0
 8007fec:	1850      	adds	r0, r2, r1
 8007fee:	4283      	cmp	r3, r0
 8007ff0:	6011      	str	r1, [r2, #0]
 8007ff2:	d1e0      	bne.n	8007fb6 <_free_r+0x22>
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	6053      	str	r3, [r2, #4]
 8007ffa:	4408      	add	r0, r1
 8007ffc:	6010      	str	r0, [r2, #0]
 8007ffe:	e7da      	b.n	8007fb6 <_free_r+0x22>
 8008000:	d902      	bls.n	8008008 <_free_r+0x74>
 8008002:	230c      	movs	r3, #12
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	e7d6      	b.n	8007fb6 <_free_r+0x22>
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	1821      	adds	r1, r4, r0
 800800c:	428b      	cmp	r3, r1
 800800e:	bf04      	itt	eq
 8008010:	6819      	ldreq	r1, [r3, #0]
 8008012:	685b      	ldreq	r3, [r3, #4]
 8008014:	6063      	str	r3, [r4, #4]
 8008016:	bf04      	itt	eq
 8008018:	1809      	addeq	r1, r1, r0
 800801a:	6021      	streq	r1, [r4, #0]
 800801c:	6054      	str	r4, [r2, #4]
 800801e:	e7ca      	b.n	8007fb6 <_free_r+0x22>
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	bf00      	nop
 8008024:	20005398 	.word	0x20005398

08008028 <sbrk_aligned>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4e0f      	ldr	r6, [pc, #60]	@ (8008068 <sbrk_aligned+0x40>)
 800802c:	460c      	mov	r4, r1
 800802e:	6831      	ldr	r1, [r6, #0]
 8008030:	4605      	mov	r5, r0
 8008032:	b911      	cbnz	r1, 800803a <sbrk_aligned+0x12>
 8008034:	f000 fba6 	bl	8008784 <_sbrk_r>
 8008038:	6030      	str	r0, [r6, #0]
 800803a:	4621      	mov	r1, r4
 800803c:	4628      	mov	r0, r5
 800803e:	f000 fba1 	bl	8008784 <_sbrk_r>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	d103      	bne.n	800804e <sbrk_aligned+0x26>
 8008046:	f04f 34ff 	mov.w	r4, #4294967295
 800804a:	4620      	mov	r0, r4
 800804c:	bd70      	pop	{r4, r5, r6, pc}
 800804e:	1cc4      	adds	r4, r0, #3
 8008050:	f024 0403 	bic.w	r4, r4, #3
 8008054:	42a0      	cmp	r0, r4
 8008056:	d0f8      	beq.n	800804a <sbrk_aligned+0x22>
 8008058:	1a21      	subs	r1, r4, r0
 800805a:	4628      	mov	r0, r5
 800805c:	f000 fb92 	bl	8008784 <_sbrk_r>
 8008060:	3001      	adds	r0, #1
 8008062:	d1f2      	bne.n	800804a <sbrk_aligned+0x22>
 8008064:	e7ef      	b.n	8008046 <sbrk_aligned+0x1e>
 8008066:	bf00      	nop
 8008068:	20005394 	.word	0x20005394

0800806c <_malloc_r>:
 800806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008070:	1ccd      	adds	r5, r1, #3
 8008072:	f025 0503 	bic.w	r5, r5, #3
 8008076:	3508      	adds	r5, #8
 8008078:	2d0c      	cmp	r5, #12
 800807a:	bf38      	it	cc
 800807c:	250c      	movcc	r5, #12
 800807e:	2d00      	cmp	r5, #0
 8008080:	4606      	mov	r6, r0
 8008082:	db01      	blt.n	8008088 <_malloc_r+0x1c>
 8008084:	42a9      	cmp	r1, r5
 8008086:	d904      	bls.n	8008092 <_malloc_r+0x26>
 8008088:	230c      	movs	r3, #12
 800808a:	6033      	str	r3, [r6, #0]
 800808c:	2000      	movs	r0, #0
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008168 <_malloc_r+0xfc>
 8008096:	f000 f869 	bl	800816c <__malloc_lock>
 800809a:	f8d8 3000 	ldr.w	r3, [r8]
 800809e:	461c      	mov	r4, r3
 80080a0:	bb44      	cbnz	r4, 80080f4 <_malloc_r+0x88>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7ff ffbf 	bl	8008028 <sbrk_aligned>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	4604      	mov	r4, r0
 80080ae:	d158      	bne.n	8008162 <_malloc_r+0xf6>
 80080b0:	f8d8 4000 	ldr.w	r4, [r8]
 80080b4:	4627      	mov	r7, r4
 80080b6:	2f00      	cmp	r7, #0
 80080b8:	d143      	bne.n	8008142 <_malloc_r+0xd6>
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	d04b      	beq.n	8008156 <_malloc_r+0xea>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	4639      	mov	r1, r7
 80080c2:	4630      	mov	r0, r6
 80080c4:	eb04 0903 	add.w	r9, r4, r3
 80080c8:	f000 fb5c 	bl	8008784 <_sbrk_r>
 80080cc:	4581      	cmp	r9, r0
 80080ce:	d142      	bne.n	8008156 <_malloc_r+0xea>
 80080d0:	6821      	ldr	r1, [r4, #0]
 80080d2:	1a6d      	subs	r5, r5, r1
 80080d4:	4629      	mov	r1, r5
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ffa6 	bl	8008028 <sbrk_aligned>
 80080dc:	3001      	adds	r0, #1
 80080de:	d03a      	beq.n	8008156 <_malloc_r+0xea>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	442b      	add	r3, r5
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	f8d8 3000 	ldr.w	r3, [r8]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	bb62      	cbnz	r2, 8008148 <_malloc_r+0xdc>
 80080ee:	f8c8 7000 	str.w	r7, [r8]
 80080f2:	e00f      	b.n	8008114 <_malloc_r+0xa8>
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	1b52      	subs	r2, r2, r5
 80080f8:	d420      	bmi.n	800813c <_malloc_r+0xd0>
 80080fa:	2a0b      	cmp	r2, #11
 80080fc:	d917      	bls.n	800812e <_malloc_r+0xc2>
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	42a3      	cmp	r3, r4
 8008102:	6025      	str	r5, [r4, #0]
 8008104:	bf18      	it	ne
 8008106:	6059      	strne	r1, [r3, #4]
 8008108:	6863      	ldr	r3, [r4, #4]
 800810a:	bf08      	it	eq
 800810c:	f8c8 1000 	streq.w	r1, [r8]
 8008110:	5162      	str	r2, [r4, r5]
 8008112:	604b      	str	r3, [r1, #4]
 8008114:	4630      	mov	r0, r6
 8008116:	f000 f82f 	bl	8008178 <__malloc_unlock>
 800811a:	f104 000b 	add.w	r0, r4, #11
 800811e:	1d23      	adds	r3, r4, #4
 8008120:	f020 0007 	bic.w	r0, r0, #7
 8008124:	1ac2      	subs	r2, r0, r3
 8008126:	bf1c      	itt	ne
 8008128:	1a1b      	subne	r3, r3, r0
 800812a:	50a3      	strne	r3, [r4, r2]
 800812c:	e7af      	b.n	800808e <_malloc_r+0x22>
 800812e:	6862      	ldr	r2, [r4, #4]
 8008130:	42a3      	cmp	r3, r4
 8008132:	bf0c      	ite	eq
 8008134:	f8c8 2000 	streq.w	r2, [r8]
 8008138:	605a      	strne	r2, [r3, #4]
 800813a:	e7eb      	b.n	8008114 <_malloc_r+0xa8>
 800813c:	4623      	mov	r3, r4
 800813e:	6864      	ldr	r4, [r4, #4]
 8008140:	e7ae      	b.n	80080a0 <_malloc_r+0x34>
 8008142:	463c      	mov	r4, r7
 8008144:	687f      	ldr	r7, [r7, #4]
 8008146:	e7b6      	b.n	80080b6 <_malloc_r+0x4a>
 8008148:	461a      	mov	r2, r3
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	42a3      	cmp	r3, r4
 800814e:	d1fb      	bne.n	8008148 <_malloc_r+0xdc>
 8008150:	2300      	movs	r3, #0
 8008152:	6053      	str	r3, [r2, #4]
 8008154:	e7de      	b.n	8008114 <_malloc_r+0xa8>
 8008156:	230c      	movs	r3, #12
 8008158:	6033      	str	r3, [r6, #0]
 800815a:	4630      	mov	r0, r6
 800815c:	f000 f80c 	bl	8008178 <__malloc_unlock>
 8008160:	e794      	b.n	800808c <_malloc_r+0x20>
 8008162:	6005      	str	r5, [r0, #0]
 8008164:	e7d6      	b.n	8008114 <_malloc_r+0xa8>
 8008166:	bf00      	nop
 8008168:	20005398 	.word	0x20005398

0800816c <__malloc_lock>:
 800816c:	4801      	ldr	r0, [pc, #4]	@ (8008174 <__malloc_lock+0x8>)
 800816e:	f7ff bf01 	b.w	8007f74 <__retarget_lock_acquire_recursive>
 8008172:	bf00      	nop
 8008174:	20005390 	.word	0x20005390

08008178 <__malloc_unlock>:
 8008178:	4801      	ldr	r0, [pc, #4]	@ (8008180 <__malloc_unlock+0x8>)
 800817a:	f7ff befc 	b.w	8007f76 <__retarget_lock_release_recursive>
 800817e:	bf00      	nop
 8008180:	20005390 	.word	0x20005390

08008184 <__ssputs_r>:
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	688e      	ldr	r6, [r1, #8]
 800818a:	461f      	mov	r7, r3
 800818c:	42be      	cmp	r6, r7
 800818e:	680b      	ldr	r3, [r1, #0]
 8008190:	4682      	mov	sl, r0
 8008192:	460c      	mov	r4, r1
 8008194:	4690      	mov	r8, r2
 8008196:	d82d      	bhi.n	80081f4 <__ssputs_r+0x70>
 8008198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800819c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081a0:	d026      	beq.n	80081f0 <__ssputs_r+0x6c>
 80081a2:	6965      	ldr	r5, [r4, #20]
 80081a4:	6909      	ldr	r1, [r1, #16]
 80081a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081aa:	eba3 0901 	sub.w	r9, r3, r1
 80081ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081b2:	1c7b      	adds	r3, r7, #1
 80081b4:	444b      	add	r3, r9
 80081b6:	106d      	asrs	r5, r5, #1
 80081b8:	429d      	cmp	r5, r3
 80081ba:	bf38      	it	cc
 80081bc:	461d      	movcc	r5, r3
 80081be:	0553      	lsls	r3, r2, #21
 80081c0:	d527      	bpl.n	8008212 <__ssputs_r+0x8e>
 80081c2:	4629      	mov	r1, r5
 80081c4:	f7ff ff52 	bl	800806c <_malloc_r>
 80081c8:	4606      	mov	r6, r0
 80081ca:	b360      	cbz	r0, 8008226 <__ssputs_r+0xa2>
 80081cc:	6921      	ldr	r1, [r4, #16]
 80081ce:	464a      	mov	r2, r9
 80081d0:	f7ff fed2 	bl	8007f78 <memcpy>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	6126      	str	r6, [r4, #16]
 80081e2:	6165      	str	r5, [r4, #20]
 80081e4:	444e      	add	r6, r9
 80081e6:	eba5 0509 	sub.w	r5, r5, r9
 80081ea:	6026      	str	r6, [r4, #0]
 80081ec:	60a5      	str	r5, [r4, #8]
 80081ee:	463e      	mov	r6, r7
 80081f0:	42be      	cmp	r6, r7
 80081f2:	d900      	bls.n	80081f6 <__ssputs_r+0x72>
 80081f4:	463e      	mov	r6, r7
 80081f6:	6820      	ldr	r0, [r4, #0]
 80081f8:	4632      	mov	r2, r6
 80081fa:	4641      	mov	r1, r8
 80081fc:	f000 faa8 	bl	8008750 <memmove>
 8008200:	68a3      	ldr	r3, [r4, #8]
 8008202:	1b9b      	subs	r3, r3, r6
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	4433      	add	r3, r6
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	2000      	movs	r0, #0
 800820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008212:	462a      	mov	r2, r5
 8008214:	f000 fac6 	bl	80087a4 <_realloc_r>
 8008218:	4606      	mov	r6, r0
 800821a:	2800      	cmp	r0, #0
 800821c:	d1e0      	bne.n	80081e0 <__ssputs_r+0x5c>
 800821e:	6921      	ldr	r1, [r4, #16]
 8008220:	4650      	mov	r0, sl
 8008222:	f7ff feb7 	bl	8007f94 <_free_r>
 8008226:	230c      	movs	r3, #12
 8008228:	f8ca 3000 	str.w	r3, [sl]
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e7e9      	b.n	800820e <__ssputs_r+0x8a>
	...

0800823c <_svfiprintf_r>:
 800823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	4698      	mov	r8, r3
 8008242:	898b      	ldrh	r3, [r1, #12]
 8008244:	061b      	lsls	r3, r3, #24
 8008246:	b09d      	sub	sp, #116	@ 0x74
 8008248:	4607      	mov	r7, r0
 800824a:	460d      	mov	r5, r1
 800824c:	4614      	mov	r4, r2
 800824e:	d510      	bpl.n	8008272 <_svfiprintf_r+0x36>
 8008250:	690b      	ldr	r3, [r1, #16]
 8008252:	b973      	cbnz	r3, 8008272 <_svfiprintf_r+0x36>
 8008254:	2140      	movs	r1, #64	@ 0x40
 8008256:	f7ff ff09 	bl	800806c <_malloc_r>
 800825a:	6028      	str	r0, [r5, #0]
 800825c:	6128      	str	r0, [r5, #16]
 800825e:	b930      	cbnz	r0, 800826e <_svfiprintf_r+0x32>
 8008260:	230c      	movs	r3, #12
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	f04f 30ff 	mov.w	r0, #4294967295
 8008268:	b01d      	add	sp, #116	@ 0x74
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	2340      	movs	r3, #64	@ 0x40
 8008270:	616b      	str	r3, [r5, #20]
 8008272:	2300      	movs	r3, #0
 8008274:	9309      	str	r3, [sp, #36]	@ 0x24
 8008276:	2320      	movs	r3, #32
 8008278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800827c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008280:	2330      	movs	r3, #48	@ 0x30
 8008282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008420 <_svfiprintf_r+0x1e4>
 8008286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800828a:	f04f 0901 	mov.w	r9, #1
 800828e:	4623      	mov	r3, r4
 8008290:	469a      	mov	sl, r3
 8008292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008296:	b10a      	cbz	r2, 800829c <_svfiprintf_r+0x60>
 8008298:	2a25      	cmp	r2, #37	@ 0x25
 800829a:	d1f9      	bne.n	8008290 <_svfiprintf_r+0x54>
 800829c:	ebba 0b04 	subs.w	fp, sl, r4
 80082a0:	d00b      	beq.n	80082ba <_svfiprintf_r+0x7e>
 80082a2:	465b      	mov	r3, fp
 80082a4:	4622      	mov	r2, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	4638      	mov	r0, r7
 80082aa:	f7ff ff6b 	bl	8008184 <__ssputs_r>
 80082ae:	3001      	adds	r0, #1
 80082b0:	f000 80a7 	beq.w	8008402 <_svfiprintf_r+0x1c6>
 80082b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082b6:	445a      	add	r2, fp
 80082b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80082ba:	f89a 3000 	ldrb.w	r3, [sl]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 809f 	beq.w	8008402 <_svfiprintf_r+0x1c6>
 80082c4:	2300      	movs	r3, #0
 80082c6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ce:	f10a 0a01 	add.w	sl, sl, #1
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	9307      	str	r3, [sp, #28]
 80082d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082da:	931a      	str	r3, [sp, #104]	@ 0x68
 80082dc:	4654      	mov	r4, sl
 80082de:	2205      	movs	r2, #5
 80082e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e4:	484e      	ldr	r0, [pc, #312]	@ (8008420 <_svfiprintf_r+0x1e4>)
 80082e6:	f7f7 ffb3 	bl	8000250 <memchr>
 80082ea:	9a04      	ldr	r2, [sp, #16]
 80082ec:	b9d8      	cbnz	r0, 8008326 <_svfiprintf_r+0xea>
 80082ee:	06d0      	lsls	r0, r2, #27
 80082f0:	bf44      	itt	mi
 80082f2:	2320      	movmi	r3, #32
 80082f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082f8:	0711      	lsls	r1, r2, #28
 80082fa:	bf44      	itt	mi
 80082fc:	232b      	movmi	r3, #43	@ 0x2b
 80082fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008302:	f89a 3000 	ldrb.w	r3, [sl]
 8008306:	2b2a      	cmp	r3, #42	@ 0x2a
 8008308:	d015      	beq.n	8008336 <_svfiprintf_r+0xfa>
 800830a:	9a07      	ldr	r2, [sp, #28]
 800830c:	4654      	mov	r4, sl
 800830e:	2000      	movs	r0, #0
 8008310:	f04f 0c0a 	mov.w	ip, #10
 8008314:	4621      	mov	r1, r4
 8008316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800831a:	3b30      	subs	r3, #48	@ 0x30
 800831c:	2b09      	cmp	r3, #9
 800831e:	d94b      	bls.n	80083b8 <_svfiprintf_r+0x17c>
 8008320:	b1b0      	cbz	r0, 8008350 <_svfiprintf_r+0x114>
 8008322:	9207      	str	r2, [sp, #28]
 8008324:	e014      	b.n	8008350 <_svfiprintf_r+0x114>
 8008326:	eba0 0308 	sub.w	r3, r0, r8
 800832a:	fa09 f303 	lsl.w	r3, r9, r3
 800832e:	4313      	orrs	r3, r2
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	46a2      	mov	sl, r4
 8008334:	e7d2      	b.n	80082dc <_svfiprintf_r+0xa0>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	1d19      	adds	r1, r3, #4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	9103      	str	r1, [sp, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	bfbb      	ittet	lt
 8008342:	425b      	neglt	r3, r3
 8008344:	f042 0202 	orrlt.w	r2, r2, #2
 8008348:	9307      	strge	r3, [sp, #28]
 800834a:	9307      	strlt	r3, [sp, #28]
 800834c:	bfb8      	it	lt
 800834e:	9204      	strlt	r2, [sp, #16]
 8008350:	7823      	ldrb	r3, [r4, #0]
 8008352:	2b2e      	cmp	r3, #46	@ 0x2e
 8008354:	d10a      	bne.n	800836c <_svfiprintf_r+0x130>
 8008356:	7863      	ldrb	r3, [r4, #1]
 8008358:	2b2a      	cmp	r3, #42	@ 0x2a
 800835a:	d132      	bne.n	80083c2 <_svfiprintf_r+0x186>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	9203      	str	r2, [sp, #12]
 8008364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008368:	3402      	adds	r4, #2
 800836a:	9305      	str	r3, [sp, #20]
 800836c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008430 <_svfiprintf_r+0x1f4>
 8008370:	7821      	ldrb	r1, [r4, #0]
 8008372:	2203      	movs	r2, #3
 8008374:	4650      	mov	r0, sl
 8008376:	f7f7 ff6b 	bl	8000250 <memchr>
 800837a:	b138      	cbz	r0, 800838c <_svfiprintf_r+0x150>
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	eba0 000a 	sub.w	r0, r0, sl
 8008382:	2240      	movs	r2, #64	@ 0x40
 8008384:	4082      	lsls	r2, r0
 8008386:	4313      	orrs	r3, r2
 8008388:	3401      	adds	r4, #1
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008390:	4824      	ldr	r0, [pc, #144]	@ (8008424 <_svfiprintf_r+0x1e8>)
 8008392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008396:	2206      	movs	r2, #6
 8008398:	f7f7 ff5a 	bl	8000250 <memchr>
 800839c:	2800      	cmp	r0, #0
 800839e:	d036      	beq.n	800840e <_svfiprintf_r+0x1d2>
 80083a0:	4b21      	ldr	r3, [pc, #132]	@ (8008428 <_svfiprintf_r+0x1ec>)
 80083a2:	bb1b      	cbnz	r3, 80083ec <_svfiprintf_r+0x1b0>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	3307      	adds	r3, #7
 80083a8:	f023 0307 	bic.w	r3, r3, #7
 80083ac:	3308      	adds	r3, #8
 80083ae:	9303      	str	r3, [sp, #12]
 80083b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b2:	4433      	add	r3, r6
 80083b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b6:	e76a      	b.n	800828e <_svfiprintf_r+0x52>
 80083b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80083bc:	460c      	mov	r4, r1
 80083be:	2001      	movs	r0, #1
 80083c0:	e7a8      	b.n	8008314 <_svfiprintf_r+0xd8>
 80083c2:	2300      	movs	r3, #0
 80083c4:	3401      	adds	r4, #1
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	4619      	mov	r1, r3
 80083ca:	f04f 0c0a 	mov.w	ip, #10
 80083ce:	4620      	mov	r0, r4
 80083d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d4:	3a30      	subs	r2, #48	@ 0x30
 80083d6:	2a09      	cmp	r2, #9
 80083d8:	d903      	bls.n	80083e2 <_svfiprintf_r+0x1a6>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0c6      	beq.n	800836c <_svfiprintf_r+0x130>
 80083de:	9105      	str	r1, [sp, #20]
 80083e0:	e7c4      	b.n	800836c <_svfiprintf_r+0x130>
 80083e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083e6:	4604      	mov	r4, r0
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7f0      	b.n	80083ce <_svfiprintf_r+0x192>
 80083ec:	ab03      	add	r3, sp, #12
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	462a      	mov	r2, r5
 80083f2:	4b0e      	ldr	r3, [pc, #56]	@ (800842c <_svfiprintf_r+0x1f0>)
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	4638      	mov	r0, r7
 80083f8:	f3af 8000 	nop.w
 80083fc:	1c42      	adds	r2, r0, #1
 80083fe:	4606      	mov	r6, r0
 8008400:	d1d6      	bne.n	80083b0 <_svfiprintf_r+0x174>
 8008402:	89ab      	ldrh	r3, [r5, #12]
 8008404:	065b      	lsls	r3, r3, #25
 8008406:	f53f af2d 	bmi.w	8008264 <_svfiprintf_r+0x28>
 800840a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800840c:	e72c      	b.n	8008268 <_svfiprintf_r+0x2c>
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4b05      	ldr	r3, [pc, #20]	@ (800842c <_svfiprintf_r+0x1f0>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	4638      	mov	r0, r7
 800841a:	f000 f879 	bl	8008510 <_printf_i>
 800841e:	e7ed      	b.n	80083fc <_svfiprintf_r+0x1c0>
 8008420:	080088f8 	.word	0x080088f8
 8008424:	08008902 	.word	0x08008902
 8008428:	00000000 	.word	0x00000000
 800842c:	08008185 	.word	0x08008185
 8008430:	080088fe 	.word	0x080088fe

08008434 <_printf_common>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	4616      	mov	r6, r2
 800843a:	4698      	mov	r8, r3
 800843c:	688a      	ldr	r2, [r1, #8]
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008444:	4293      	cmp	r3, r2
 8008446:	bfb8      	it	lt
 8008448:	4613      	movlt	r3, r2
 800844a:	6033      	str	r3, [r6, #0]
 800844c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008450:	4607      	mov	r7, r0
 8008452:	460c      	mov	r4, r1
 8008454:	b10a      	cbz	r2, 800845a <_printf_common+0x26>
 8008456:	3301      	adds	r3, #1
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	0699      	lsls	r1, r3, #26
 800845e:	bf42      	ittt	mi
 8008460:	6833      	ldrmi	r3, [r6, #0]
 8008462:	3302      	addmi	r3, #2
 8008464:	6033      	strmi	r3, [r6, #0]
 8008466:	6825      	ldr	r5, [r4, #0]
 8008468:	f015 0506 	ands.w	r5, r5, #6
 800846c:	d106      	bne.n	800847c <_printf_common+0x48>
 800846e:	f104 0a19 	add.w	sl, r4, #25
 8008472:	68e3      	ldr	r3, [r4, #12]
 8008474:	6832      	ldr	r2, [r6, #0]
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	42ab      	cmp	r3, r5
 800847a:	dc26      	bgt.n	80084ca <_printf_common+0x96>
 800847c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008480:	6822      	ldr	r2, [r4, #0]
 8008482:	3b00      	subs	r3, #0
 8008484:	bf18      	it	ne
 8008486:	2301      	movne	r3, #1
 8008488:	0692      	lsls	r2, r2, #26
 800848a:	d42b      	bmi.n	80084e4 <_printf_common+0xb0>
 800848c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008490:	4641      	mov	r1, r8
 8008492:	4638      	mov	r0, r7
 8008494:	47c8      	blx	r9
 8008496:	3001      	adds	r0, #1
 8008498:	d01e      	beq.n	80084d8 <_printf_common+0xa4>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	6922      	ldr	r2, [r4, #16]
 800849e:	f003 0306 	and.w	r3, r3, #6
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	bf02      	ittt	eq
 80084a6:	68e5      	ldreq	r5, [r4, #12]
 80084a8:	6833      	ldreq	r3, [r6, #0]
 80084aa:	1aed      	subeq	r5, r5, r3
 80084ac:	68a3      	ldr	r3, [r4, #8]
 80084ae:	bf0c      	ite	eq
 80084b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084b4:	2500      	movne	r5, #0
 80084b6:	4293      	cmp	r3, r2
 80084b8:	bfc4      	itt	gt
 80084ba:	1a9b      	subgt	r3, r3, r2
 80084bc:	18ed      	addgt	r5, r5, r3
 80084be:	2600      	movs	r6, #0
 80084c0:	341a      	adds	r4, #26
 80084c2:	42b5      	cmp	r5, r6
 80084c4:	d11a      	bne.n	80084fc <_printf_common+0xc8>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e008      	b.n	80084dc <_printf_common+0xa8>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4652      	mov	r2, sl
 80084ce:	4641      	mov	r1, r8
 80084d0:	4638      	mov	r0, r7
 80084d2:	47c8      	blx	r9
 80084d4:	3001      	adds	r0, #1
 80084d6:	d103      	bne.n	80084e0 <_printf_common+0xac>
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e0:	3501      	adds	r5, #1
 80084e2:	e7c6      	b.n	8008472 <_printf_common+0x3e>
 80084e4:	18e1      	adds	r1, r4, r3
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	2030      	movs	r0, #48	@ 0x30
 80084ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084ee:	4422      	add	r2, r4
 80084f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084f8:	3302      	adds	r3, #2
 80084fa:	e7c7      	b.n	800848c <_printf_common+0x58>
 80084fc:	2301      	movs	r3, #1
 80084fe:	4622      	mov	r2, r4
 8008500:	4641      	mov	r1, r8
 8008502:	4638      	mov	r0, r7
 8008504:	47c8      	blx	r9
 8008506:	3001      	adds	r0, #1
 8008508:	d0e6      	beq.n	80084d8 <_printf_common+0xa4>
 800850a:	3601      	adds	r6, #1
 800850c:	e7d9      	b.n	80084c2 <_printf_common+0x8e>
	...

08008510 <_printf_i>:
 8008510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008514:	7e0f      	ldrb	r7, [r1, #24]
 8008516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008518:	2f78      	cmp	r7, #120	@ 0x78
 800851a:	4691      	mov	r9, r2
 800851c:	4680      	mov	r8, r0
 800851e:	460c      	mov	r4, r1
 8008520:	469a      	mov	sl, r3
 8008522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008526:	d807      	bhi.n	8008538 <_printf_i+0x28>
 8008528:	2f62      	cmp	r7, #98	@ 0x62
 800852a:	d80a      	bhi.n	8008542 <_printf_i+0x32>
 800852c:	2f00      	cmp	r7, #0
 800852e:	f000 80d2 	beq.w	80086d6 <_printf_i+0x1c6>
 8008532:	2f58      	cmp	r7, #88	@ 0x58
 8008534:	f000 80b9 	beq.w	80086aa <_printf_i+0x19a>
 8008538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800853c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008540:	e03a      	b.n	80085b8 <_printf_i+0xa8>
 8008542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008546:	2b15      	cmp	r3, #21
 8008548:	d8f6      	bhi.n	8008538 <_printf_i+0x28>
 800854a:	a101      	add	r1, pc, #4	@ (adr r1, 8008550 <_printf_i+0x40>)
 800854c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008550:	080085a9 	.word	0x080085a9
 8008554:	080085bd 	.word	0x080085bd
 8008558:	08008539 	.word	0x08008539
 800855c:	08008539 	.word	0x08008539
 8008560:	08008539 	.word	0x08008539
 8008564:	08008539 	.word	0x08008539
 8008568:	080085bd 	.word	0x080085bd
 800856c:	08008539 	.word	0x08008539
 8008570:	08008539 	.word	0x08008539
 8008574:	08008539 	.word	0x08008539
 8008578:	08008539 	.word	0x08008539
 800857c:	080086bd 	.word	0x080086bd
 8008580:	080085e7 	.word	0x080085e7
 8008584:	08008677 	.word	0x08008677
 8008588:	08008539 	.word	0x08008539
 800858c:	08008539 	.word	0x08008539
 8008590:	080086df 	.word	0x080086df
 8008594:	08008539 	.word	0x08008539
 8008598:	080085e7 	.word	0x080085e7
 800859c:	08008539 	.word	0x08008539
 80085a0:	08008539 	.word	0x08008539
 80085a4:	0800867f 	.word	0x0800867f
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	1d1a      	adds	r2, r3, #4
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6032      	str	r2, [r6, #0]
 80085b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085b8:	2301      	movs	r3, #1
 80085ba:	e09d      	b.n	80086f8 <_printf_i+0x1e8>
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	1d19      	adds	r1, r3, #4
 80085c2:	6031      	str	r1, [r6, #0]
 80085c4:	0606      	lsls	r6, r0, #24
 80085c6:	d501      	bpl.n	80085cc <_printf_i+0xbc>
 80085c8:	681d      	ldr	r5, [r3, #0]
 80085ca:	e003      	b.n	80085d4 <_printf_i+0xc4>
 80085cc:	0645      	lsls	r5, r0, #25
 80085ce:	d5fb      	bpl.n	80085c8 <_printf_i+0xb8>
 80085d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	da03      	bge.n	80085e0 <_printf_i+0xd0>
 80085d8:	232d      	movs	r3, #45	@ 0x2d
 80085da:	426d      	negs	r5, r5
 80085dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085e0:	4859      	ldr	r0, [pc, #356]	@ (8008748 <_printf_i+0x238>)
 80085e2:	230a      	movs	r3, #10
 80085e4:	e011      	b.n	800860a <_printf_i+0xfa>
 80085e6:	6821      	ldr	r1, [r4, #0]
 80085e8:	6833      	ldr	r3, [r6, #0]
 80085ea:	0608      	lsls	r0, r1, #24
 80085ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80085f0:	d402      	bmi.n	80085f8 <_printf_i+0xe8>
 80085f2:	0649      	lsls	r1, r1, #25
 80085f4:	bf48      	it	mi
 80085f6:	b2ad      	uxthmi	r5, r5
 80085f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80085fa:	4853      	ldr	r0, [pc, #332]	@ (8008748 <_printf_i+0x238>)
 80085fc:	6033      	str	r3, [r6, #0]
 80085fe:	bf14      	ite	ne
 8008600:	230a      	movne	r3, #10
 8008602:	2308      	moveq	r3, #8
 8008604:	2100      	movs	r1, #0
 8008606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800860a:	6866      	ldr	r6, [r4, #4]
 800860c:	60a6      	str	r6, [r4, #8]
 800860e:	2e00      	cmp	r6, #0
 8008610:	bfa2      	ittt	ge
 8008612:	6821      	ldrge	r1, [r4, #0]
 8008614:	f021 0104 	bicge.w	r1, r1, #4
 8008618:	6021      	strge	r1, [r4, #0]
 800861a:	b90d      	cbnz	r5, 8008620 <_printf_i+0x110>
 800861c:	2e00      	cmp	r6, #0
 800861e:	d04b      	beq.n	80086b8 <_printf_i+0x1a8>
 8008620:	4616      	mov	r6, r2
 8008622:	fbb5 f1f3 	udiv	r1, r5, r3
 8008626:	fb03 5711 	mls	r7, r3, r1, r5
 800862a:	5dc7      	ldrb	r7, [r0, r7]
 800862c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008630:	462f      	mov	r7, r5
 8008632:	42bb      	cmp	r3, r7
 8008634:	460d      	mov	r5, r1
 8008636:	d9f4      	bls.n	8008622 <_printf_i+0x112>
 8008638:	2b08      	cmp	r3, #8
 800863a:	d10b      	bne.n	8008654 <_printf_i+0x144>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	07df      	lsls	r7, r3, #31
 8008640:	d508      	bpl.n	8008654 <_printf_i+0x144>
 8008642:	6923      	ldr	r3, [r4, #16]
 8008644:	6861      	ldr	r1, [r4, #4]
 8008646:	4299      	cmp	r1, r3
 8008648:	bfde      	ittt	le
 800864a:	2330      	movle	r3, #48	@ 0x30
 800864c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008650:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008654:	1b92      	subs	r2, r2, r6
 8008656:	6122      	str	r2, [r4, #16]
 8008658:	f8cd a000 	str.w	sl, [sp]
 800865c:	464b      	mov	r3, r9
 800865e:	aa03      	add	r2, sp, #12
 8008660:	4621      	mov	r1, r4
 8008662:	4640      	mov	r0, r8
 8008664:	f7ff fee6 	bl	8008434 <_printf_common>
 8008668:	3001      	adds	r0, #1
 800866a:	d14a      	bne.n	8008702 <_printf_i+0x1f2>
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	b004      	add	sp, #16
 8008672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	f043 0320 	orr.w	r3, r3, #32
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	4833      	ldr	r0, [pc, #204]	@ (800874c <_printf_i+0x23c>)
 8008680:	2778      	movs	r7, #120	@ 0x78
 8008682:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	6831      	ldr	r1, [r6, #0]
 800868a:	061f      	lsls	r7, r3, #24
 800868c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008690:	d402      	bmi.n	8008698 <_printf_i+0x188>
 8008692:	065f      	lsls	r7, r3, #25
 8008694:	bf48      	it	mi
 8008696:	b2ad      	uxthmi	r5, r5
 8008698:	6031      	str	r1, [r6, #0]
 800869a:	07d9      	lsls	r1, r3, #31
 800869c:	bf44      	itt	mi
 800869e:	f043 0320 	orrmi.w	r3, r3, #32
 80086a2:	6023      	strmi	r3, [r4, #0]
 80086a4:	b11d      	cbz	r5, 80086ae <_printf_i+0x19e>
 80086a6:	2310      	movs	r3, #16
 80086a8:	e7ac      	b.n	8008604 <_printf_i+0xf4>
 80086aa:	4827      	ldr	r0, [pc, #156]	@ (8008748 <_printf_i+0x238>)
 80086ac:	e7e9      	b.n	8008682 <_printf_i+0x172>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	f023 0320 	bic.w	r3, r3, #32
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	e7f6      	b.n	80086a6 <_printf_i+0x196>
 80086b8:	4616      	mov	r6, r2
 80086ba:	e7bd      	b.n	8008638 <_printf_i+0x128>
 80086bc:	6833      	ldr	r3, [r6, #0]
 80086be:	6825      	ldr	r5, [r4, #0]
 80086c0:	6961      	ldr	r1, [r4, #20]
 80086c2:	1d18      	adds	r0, r3, #4
 80086c4:	6030      	str	r0, [r6, #0]
 80086c6:	062e      	lsls	r6, r5, #24
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	d501      	bpl.n	80086d0 <_printf_i+0x1c0>
 80086cc:	6019      	str	r1, [r3, #0]
 80086ce:	e002      	b.n	80086d6 <_printf_i+0x1c6>
 80086d0:	0668      	lsls	r0, r5, #25
 80086d2:	d5fb      	bpl.n	80086cc <_printf_i+0x1bc>
 80086d4:	8019      	strh	r1, [r3, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	4616      	mov	r6, r2
 80086dc:	e7bc      	b.n	8008658 <_printf_i+0x148>
 80086de:	6833      	ldr	r3, [r6, #0]
 80086e0:	1d1a      	adds	r2, r3, #4
 80086e2:	6032      	str	r2, [r6, #0]
 80086e4:	681e      	ldr	r6, [r3, #0]
 80086e6:	6862      	ldr	r2, [r4, #4]
 80086e8:	2100      	movs	r1, #0
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7f7 fdb0 	bl	8000250 <memchr>
 80086f0:	b108      	cbz	r0, 80086f6 <_printf_i+0x1e6>
 80086f2:	1b80      	subs	r0, r0, r6
 80086f4:	6060      	str	r0, [r4, #4]
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	6123      	str	r3, [r4, #16]
 80086fa:	2300      	movs	r3, #0
 80086fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008700:	e7aa      	b.n	8008658 <_printf_i+0x148>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	4632      	mov	r2, r6
 8008706:	4649      	mov	r1, r9
 8008708:	4640      	mov	r0, r8
 800870a:	47d0      	blx	sl
 800870c:	3001      	adds	r0, #1
 800870e:	d0ad      	beq.n	800866c <_printf_i+0x15c>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	079b      	lsls	r3, r3, #30
 8008714:	d413      	bmi.n	800873e <_printf_i+0x22e>
 8008716:	68e0      	ldr	r0, [r4, #12]
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	4298      	cmp	r0, r3
 800871c:	bfb8      	it	lt
 800871e:	4618      	movlt	r0, r3
 8008720:	e7a6      	b.n	8008670 <_printf_i+0x160>
 8008722:	2301      	movs	r3, #1
 8008724:	4632      	mov	r2, r6
 8008726:	4649      	mov	r1, r9
 8008728:	4640      	mov	r0, r8
 800872a:	47d0      	blx	sl
 800872c:	3001      	adds	r0, #1
 800872e:	d09d      	beq.n	800866c <_printf_i+0x15c>
 8008730:	3501      	adds	r5, #1
 8008732:	68e3      	ldr	r3, [r4, #12]
 8008734:	9903      	ldr	r1, [sp, #12]
 8008736:	1a5b      	subs	r3, r3, r1
 8008738:	42ab      	cmp	r3, r5
 800873a:	dcf2      	bgt.n	8008722 <_printf_i+0x212>
 800873c:	e7eb      	b.n	8008716 <_printf_i+0x206>
 800873e:	2500      	movs	r5, #0
 8008740:	f104 0619 	add.w	r6, r4, #25
 8008744:	e7f5      	b.n	8008732 <_printf_i+0x222>
 8008746:	bf00      	nop
 8008748:	08008909 	.word	0x08008909
 800874c:	0800891a 	.word	0x0800891a

08008750 <memmove>:
 8008750:	4288      	cmp	r0, r1
 8008752:	b510      	push	{r4, lr}
 8008754:	eb01 0402 	add.w	r4, r1, r2
 8008758:	d902      	bls.n	8008760 <memmove+0x10>
 800875a:	4284      	cmp	r4, r0
 800875c:	4623      	mov	r3, r4
 800875e:	d807      	bhi.n	8008770 <memmove+0x20>
 8008760:	1e43      	subs	r3, r0, #1
 8008762:	42a1      	cmp	r1, r4
 8008764:	d008      	beq.n	8008778 <memmove+0x28>
 8008766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800876e:	e7f8      	b.n	8008762 <memmove+0x12>
 8008770:	4402      	add	r2, r0
 8008772:	4601      	mov	r1, r0
 8008774:	428a      	cmp	r2, r1
 8008776:	d100      	bne.n	800877a <memmove+0x2a>
 8008778:	bd10      	pop	{r4, pc}
 800877a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800877e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008782:	e7f7      	b.n	8008774 <memmove+0x24>

08008784 <_sbrk_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d06      	ldr	r5, [pc, #24]	@ (80087a0 <_sbrk_r+0x1c>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	f7f8 fbd8 	bl	8000f44 <_sbrk>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_sbrk_r+0x1a>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_sbrk_r+0x1a>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	2000538c 	.word	0x2000538c

080087a4 <_realloc_r>:
 80087a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	4680      	mov	r8, r0
 80087aa:	4615      	mov	r5, r2
 80087ac:	460c      	mov	r4, r1
 80087ae:	b921      	cbnz	r1, 80087ba <_realloc_r+0x16>
 80087b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	4611      	mov	r1, r2
 80087b6:	f7ff bc59 	b.w	800806c <_malloc_r>
 80087ba:	b92a      	cbnz	r2, 80087c8 <_realloc_r+0x24>
 80087bc:	f7ff fbea 	bl	8007f94 <_free_r>
 80087c0:	2400      	movs	r4, #0
 80087c2:	4620      	mov	r0, r4
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	f000 f81a 	bl	8008800 <_malloc_usable_size_r>
 80087cc:	4285      	cmp	r5, r0
 80087ce:	4606      	mov	r6, r0
 80087d0:	d802      	bhi.n	80087d8 <_realloc_r+0x34>
 80087d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087d6:	d8f4      	bhi.n	80087c2 <_realloc_r+0x1e>
 80087d8:	4629      	mov	r1, r5
 80087da:	4640      	mov	r0, r8
 80087dc:	f7ff fc46 	bl	800806c <_malloc_r>
 80087e0:	4607      	mov	r7, r0
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d0ec      	beq.n	80087c0 <_realloc_r+0x1c>
 80087e6:	42b5      	cmp	r5, r6
 80087e8:	462a      	mov	r2, r5
 80087ea:	4621      	mov	r1, r4
 80087ec:	bf28      	it	cs
 80087ee:	4632      	movcs	r2, r6
 80087f0:	f7ff fbc2 	bl	8007f78 <memcpy>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7ff fbcc 	bl	8007f94 <_free_r>
 80087fc:	463c      	mov	r4, r7
 80087fe:	e7e0      	b.n	80087c2 <_realloc_r+0x1e>

08008800 <_malloc_usable_size_r>:
 8008800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008804:	1f18      	subs	r0, r3, #4
 8008806:	2b00      	cmp	r3, #0
 8008808:	bfbc      	itt	lt
 800880a:	580b      	ldrlt	r3, [r1, r0]
 800880c:	18c0      	addlt	r0, r0, r3
 800880e:	4770      	bx	lr

08008810 <_init>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	bf00      	nop
 8008814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008816:	bc08      	pop	{r3}
 8008818:	469e      	mov	lr, r3
 800881a:	4770      	bx	lr

0800881c <_fini>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	bf00      	nop
 8008820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008822:	bc08      	pop	{r3}
 8008824:	469e      	mov	lr, r3
 8008826:	4770      	bx	lr
